{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/scope.png","path":"images/scope.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"source/images/kotlin/gradle-folder.png","path":"images/kotlin/gradle-folder.png","modified":0,"renderable":0},{"_id":"source/images/kotlin/gradle-path.png","path":"images/kotlin/gradle-path.png","modified":0,"renderable":0},{"_id":"source/images/kotlin/thread-life.png","path":"images/kotlin/thread-life.png","modified":0,"renderable":0},{"_id":"source/images/jetpack/adb-memory-profiler.png","path":"images/jetpack/adb-memory-profiler.png","modified":0,"renderable":0},{"_id":"source/images/jetpack/adb-memory.png","path":"images/jetpack/adb-memory.png","modified":0,"renderable":0},{"_id":"source/images/jetpack/setting-view.png","path":"images/jetpack/setting-view.png","modified":0,"renderable":0},{"_id":"source/images/jetpack/tab-navigation.png","path":"images/jetpack/tab-navigation.png","modified":0,"renderable":0},{"_id":"source/images/mysql/mysql_master_status.png","path":"images/mysql/mysql_master_status.png","modified":0,"renderable":0},{"_id":"source/images/rxjs/fromEvent.png","path":"images/rxjs/fromEvent.png","modified":0,"renderable":0},{"_id":"source/images/rxjs/of.png","path":"images/rxjs/of.png","modified":0,"renderable":0},{"_id":"source/images/rxjs/search.png","path":"images/rxjs/search.png","modified":0,"renderable":0},{"_id":"source/images/ng-note-component/app-ul-error.png","path":"images/ng-note-component/app-ul-error.png","modified":0,"renderable":0},{"_id":"source/images/ng-note-component/app-ul-res.png","path":"images/ng-note-component/app-ul-res.png","modified":0,"renderable":0},{"_id":"source/images/ng-note-component/app-ul.png","path":"images/ng-note-component/app-ul.png","modified":0,"renderable":0},{"_id":"source/images/ng-note-component/child-content.png","path":"images/ng-note-component/child-content.png","modified":0,"renderable":0},{"_id":"source/images/ng-note-component/progress-value.png","path":"images/ng-note-component/progress-value.png","modified":0,"renderable":0},{"_id":"source/images/ng-note-component/progress.png","path":"images/ng-note-component/progress.png","modified":0,"renderable":0},{"_id":"source/images/ng-note-component/switch-event.png","path":"images/ng-note-component/switch-event.png","modified":0,"renderable":0},{"_id":"source/images/ng-note-component/switch.png","path":"images/ng-note-component/switch.png","modified":0,"renderable":0},{"_id":"source/images/ng-note-component/viewchildren-error.png","path":"images/ng-note-component/viewchildren-error.png","modified":0,"renderable":0},{"_id":"source/images/webpack/npm-init.png","path":"images/webpack/npm-init.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"source/codes/component-simpl-4.zip","path":"codes/component-simpl-4.zip","modified":0,"renderable":0},{"_id":"source/codes/component-simple-1.zip","path":"codes/component-simple-1.zip","modified":0,"renderable":0},{"_id":"source/codes/component-simple-2.zip","path":"codes/component-simple-2.zip","modified":0,"renderable":0},{"_id":"source/codes/component-simple-3.zip","path":"codes/component-simple-3.zip","modified":0,"renderable":0},{"_id":"source/images/kotlin/thread.jpg","path":"images/kotlin/thread.jpg","modified":0,"renderable":0},{"_id":"source/images/jetpack/android-sqlite.png","path":"images/jetpack/android-sqlite.png","modified":0,"renderable":0},{"_id":"source/images/jetpack/settings.png","path":"images/jetpack/settings.png","modified":0,"renderable":0},{"_id":"source/images/jetpack/side-navigation.png","path":"images/jetpack/side-navigation.png","modified":0,"renderable":0},{"_id":"source/images/mysql/mysql_document_store_architecture.png","path":"images/mysql/mysql_document_store_architecture.png","modified":0,"renderable":0},{"_id":"source/images/jetpack/workmanager.png","path":"images/jetpack/workmanager.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"source/images/ng-note-component/switch.gif","path":"images/ng-note-component/switch.gif","modified":0,"renderable":0},{"_id":"source/images/bg-1.jpg","path":"images/bg-1.jpg","modified":0,"renderable":0},{"_id":"source/images/ng-note-component/progress.gif","path":"images/ng-note-component/progress.gif","modified":0,"renderable":0},{"_id":"source/images/bg-2.jpg","path":"images/bg-2.jpg","modified":0,"renderable":0},{"_id":"source/images/ng-note-component/app-ul.gif","path":"images/ng-note-component/app-ul.gif","modified":0,"renderable":0},{"_id":"source/images/ng-note-component/switch-event.gif","path":"images/ng-note-component/switch-event.gif","modified":0,"renderable":0}],"Cache":[{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1563078377728},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1563078377726},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1563078377730},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1563078377731},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1563078377735},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1563078377733},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1563078377736},{"_id":"themes/yilia/_config.yml","hash":"3c689d04287e13c84ecfd1b5feaa3e2bf050e776","modified":1563079172379},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1563078377818},{"_id":"source/_posts/Android-Image-Load.md","hash":"2b2ffacbb6b92021c16550d873ec48aed9a41fab","modified":1562647116515},{"_id":"source/_posts/Gradle-构建Kotlin项目.md","hash":"22ee389c5ca41ec77673706f9654c9ea7969fdc0","modified":1562678885192},{"_id":"source/_posts/JavaScript-编译器，引擎，作用域.md","hash":"de91fb15ab293a6c45535486e833f0741ab08f2e","modified":1562665857768},{"_id":"source/_posts/JavaScript-Note-1.md","hash":"8fba87ee07855aaaf06cbd3b70f75e7263c9654a","modified":1562901308430},{"_id":"source/_posts/JavaScript值类型.md","hash":"ae2dcbf8f7c059f9d18f366cf51f84a9e385f924","modified":1563075264235},{"_id":"source/_posts/RxJS-搜索查询.md","hash":"fec8e067d27e9de3b0539fee1333c896450f558b","modified":1563077067649},{"_id":"source/_posts/android-save-keyvaluedata.md","hash":"b3b766b78d4b2930fad2a653ad3eb28f6f5dfc65","modified":1562664783431},{"_id":"source/_posts/android-share-file.md","hash":"8d7a6123b650d84dedc120d3da558aa178da3d97","modified":1562647870312},{"_id":"source/_posts/androidx-note-1.md","hash":"21bdd267ead4ab572371a38c156653005de71f7c","modified":1562649409837},{"_id":"source/_posts/animate.md","hash":"53f0bde63526b32eb0918c381b93c6bd297137fd","modified":1562900795779},{"_id":"source/_posts/appstore-publish.md","hash":"491537f089c465297bbb5ff3befdccc491567245","modified":1562300645792},{"_id":"source/_posts/browser-devices.md","hash":"d8072a1efea95c825d122050d601ea4f40141ea8","modified":1562900790473},{"_id":"source/_posts/canvas.md","hash":"4017e187e03bee566d352aa64d908ce95c912c2e","modified":1562900772173},{"_id":"source/_posts/cordova-note-1.md","hash":"3476e862c76e71748d742972cf8933c7d153ba48","modified":1562900777709},{"_id":"source/_posts/cordova-swift-support.md","hash":"5c5aceff66ba49d17e6e4f620f2cef34ee4719d6","modified":1562900785341},{"_id":"source/_posts/ffmpeg-note-1.md","hash":"f6346a5499ae53d3619fa9f0ec854739956c1942","modified":1562300645726},{"_id":"source/_posts/jectpack-databinding.md","hash":"62621917bd9bc8dda3a3ed06e1452f341de25321","modified":1562648482361},{"_id":"source/_posts/https.md","hash":"0e18dddcb2b20996323b169c655c4eff6a12c384","modified":1562300645752},{"_id":"source/_posts/jetpack-navigation-NavigationView.md","hash":"237b6ec3ce4e535f599a1aa02581508e8c2c23fc","modified":1562649176775},{"_id":"source/_posts/jetpack-room.md","hash":"768e03dab6fdf3aff9b1ced9dececa04cad8ac5a","modified":1562647987821},{"_id":"source/_posts/jetpack-workmanager.md","hash":"94b1c084b5429f6591e67a02f34b81e2ebd8123c","modified":1562648198335},{"_id":"source/_posts/mysql-note-1.md","hash":"8b7a004a606c1786c28e9a9b74578c49029de5e5","modified":1562900759140},{"_id":"source/_posts/mysql-note-2.md","hash":"b5c50832f8b1c6f32f0ce686c913152c20670890","modified":1562900756742},{"_id":"source/_posts/mysql-note-3.md","hash":"2333856b42c7f52e7e55af10049065586f47adb1","modified":1562666315709},{"_id":"source/_posts/mysql-schema.md","hash":"36ac8d8958f264871b85ce19231172eb83fb6325","modified":1562666476288},{"_id":"source/_posts/mysql-slave.md","hash":"12579bb0057895df82c49d66a8c5a9c9e70be13d","modified":1562666499150},{"_id":"source/_posts/navigation-tablayout.md","hash":"f62e02fa094d2f8249d57d9d2619ff9061742c24","modified":1562648917742},{"_id":"source/_posts/ng-note-component-3.md","hash":"efa0adfac9241b068c485e420f039e7f593e9159","modified":1562900722908},{"_id":"source/_posts/ng-note-component-4.md","hash":"7cd7862d5bf9dcac46b1d9a570d096697b350e08","modified":1562900715443},{"_id":"source/_posts/ng-note-compontent-1.md","hash":"a71bef868842b87ab1e5f4b812859a426170c3c2","modified":1562901208757},{"_id":"source/_posts/ng-note-compontent-2.md","hash":"22954729870601b7d2f3d28837d0f5aa38728ef7","modified":1562900705368},{"_id":"source/_posts/ng-note-i18n.md","hash":"da27ce0109dddf30d4cee14e8afbebe88feb9842","modified":1562900700796},{"_id":"source/_posts/nginx-flv.md","hash":"8599a6a5557a0e4ac8df872dbc10442b82291593","modified":1562300645784},{"_id":"source/_posts/nginx安装及其相关配置.md","hash":"6cbe596753a30a7b810fe07fcc6d7b0cf45ac46b","modified":1562300645722},{"_id":"source/_posts/nginx-php-note-1.md","hash":"165d55642ba7b914e74ede362e09e933ffaa3636","modified":1562300645749},{"_id":"source/_posts/node-note-1.md","hash":"0367e811e0a7779af62efb0c671dd383a934c5c4","modified":1562900671790},{"_id":"source/_posts/php7-2安装.md","hash":"c904a95d577138cca4aa661492c3c3f3350472db","modified":1562300645685},{"_id":"source/_posts/rxjs-note-1.md","hash":"2f14be531266ff88cd96dfd6b7acffbd624da69f","modified":1562666191696},{"_id":"source/_posts/php配置.md","hash":"2d40223665b1468a4101a005cd70532a36ea3d70","modified":1562300645734},{"_id":"source/_posts/test-note-unit.md","hash":"d540e0ce256cfbe92e6eb8e77737c3f8e39fb635","modified":1562649498259},{"_id":"source/_posts/test-note-e2e.md","hash":"96732f3aa139e214065b3447583628b7b0c120ee","modified":1562900492715},{"_id":"source/_posts/webpack-note-1.md","hash":"a37191f12c67595aca90f0420e28d1c0e098b64e","modified":1562900458595},{"_id":"source/_posts/webpack-note-2.md","hash":"590a605b51b1397f53b898f76610388486015bbd","modified":1562900438892},{"_id":"source/_posts/webrtc-note-1.md","hash":"69d2813bb8c1e47f9b9242db1825ad4ed6e5a2b1","modified":1562900308332},{"_id":"source/_posts/快速学习css.md","hash":"f203dab059a42d299df7f0f8f56725b024941f3e","modified":1562300645776},{"_id":"source/_posts/线程池（一）.md","hash":"c95dbcfa43b5fa506b386a335a0a5cc01302b314","modified":1562754806549},{"_id":"source/_posts/线程池（二）.md","hash":"7ff80af38e90d41f8c193cfe6c78adadcd859e66","modified":1562900867904},{"_id":"source/_posts/跨境支付.md","hash":"4011778cfcf0c1229c86530590c43de7c3e7b0f3","modified":1562300645733},{"_id":"source/about/index.md","hash":"c11e4fc96dfb0df8a5d0d37ac377979c1eff0c34","modified":1562300645794},{"_id":"source/images/scope.png","hash":"da9855091e566527929dd6e0532c1c74244af1ef","modified":1562666684211},{"_id":"source/links/index.md","hash":"c71e5bfa90ec834394444e0a5d629e56b14b91c9","modified":1562300645796},{"_id":"source/new-article/Java-HashMap.md","hash":"c9257ea67ed5f25d98c6ff2ddb3b62ea6b9c995a","modified":1562300645818},{"_id":"source/new-article/android-activity.md","hash":"f6beb9c3d87af327ea6414633f856bc267ce27f5","modified":1562900839459},{"_id":"source/new-article/android-content-provider.md","hash":"5f791c93aa751e956d2648fefa1d7ca91e0af1c7","modified":1562664845267},{"_id":"source/new-article/android-service.md","hash":"4eab47dd9c4e8c717d18904aa5b2ee2aa0cbc73d","modified":1562300645815},{"_id":"source/new-article/jectpack-paging-datasource.md","hash":"7d18bc6ed3a45ffe5fc22ad3e01a307a233fab2a","modified":1562648598986},{"_id":"source/new-article/svg.md","hash":"b52418c5c553a20adb5fd728a36a83042205de42","modified":1562300645814},{"_id":"source/new-article/test.md","hash":"23112d10e1695241e763a4312e04b639e3739a6b","modified":1562300645820},{"_id":"source/new-article/webgl.md","hash":"3a4090f88c90c8df080dc677c77dd5be56d0bfb5","modified":1562300645817},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1563078377684},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1563078377979},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1563078123417},{"_id":"themes/yilia/.git/config","hash":"316bc92d9936dc739c39161838a28fb4641cbea2","modified":1563078377704},{"_id":"themes/yilia/.git/index","hash":"39a7dee9e44e9c4448d384ac836077e9d1664928","modified":1563078377982},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1563078377742},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1563078377743},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1563078377745},{"_id":"themes/yilia/.git/packed-refs","hash":"83644c3638dafa38c817265c9207f098dd8aeee6","modified":1563078377669},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1563078377748},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1563078377747},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1563078377749},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1563078377752},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1563078377807},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1563078377809},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1563078377808},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1563078377813},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1563078377815},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1563078377816},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1563078377811},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1563078377968},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1563078377821},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1563078377944},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1563078377802},{"_id":"source/images/kotlin/gradle-folder.png","hash":"fbc9ac657ee58832456f3ecbdf6c80d7e5f54037","modified":1562671779812},{"_id":"source/images/kotlin/gradle-path.png","hash":"90498a1fa9c80068929b4c4ace50c1388c40161e","modified":1562671641439},{"_id":"source/images/kotlin/thread-life.png","hash":"f6247a960f472d1bdc34bebe9a2ea940f3d96fcc","modified":1562723224454},{"_id":"source/images/jetpack/adb-memory-profiler.png","hash":"7c252dbe738f008132de791f3e6ed7ec12ec738f","modified":1562300645509},{"_id":"source/images/jetpack/adb-memory.png","hash":"64fd7b7740e6d5afd138475d0784e55f20d27447","modified":1562300645452},{"_id":"source/images/jetpack/setting-view.png","hash":"346b5222224322b42d0063dca23d0bd334706baa","modified":1562664744864},{"_id":"source/images/jetpack/tab-navigation.png","hash":"22225f2561e383757995b287f470232c73464cc1","modified":1562300645422},{"_id":"source/images/mysql/mysql_master_status.png","hash":"601654bb8e3169cf4ce35013b59214c6c20e5ffd","modified":1562300645577},{"_id":"source/images/rxjs/fromEvent.png","hash":"04b8c0d7b35f06bad267989ef7012291059e3fd1","modified":1563075730991},{"_id":"source/images/rxjs/of.png","hash":"f6b729e34052f09d1d0832d8c3beb09947e59d0e","modified":1563075485053},{"_id":"source/images/rxjs/search.png","hash":"e2ddd7a69e648581dd9b6efef2bc8f00e3a4f10c","modified":1563076954396},{"_id":"source/images/ng-note-component/app-ul-error.png","hash":"047fcf0e98748ec0739a748d7ae28105b7ab027a","modified":1562300643967},{"_id":"source/images/ng-note-component/app-ul-res.png","hash":"2ae9649745161af6c7ec884d24733fdf86ea24f6","modified":1562300644045},{"_id":"source/images/ng-note-component/app-ul.png","hash":"8c5d8a9c4f3949bd4d1f8723380be4fd858942af","modified":1562300643937},{"_id":"source/images/ng-note-component/child-content.png","hash":"c6f1e77a3adb77c45015e201903bf99789143f54","modified":1562300643940},{"_id":"source/images/ng-note-component/progress-value.png","hash":"a36bb65728a4377a5b965110d787772cdf491f20","modified":1562300644144},{"_id":"source/images/ng-note-component/progress.png","hash":"928af7521cb9d718fa1bf0eaed0ac23bd7a2dffc","modified":1562300643944},{"_id":"source/images/ng-note-component/switch-event.png","hash":"0525280c7187f12a359e58a128f88dda2fa1114f","modified":1562300643942},{"_id":"source/images/ng-note-component/switch.png","hash":"fd5fe2cee1cff75d1a316c4df96bbba76ea9e4e2","modified":1562300644128},{"_id":"source/images/ng-note-component/viewchildren-error.png","hash":"2f4669b80a2ef41aabe76e85bbd400495dc5211e","modified":1562300643963},{"_id":"source/images/webpack/npm-init.png","hash":"b30c9eb81c082dad69adc34df225af4e8ba34ce8","modified":1562300644147},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1563078123420},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1563078123421},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1563078123423},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1563078377977},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1563078123427},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1563078123431},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1563078123429},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1563078123435},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1563078123433},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1563078123436},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1563078123438},{"_id":"themes/yilia/.git/logs/HEAD","hash":"5827add7aea5f27ea06e97935c0c8644482b9445","modified":1563078377692},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1563078377757},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1563078123441},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1563078377755},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1563078377762},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1563078377758},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1563078377767},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1563078377765},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1563078377768},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1563078377760},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1563078377770},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1563078377773},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1563078377772},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1563078377776},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1563078377778},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1563078377780},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1563078377805},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1563078377948},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1563078377952},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1563078377954},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1563078377803},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1563078377950},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1563078377961},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1563078377963},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1563078377959},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1563078377957},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1563078377965},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1563078377827},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1563078377823},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1563078377825},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1563078377828},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1563078377830},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1563078377832},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1563078377836},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1563078377833},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1563078377838},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1563078377866},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1563078377864},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1563078377850},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1563078377868},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1563078377877},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1563078377870},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1563078377878},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1563078377879},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1563078377882},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1563078377889},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1563078377886},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1563078377885},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1563078377891},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1563078377896},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1563078377898},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1563078377893},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1563078377900},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1563078377913},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1563078377920},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1563078377918},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1563078377922},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1563078377925},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1563078377927},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1563078377929},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1563078377915},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1563078377931},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1563078377933},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1563078377938},{"_id":"source/codes/component-simpl-4.zip","hash":"1ee60d4d80a0e04dafdd15584a37bef3b8008a81","modified":1562300645804},{"_id":"source/codes/component-simple-1.zip","hash":"7d84be0b41e99b75300237827361d301b4b1cde5","modified":1562300645810},{"_id":"source/codes/component-simple-2.zip","hash":"2aa0b12d93c3e39d2835a0015466ea2bc1ecd261","modified":1562300645801},{"_id":"source/codes/component-simple-3.zip","hash":"87d07509f6019db212d11caf1bfe4242a928f414","modified":1562300645807},{"_id":"source/images/kotlin/thread.jpg","hash":"11f597e1bd1f2d386d90c8596a873008405edb8d","modified":1562671646833},{"_id":"source/images/jetpack/android-sqlite.png","hash":"d5392c117bec7a4c1aad6f36cd56d42a72de10ec","modified":1562300644875},{"_id":"source/images/jetpack/settings.png","hash":"39d66b06923bf0a7902924a03524a0c5a4f9e6e4","modified":1562664263146},{"_id":"source/images/jetpack/side-navigation.png","hash":"861b70cff79a5067bce65235a5fbf7daab16fd11","modified":1562300645540},{"_id":"source/images/mysql/mysql_document_store_architecture.png","hash":"cf959ab86f63958c6390714fe29ace6b81f1dffd","modified":1562300645606},{"_id":"source/images/jetpack/workmanager.png","hash":"d558cb49ddc88c6003d0ebd762eb2fd78b14d8f0","modified":1562300645479},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1563078377942},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1563078377972},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1563078377940},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1563078377976},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1563078377689},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1563078377786},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1563078377784},{"_id":"themes/yilia/.git/objects/pack/pack-e5d7761fab84874751815dbdef3619cf3da9b9fd.idx","hash":"4d557437783ee968e2d310bdd651d2e4792d941b","modified":1563078377624},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1563078377782},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1563078377790},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1563078377787},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1563078377789},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1563078377795},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1563078377792},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1563078377797},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1563078377841},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1563078377794},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1563078377842},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1563078377845},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1563078377847},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1563078377849},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1563078377853},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1563078377872},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1563078377874},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1563078377875},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1563078377861},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1563078377858},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1563078377855},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1563078377801},{"_id":"source/images/ng-note-component/switch.gif","hash":"b055cac3cac028778772326abc90d94d825f4095","modified":1562300643960},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"5827add7aea5f27ea06e97935c0c8644482b9445","modified":1563078377695},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1563078377682},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"5827add7aea5f27ea06e97935c0c8644482b9445","modified":1563078377681},{"_id":"source/images/bg-1.jpg","hash":"ee372b484afbddfe2857539250453567027508aa","modified":1562669092307},{"_id":"source/images/ng-note-component/progress.gif","hash":"c7def0a0f9eed0fd4187d6d119628584c2bd5666","modified":1562300644127},{"_id":"source/images/bg-2.jpg","hash":"e12576f9ee3bf540f6206b008f584ef43f6861d0","modified":1562669215400},{"_id":"source/images/ng-note-component/app-ul.gif","hash":"2862c793b6ad66e206631ba78281fad448efe220","modified":1562300644026},{"_id":"themes/yilia/.git/objects/pack/pack-e5d7761fab84874751815dbdef3619cf3da9b9fd.pack","hash":"8c55169c5cd8899a30172cdcfdcfdf5a8cd91aef","modified":1563078377623},{"_id":"source/images/ng-note-component/switch-event.gif","hash":"c0d9761e2fe4d7c0ab88d060a5baa698c896eb7e","modified":1562300644119},{"_id":"source/_posts/test.md","hash":"f1782e3b5ba1cf7fd95e8120aa80fb72e878df0c","modified":1563079273824},{"_id":"source/_posts/webgl.md","hash":"59645f09670e456543c1a36109db5c215e6c78fd","modified":1563079347554},{"_id":"public/content.json","hash":"93ef4cce13f2fe3f668b6cd288e2d20648c7e4f4","modified":1563079406169},{"_id":"public/new-article/Java-HashMap.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1563079407361},{"_id":"public/new-article/android-activity.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1563079407361},{"_id":"public/new-article/android-service.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1563079407361},{"_id":"public/new-article/jectpack-paging-datasource.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1563079407362},{"_id":"public/about/index.html","hash":"d559bc5c568f7f21f2fdffe008d3f1de4b02ca9b","modified":1563079407362},{"_id":"public/links/index.html","hash":"39eb4daa47ea822e554052414629847ba9e65a42","modified":1563079407362},{"_id":"public/new-article/android-content-provider.html","hash":"8cf8929950f39e947dc87f2ba27a394ccc46be5f","modified":1563079407362},{"_id":"public/new-article/svg.html","hash":"da5d2efcd39949ecbea39a070081e2229c4b294f","modified":1563079407362},{"_id":"public/2019/07/14/RxJS-搜索查询/index.html","hash":"c9804b6793aa8108f690233d87a9b6fb011efeef","modified":1563079407362},{"_id":"public/2019/07/10/线程池（二）/index.html","hash":"f164781ff84379a36d82d93117b2f55dc0f20e07","modified":1563079407362},{"_id":"public/2019/07/09/Gradle-构建Kotlin项目/index.html","hash":"b9dea10b8aba58c58bc3620b5fc0063cba6ad296","modified":1563079407362},{"_id":"public/2019/07/09/线程池（一）/index.html","hash":"3aeea8d19c9f138aeb1f033a4a46106b89184e5b","modified":1563079407363},{"_id":"public/2019/07/01/android-save-keyvaluedata/index.html","hash":"fbd09179c74d75d85570adafb75c959681849d53","modified":1563079407363},{"_id":"public/2019/06/30/android-share-file/index.html","hash":"cc83517e997196e024dcdd6ace64eff075238331","modified":1563079407363},{"_id":"public/2019/06/29/jetpack-room/index.html","hash":"dee4da16c8da41bb84f9a1cdde2e512db86433b4","modified":1563079407363},{"_id":"public/2019/06/28/jetpack-workmanager/index.html","hash":"1252e489d5cd248bfbb27db7b86eedf1af8f1689","modified":1563079407363},{"_id":"public/2019/06/26/Android-Image-Load/index.html","hash":"7a18fd28cd3a28709bc1f1bcb2ce4d37df929cbc","modified":1563079407364},{"_id":"public/2019/06/25/JavaScript-编译器，引擎，作用域/index.html","hash":"cbf399682f7040a240eca39ca592698e9c6a2e59","modified":1563079407364},{"_id":"public/2019/06/22/jectpack-databinding/index.html","hash":"14d2cbbb8dcc746bd1cdf1f1ece980be42dd6798","modified":1563079407364},{"_id":"public/2019/06/14/JavaScript值类型/index.html","hash":"09e33ab898b9b62517e2a4ff9c4ec152771218c8","modified":1563079407365},{"_id":"public/2019/06/05/navigation-tablayout/index.html","hash":"1108be07aa14d68df782b0e2387d2786f294df84","modified":1563079407365},{"_id":"public/2019/05/25/jetpack-navigation-NavigationView/index.html","hash":"02a2c93769a80d8765b746970ac70b06094e8e2d","modified":1563079407365},{"_id":"public/2019/05/06/test/index.html","hash":"4eea20f385673fd9a2c1478487cc7c4e9f4a876d","modified":1563079407365},{"_id":"public/2019/04/25/webgl/index.html","hash":"2c4375c02db19d78ee5a76eb88c0649402c5d73f","modified":1563079407366},{"_id":"public/2019/04/24/canvas/index.html","hash":"e86ed511b3ed2f36e386a9a7cbe4613d90e26d69","modified":1563079407366},{"_id":"public/2019/04/22/browser-devices/index.html","hash":"bc045a72ebba07cc309e547fda0d4af380ae9c33","modified":1563079407366},{"_id":"public/2019/02/02/androidx-note-1/index.html","hash":"4dace325ed9de42b62a8c5cab46e3128123129a8","modified":1563079407366},{"_id":"public/2019/01/25/webrtc-note-1/index.html","hash":"78175cc7842a5124d973e41d49219f08aa8d0966","modified":1563079407367},{"_id":"public/2019/01/21/ffmpeg-note-1/index.html","hash":"191befce5f995b4968e1bbe10a50df0241ac26f4","modified":1563079407367},{"_id":"public/2019/01/03/nginx-flv/index.html","hash":"33697f6bddde5bc1883b292abf701a82a75aa42f","modified":1563079407368},{"_id":"public/2018/12/12/test-note-unit/index.html","hash":"84300bd8fc6ecec1d0e0ab07f385c64b75a0a351","modified":1563079407368},{"_id":"public/2018/12/12/test-note-e2e/index.html","hash":"1e1fa1d04186f72d33b94046f316f7c25d43c95f","modified":1563079407369},{"_id":"public/2018/12/05/nginx-php-note-1/index.html","hash":"575e0c7bed4746652fe3e5af011ccd73e8096942","modified":1563079407369},{"_id":"public/2018/12/03/appstore-publish/index.html","hash":"b8bdafe7c2cdceca855b985cb860ec86bc7040f3","modified":1563079407370},{"_id":"public/2018/11/28/rxjs-note-1/index.html","hash":"3bc7d569018999849322fc779e0bdaea66e95c30","modified":1563079407370},{"_id":"public/2018/11/21/webpack-note-2/index.html","hash":"43aa16c896c5185526565fab2bbe95f57afefeec","modified":1563079407371},{"_id":"public/2018/11/21/webpack-note-1/index.html","hash":"5fd27cb3133fb8e7e6607c987e86a4a458e7ff64","modified":1563079407371},{"_id":"public/2018/11/13/mysql-note-3/index.html","hash":"633d7dac70ff402bc2027d6a92224a4f0127d243","modified":1563079407371},{"_id":"public/2018/09/29/mysql-schema/index.html","hash":"ef8dcffa21d22f84757732e3367348c4e5fad863","modified":1563079407371},{"_id":"public/2018/09/28/mysql-slave/index.html","hash":"3374857c600035614f43bac1589f1380cf6358b0","modified":1563079407372},{"_id":"public/2018/09/27/cordova-swift-support/index.html","hash":"bcb6abd86c0c5cc1ec79f3847b69c9731e80db0b","modified":1563079407372},{"_id":"public/2018/09/06/ng-note-i18n/index.html","hash":"9606d7b6f669d15d7bdbc7fb753c35e6086d963d","modified":1563079407372},{"_id":"public/2018/09/05/跨境支付/index.html","hash":"f6a6a5be5677309c536183aa28892957fc191066","modified":1563079407373},{"_id":"public/2018/08/31/cordova-note-1/index.html","hash":"fb3576fca3cff2ededfa71f346b67d1e278b8fbb","modified":1563079407373},{"_id":"public/2018/08/21/mysql-note-2/index.html","hash":"58b9e7d7961bf9b392b4f1cf3819b31bd9584a52","modified":1563079407373},{"_id":"public/2018/08/14/快速学习css/index.html","hash":"7fbfa63d713c5eea0bdfcd7e2027b3f40383e4b8","modified":1563079407373},{"_id":"public/2018/08/14/https/index.html","hash":"ef74394bdff8288fc2ac10c13a8a54a73af8e831","modified":1563079407374},{"_id":"public/2018/08/13/php配置/index.html","hash":"2d546170f83d39cfcd6320fe163352d702931be0","modified":1563079407374},{"_id":"public/2018/08/13/mysql-note-1/index.html","hash":"ba3d308c1e54ff4aa1acce4337e73e764394f6bb","modified":1563079407374},{"_id":"public/2018/08/08/nginx安装及其相关配置/index.html","hash":"c66ae128208ee4ce9f25008c61c05a06a1b15c7e","modified":1563079407374},{"_id":"public/2018/08/08/php7-2安装/index.html","hash":"80041017b03f713c71a8f37a3b9cdc8a8a47d041","modified":1563079407375},{"_id":"public/2018/08/08/node-note-1/index.html","hash":"b46e1f22629f36bd12f6c714bd26ea3dc1618281","modified":1563079407375},{"_id":"public/2018/07/25/JavaScript-Note-1/index.html","hash":"e486b883e3f7bc118316cc0da5766b11736006ec","modified":1563079407375},{"_id":"public/2018/07/13/ng-note-component-4/index.html","hash":"29ed00712b7cff001fe2fb89f2309ba3992b71a4","modified":1563079407376},{"_id":"public/2018/07/11/ng-note-component-3/index.html","hash":"755fc6f7546356d469e84c1ab84a1914642a0750","modified":1563079407376},{"_id":"public/2018/07/10/animate/index.html","hash":"5b8873b7438ee7a0c31baea86c992e3d19f05ee3","modified":1563079407376},{"_id":"public/2018/07/06/ng-note-compontent-2/index.html","hash":"f91bb29e0e5296e2c808f4e17adcba7dd35d482b","modified":1563079407376},{"_id":"public/2018/07/06/ng-note-compontent-1/index.html","hash":"127b7f3a80e123c3c1a8e5c33aec9dee0fba183f","modified":1563079407377},{"_id":"public/archives/index.html","hash":"eedef5078e26b028335739bdffa968e67362860e","modified":1563079407377},{"_id":"public/index.html","hash":"9d284f51d90c5e15c346147f0386edd36e50bc6e","modified":1563079407377},{"_id":"public/page/2/index.html","hash":"b4a0da7d07b3ba2244685f08ddf97850cbd1ca66","modified":1563079407377},{"_id":"public/page/3/index.html","hash":"e8afe3e8af81c15f57e46548a85e9f5fa2c02dfa","modified":1563079407378},{"_id":"public/page/4/index.html","hash":"04dba97c770f973f05e7f4a60be48f10c942ae7a","modified":1563079407378},{"_id":"public/page/5/index.html","hash":"1a03796613ec07fc7d28d1a11f85a0412a63fbd9","modified":1563079407378},{"_id":"public/tags/android/index.html","hash":"f2c2e5b61b5a7299a8bbf2f12070ed4f1ae958b9","modified":1563079407379},{"_id":"public/tags/Image/index.html","hash":"a9230f01559c1afd2b7203c117c001beef13a2b3","modified":1563079407379},{"_id":"public/tags/Kotlin/index.html","hash":"0c1685008acd4a5e9b74d998d687a952869bcc11","modified":1563079407379},{"_id":"public/tags/javascript/index.html","hash":"aaf74b3620d7a6176fdb549d68af7557bb10bacf","modified":1563079407379},{"_id":"public/tags/JavaScript/index.html","hash":"ed2d27942e916b2428b1d2188e78d47bed2c3c6f","modified":1563079407380},{"_id":"public/tags/RxJs/index.html","hash":"22bceb6ae49a73b7dbb52d509c4b64069ce0ce57","modified":1563079407380},{"_id":"public/tags/androidx/index.html","hash":"10b523fe30ca1dfeca2c26e468724539bb2ce59a","modified":1563079407380},{"_id":"public/tags/css/index.html","hash":"5e48e288f38568f184765d33adc50654edc720ab","modified":1563079407380},{"_id":"public/tags/html/index.html","hash":"959b53c9492ab65685890a8447d777421982838b","modified":1563079407381},{"_id":"public/tags/ios/index.html","hash":"6f790cb8ac26700d1bbd8b6b8804c663ffff1fdb","modified":1563079407381},{"_id":"public/tags/canvas/index.html","hash":"49f7a26665468c23db8dcbf1e0c45af8ceec74ac","modified":1563079407381},{"_id":"public/tags/cordova/index.html","hash":"4e5a3a3e062566f2a8486c3118a4380e45110929","modified":1563079407381},{"_id":"public/tags/node-js/index.html","hash":"d672506f95504b234cb498392a6b45c4069cd1b3","modified":1563079407381},{"_id":"public/tags/swift/index.html","hash":"d384f8ba819fde931e59210a5512f88b01e6e32d","modified":1563079407381},{"_id":"public/tags/ffmpeg/index.html","hash":"35f4900a18557bb32c64499ea82c0d49471dafd1","modified":1563079407381},{"_id":"public/tags/jetpack/index.html","hash":"47eee8279b183abc165c4af9281f6ab07ca0bf1d","modified":1563079407382},{"_id":"public/tags/nginx/index.html","hash":"63cc2faad0a8877e1cfa98f80f17082477d9e40a","modified":1563079407382},{"_id":"public/tags/https/index.html","hash":"9c4193e58ecc593242cc1b12c7e8020b8583c3fc","modified":1563079407382},{"_id":"public/tags/mysql/index.html","hash":"19ea5a1c303ffbaf725c84c1d0e531128a7f969c","modified":1563079407382},{"_id":"public/tags/Angular/index.html","hash":"da36b346e97c1c7b4dab6f29e8cfb084fee7a45c","modified":1563079407382},{"_id":"public/tags/tablayout/index.html","hash":"f9b050ad455ceaf0fae257fe1230ad341efd2fe6","modified":1563079407382},{"_id":"public/tags/i18n/index.html","hash":"0f34055cbed67fd2e3da07fbbbef9b372184223c","modified":1563079407382},{"_id":"public/tags/flv/index.html","hash":"5db03200fc7b3c32f0e4f4e8fe1e873cbab38f16","modified":1563079407383},{"_id":"public/tags/php/index.html","hash":"3a564ef5cddec5229d9501a9b09df04e29eeecaa","modified":1563079407383},{"_id":"public/tags/rxjs/index.html","hash":"284789b46e8db73387d661db68b664f61bb9f89a","modified":1563079407383},{"_id":"public/tags/unit/index.html","hash":"17ee3b10f2c9ba7d8fb55f8afaeff1f6a95988f6","modified":1563079407383},{"_id":"public/tags/webpack/index.html","hash":"a73c60edf03fba197fc078bd246ce129d505cdff","modified":1563079407383},{"_id":"public/tags/sass/index.html","hash":"679ab063d0b5612901068438ff5b2fb461ce590c","modified":1563079407383},{"_id":"public/tags/webrtc/index.html","hash":"ab5ccf22266b1cfa3d53b3f3499895a1c5809095","modified":1563079407383},{"_id":"public/tags/coturn/index.html","hash":"e43d2315f94e7d16eaf3a112729efdb31d7934d8","modified":1563079407384},{"_id":"public/tags/e2e/index.html","hash":"d6069e9c35a0074fb010694c0e3ea5e1359456d4","modified":1563079407384},{"_id":"public/tags/Aplipay/index.html","hash":"0195b254a0eb958489770f751c967740df0dce0e","modified":1563079407384},{"_id":"public/tags/WechatPay/index.html","hash":"a907db6ea7b08db946f127a8552dabda62ab4040","modified":1563079407384},{"_id":"public/categories/Android开发/index.html","hash":"b2c4d3c54eaa924f5774242b2d028a6a9a9322bf","modified":1563079407384},{"_id":"public/categories/Web开发/index.html","hash":"ad0e3d77218757fe3163b70d5d7a5c98cb8ceadc","modified":1563079407384},{"_id":"public/categories/Web开发/page/2/index.html","hash":"46604a5d7cfd916feada486da1552a490be30ffd","modified":1563079407384},{"_id":"public/categories/Web开发/page/3/index.html","hash":"933a6aeef29f53e538a78315f4dacb34ac36d92c","modified":1563079407384},{"_id":"public/categories/数据库/index.html","hash":"b9839c17c571c5c15ecaefc1c35a5c186188cf1d","modified":1563079407385},{"_id":"public/categories/php/index.html","hash":"aef991171d9d27a3d7827a17cd3c0f33b3dd483c","modified":1563079407385},{"_id":"public/images/kotlin/gradle-folder.png","hash":"fbc9ac657ee58832456f3ecbdf6c80d7e5f54037","modified":1563079407409},{"_id":"public/images/scope.png","hash":"da9855091e566527929dd6e0532c1c74244af1ef","modified":1563079407409},{"_id":"public/images/jetpack/adb-memory-profiler.png","hash":"7c252dbe738f008132de791f3e6ed7ec12ec738f","modified":1563079407409},{"_id":"public/images/kotlin/gradle-path.png","hash":"90498a1fa9c80068929b4c4ace50c1388c40161e","modified":1563079407409},{"_id":"public/images/jetpack/adb-memory.png","hash":"64fd7b7740e6d5afd138475d0784e55f20d27447","modified":1563079407409},{"_id":"public/images/kotlin/thread-life.png","hash":"f6247a960f472d1bdc34bebe9a2ea940f3d96fcc","modified":1563079407409},{"_id":"public/images/jetpack/setting-view.png","hash":"346b5222224322b42d0063dca23d0bd334706baa","modified":1563079407409},{"_id":"public/images/mysql/mysql_master_status.png","hash":"601654bb8e3169cf4ce35013b59214c6c20e5ffd","modified":1563079407409},{"_id":"public/images/rxjs/of.png","hash":"f6b729e34052f09d1d0832d8c3beb09947e59d0e","modified":1563079407409},{"_id":"public/images/jetpack/tab-navigation.png","hash":"22225f2561e383757995b287f470232c73464cc1","modified":1563079407409},{"_id":"public/images/rxjs/fromEvent.png","hash":"04b8c0d7b35f06bad267989ef7012291059e3fd1","modified":1563079407409},{"_id":"public/images/ng-note-component/app-ul-error.png","hash":"047fcf0e98748ec0739a748d7ae28105b7ab027a","modified":1563079407410},{"_id":"public/images/rxjs/search.png","hash":"e2ddd7a69e648581dd9b6efef2bc8f00e3a4f10c","modified":1563079407410},{"_id":"public/images/ng-note-component/app-ul.png","hash":"8c5d8a9c4f3949bd4d1f8723380be4fd858942af","modified":1563079407410},{"_id":"public/images/ng-note-component/app-ul-res.png","hash":"2ae9649745161af6c7ec884d24733fdf86ea24f6","modified":1563079407410},{"_id":"public/images/ng-note-component/child-content.png","hash":"c6f1e77a3adb77c45015e201903bf99789143f54","modified":1563079407410},{"_id":"public/images/ng-note-component/progress.png","hash":"928af7521cb9d718fa1bf0eaed0ac23bd7a2dffc","modified":1563079407410},{"_id":"public/images/ng-note-component/switch.png","hash":"fd5fe2cee1cff75d1a316c4df96bbba76ea9e4e2","modified":1563079407410},{"_id":"public/images/ng-note-component/switch-event.png","hash":"0525280c7187f12a359e58a128f88dda2fa1114f","modified":1563079407410},{"_id":"public/images/ng-note-component/progress-value.png","hash":"a36bb65728a4377a5b965110d787772cdf491f20","modified":1563079407410},{"_id":"public/images/ng-note-component/viewchildren-error.png","hash":"2f4669b80a2ef41aabe76e85bbd400495dc5211e","modified":1563079407410},{"_id":"public/images/webpack/npm-init.png","hash":"b30c9eb81c082dad69adc34df225af4e8ba34ce8","modified":1563079407410},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1563079407410},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1563079407410},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1563079407410},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1563079407411},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1563079407411},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1563079407411},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1563079407411},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1563079407411},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1563079407411},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1563079407411},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1563079407411},{"_id":"public/live2dw/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1563079407411},{"_id":"public/live2dw/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1563079407411},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1563079407411},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1563079407411},{"_id":"public/live2dw/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1563079407411},{"_id":"public/live2dw/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1563079407411},{"_id":"public/live2dw/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1563079407412},{"_id":"public/live2dw/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1563079407412},{"_id":"public/live2dw/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1563079407412},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"6e013af9c502b2e63ac5e42944e3244f8f515eb7","modified":1563079407412},{"_id":"public/live2dw/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1563079407412},{"_id":"public/live2dw/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1563079407412},{"_id":"public/images/jetpack/android-sqlite.png","hash":"d5392c117bec7a4c1aad6f36cd56d42a72de10ec","modified":1563079407419},{"_id":"public/images/kotlin/thread.jpg","hash":"11f597e1bd1f2d386d90c8596a873008405edb8d","modified":1563079407419},{"_id":"public/images/jetpack/settings.png","hash":"39d66b06923bf0a7902924a03524a0c5a4f9e6e4","modified":1563079407420},{"_id":"public/images/jetpack/side-navigation.png","hash":"861b70cff79a5067bce65235a5fbf7daab16fd11","modified":1563079407420},{"_id":"public/images/mysql/mysql_document_store_architecture.png","hash":"cf959ab86f63958c6390714fe29ace6b81f1dffd","modified":1563079407420},{"_id":"public/images/jetpack/workmanager.png","hash":"d558cb49ddc88c6003d0ebd762eb2fd78b14d8f0","modified":1563079407421},{"_id":"public/live2dw/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1563079407421},{"_id":"public/live2dw/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1563079407421},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1563079407424},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1563079407424},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1563079407424},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1563079407424},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"7d3a9c937317b9c15f2c3a872f0e26607a729458","modified":1563079407424},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"5e7669733ecd0b1bc3881d2cf7fcc01e2990a07d","modified":1563079407425},{"_id":"public/codes/component-simple-2.zip","hash":"2aa0b12d93c3e39d2835a0015466ea2bc1ecd261","modified":1563079407429},{"_id":"public/codes/component-simpl-4.zip","hash":"1ee60d4d80a0e04dafdd15584a37bef3b8008a81","modified":1563079407430},{"_id":"public/codes/component-simple-1.zip","hash":"7d84be0b41e99b75300237827361d301b4b1cde5","modified":1563079407430},{"_id":"public/codes/component-simple-3.zip","hash":"87d07509f6019db212d11caf1bfe4242a928f414","modified":1563079407430},{"_id":"public/images/ng-note-component/switch.gif","hash":"b055cac3cac028778772326abc90d94d825f4095","modified":1563079407457},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"09521263ecc625a246b3406c385300e99e966a2e","modified":1563079408713},{"_id":"public/images/bg-1.jpg","hash":"ee372b484afbddfe2857539250453567027508aa","modified":1563079410015},{"_id":"public/images/ng-note-component/progress.gif","hash":"c7def0a0f9eed0fd4187d6d119628584c2bd5666","modified":1563079410080},{"_id":"public/images/bg-2.jpg","hash":"e12576f9ee3bf540f6206b008f584ef43f6861d0","modified":1563079410098},{"_id":"public/images/ng-note-component/app-ul.gif","hash":"2862c793b6ad66e206631ba78281fad448efe220","modified":1563079410139},{"_id":"public/images/ng-note-component/switch-event.gif","hash":"c0d9761e2fe4d7c0ab88d060a5baa698c896eb7e","modified":1563079410195}],"Category":[{"name":"Android开发","_id":"cjy2gld7t0007e8weep5c66yw"},{"name":"Web开发","_id":"cjy2gld80000ee8wewzv6t488"},{"name":"数据库","_id":"cjy2gld8w001xe8weh2fkaez5"},{"name":"php","_id":"cjy2gld9n003ee8wegiznzmx5"}],"Data":[],"Page":[{"_content":"我很懒不想写什么关于内容...\n","source":"about/index.md","raw":"我很懒不想写什么关于内容...\n","date":"2019-07-08T08:43:27.746Z","updated":"2019-07-05T04:24:05.794Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cjy2gld7j0001e8we5exfotn8","content":"<p>我很懒不想写什么关于内容…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我很懒不想写什么关于内容…</p>\n"},{"title":"Java-HashMap","date":"2019-06-27T07:56:21.000Z","tags":["java"],"_content":"\n```Java\n// 默认数组容量16（必须是2幂次方）\nstatic final int DEFAULT_INITIAL_CAPACITY = 1 << 4;\n\n// 数组最大容量，到达后不在扩大（必须是2幂次方）\nstatic final int MAXIMUM_CAPACITY = 1 << 30;\n\n// 默认加载因子，当数组已经使用到 当前容量 * 加载因子时发生扩容\nstatic final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n// 树形化阈值。当链表的节点个数大于等于这个值时，会将链表转化为树。\nstatic final int TREEIFY_THRESHOLD = 8;\n\n// 解除树形化阈值。当链表的节点个数小于等于这个值时，会将红黑树转换成普通的链表。\nstatic final int UNTREEIFY_THRESHOLD = 6;\n\n// 树形化阈值的第二条件。当数组的长度小于这个值时，就算树形化阈达标，链表也不会转化为红黑树，而是优先扩容数组resize。\nstatic final int MIN_TREEIFY_CAPACITY = 64;\n```\n\n**条目定义`Map.Entry`**\n```Java\ninterface Entry<K, V> {\n        // 获取条目的Key \n        K getKey();\n\n        // 获取条目的值\n        V getValue();\n        \n        // 设置条目的值\n        V setValue(V value);\n\n        // 比较两个条目是不是相等\n        boolean equals(Object o);\n\n        // 获取条目的hash code\n        int hashCode();        \n```\n**节点定义,实现了Entry接口`HashMap.Node`，并多了一个指向下一个节点的next成员变量**\n``` Java\nstatic class Node<K,V> implements Map.Entry<K,V> {\n        final int hash;\n        final K key;\n        V value;\n        Node<K,V> next;\n\n        Node(int hash, K key, V value, Node<K,V> next) {\n            this.hash = hash;\n            this.key = key;\n            this.value = value;\n            this.next = next;\n        }\n\n        public final K getKey()        { return key; }\n        public final V getValue()      { return value; }\n        public final String toString() { return key + \"=\" + value; }\n\n        public final int hashCode() {\n            return Objects.hashCode(key) ^ Objects.hashCode(value);\n        }\n\n        public final V setValue(V newValue) {\n            V oldValue = value;\n            value = newValue;\n            return oldValue;\n        }\n\n        public final boolean equals(Object o) {\n            if (o == this)\n                return true;\n            if (o instanceof Map.Entry) {\n                Map.Entry<?,?> e = (Map.Entry<?,?>)o;\n                if (Objects.equals(key, e.getKey()) &&\n                    Objects.equals(value, e.getValue()))\n                    return true;\n            }\n            return false;\n        }\n    }\n}\n```\n\n**HashMap内部数组**\n```Java\ntransient Node<K,V> table;\n```\n\n代码分析\n\n1. 构造方法\n```Java\n/**\n * 如果我们使用这个构造方法，所有的配置都是默认值\n */\npublic HashMap() {\n    this.loadFactor = DEFAULT_LOAD_FACTOR;\n}\n\n/**\n * 可以设置Node table的初始大小（必须大于0且超过最大值默认设置最大值）\n */\npublic HashMap(int initialCapacity) {\n        this(initialCapacity, DEFAULT_LOAD_FACTOR);\n}\n\n/**\n * 可以设置Node table的初始大小（必须大于0且超过最大值默认设置最大值），加载因子\n */\n public HashMap(int initialCapacity, float loadFactor) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                               initialCapacity);\n        if (initialCapacity > MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor <= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                               loadFactor);\n        this.loadFactor = loadFactor;\n\n        // 这个方法可以将任意一个整数转换成2的次方。\n        // 例如输入10，则会返回16。\n        // 初始化的时候扩容阀值并非 数组容量 * loadFactor计算得到，而是直接用当前初始化大小\n        // 然后第一次put操作，扩充数组时，会将这个threshold作为数组容量，然后再重新计算这个值。\n        this.threshold = tableSizeFor(initialCapacity);\n}\n```\n\n2. 扩容方法（变更table的长度）\n```Java\nfinal Node<K,V>[] resize() {\n    Node<K,V>[] oldTab = table;\n    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n    int oldThr = threshold;\n    int newCap, newThr = 0;\n    if (oldCap > 0) {\n        if (oldCap >= MAXIMUM_CAPACITY) {\n            threshold = Integer.MAX_VALUE;\n            return oldTab;\n        }\n        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                    oldCap >= DEFAULT_INITIAL_CAPACITY)\n            newThr = oldThr << 1; // double threshold\n    }\n    else if (oldThr > 0) // initial capacity was placed in threshold\n        newCap = oldThr;\n    else {               // zero initial threshold signifies using defaults\n        newCap = DEFAULT_INITIAL_CAPACITY;\n        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n    }\n    if (newThr == 0) {\n        float ft = (float)newCap * loadFactor;\n        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                    (int)ft : Integer.MAX_VALUE);\n    }\n    threshold = newThr;\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n        Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n    table = newTab;\n    if (oldTab != null) {\n        for (int j = 0; j < oldCap; ++j) {\n            Node<K,V> e;\n            if ((e = oldTab[j]) != null) {\n                oldTab[j] = null;\n                if (e.next == null)\n                    newTab[e.hash & (newCap - 1)] = e;\n                else if (e instanceof TreeNode)\n                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                else { // preserve order\n                    Node<K,V> loHead = null, loTail = null;\n                    Node<K,V> hiHead = null, hiTail = null;\n                    Node<K,V> next;\n                    do {\n                        next = e.next;\n                        if ((e.hash & oldCap) == 0) {\n                            if (loTail == null)\n                                loHead = e;\n                            else\n                                loTail.next = e;\n                            loTail = e;\n                        }\n                        else {\n                            if (hiTail == null)\n                                hiHead = e;\n                            else\n                                hiTail.next = e;\n                            hiTail = e;\n                        }\n                    } while ((e = next) != null);\n                    if (loTail != null) {\n                        loTail.next = null;\n                        newTab[j] = loHead;\n                    }\n                    if (hiTail != null) {\n                        hiTail.next = null;\n                        newTab[j + oldCap] = hiHead;\n                    }\n                }\n            }\n        }\n    }\n    return newTab;\n}\n```","source":"new-article/Java-HashMap.md","raw":"---\ntitle: Java-HashMap\ndate: 2019-06-27 15:56:21\ntags: [\"java\"]\n---\n\n```Java\n// 默认数组容量16（必须是2幂次方）\nstatic final int DEFAULT_INITIAL_CAPACITY = 1 << 4;\n\n// 数组最大容量，到达后不在扩大（必须是2幂次方）\nstatic final int MAXIMUM_CAPACITY = 1 << 30;\n\n// 默认加载因子，当数组已经使用到 当前容量 * 加载因子时发生扩容\nstatic final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n// 树形化阈值。当链表的节点个数大于等于这个值时，会将链表转化为树。\nstatic final int TREEIFY_THRESHOLD = 8;\n\n// 解除树形化阈值。当链表的节点个数小于等于这个值时，会将红黑树转换成普通的链表。\nstatic final int UNTREEIFY_THRESHOLD = 6;\n\n// 树形化阈值的第二条件。当数组的长度小于这个值时，就算树形化阈达标，链表也不会转化为红黑树，而是优先扩容数组resize。\nstatic final int MIN_TREEIFY_CAPACITY = 64;\n```\n\n**条目定义`Map.Entry`**\n```Java\ninterface Entry<K, V> {\n        // 获取条目的Key \n        K getKey();\n\n        // 获取条目的值\n        V getValue();\n        \n        // 设置条目的值\n        V setValue(V value);\n\n        // 比较两个条目是不是相等\n        boolean equals(Object o);\n\n        // 获取条目的hash code\n        int hashCode();        \n```\n**节点定义,实现了Entry接口`HashMap.Node`，并多了一个指向下一个节点的next成员变量**\n``` Java\nstatic class Node<K,V> implements Map.Entry<K,V> {\n        final int hash;\n        final K key;\n        V value;\n        Node<K,V> next;\n\n        Node(int hash, K key, V value, Node<K,V> next) {\n            this.hash = hash;\n            this.key = key;\n            this.value = value;\n            this.next = next;\n        }\n\n        public final K getKey()        { return key; }\n        public final V getValue()      { return value; }\n        public final String toString() { return key + \"=\" + value; }\n\n        public final int hashCode() {\n            return Objects.hashCode(key) ^ Objects.hashCode(value);\n        }\n\n        public final V setValue(V newValue) {\n            V oldValue = value;\n            value = newValue;\n            return oldValue;\n        }\n\n        public final boolean equals(Object o) {\n            if (o == this)\n                return true;\n            if (o instanceof Map.Entry) {\n                Map.Entry<?,?> e = (Map.Entry<?,?>)o;\n                if (Objects.equals(key, e.getKey()) &&\n                    Objects.equals(value, e.getValue()))\n                    return true;\n            }\n            return false;\n        }\n    }\n}\n```\n\n**HashMap内部数组**\n```Java\ntransient Node<K,V> table;\n```\n\n代码分析\n\n1. 构造方法\n```Java\n/**\n * 如果我们使用这个构造方法，所有的配置都是默认值\n */\npublic HashMap() {\n    this.loadFactor = DEFAULT_LOAD_FACTOR;\n}\n\n/**\n * 可以设置Node table的初始大小（必须大于0且超过最大值默认设置最大值）\n */\npublic HashMap(int initialCapacity) {\n        this(initialCapacity, DEFAULT_LOAD_FACTOR);\n}\n\n/**\n * 可以设置Node table的初始大小（必须大于0且超过最大值默认设置最大值），加载因子\n */\n public HashMap(int initialCapacity, float loadFactor) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                               initialCapacity);\n        if (initialCapacity > MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor <= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                               loadFactor);\n        this.loadFactor = loadFactor;\n\n        // 这个方法可以将任意一个整数转换成2的次方。\n        // 例如输入10，则会返回16。\n        // 初始化的时候扩容阀值并非 数组容量 * loadFactor计算得到，而是直接用当前初始化大小\n        // 然后第一次put操作，扩充数组时，会将这个threshold作为数组容量，然后再重新计算这个值。\n        this.threshold = tableSizeFor(initialCapacity);\n}\n```\n\n2. 扩容方法（变更table的长度）\n```Java\nfinal Node<K,V>[] resize() {\n    Node<K,V>[] oldTab = table;\n    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n    int oldThr = threshold;\n    int newCap, newThr = 0;\n    if (oldCap > 0) {\n        if (oldCap >= MAXIMUM_CAPACITY) {\n            threshold = Integer.MAX_VALUE;\n            return oldTab;\n        }\n        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                    oldCap >= DEFAULT_INITIAL_CAPACITY)\n            newThr = oldThr << 1; // double threshold\n    }\n    else if (oldThr > 0) // initial capacity was placed in threshold\n        newCap = oldThr;\n    else {               // zero initial threshold signifies using defaults\n        newCap = DEFAULT_INITIAL_CAPACITY;\n        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n    }\n    if (newThr == 0) {\n        float ft = (float)newCap * loadFactor;\n        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                    (int)ft : Integer.MAX_VALUE);\n    }\n    threshold = newThr;\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n        Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n    table = newTab;\n    if (oldTab != null) {\n        for (int j = 0; j < oldCap; ++j) {\n            Node<K,V> e;\n            if ((e = oldTab[j]) != null) {\n                oldTab[j] = null;\n                if (e.next == null)\n                    newTab[e.hash & (newCap - 1)] = e;\n                else if (e instanceof TreeNode)\n                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                else { // preserve order\n                    Node<K,V> loHead = null, loTail = null;\n                    Node<K,V> hiHead = null, hiTail = null;\n                    Node<K,V> next;\n                    do {\n                        next = e.next;\n                        if ((e.hash & oldCap) == 0) {\n                            if (loTail == null)\n                                loHead = e;\n                            else\n                                loTail.next = e;\n                            loTail = e;\n                        }\n                        else {\n                            if (hiTail == null)\n                                hiHead = e;\n                            else\n                                hiTail.next = e;\n                            hiTail = e;\n                        }\n                    } while ((e = next) != null);\n                    if (loTail != null) {\n                        loTail.next = null;\n                        newTab[j] = loHead;\n                    }\n                    if (hiTail != null) {\n                        hiTail.next = null;\n                        newTab[j + oldCap] = hiHead;\n                    }\n                }\n            }\n        }\n    }\n    return newTab;\n}\n```","updated":"2019-07-05T04:24:05.818Z","path":"new-article/Java-HashMap.html","comments":1,"layout":"page","_id":"cjy2gld7n0003e8wevyr1958a","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 默认数组容量16（必须是2幂次方）</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_INITIAL_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组最大容量，到达后不在扩大（必须是2幂次方）</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认加载因子，当数组已经使用到 当前容量 * 加载因子时发生扩容</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> DEFAULT_LOAD_FACTOR = <span class=\"number\">0.75f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 树形化阈值。当链表的节点个数大于等于这个值时，会将链表转化为树。</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TREEIFY_THRESHOLD = <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解除树形化阈值。当链表的节点个数小于等于这个值时，会将红黑树转换成普通的链表。</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> UNTREEIFY_THRESHOLD = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 树形化阈值的第二条件。当数组的长度小于这个值时，就算树形化阈达标，链表也不会转化为红黑树，而是优先扩容数组resize。</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MIN_TREEIFY_CAPACITY = <span class=\"number\">64</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>条目定义<code>Map.Entry</code></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取条目的Key </span></span><br><span class=\"line\">        <span class=\"function\">K <span class=\"title\">getKey</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取条目的值</span></span><br><span class=\"line\">        <span class=\"function\">V <span class=\"title\">getValue</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 设置条目的值</span></span><br><span class=\"line\">        <span class=\"function\">V <span class=\"title\">setValue</span><span class=\"params\">(V value)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 比较两个条目是不是相等</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取条目的hash code</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p><strong>节点定义,实现了Entry接口<code>HashMap.Node</code>，并多了一个指向下一个节点的next成员变量</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">        V value;</span><br><span class=\"line\">        Node&lt;K,V&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">        Node(<span class=\"keyword\">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.hash = hash;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> K <span class=\"title\">getKey</span><span class=\"params\">()</span>        </span>&#123; <span class=\"keyword\">return</span> key; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">getValue</span><span class=\"params\">()</span>      </span>&#123; <span class=\"keyword\">return</span> value; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> key + <span class=\"string\">\"=\"</span> + value; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">setValue</span><span class=\"params\">(V newValue)</span> </span>&#123;</span><br><span class=\"line\">            V oldValue = value;</span><br><span class=\"line\">            value = newValue;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o == <span class=\"keyword\">this</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> Map.Entry) &#123;</span><br><span class=\"line\">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class=\"line\">                    Objects.equals(value, e.getValue()))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>HashMap内部数组</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">transient</span> Node&lt;K,V&gt; table;</span><br></pre></td></tr></table></figure></p>\n<p>代码分析</p>\n<ol>\n<li><p>构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果我们使用这个构造方法，所有的配置都是默认值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以设置Node table的初始大小（必须大于0且超过最大值默认设置最大值）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以设置Node table的初始大小（必须大于0且超过最大值默认设置最大值），加载因子</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal initial capacity: \"</span> +</span><br><span class=\"line\">                                               initialCapacity);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class=\"line\">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (loadFactor &lt;= <span class=\"number\">0</span> || Float.isNaN(loadFactor))</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal load factor: \"</span> +</span><br><span class=\"line\">                                               loadFactor);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loadFactor = loadFactor;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这个方法可以将任意一个整数转换成2的次方。</span></span><br><span class=\"line\">        <span class=\"comment\">// 例如输入10，则会返回16。</span></span><br><span class=\"line\">        <span class=\"comment\">// 初始化的时候扩容阀值并非 数组容量 * loadFactor计算得到，而是直接用当前初始化大小</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后第一次put操作，扩充数组时，会将这个threshold作为数组容量，然后再重新计算这个值。</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>扩容方法（变更table的长度）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldThr = threshold;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">            newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></span><br><span class=\"line\">        newCap = oldThr;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;               <span class=\"comment\">// zero initial threshold signifies using defaults</span></span><br><span class=\"line\">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">        newThr = (<span class=\"keyword\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> ft = (<span class=\"keyword\">float</span>)newCap * loadFactor;</span><br><span class=\"line\">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"keyword\">float</span>)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                    (<span class=\"keyword\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threshold = newThr;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"rawtypes\"</span>,<span class=\"string\">\"unchecked\"</span>&#125;)</span><br><span class=\"line\">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node[newCap];</span><br><span class=\"line\">    table = newTab;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldTab != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">            Node&lt;K,V&gt; e;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                oldTab[j] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                    ((TreeNode&lt;K,V&gt;)e).split(<span class=\"keyword\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// preserve order</span></span><br><span class=\"line\">                    Node&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; next;</span><br><span class=\"line\">                    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                        next = e.next;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                loHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                loTail.next = e;</span><br><span class=\"line\">                            loTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                hiHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                hiTail.next = e;</span><br><span class=\"line\">                            hiTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        loTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        newTab[j] = loHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        hiTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 默认数组容量16（必须是2幂次方）</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_INITIAL_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组最大容量，到达后不在扩大（必须是2幂次方）</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认加载因子，当数组已经使用到 当前容量 * 加载因子时发生扩容</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> DEFAULT_LOAD_FACTOR = <span class=\"number\">0.75f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 树形化阈值。当链表的节点个数大于等于这个值时，会将链表转化为树。</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TREEIFY_THRESHOLD = <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解除树形化阈值。当链表的节点个数小于等于这个值时，会将红黑树转换成普通的链表。</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> UNTREEIFY_THRESHOLD = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 树形化阈值的第二条件。当数组的长度小于这个值时，就算树形化阈达标，链表也不会转化为红黑树，而是优先扩容数组resize。</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MIN_TREEIFY_CAPACITY = <span class=\"number\">64</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>条目定义<code>Map.Entry</code></strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取条目的Key </span></span><br><span class=\"line\">        <span class=\"function\">K <span class=\"title\">getKey</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取条目的值</span></span><br><span class=\"line\">        <span class=\"function\">V <span class=\"title\">getValue</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 设置条目的值</span></span><br><span class=\"line\">        <span class=\"function\">V <span class=\"title\">setValue</span><span class=\"params\">(V value)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 比较两个条目是不是相等</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取条目的hash code</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p><strong>节点定义,实现了Entry接口<code>HashMap.Node</code>，并多了一个指向下一个节点的next成员变量</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">        V value;</span><br><span class=\"line\">        Node&lt;K,V&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">        Node(<span class=\"keyword\">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.hash = hash;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> K <span class=\"title\">getKey</span><span class=\"params\">()</span>        </span>&#123; <span class=\"keyword\">return</span> key; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">getValue</span><span class=\"params\">()</span>      </span>&#123; <span class=\"keyword\">return</span> value; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> key + <span class=\"string\">\"=\"</span> + value; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">setValue</span><span class=\"params\">(V newValue)</span> </span>&#123;</span><br><span class=\"line\">            V oldValue = value;</span><br><span class=\"line\">            value = newValue;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o == <span class=\"keyword\">this</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> Map.Entry) &#123;</span><br><span class=\"line\">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class=\"line\">                    Objects.equals(value, e.getValue()))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>HashMap内部数组</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">transient</span> Node&lt;K,V&gt; table;</span><br></pre></td></tr></table></figure></p>\n<p>代码分析</p>\n<ol>\n<li><p>构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果我们使用这个构造方法，所有的配置都是默认值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以设置Node table的初始大小（必须大于0且超过最大值默认设置最大值）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以设置Node table的初始大小（必须大于0且超过最大值默认设置最大值），加载因子</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal initial capacity: \"</span> +</span><br><span class=\"line\">                                               initialCapacity);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class=\"line\">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (loadFactor &lt;= <span class=\"number\">0</span> || Float.isNaN(loadFactor))</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal load factor: \"</span> +</span><br><span class=\"line\">                                               loadFactor);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loadFactor = loadFactor;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这个方法可以将任意一个整数转换成2的次方。</span></span><br><span class=\"line\">        <span class=\"comment\">// 例如输入10，则会返回16。</span></span><br><span class=\"line\">        <span class=\"comment\">// 初始化的时候扩容阀值并非 数组容量 * loadFactor计算得到，而是直接用当前初始化大小</span></span><br><span class=\"line\">        <span class=\"comment\">// 然后第一次put操作，扩充数组时，会将这个threshold作为数组容量，然后再重新计算这个值。</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>扩容方法（变更table的长度）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldThr = threshold;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">            newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></span><br><span class=\"line\">        newCap = oldThr;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;               <span class=\"comment\">// zero initial threshold signifies using defaults</span></span><br><span class=\"line\">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">        newThr = (<span class=\"keyword\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> ft = (<span class=\"keyword\">float</span>)newCap * loadFactor;</span><br><span class=\"line\">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"keyword\">float</span>)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                    (<span class=\"keyword\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threshold = newThr;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"rawtypes\"</span>,<span class=\"string\">\"unchecked\"</span>&#125;)</span><br><span class=\"line\">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node[newCap];</span><br><span class=\"line\">    table = newTab;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldTab != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">            Node&lt;K,V&gt; e;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                oldTab[j] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                    ((TreeNode&lt;K,V&gt;)e).split(<span class=\"keyword\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// preserve order</span></span><br><span class=\"line\">                    Node&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; next;</span><br><span class=\"line\">                    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                        next = e.next;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                loHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                loTail.next = e;</span><br><span class=\"line\">                            loTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                hiHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                hiTail.next = e;</span><br><span class=\"line\">                            hiTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        loTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        newTab[j] = loHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        hiTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"_content":"[NG-TOOLS-UI DEMO:NEW](https://www.cool1024.com)\n\n[NG2-ADMIN:OLD](https://cool1024.com)\n","source":"links/index.md","raw":"[NG-TOOLS-UI DEMO:NEW](https://www.cool1024.com)\n\n[NG2-ADMIN:OLD](https://cool1024.com)\n","date":"2019-07-08T08:43:27.816Z","updated":"2019-07-05T04:24:05.796Z","path":"links/index.html","title":"","comments":1,"layout":"page","_id":"cjy2gld7s0006e8wek9yx2otv","content":"<p><a href=\"https://www.cool1024.com\" target=\"_blank\" rel=\"noopener\">NG-TOOLS-UI DEMO:NEW</a></p>\n<p><a href=\"https://cool1024.com\" target=\"_blank\" rel=\"noopener\">NG2-ADMIN:OLD</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.cool1024.com\" target=\"_blank\" rel=\"noopener\">NG-TOOLS-UI DEMO:NEW</a></p>\n<p><a href=\"https://cool1024.com\" target=\"_blank\" rel=\"noopener\">NG2-ADMIN:OLD</a></p>\n"},{"title":"android-content-provider","date":"2019-06-30T13:48:30.000Z","tags":null,"_content":"","source":"new-article/android-content-provider.md","raw":"---\ntitle: android-content-provider\ndate: 2019-06-30 21:48:30\ntags:\n---\n","updated":"2019-07-09T09:34:05.267Z","path":"new-article/android-content-provider.html","comments":1,"layout":"page","_id":"cjy2gld7v0009e8wepxu46ofm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Activity预览","date":"2019-07-11T03:24:49.000Z","tags":["android"],"categories":"Android开发","_content":"\nActivity 是一个应用组件，用户可与其提供的屏幕进行交互，以执行拨打电话、拍摄照片、发送电子邮件或查看地图等操作。 每个 Activity 都会获得一个用于绘制其用户界面的窗口。窗口通常会充满屏幕，但也可小于屏幕并浮动在其他窗口之上。\n\n一个应用通常由多个彼此松散联系的 Activity 组成。 一般会指定应用中的某个 Activity 为“主”Activity，即首次启动应用时呈现给用户的那个 Activity。 而且每个 Activity 均可启动另一个 Activity，以便执行不同的操作。 每次新 Activity 启动时，前一 Activity 便会停止，但系统会在堆栈（“返回栈”）中保留该 Activity。 当新 Activity 启动时，系统会将其推送到返回栈上，并取得用户焦点。 返回栈遵循基本的“后进先出”堆栈机制，因此，当用户完成当前 Activity 并按“返回”按钮时，系统会从堆栈中将其弹出（并销毁），然后恢复前一 Activity。 （任务和返回栈文档中对返回栈有更详细的阐述。）\n\n当一个 Activity 因某个新 Activity 启动而停止时，系统会通过该 Activity 的生命周期回调方法通知其这一状态变化。Activity 因状态变化—系统是创建 Activity、停止 Activity、恢复 Activity 还是销毁 Activity— 而收到的回调方法可能有若干种，每一种回调都会为您提供执行与该状态变化相应的特定操作的机会。 例如，停止时，您的 Activity 应释放任何大型对象，例如网络或数据库连接。 当 Activity 恢复时，您可以重新获取所需资源，并恢复执行中断的操作。 这些状态转变都是 Activity 生命周期的一部分。\n","source":"new-article/android-activity.md","raw":"---\ntitle: Activity预览\ndate: 2019-07-11 11:24:49\ntags: [\"android\"]\ncategories: Android开发\n---\n\nActivity 是一个应用组件，用户可与其提供的屏幕进行交互，以执行拨打电话、拍摄照片、发送电子邮件或查看地图等操作。 每个 Activity 都会获得一个用于绘制其用户界面的窗口。窗口通常会充满屏幕，但也可小于屏幕并浮动在其他窗口之上。\n\n一个应用通常由多个彼此松散联系的 Activity 组成。 一般会指定应用中的某个 Activity 为“主”Activity，即首次启动应用时呈现给用户的那个 Activity。 而且每个 Activity 均可启动另一个 Activity，以便执行不同的操作。 每次新 Activity 启动时，前一 Activity 便会停止，但系统会在堆栈（“返回栈”）中保留该 Activity。 当新 Activity 启动时，系统会将其推送到返回栈上，并取得用户焦点。 返回栈遵循基本的“后进先出”堆栈机制，因此，当用户完成当前 Activity 并按“返回”按钮时，系统会从堆栈中将其弹出（并销毁），然后恢复前一 Activity。 （任务和返回栈文档中对返回栈有更详细的阐述。）\n\n当一个 Activity 因某个新 Activity 启动而停止时，系统会通过该 Activity 的生命周期回调方法通知其这一状态变化。Activity 因状态变化—系统是创建 Activity、停止 Activity、恢复 Activity 还是销毁 Activity— 而收到的回调方法可能有若干种，每一种回调都会为您提供执行与该状态变化相应的特定操作的机会。 例如，停止时，您的 Activity 应释放任何大型对象，例如网络或数据库连接。 当 Activity 恢复时，您可以重新获取所需资源，并恢复执行中断的操作。 这些状态转变都是 Activity 生命周期的一部分。\n","updated":"2019-07-12T03:07:19.459Z","path":"new-article/android-activity.html","comments":1,"layout":"page","_id":"cjy2gld7y000ce8wef8z0wf1n","content":"<p>Activity 是一个应用组件，用户可与其提供的屏幕进行交互，以执行拨打电话、拍摄照片、发送电子邮件或查看地图等操作。 每个 Activity 都会获得一个用于绘制其用户界面的窗口。窗口通常会充满屏幕，但也可小于屏幕并浮动在其他窗口之上。</p>\n<p>一个应用通常由多个彼此松散联系的 Activity 组成。 一般会指定应用中的某个 Activity 为“主”Activity，即首次启动应用时呈现给用户的那个 Activity。 而且每个 Activity 均可启动另一个 Activity，以便执行不同的操作。 每次新 Activity 启动时，前一 Activity 便会停止，但系统会在堆栈（“返回栈”）中保留该 Activity。 当新 Activity 启动时，系统会将其推送到返回栈上，并取得用户焦点。 返回栈遵循基本的“后进先出”堆栈机制，因此，当用户完成当前 Activity 并按“返回”按钮时，系统会从堆栈中将其弹出（并销毁），然后恢复前一 Activity。 （任务和返回栈文档中对返回栈有更详细的阐述。）</p>\n<p>当一个 Activity 因某个新 Activity 启动而停止时，系统会通过该 Activity 的生命周期回调方法通知其这一状态变化。Activity 因状态变化—系统是创建 Activity、停止 Activity、恢复 Activity 还是销毁 Activity— 而收到的回调方法可能有若干种，每一种回调都会为您提供执行与该状态变化相应的特定操作的机会。 例如，停止时，您的 Activity 应释放任何大型对象，例如网络或数据库连接。 当 Activity 恢复时，您可以重新获取所需资源，并恢复执行中断的操作。 这些状态转变都是 Activity 生命周期的一部分。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Activity 是一个应用组件，用户可与其提供的屏幕进行交互，以执行拨打电话、拍摄照片、发送电子邮件或查看地图等操作。 每个 Activity 都会获得一个用于绘制其用户界面的窗口。窗口通常会充满屏幕，但也可小于屏幕并浮动在其他窗口之上。</p>\n<p>一个应用通常由多个彼此松散联系的 Activity 组成。 一般会指定应用中的某个 Activity 为“主”Activity，即首次启动应用时呈现给用户的那个 Activity。 而且每个 Activity 均可启动另一个 Activity，以便执行不同的操作。 每次新 Activity 启动时，前一 Activity 便会停止，但系统会在堆栈（“返回栈”）中保留该 Activity。 当新 Activity 启动时，系统会将其推送到返回栈上，并取得用户焦点。 返回栈遵循基本的“后进先出”堆栈机制，因此，当用户完成当前 Activity 并按“返回”按钮时，系统会从堆栈中将其弹出（并销毁），然后恢复前一 Activity。 （任务和返回栈文档中对返回栈有更详细的阐述。）</p>\n<p>当一个 Activity 因某个新 Activity 启动而停止时，系统会通过该 Activity 的生命周期回调方法通知其这一状态变化。Activity 因状态变化—系统是创建 Activity、停止 Activity、恢复 Activity 还是销毁 Activity— 而收到的回调方法可能有若干种，每一种回调都会为您提供执行与该状态变化相应的特定操作的机会。 例如，停止时，您的 Activity 应释放任何大型对象，例如网络或数据库连接。 当 Activity 恢复时，您可以重新获取所需资源，并恢复执行中断的操作。 这些状态转变都是 Activity 生命周期的一部分。</p>\n"},{"title":"android-service","date":"2019-06-28T09:22:44.000Z","tags":["android","service"],"_content":"\n##### 说明\nService是可以在后台执行长时间运行的应用程序组件，它不提供用户界面。另一个应用程序组件可以启动服务，即使用户切换到另一个应用程序，它也会继续在后台运行。此外，组件可以绑定到服务以与其交互，甚至可以执行进程间通信（IPC）。例如，服务可以从后台处理网络事务，播放音乐，执行文件I/O或与ContentProvider交互。\n\n* 前台服务\n前台服务执行一些对用户来说很明显的操作。例如，音频应用程序将使用前台服务来播放音轨。前台服务必须显示通知。即使用户未与应用程序交互，前台服务也会继续运行。\n\n* 后台服务\n后台服务执行用户未直接注意到的操作。例如，如果应用程序使用服务来压缩其存储，那通常是后台服务。\n\n\n当应用程序调用服务的bindService可以让组件与服务绑定在一起。服务提供了一套客户端与服务交互的接口，允许组件与服务交互，发送请求，接收结果，甚至跨进程通信（IPC）进行交互。服务只要绑定了一个应用程序组件，就会运行。多个组件可同时绑定到服务，但是当所有组件解除绑定时，服务将被销毁。\n\n无论您的服务是启动，绑定还是两者兼而有之，**任何应用程序组件**都可以使用该服务，就像任何组件可以使用Activity一样(通过使用Intent）。但是，您可以在Manifest文件中将服务声明为私有，并阻止从其他应用程序访问。\n\n<div class=\"tips\">警告：服务在其托管进程的主线程中运行; 该服务并没有创建自己的线程，也不会在一个单独的进程，除非另行指定(如自己开辟新线程)。如果您的服务要执行任何CPU密集型工作或阻塞操作（如MP3播放或网络请求），则应在服务中创建新线程以完成该工作。通过使用单独的线程，您可以降低应用程序无响应（ANR）错误的风险，让用户可以继续与当前的Activity交互\n</div>\n\n##### 使用线程还是一个服务？\n服务只是一个可以在后台运行的组件（即使用户没有与您的应用程序交互），因此您应该只在您需要的时候创建服务。\n\n如果您必须在主线程之外执行工作，但仅在用户与您的应用程序交互时，您应该创建一个新线程。例如，如果您想播放一些音乐，但只有在您的活动正在运行时，您可以创建一个线程onCreate()，开始运行它onStart()并将其停止onStop()。还可以考虑使用AsyncTask或HandlerThread 代替传统Thread类。\n\n请记住，如果您确实使用了服务，它默认仍然在应用程序的主线程中运行，因此如果它会执行密集或阻塞操作，您仍应在服务中创建新线程。\n\n","source":"new-article/android-service.md","raw":"---\ntitle: android-service\ndate: 2019-06-28 17:22:44\ntags: [\"android\",\"service\"]\n---\n\n##### 说明\nService是可以在后台执行长时间运行的应用程序组件，它不提供用户界面。另一个应用程序组件可以启动服务，即使用户切换到另一个应用程序，它也会继续在后台运行。此外，组件可以绑定到服务以与其交互，甚至可以执行进程间通信（IPC）。例如，服务可以从后台处理网络事务，播放音乐，执行文件I/O或与ContentProvider交互。\n\n* 前台服务\n前台服务执行一些对用户来说很明显的操作。例如，音频应用程序将使用前台服务来播放音轨。前台服务必须显示通知。即使用户未与应用程序交互，前台服务也会继续运行。\n\n* 后台服务\n后台服务执行用户未直接注意到的操作。例如，如果应用程序使用服务来压缩其存储，那通常是后台服务。\n\n\n当应用程序调用服务的bindService可以让组件与服务绑定在一起。服务提供了一套客户端与服务交互的接口，允许组件与服务交互，发送请求，接收结果，甚至跨进程通信（IPC）进行交互。服务只要绑定了一个应用程序组件，就会运行。多个组件可同时绑定到服务，但是当所有组件解除绑定时，服务将被销毁。\n\n无论您的服务是启动，绑定还是两者兼而有之，**任何应用程序组件**都可以使用该服务，就像任何组件可以使用Activity一样(通过使用Intent）。但是，您可以在Manifest文件中将服务声明为私有，并阻止从其他应用程序访问。\n\n<div class=\"tips\">警告：服务在其托管进程的主线程中运行; 该服务并没有创建自己的线程，也不会在一个单独的进程，除非另行指定(如自己开辟新线程)。如果您的服务要执行任何CPU密集型工作或阻塞操作（如MP3播放或网络请求），则应在服务中创建新线程以完成该工作。通过使用单独的线程，您可以降低应用程序无响应（ANR）错误的风险，让用户可以继续与当前的Activity交互\n</div>\n\n##### 使用线程还是一个服务？\n服务只是一个可以在后台运行的组件（即使用户没有与您的应用程序交互），因此您应该只在您需要的时候创建服务。\n\n如果您必须在主线程之外执行工作，但仅在用户与您的应用程序交互时，您应该创建一个新线程。例如，如果您想播放一些音乐，但只有在您的活动正在运行时，您可以创建一个线程onCreate()，开始运行它onStart()并将其停止onStop()。还可以考虑使用AsyncTask或HandlerThread 代替传统Thread类。\n\n请记住，如果您确实使用了服务，它默认仍然在应用程序的主线程中运行，因此如果它会执行密集或阻塞操作，您仍应在服务中创建新线程。\n\n","updated":"2019-07-05T04:24:05.815Z","path":"new-article/android-service.html","comments":1,"layout":"page","_id":"cjy2gld81000fe8weywmelua0","content":"<h5 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h5><p>Service是可以在后台执行长时间运行的应用程序组件，它不提供用户界面。另一个应用程序组件可以启动服务，即使用户切换到另一个应用程序，它也会继续在后台运行。此外，组件可以绑定到服务以与其交互，甚至可以执行进程间通信（IPC）。例如，服务可以从后台处理网络事务，播放音乐，执行文件I/O或与ContentProvider交互。</p>\n<ul>\n<li><p>前台服务<br>前台服务执行一些对用户来说很明显的操作。例如，音频应用程序将使用前台服务来播放音轨。前台服务必须显示通知。即使用户未与应用程序交互，前台服务也会继续运行。</p>\n</li>\n<li><p>后台服务<br>后台服务执行用户未直接注意到的操作。例如，如果应用程序使用服务来压缩其存储，那通常是后台服务。</p>\n</li>\n</ul>\n<p>当应用程序调用服务的bindService可以让组件与服务绑定在一起。服务提供了一套客户端与服务交互的接口，允许组件与服务交互，发送请求，接收结果，甚至跨进程通信（IPC）进行交互。服务只要绑定了一个应用程序组件，就会运行。多个组件可同时绑定到服务，但是当所有组件解除绑定时，服务将被销毁。</p>\n<p>无论您的服务是启动，绑定还是两者兼而有之，<strong>任何应用程序组件</strong>都可以使用该服务，就像任何组件可以使用Activity一样(通过使用Intent）。但是，您可以在Manifest文件中将服务声明为私有，并阻止从其他应用程序访问。</p>\n<div class=\"tips\">警告：服务在其托管进程的主线程中运行; 该服务并没有创建自己的线程，也不会在一个单独的进程，除非另行指定(如自己开辟新线程)。如果您的服务要执行任何CPU密集型工作或阻塞操作（如MP3播放或网络请求），则应在服务中创建新线程以完成该工作。通过使用单独的线程，您可以降低应用程序无响应（ANR）错误的风险，让用户可以继续与当前的Activity交互<br></div>\n\n<h5 id=\"使用线程还是一个服务？\"><a href=\"#使用线程还是一个服务？\" class=\"headerlink\" title=\"使用线程还是一个服务？\"></a>使用线程还是一个服务？</h5><p>服务只是一个可以在后台运行的组件（即使用户没有与您的应用程序交互），因此您应该只在您需要的时候创建服务。</p>\n<p>如果您必须在主线程之外执行工作，但仅在用户与您的应用程序交互时，您应该创建一个新线程。例如，如果您想播放一些音乐，但只有在您的活动正在运行时，您可以创建一个线程onCreate()，开始运行它onStart()并将其停止onStop()。还可以考虑使用AsyncTask或HandlerThread 代替传统Thread类。</p>\n<p>请记住，如果您确实使用了服务，它默认仍然在应用程序的主线程中运行，因此如果它会执行密集或阻塞操作，您仍应在服务中创建新线程。</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h5><p>Service是可以在后台执行长时间运行的应用程序组件，它不提供用户界面。另一个应用程序组件可以启动服务，即使用户切换到另一个应用程序，它也会继续在后台运行。此外，组件可以绑定到服务以与其交互，甚至可以执行进程间通信（IPC）。例如，服务可以从后台处理网络事务，播放音乐，执行文件I/O或与ContentProvider交互。</p>\n<ul>\n<li><p>前台服务<br>前台服务执行一些对用户来说很明显的操作。例如，音频应用程序将使用前台服务来播放音轨。前台服务必须显示通知。即使用户未与应用程序交互，前台服务也会继续运行。</p>\n</li>\n<li><p>后台服务<br>后台服务执行用户未直接注意到的操作。例如，如果应用程序使用服务来压缩其存储，那通常是后台服务。</p>\n</li>\n</ul>\n<p>当应用程序调用服务的bindService可以让组件与服务绑定在一起。服务提供了一套客户端与服务交互的接口，允许组件与服务交互，发送请求，接收结果，甚至跨进程通信（IPC）进行交互。服务只要绑定了一个应用程序组件，就会运行。多个组件可同时绑定到服务，但是当所有组件解除绑定时，服务将被销毁。</p>\n<p>无论您的服务是启动，绑定还是两者兼而有之，<strong>任何应用程序组件</strong>都可以使用该服务，就像任何组件可以使用Activity一样(通过使用Intent）。但是，您可以在Manifest文件中将服务声明为私有，并阻止从其他应用程序访问。</p>\n<div class=\"tips\">警告：服务在其托管进程的主线程中运行; 该服务并没有创建自己的线程，也不会在一个单独的进程，除非另行指定(如自己开辟新线程)。如果您的服务要执行任何CPU密集型工作或阻塞操作（如MP3播放或网络请求），则应在服务中创建新线程以完成该工作。通过使用单独的线程，您可以降低应用程序无响应（ANR）错误的风险，让用户可以继续与当前的Activity交互<br></div>\n\n<h5 id=\"使用线程还是一个服务？\"><a href=\"#使用线程还是一个服务？\" class=\"headerlink\" title=\"使用线程还是一个服务？\"></a>使用线程还是一个服务？</h5><p>服务只是一个可以在后台运行的组件（即使用户没有与您的应用程序交互），因此您应该只在您需要的时候创建服务。</p>\n<p>如果您必须在主线程之外执行工作，但仅在用户与您的应用程序交互时，您应该创建一个新线程。例如，如果您想播放一些音乐，但只有在您的活动正在运行时，您可以创建一个线程onCreate()，开始运行它onStart()并将其停止onStop()。还可以考虑使用AsyncTask或HandlerThread 代替传统Thread类。</p>\n<p>请记住，如果您确实使用了服务，它默认仍然在应用程序的主线程中运行，因此如果它会执行密集或阻塞操作，您仍应在服务中创建新线程。</p>\n"},{"title":"svg","date":"2019-04-25T09:47:42.000Z","tags":null,"_content":"####  拖拽\n```html\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>Pad</title>\n\t<meta charset=\"utf-8\">\n\t<style>\n\t</style>\n</head>\n<body>\n\t<svg id=\"pad\" width=\"1000\" height=\"500\" style=\"border:1px solid black;\"></svg>\n</body>\n<script type=\"text/javascript\" src=\"snap.svg-min.js\"></script>\n<script type=\"text/javascript\">\n    const pad = Snap('#pad');\n\n    const move = function(dx,dy){\n    \tthis.attr({transform:this.data+(this.data?\"T\":\"t\")+[dx, dy]});\n    };\n\n    const before = function(){\n    \tthis.data = this.transform().local;\n    };\n\n    const end = function(){};\n\n    const rect=pad.paper.rect(100,100,100,200).attr({fill:\"red\"});\n    \n    rect.drag(move,before,end);\n\t\n</script>\n</html>\n```\n","source":"new-article/svg.md","raw":"---\ntitle: svg\ndate: 2019-04-25 17:47:42\ntags:\n---\n####  拖拽\n```html\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>Pad</title>\n\t<meta charset=\"utf-8\">\n\t<style>\n\t</style>\n</head>\n<body>\n\t<svg id=\"pad\" width=\"1000\" height=\"500\" style=\"border:1px solid black;\"></svg>\n</body>\n<script type=\"text/javascript\" src=\"snap.svg-min.js\"></script>\n<script type=\"text/javascript\">\n    const pad = Snap('#pad');\n\n    const move = function(dx,dy){\n    \tthis.attr({transform:this.data+(this.data?\"T\":\"t\")+[dx, dy]});\n    };\n\n    const before = function(){\n    \tthis.data = this.transform().local;\n    };\n\n    const end = function(){};\n\n    const rect=pad.paper.rect(100,100,100,200).attr({fill:\"red\"});\n    \n    rect.drag(move,before,end);\n\t\n</script>\n</html>\n```\n","updated":"2019-07-05T04:24:05.814Z","path":"new-article/svg.html","comments":1,"layout":"page","_id":"cjy2gld83000he8weuqx6txoq","content":"<h4 id=\"拖拽\"><a href=\"#拖拽\" class=\"headerlink\" title=\"拖拽\"></a>拖拽</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Pad<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pad\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"1000\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border:1px solid black;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"snap.svg-min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> pad = Snap(<span class=\"string\">'#pad'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> move = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dx,dy</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    \t<span class=\"keyword\">this</span>.attr(&#123;<span class=\"attr\">transform</span>:<span class=\"keyword\">this</span>.data+(<span class=\"keyword\">this</span>.data?<span class=\"string\">\"T\"</span>:<span class=\"string\">\"t\"</span>)+[dx, dy]&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> before = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    \t<span class=\"keyword\">this</span>.data = <span class=\"keyword\">this</span>.transform().local;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> end = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> rect=pad.paper.rect(<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">200</span>).attr(&#123;<span class=\"attr\">fill</span>:<span class=\"string\">\"red\"</span>&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    rect.drag(move,before,end);</span></span><br><span class=\"line\"><span class=\"undefined\">\t</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"拖拽\"><a href=\"#拖拽\" class=\"headerlink\" title=\"拖拽\"></a>拖拽</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Pad<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pad\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"1000\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border:1px solid black;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"snap.svg-min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> pad = Snap(<span class=\"string\">'#pad'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> move = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dx,dy</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    \t<span class=\"keyword\">this</span>.attr(&#123;<span class=\"attr\">transform</span>:<span class=\"keyword\">this</span>.data+(<span class=\"keyword\">this</span>.data?<span class=\"string\">\"T\"</span>:<span class=\"string\">\"t\"</span>)+[dx, dy]&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> before = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    \t<span class=\"keyword\">this</span>.data = <span class=\"keyword\">this</span>.transform().local;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> end = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> rect=pad.paper.rect(<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">200</span>).attr(&#123;<span class=\"attr\">fill</span>:<span class=\"string\">\"red\"</span>&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    rect.drag(move,before,end);</span></span><br><span class=\"line\"><span class=\"undefined\">\t</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"jectpack-paging-datasource","date":"2019-06-06T07:28:29.000Z","tags":["jetpack","paging"],"_content":"\n## 数据源 DataSource\n分页的数据都取之于数据源，我们需要实现对应的获取方法，PagedList会从DataSource中获取数据。\n\n### 数据源的类型\n1. ItemKeyedDataSource 每次加载数据需要根据之前加载的数据的ID来进行加载（`select * form video where id > ?? limit ??`）\n```kotlin\nclass VideoDataSource : ItemKeyedDataSource<Int, Video>() {\n\n    override fun getKey(item: Video): Int = item.id\n\n    override fun loadInitial(params: LoadInitialParams<Int>, callback: LoadInitialCallback<Video>) {\n\n        // 初次加载数据\n\n        Api.getVideos(\n            // 加载后面的数据\n            loadMode = \"after\",\n            // 起始的视频ID（我们要获取这个视频后面的视频），如果没有那么默认为0从头开始\n            currentVideoId = params.requestedInitialKey,\n            // 需要获取的数据量\n            requestSize = params.requestedLoadSize\n        ).onSuccess { videos ->\n            // 加载成功后使用callback.onResult把加载的数据传递出去\n            callback.onResult(videos)\n        }\n    }\n\n    override fun loadAfter(params: LoadParams<Int>, callback: LoadCallback<Video>) {\n\n        //  向前加载数据（类似上一页）\n\n        Api.getVideos(\n            // 加载前面的数据\n            loadMode = \"before\",\n            // 当前最前面的视频ID（我们要获取这个视频前面的视频）\n            currentVideoId = params.key,\n            // 需要获取的数据量\n            requestSize = params.requestedLoadSize\n        ).onSuccess { videos ->\n            // 加载成功后使用callback.onResult把加载的数据传递出去\n            callback.onResult(videos)\n        }\n    }\n\n    override fun loadBefore(params: LoadParams<Int>, callback: LoadCallback<Video>) {\n\n        //  向后加载数据（类似下一页）\n\n        Api.getVideos(\n            // 加载前面的数据\n            loadMode = \"after\",\n            // 当前最后面的视频ID（我们要获取这个视频后面的视频）\n            currentVideoId = params.key,\n            // 需要获取的数据量\n            requestSize = params.requestedLoadSize\n        ).onSuccess { videos ->\n            // 加载成功后使用callback.onResult把加载的数据传递出去\n            callback.onResult(videos)\n        }\n    }\n}\n```\n\n2. PageKeyedDataSource 经典的上一页，下一页分页（类似数据根据页码来获取）\n....\n....\n等待完善","source":"new-article/jectpack-paging-datasource.md","raw":"---\ntitle: jectpack-paging-datasource\ndate: 2019-06-06 15:28:29\ntags: ['jetpack','paging']\n---\n\n## 数据源 DataSource\n分页的数据都取之于数据源，我们需要实现对应的获取方法，PagedList会从DataSource中获取数据。\n\n### 数据源的类型\n1. ItemKeyedDataSource 每次加载数据需要根据之前加载的数据的ID来进行加载（`select * form video where id > ?? limit ??`）\n```kotlin\nclass VideoDataSource : ItemKeyedDataSource<Int, Video>() {\n\n    override fun getKey(item: Video): Int = item.id\n\n    override fun loadInitial(params: LoadInitialParams<Int>, callback: LoadInitialCallback<Video>) {\n\n        // 初次加载数据\n\n        Api.getVideos(\n            // 加载后面的数据\n            loadMode = \"after\",\n            // 起始的视频ID（我们要获取这个视频后面的视频），如果没有那么默认为0从头开始\n            currentVideoId = params.requestedInitialKey,\n            // 需要获取的数据量\n            requestSize = params.requestedLoadSize\n        ).onSuccess { videos ->\n            // 加载成功后使用callback.onResult把加载的数据传递出去\n            callback.onResult(videos)\n        }\n    }\n\n    override fun loadAfter(params: LoadParams<Int>, callback: LoadCallback<Video>) {\n\n        //  向前加载数据（类似上一页）\n\n        Api.getVideos(\n            // 加载前面的数据\n            loadMode = \"before\",\n            // 当前最前面的视频ID（我们要获取这个视频前面的视频）\n            currentVideoId = params.key,\n            // 需要获取的数据量\n            requestSize = params.requestedLoadSize\n        ).onSuccess { videos ->\n            // 加载成功后使用callback.onResult把加载的数据传递出去\n            callback.onResult(videos)\n        }\n    }\n\n    override fun loadBefore(params: LoadParams<Int>, callback: LoadCallback<Video>) {\n\n        //  向后加载数据（类似下一页）\n\n        Api.getVideos(\n            // 加载前面的数据\n            loadMode = \"after\",\n            // 当前最后面的视频ID（我们要获取这个视频后面的视频）\n            currentVideoId = params.key,\n            // 需要获取的数据量\n            requestSize = params.requestedLoadSize\n        ).onSuccess { videos ->\n            // 加载成功后使用callback.onResult把加载的数据传递出去\n            callback.onResult(videos)\n        }\n    }\n}\n```\n\n2. PageKeyedDataSource 经典的上一页，下一页分页（类似数据根据页码来获取）\n....\n....\n等待完善","updated":"2019-07-09T05:03:18.986Z","path":"new-article/jectpack-paging-datasource.html","comments":1,"layout":"page","_id":"cjy2gld8a000re8wesglrt594","content":"<h2 id=\"数据源-DataSource\"><a href=\"#数据源-DataSource\" class=\"headerlink\" title=\"数据源 DataSource\"></a>数据源 DataSource</h2><p>分页的数据都取之于数据源，我们需要实现对应的获取方法，PagedList会从DataSource中获取数据。</p>\n<h3 id=\"数据源的类型\"><a href=\"#数据源的类型\" class=\"headerlink\" title=\"数据源的类型\"></a>数据源的类型</h3><ol>\n<li><p>ItemKeyedDataSource 每次加载数据需要根据之前加载的数据的ID来进行加载（<code>select * form video where id &gt; ?? limit ??</code>）</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VideoDataSource</span> : <span class=\"type\">ItemKeyedDataSource</span>&lt;<span class=\"type\">Int, Video</span>&gt;</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getKey</span><span class=\"params\">(item: <span class=\"type\">Video</span>)</span></span>: <span class=\"built_in\">Int</span> = item.id</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadInitial</span><span class=\"params\">(params: <span class=\"type\">LoadInitialParams</span>&lt;<span class=\"type\">Int</span>&gt;, callback: <span class=\"type\">LoadInitialCallback</span>&lt;<span class=\"type\">Video</span>&gt;)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 初次加载数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Api.getVideos(</span><br><span class=\"line\">            <span class=\"comment\">// 加载后面的数据</span></span><br><span class=\"line\">            loadMode = <span class=\"string\">\"after\"</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 起始的视频ID（我们要获取这个视频后面的视频），如果没有那么默认为0从头开始</span></span><br><span class=\"line\">            currentVideoId = params.requestedInitialKey,</span><br><span class=\"line\">            <span class=\"comment\">// 需要获取的数据量</span></span><br><span class=\"line\">            requestSize = params.requestedLoadSize</span><br><span class=\"line\">        ).onSuccess &#123; videos -&gt;</span><br><span class=\"line\">            <span class=\"comment\">// 加载成功后使用callback.onResult把加载的数据传递出去</span></span><br><span class=\"line\">            callback.onResult(videos)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadAfter</span><span class=\"params\">(params: <span class=\"type\">LoadParams</span>&lt;<span class=\"type\">Int</span>&gt;, callback: <span class=\"type\">LoadCallback</span>&lt;<span class=\"type\">Video</span>&gt;)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//  向前加载数据（类似上一页）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Api.getVideos(</span><br><span class=\"line\">            <span class=\"comment\">// 加载前面的数据</span></span><br><span class=\"line\">            loadMode = <span class=\"string\">\"before\"</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 当前最前面的视频ID（我们要获取这个视频前面的视频）</span></span><br><span class=\"line\">            currentVideoId = params.key,</span><br><span class=\"line\">            <span class=\"comment\">// 需要获取的数据量</span></span><br><span class=\"line\">            requestSize = params.requestedLoadSize</span><br><span class=\"line\">        ).onSuccess &#123; videos -&gt;</span><br><span class=\"line\">            <span class=\"comment\">// 加载成功后使用callback.onResult把加载的数据传递出去</span></span><br><span class=\"line\">            callback.onResult(videos)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadBefore</span><span class=\"params\">(params: <span class=\"type\">LoadParams</span>&lt;<span class=\"type\">Int</span>&gt;, callback: <span class=\"type\">LoadCallback</span>&lt;<span class=\"type\">Video</span>&gt;)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//  向后加载数据（类似下一页）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Api.getVideos(</span><br><span class=\"line\">            <span class=\"comment\">// 加载前面的数据</span></span><br><span class=\"line\">            loadMode = <span class=\"string\">\"after\"</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 当前最后面的视频ID（我们要获取这个视频后面的视频）</span></span><br><span class=\"line\">            currentVideoId = params.key,</span><br><span class=\"line\">            <span class=\"comment\">// 需要获取的数据量</span></span><br><span class=\"line\">            requestSize = params.requestedLoadSize</span><br><span class=\"line\">        ).onSuccess &#123; videos -&gt;</span><br><span class=\"line\">            <span class=\"comment\">// 加载成功后使用callback.onResult把加载的数据传递出去</span></span><br><span class=\"line\">            callback.onResult(videos)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>PageKeyedDataSource 经典的上一页，下一页分页（类似数据根据页码来获取）<br>….<br>….<br>等待完善</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据源-DataSource\"><a href=\"#数据源-DataSource\" class=\"headerlink\" title=\"数据源 DataSource\"></a>数据源 DataSource</h2><p>分页的数据都取之于数据源，我们需要实现对应的获取方法，PagedList会从DataSource中获取数据。</p>\n<h3 id=\"数据源的类型\"><a href=\"#数据源的类型\" class=\"headerlink\" title=\"数据源的类型\"></a>数据源的类型</h3><ol>\n<li><p>ItemKeyedDataSource 每次加载数据需要根据之前加载的数据的ID来进行加载（<code>select * form video where id &gt; ?? limit ??</code>）</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VideoDataSource</span> : <span class=\"type\">ItemKeyedDataSource</span>&lt;<span class=\"type\">Int, Video</span>&gt;</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getKey</span><span class=\"params\">(item: <span class=\"type\">Video</span>)</span></span>: <span class=\"built_in\">Int</span> = item.id</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadInitial</span><span class=\"params\">(params: <span class=\"type\">LoadInitialParams</span>&lt;<span class=\"type\">Int</span>&gt;, callback: <span class=\"type\">LoadInitialCallback</span>&lt;<span class=\"type\">Video</span>&gt;)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 初次加载数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Api.getVideos(</span><br><span class=\"line\">            <span class=\"comment\">// 加载后面的数据</span></span><br><span class=\"line\">            loadMode = <span class=\"string\">\"after\"</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 起始的视频ID（我们要获取这个视频后面的视频），如果没有那么默认为0从头开始</span></span><br><span class=\"line\">            currentVideoId = params.requestedInitialKey,</span><br><span class=\"line\">            <span class=\"comment\">// 需要获取的数据量</span></span><br><span class=\"line\">            requestSize = params.requestedLoadSize</span><br><span class=\"line\">        ).onSuccess &#123; videos -&gt;</span><br><span class=\"line\">            <span class=\"comment\">// 加载成功后使用callback.onResult把加载的数据传递出去</span></span><br><span class=\"line\">            callback.onResult(videos)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadAfter</span><span class=\"params\">(params: <span class=\"type\">LoadParams</span>&lt;<span class=\"type\">Int</span>&gt;, callback: <span class=\"type\">LoadCallback</span>&lt;<span class=\"type\">Video</span>&gt;)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//  向前加载数据（类似上一页）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Api.getVideos(</span><br><span class=\"line\">            <span class=\"comment\">// 加载前面的数据</span></span><br><span class=\"line\">            loadMode = <span class=\"string\">\"before\"</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 当前最前面的视频ID（我们要获取这个视频前面的视频）</span></span><br><span class=\"line\">            currentVideoId = params.key,</span><br><span class=\"line\">            <span class=\"comment\">// 需要获取的数据量</span></span><br><span class=\"line\">            requestSize = params.requestedLoadSize</span><br><span class=\"line\">        ).onSuccess &#123; videos -&gt;</span><br><span class=\"line\">            <span class=\"comment\">// 加载成功后使用callback.onResult把加载的数据传递出去</span></span><br><span class=\"line\">            callback.onResult(videos)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadBefore</span><span class=\"params\">(params: <span class=\"type\">LoadParams</span>&lt;<span class=\"type\">Int</span>&gt;, callback: <span class=\"type\">LoadCallback</span>&lt;<span class=\"type\">Video</span>&gt;)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//  向后加载数据（类似下一页）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Api.getVideos(</span><br><span class=\"line\">            <span class=\"comment\">// 加载前面的数据</span></span><br><span class=\"line\">            loadMode = <span class=\"string\">\"after\"</span>,</span><br><span class=\"line\">            <span class=\"comment\">// 当前最后面的视频ID（我们要获取这个视频后面的视频）</span></span><br><span class=\"line\">            currentVideoId = params.key,</span><br><span class=\"line\">            <span class=\"comment\">// 需要获取的数据量</span></span><br><span class=\"line\">            requestSize = params.requestedLoadSize</span><br><span class=\"line\">        ).onSuccess &#123; videos -&gt;</span><br><span class=\"line\">            <span class=\"comment\">// 加载成功后使用callback.onResult把加载的数据传递出去</span></span><br><span class=\"line\">            callback.onResult(videos)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>PageKeyedDataSource 经典的上一页，下一页分页（类似数据根据页码来获取）<br>….<br>….<br>等待完善</p>\n</li>\n</ol>\n"}],"Post":[{"title":"Android-有效的加载大图","date":"2019-06-26T00:48:31.000Z","_content":"\n有时我们需要显示一张很大的图片，按常规的方式直接载入很容易出现OOM(out of  memory);这是由于Android系统对内存的使用有严格的限制（就那么点可怜的内存）\n<!-- more -->\n\n<div class=\"tip tip-info\">为了维持多任务的功能环境，Android为每一个app都设置了一个硬性的heap size限制。准确的heap size限制会因为不同设备的不同RAM大小而各有差异。如果你的app已经到了heap的限制大小并且再尝试分配内存的话，会引起OutOfMemoryError的错误。\n</div>\n\n1.使用adb查看设备对内存的限制\n\n// 单个应用可用最大内存主要对应的是这个值,如果值是0代表无限制（（仅仅针对dalvik堆，不包括native堆））\n`adb shell getprop dalvik.vm.heapgrowthlimit`\n\n// 表示单个进程可用的最大内存，但如果存在heapgrowthlimit参数，则以heapgrowthlimit为准；heapsize表示不受控情况下的极限堆，表示单个虚拟机或单个进程可用的最大内存。而android上的应用是带有独立虚拟机的，也就是每开一个应用就会打开一个独立的虚拟机（这样设计就会在单个程序崩溃的情况下不会导致整个系统的崩溃）。\n`adb shell getprop dalvik.vm.heapsize`\n\n// 应用启动时申请的初始内存空间大小\n`adb shell getprop dalvik.vm.heapstartsize`\n\n<img width=\"400\" src=\"/images/jetpack/adb-memory.png\">\n\n2.突破内存限制\nheapsize表示不受控情况下的极限堆，表示单个虚拟机或单个进程可用的最大内存。而android上的应用是带有独立虚拟机的，也就是每开一个应用就会打开一个独立的虚拟机（这样设计就会在单个程序崩溃的情况下不会导致整个系统的崩溃）。在android开发中，如果要使用大堆，需要在manifest中指定android:largeHeap为true，这样dvm heap最大可达heapsize。\n\n3.使用android studio中的profiler查看当前应用的内存使用情况\n<img width=\"200\" src=\"/images/jetpack/adb-memory-profiler.png\">\n\nNative表示C或C++代码分配的内存(即使App没有native层，调用framework代码时，也有可能触发分配native内存)；\n\nGraphics表示图像相关缓存队列占用的内存；\n\nStack表示native和java占用的栈内存；\n\nCode表示代码、资源文件、库文件等占用的内存；\n\nOthers表示无法明确分类的内存；\n\nAllocated表示Java或Kotlin分配对象的数量(Android8.0系统内置了统计工具，Memory Profiler可以得到整个app启动后分配对象的数量）\n\n##### 将位图加载到内存中\n```kotlin\nval bmp = BitmapFactory.decodeResource(resources, R.drawable.splash)\ndebugInfo(\"内存大小\", bmp.byteCount)\n```\n\n我们可以发现使用的内存明显大于图片在磁盘中的大小，这是因为当图像在磁盘上时（以JPG，PNG或类似格式存储），图像将被压缩。将图像加载到内存后，它不再被压缩，占用所有像素所需的内存。\n\n获取图像信息（尺寸）而不加载图像本身\n```Kotlin\nval options = BitmapFactory.Options().apply {\n    // 设置这个参数为true,代表我们不需要加载图片到内存，而只获取它的基本信息\n    inJustDecodeBounds = true,\n    inS\n}\nBitmapFactory.decodeResource(\n    resources,\n    R.drawable.splash,\n    options\n)\ndebugInfo(\"图片尺寸:${options.outWidth},${options.outHeight}\")// 图片尺寸:900,1464\n```\n\n缩小图片的尺寸来减少内存的使用，很多时候我们不需要使用原始图片（如列表显示缩略图,用户设备分辨率较低,视图尺寸很小)，我们可以根据具体情况缩小图片的尺寸\n```Kotlin\nval options = BitmapFactory.Options().apply {\n    // 设置这个参数为true,代表我们不需要加载图片到内存，而只获取它的基本信息\n    inJustDecodeBounds = true\n    // 比例因子，2代表尺寸会被缩小2倍，1000x1000 -> 500x500\n    inSampleSize = 2\n}\nBitmapFactory.decodeResource(\n    resources,\n    R.drawable.splash,\n    options\n)\ndebugInfo(\"图片尺寸:${options.outWidth},${options.outHeight}\") // 图片尺寸:450,732\n\n```\n\n计算一个合适的inSampleSize,来自 [android官方文档](https://developer.android.com/topic/performance/graphics/load-bitmap.html#load-bitmap)\n```Kotlin\nfun calculateInSampleSize(options: BitmapFactory.Options, reqWidth: Int, reqHeight: Int): Int {\n    // Raw height and width of image\n    val (height: Int, width: Int) = options.run { outHeight to outWidth }\n    var inSampleSize = 1\n\n    if (height > reqHeight || width > reqWidth) {\n\n        val halfHeight: Int = height / 2\n        val halfWidth: Int = width / 2\n\n        // Calculate the largest inSampleSize value that is a power of 2 and keeps both\n        // height and width larger than the requested height and width.\n        while (halfHeight / inSampleSize >= reqHeight && halfWidth / inSampleSize >= reqWidth) {\n            inSampleSize *= 2\n        }\n    }\n\n    return inSampleSize\n}\n```\n\n##### 减小图片占用的存储空间\n如果图片存储在手机本地，过多的图片图片缓存资源会很快让手机空间不足。我们应该尽量使用压缩效果较好的图片格式，如webp,jpeg。\n```Kotlin\nByteArrayOutputStream bos = new ByteArrayOutputStream（）; \n// 我们设置图片质量为100，与原图相同质量\nbitmap.compress（Bitmap.CompressFormat.JPEG，100，bos）; \nbyte [] bitmapdata = bos.toByteArray（）;\n...保存文件相关代码略...\n```\n\n##### 尺寸巨大的图片（地图，星空图）\n这类图片不可能通过缩小尺寸显示来减少内存的时候，此时我们可以尝试使用加载部分区域显示详情\n1. 多个等级的缩略图\n在显示图片全貌的时候（用户屏幕就那么大，直接显示全貌无法查看细节），我们可以根据用户手机的分变率加载对应清晰度的缩略图进行显示而不是原图（如x1,x2,x3...多个级别的全景缩略），缩略图应该和原图一起下载，而不是在显示的时候通过原图生成（耗费大量时间，造成设备卡顿，闪退）\n2. 查看局部细节\n用户放大图片局部查看细节时，如果使用缩略图不能满足细节显示时，开始使用原图进行局部加载\n``` \nval imageInputStream = ....\nval brd = BitmapRegionDecoder.newInstance(imageInputStream, false)\n\n// 更具要显示的区域获取局部Bitmap，一个Rect区域，options根据显示要求设置,同上的BitmapFactory.Options\nval bmp = bitmapRegionDecoder.decodeRegion(Rect(0, 0, 40, 40), options)\n\n```\n\n<div class=\"tip tip-info\">注意：有几个库遵循加载图像的最佳实践。您可以在应用中使用这些库以最优化的方式加载图像。我们建议使用 Glide 库，尽可能快速，平稳地加载和显示图像。其他受欢迎的图像加载库包括Square的Picasso和 Facebook的Fresco。这些库简化了与Android上的位图和其他类型图像相关的大多数复杂任务。\n</div>","source":"_posts/Android-Image-Load.md","raw":"---\ntitle: Android-有效的加载大图\ndate: 2019-06-26 08:48:31\ntags: [\"android\",\"Image\"]\n---\n\n有时我们需要显示一张很大的图片，按常规的方式直接载入很容易出现OOM(out of  memory);这是由于Android系统对内存的使用有严格的限制（就那么点可怜的内存）\n<!-- more -->\n\n<div class=\"tip tip-info\">为了维持多任务的功能环境，Android为每一个app都设置了一个硬性的heap size限制。准确的heap size限制会因为不同设备的不同RAM大小而各有差异。如果你的app已经到了heap的限制大小并且再尝试分配内存的话，会引起OutOfMemoryError的错误。\n</div>\n\n1.使用adb查看设备对内存的限制\n\n// 单个应用可用最大内存主要对应的是这个值,如果值是0代表无限制（（仅仅针对dalvik堆，不包括native堆））\n`adb shell getprop dalvik.vm.heapgrowthlimit`\n\n// 表示单个进程可用的最大内存，但如果存在heapgrowthlimit参数，则以heapgrowthlimit为准；heapsize表示不受控情况下的极限堆，表示单个虚拟机或单个进程可用的最大内存。而android上的应用是带有独立虚拟机的，也就是每开一个应用就会打开一个独立的虚拟机（这样设计就会在单个程序崩溃的情况下不会导致整个系统的崩溃）。\n`adb shell getprop dalvik.vm.heapsize`\n\n// 应用启动时申请的初始内存空间大小\n`adb shell getprop dalvik.vm.heapstartsize`\n\n<img width=\"400\" src=\"/images/jetpack/adb-memory.png\">\n\n2.突破内存限制\nheapsize表示不受控情况下的极限堆，表示单个虚拟机或单个进程可用的最大内存。而android上的应用是带有独立虚拟机的，也就是每开一个应用就会打开一个独立的虚拟机（这样设计就会在单个程序崩溃的情况下不会导致整个系统的崩溃）。在android开发中，如果要使用大堆，需要在manifest中指定android:largeHeap为true，这样dvm heap最大可达heapsize。\n\n3.使用android studio中的profiler查看当前应用的内存使用情况\n<img width=\"200\" src=\"/images/jetpack/adb-memory-profiler.png\">\n\nNative表示C或C++代码分配的内存(即使App没有native层，调用framework代码时，也有可能触发分配native内存)；\n\nGraphics表示图像相关缓存队列占用的内存；\n\nStack表示native和java占用的栈内存；\n\nCode表示代码、资源文件、库文件等占用的内存；\n\nOthers表示无法明确分类的内存；\n\nAllocated表示Java或Kotlin分配对象的数量(Android8.0系统内置了统计工具，Memory Profiler可以得到整个app启动后分配对象的数量）\n\n##### 将位图加载到内存中\n```kotlin\nval bmp = BitmapFactory.decodeResource(resources, R.drawable.splash)\ndebugInfo(\"内存大小\", bmp.byteCount)\n```\n\n我们可以发现使用的内存明显大于图片在磁盘中的大小，这是因为当图像在磁盘上时（以JPG，PNG或类似格式存储），图像将被压缩。将图像加载到内存后，它不再被压缩，占用所有像素所需的内存。\n\n获取图像信息（尺寸）而不加载图像本身\n```Kotlin\nval options = BitmapFactory.Options().apply {\n    // 设置这个参数为true,代表我们不需要加载图片到内存，而只获取它的基本信息\n    inJustDecodeBounds = true,\n    inS\n}\nBitmapFactory.decodeResource(\n    resources,\n    R.drawable.splash,\n    options\n)\ndebugInfo(\"图片尺寸:${options.outWidth},${options.outHeight}\")// 图片尺寸:900,1464\n```\n\n缩小图片的尺寸来减少内存的使用，很多时候我们不需要使用原始图片（如列表显示缩略图,用户设备分辨率较低,视图尺寸很小)，我们可以根据具体情况缩小图片的尺寸\n```Kotlin\nval options = BitmapFactory.Options().apply {\n    // 设置这个参数为true,代表我们不需要加载图片到内存，而只获取它的基本信息\n    inJustDecodeBounds = true\n    // 比例因子，2代表尺寸会被缩小2倍，1000x1000 -> 500x500\n    inSampleSize = 2\n}\nBitmapFactory.decodeResource(\n    resources,\n    R.drawable.splash,\n    options\n)\ndebugInfo(\"图片尺寸:${options.outWidth},${options.outHeight}\") // 图片尺寸:450,732\n\n```\n\n计算一个合适的inSampleSize,来自 [android官方文档](https://developer.android.com/topic/performance/graphics/load-bitmap.html#load-bitmap)\n```Kotlin\nfun calculateInSampleSize(options: BitmapFactory.Options, reqWidth: Int, reqHeight: Int): Int {\n    // Raw height and width of image\n    val (height: Int, width: Int) = options.run { outHeight to outWidth }\n    var inSampleSize = 1\n\n    if (height > reqHeight || width > reqWidth) {\n\n        val halfHeight: Int = height / 2\n        val halfWidth: Int = width / 2\n\n        // Calculate the largest inSampleSize value that is a power of 2 and keeps both\n        // height and width larger than the requested height and width.\n        while (halfHeight / inSampleSize >= reqHeight && halfWidth / inSampleSize >= reqWidth) {\n            inSampleSize *= 2\n        }\n    }\n\n    return inSampleSize\n}\n```\n\n##### 减小图片占用的存储空间\n如果图片存储在手机本地，过多的图片图片缓存资源会很快让手机空间不足。我们应该尽量使用压缩效果较好的图片格式，如webp,jpeg。\n```Kotlin\nByteArrayOutputStream bos = new ByteArrayOutputStream（）; \n// 我们设置图片质量为100，与原图相同质量\nbitmap.compress（Bitmap.CompressFormat.JPEG，100，bos）; \nbyte [] bitmapdata = bos.toByteArray（）;\n...保存文件相关代码略...\n```\n\n##### 尺寸巨大的图片（地图，星空图）\n这类图片不可能通过缩小尺寸显示来减少内存的时候，此时我们可以尝试使用加载部分区域显示详情\n1. 多个等级的缩略图\n在显示图片全貌的时候（用户屏幕就那么大，直接显示全貌无法查看细节），我们可以根据用户手机的分变率加载对应清晰度的缩略图进行显示而不是原图（如x1,x2,x3...多个级别的全景缩略），缩略图应该和原图一起下载，而不是在显示的时候通过原图生成（耗费大量时间，造成设备卡顿，闪退）\n2. 查看局部细节\n用户放大图片局部查看细节时，如果使用缩略图不能满足细节显示时，开始使用原图进行局部加载\n``` \nval imageInputStream = ....\nval brd = BitmapRegionDecoder.newInstance(imageInputStream, false)\n\n// 更具要显示的区域获取局部Bitmap，一个Rect区域，options根据显示要求设置,同上的BitmapFactory.Options\nval bmp = bitmapRegionDecoder.decodeRegion(Rect(0, 0, 40, 40), options)\n\n```\n\n<div class=\"tip tip-info\">注意：有几个库遵循加载图像的最佳实践。您可以在应用中使用这些库以最优化的方式加载图像。我们建议使用 Glide 库，尽可能快速，平稳地加载和显示图像。其他受欢迎的图像加载库包括Square的Picasso和 Facebook的Fresco。这些库简化了与Android上的位图和其他类型图像相关的大多数复杂任务。\n</div>","slug":"Android-Image-Load","published":1,"updated":"2019-07-09T04:38:36.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld7e0000e8wec4nr3vdb","content":"<p>有时我们需要显示一张很大的图片，按常规的方式直接载入很容易出现OOM(out of  memory);这是由于Android系统对内存的使用有严格的限制（就那么点可怜的内存）<br><a id=\"more\"></a></p>\n<div class=\"tip tip-info\">为了维持多任务的功能环境，Android为每一个app都设置了一个硬性的heap size限制。准确的heap size限制会因为不同设备的不同RAM大小而各有差异。如果你的app已经到了heap的限制大小并且再尝试分配内存的话，会引起OutOfMemoryError的错误。<br></div>\n\n<p>1.使用adb查看设备对内存的限制</p>\n<p>// 单个应用可用最大内存主要对应的是这个值,如果值是0代表无限制（（仅仅针对dalvik堆，不包括native堆））<br><code>adb shell getprop dalvik.vm.heapgrowthlimit</code></p>\n<p>// 表示单个进程可用的最大内存，但如果存在heapgrowthlimit参数，则以heapgrowthlimit为准；heapsize表示不受控情况下的极限堆，表示单个虚拟机或单个进程可用的最大内存。而android上的应用是带有独立虚拟机的，也就是每开一个应用就会打开一个独立的虚拟机（这样设计就会在单个程序崩溃的情况下不会导致整个系统的崩溃）。<br><code>adb shell getprop dalvik.vm.heapsize</code></p>\n<p>// 应用启动时申请的初始内存空间大小<br><code>adb shell getprop dalvik.vm.heapstartsize</code></p>\n<p><img width=\"400\" src=\"/images/jetpack/adb-memory.png\"></p>\n<p>2.突破内存限制<br>heapsize表示不受控情况下的极限堆，表示单个虚拟机或单个进程可用的最大内存。而android上的应用是带有独立虚拟机的，也就是每开一个应用就会打开一个独立的虚拟机（这样设计就会在单个程序崩溃的情况下不会导致整个系统的崩溃）。在android开发中，如果要使用大堆，需要在manifest中指定android:largeHeap为true，这样dvm heap最大可达heapsize。</p>\n<p>3.使用android studio中的profiler查看当前应用的内存使用情况<br><img width=\"200\" src=\"/images/jetpack/adb-memory-profiler.png\"></p>\n<p>Native表示C或C++代码分配的内存(即使App没有native层，调用framework代码时，也有可能触发分配native内存)；</p>\n<p>Graphics表示图像相关缓存队列占用的内存；</p>\n<p>Stack表示native和java占用的栈内存；</p>\n<p>Code表示代码、资源文件、库文件等占用的内存；</p>\n<p>Others表示无法明确分类的内存；</p>\n<p>Allocated表示Java或Kotlin分配对象的数量(Android8.0系统内置了统计工具，Memory Profiler可以得到整个app启动后分配对象的数量）</p>\n<h5 id=\"将位图加载到内存中\"><a href=\"#将位图加载到内存中\" class=\"headerlink\" title=\"将位图加载到内存中\"></a>将位图加载到内存中</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> bmp = BitmapFactory.decodeResource(resources, R.drawable.splash)</span><br><span class=\"line\">debugInfo(<span class=\"string\">\"内存大小\"</span>, bmp.byteCount)</span><br></pre></td></tr></table></figure>\n<p>我们可以发现使用的内存明显大于图片在磁盘中的大小，这是因为当图像在磁盘上时（以JPG，PNG或类似格式存储），图像将被压缩。将图像加载到内存后，它不再被压缩，占用所有像素所需的内存。</p>\n<p>获取图像信息（尺寸）而不加载图像本身<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> options = BitmapFactory.Options().apply &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置这个参数为true,代表我们不需要加载图片到内存，而只获取它的基本信息</span></span><br><span class=\"line\">    inJustDecodeBounds = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    inS</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BitmapFactory.decodeResource(</span><br><span class=\"line\">    resources,</span><br><span class=\"line\">    R.drawable.splash,</span><br><span class=\"line\">    options</span><br><span class=\"line\">)</span><br><span class=\"line\">debugInfo(<span class=\"string\">\"图片尺寸:<span class=\"subst\">$&#123;options.outWidth&#125;</span>,<span class=\"subst\">$&#123;options.outHeight&#125;</span>\"</span>)<span class=\"comment\">// 图片尺寸:900,1464</span></span><br></pre></td></tr></table></figure></p>\n<p>缩小图片的尺寸来减少内存的使用，很多时候我们不需要使用原始图片（如列表显示缩略图,用户设备分辨率较低,视图尺寸很小)，我们可以根据具体情况缩小图片的尺寸<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> options = BitmapFactory.Options().apply &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置这个参数为true,代表我们不需要加载图片到内存，而只获取它的基本信息</span></span><br><span class=\"line\">    inJustDecodeBounds = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">// 比例因子，2代表尺寸会被缩小2倍，1000x1000 -&gt; 500x500</span></span><br><span class=\"line\">    inSampleSize = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BitmapFactory.decodeResource(</span><br><span class=\"line\">    resources,</span><br><span class=\"line\">    R.drawable.splash,</span><br><span class=\"line\">    options</span><br><span class=\"line\">)</span><br><span class=\"line\">debugInfo(<span class=\"string\">\"图片尺寸:<span class=\"subst\">$&#123;options.outWidth&#125;</span>,<span class=\"subst\">$&#123;options.outHeight&#125;</span>\"</span>) <span class=\"comment\">// 图片尺寸:450,732</span></span><br></pre></td></tr></table></figure></p>\n<p>计算一个合适的inSampleSize,来自 <a href=\"https://developer.android.com/topic/performance/graphics/load-bitmap.html#load-bitmap\" target=\"_blank\" rel=\"noopener\">android官方文档</a><br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">calculateInSampleSize</span><span class=\"params\">(options: <span class=\"type\">BitmapFactory</span>.<span class=\"type\">Options</span>, reqWidth: <span class=\"type\">Int</span>, reqHeight: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Raw height and width of image</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> (height: <span class=\"built_in\">Int</span>, width: <span class=\"built_in\">Int</span>) = options.run &#123; outHeight to outWidth &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> inSampleSize = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> halfHeight: <span class=\"built_in\">Int</span> = height / <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> halfWidth: <span class=\"built_in\">Int</span> = width / <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Calculate the largest inSampleSize value that is a power of 2 and keeps both</span></span><br><span class=\"line\">        <span class=\"comment\">// height and width larger than the requested height and width.</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (halfHeight / inSampleSize &gt;= reqHeight &amp;&amp; halfWidth / inSampleSize &gt;= reqWidth) &#123;</span><br><span class=\"line\">            inSampleSize *= <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> inSampleSize</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"减小图片占用的存储空间\"><a href=\"#减小图片占用的存储空间\" class=\"headerlink\" title=\"减小图片占用的存储空间\"></a>减小图片占用的存储空间</h5><p>如果图片存储在手机本地，过多的图片图片缓存资源会很快让手机空间不足。我们应该尽量使用压缩效果较好的图片格式，如webp,jpeg。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteArrayOutputStream bos = new ByteArrayOutputStream（）; </span><br><span class=\"line\"><span class=\"comment\">// 我们设置图片质量为100，与原图相同质量</span></span><br><span class=\"line\">bitmap.compress（Bitmap.CompressFormat.JPEG，<span class=\"number\">100</span>，bos）; </span><br><span class=\"line\">byte [] bitmapdata = bos.toByteArray（）;</span><br><span class=\"line\">...保存文件相关代码略...</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"尺寸巨大的图片（地图，星空图）\"><a href=\"#尺寸巨大的图片（地图，星空图）\" class=\"headerlink\" title=\"尺寸巨大的图片（地图，星空图）\"></a>尺寸巨大的图片（地图，星空图）</h5><p>这类图片不可能通过缩小尺寸显示来减少内存的时候，此时我们可以尝试使用加载部分区域显示详情</p>\n<ol>\n<li>多个等级的缩略图<br>在显示图片全貌的时候（用户屏幕就那么大，直接显示全貌无法查看细节），我们可以根据用户手机的分变率加载对应清晰度的缩略图进行显示而不是原图（如x1,x2,x3…多个级别的全景缩略），缩略图应该和原图一起下载，而不是在显示的时候通过原图生成（耗费大量时间，造成设备卡顿，闪退）</li>\n<li>查看局部细节<br>用户放大图片局部查看细节时，如果使用缩略图不能满足细节显示时，开始使用原图进行局部加载<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val imageInputStream = ....</span><br><span class=\"line\">val brd = BitmapRegionDecoder.newInstance(imageInputStream, false)</span><br><span class=\"line\"></span><br><span class=\"line\">// 更具要显示的区域获取局部Bitmap，一个Rect区域，options根据显示要求设置,同上的BitmapFactory.Options</span><br><span class=\"line\">val bmp = bitmapRegionDecoder.decodeRegion(Rect(0, 0, 40, 40), options)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<div class=\"tip tip-info\">注意：有几个库遵循加载图像的最佳实践。您可以在应用中使用这些库以最优化的方式加载图像。我们建议使用 Glide 库，尽可能快速，平稳地加载和显示图像。其他受欢迎的图像加载库包括Square的Picasso和 Facebook的Fresco。这些库简化了与Android上的位图和其他类型图像相关的大多数复杂任务。<br></div>","site":{"data":{}},"excerpt":"<p>有时我们需要显示一张很大的图片，按常规的方式直接载入很容易出现OOM(out of  memory);这是由于Android系统对内存的使用有严格的限制（就那么点可怜的内存）<br>","more":"</p>\n<div class=\"tip tip-info\">为了维持多任务的功能环境，Android为每一个app都设置了一个硬性的heap size限制。准确的heap size限制会因为不同设备的不同RAM大小而各有差异。如果你的app已经到了heap的限制大小并且再尝试分配内存的话，会引起OutOfMemoryError的错误。<br></div>\n\n<p>1.使用adb查看设备对内存的限制</p>\n<p>// 单个应用可用最大内存主要对应的是这个值,如果值是0代表无限制（（仅仅针对dalvik堆，不包括native堆））<br><code>adb shell getprop dalvik.vm.heapgrowthlimit</code></p>\n<p>// 表示单个进程可用的最大内存，但如果存在heapgrowthlimit参数，则以heapgrowthlimit为准；heapsize表示不受控情况下的极限堆，表示单个虚拟机或单个进程可用的最大内存。而android上的应用是带有独立虚拟机的，也就是每开一个应用就会打开一个独立的虚拟机（这样设计就会在单个程序崩溃的情况下不会导致整个系统的崩溃）。<br><code>adb shell getprop dalvik.vm.heapsize</code></p>\n<p>// 应用启动时申请的初始内存空间大小<br><code>adb shell getprop dalvik.vm.heapstartsize</code></p>\n<p><img width=\"400\" src=\"/images/jetpack/adb-memory.png\"></p>\n<p>2.突破内存限制<br>heapsize表示不受控情况下的极限堆，表示单个虚拟机或单个进程可用的最大内存。而android上的应用是带有独立虚拟机的，也就是每开一个应用就会打开一个独立的虚拟机（这样设计就会在单个程序崩溃的情况下不会导致整个系统的崩溃）。在android开发中，如果要使用大堆，需要在manifest中指定android:largeHeap为true，这样dvm heap最大可达heapsize。</p>\n<p>3.使用android studio中的profiler查看当前应用的内存使用情况<br><img width=\"200\" src=\"/images/jetpack/adb-memory-profiler.png\"></p>\n<p>Native表示C或C++代码分配的内存(即使App没有native层，调用framework代码时，也有可能触发分配native内存)；</p>\n<p>Graphics表示图像相关缓存队列占用的内存；</p>\n<p>Stack表示native和java占用的栈内存；</p>\n<p>Code表示代码、资源文件、库文件等占用的内存；</p>\n<p>Others表示无法明确分类的内存；</p>\n<p>Allocated表示Java或Kotlin分配对象的数量(Android8.0系统内置了统计工具，Memory Profiler可以得到整个app启动后分配对象的数量）</p>\n<h5 id=\"将位图加载到内存中\"><a href=\"#将位图加载到内存中\" class=\"headerlink\" title=\"将位图加载到内存中\"></a>将位图加载到内存中</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> bmp = BitmapFactory.decodeResource(resources, R.drawable.splash)</span><br><span class=\"line\">debugInfo(<span class=\"string\">\"内存大小\"</span>, bmp.byteCount)</span><br></pre></td></tr></table></figure>\n<p>我们可以发现使用的内存明显大于图片在磁盘中的大小，这是因为当图像在磁盘上时（以JPG，PNG或类似格式存储），图像将被压缩。将图像加载到内存后，它不再被压缩，占用所有像素所需的内存。</p>\n<p>获取图像信息（尺寸）而不加载图像本身<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> options = BitmapFactory.Options().apply &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置这个参数为true,代表我们不需要加载图片到内存，而只获取它的基本信息</span></span><br><span class=\"line\">    inJustDecodeBounds = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    inS</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BitmapFactory.decodeResource(</span><br><span class=\"line\">    resources,</span><br><span class=\"line\">    R.drawable.splash,</span><br><span class=\"line\">    options</span><br><span class=\"line\">)</span><br><span class=\"line\">debugInfo(<span class=\"string\">\"图片尺寸:<span class=\"subst\">$&#123;options.outWidth&#125;</span>,<span class=\"subst\">$&#123;options.outHeight&#125;</span>\"</span>)<span class=\"comment\">// 图片尺寸:900,1464</span></span><br></pre></td></tr></table></figure></p>\n<p>缩小图片的尺寸来减少内存的使用，很多时候我们不需要使用原始图片（如列表显示缩略图,用户设备分辨率较低,视图尺寸很小)，我们可以根据具体情况缩小图片的尺寸<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> options = BitmapFactory.Options().apply &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置这个参数为true,代表我们不需要加载图片到内存，而只获取它的基本信息</span></span><br><span class=\"line\">    inJustDecodeBounds = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">// 比例因子，2代表尺寸会被缩小2倍，1000x1000 -&gt; 500x500</span></span><br><span class=\"line\">    inSampleSize = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BitmapFactory.decodeResource(</span><br><span class=\"line\">    resources,</span><br><span class=\"line\">    R.drawable.splash,</span><br><span class=\"line\">    options</span><br><span class=\"line\">)</span><br><span class=\"line\">debugInfo(<span class=\"string\">\"图片尺寸:<span class=\"subst\">$&#123;options.outWidth&#125;</span>,<span class=\"subst\">$&#123;options.outHeight&#125;</span>\"</span>) <span class=\"comment\">// 图片尺寸:450,732</span></span><br></pre></td></tr></table></figure></p>\n<p>计算一个合适的inSampleSize,来自 <a href=\"https://developer.android.com/topic/performance/graphics/load-bitmap.html#load-bitmap\" target=\"_blank\" rel=\"noopener\">android官方文档</a><br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">calculateInSampleSize</span><span class=\"params\">(options: <span class=\"type\">BitmapFactory</span>.<span class=\"type\">Options</span>, reqWidth: <span class=\"type\">Int</span>, reqHeight: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Raw height and width of image</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> (height: <span class=\"built_in\">Int</span>, width: <span class=\"built_in\">Int</span>) = options.run &#123; outHeight to outWidth &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> inSampleSize = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> halfHeight: <span class=\"built_in\">Int</span> = height / <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> halfWidth: <span class=\"built_in\">Int</span> = width / <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Calculate the largest inSampleSize value that is a power of 2 and keeps both</span></span><br><span class=\"line\">        <span class=\"comment\">// height and width larger than the requested height and width.</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (halfHeight / inSampleSize &gt;= reqHeight &amp;&amp; halfWidth / inSampleSize &gt;= reqWidth) &#123;</span><br><span class=\"line\">            inSampleSize *= <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> inSampleSize</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"减小图片占用的存储空间\"><a href=\"#减小图片占用的存储空间\" class=\"headerlink\" title=\"减小图片占用的存储空间\"></a>减小图片占用的存储空间</h5><p>如果图片存储在手机本地，过多的图片图片缓存资源会很快让手机空间不足。我们应该尽量使用压缩效果较好的图片格式，如webp,jpeg。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteArrayOutputStream bos = new ByteArrayOutputStream（）; </span><br><span class=\"line\"><span class=\"comment\">// 我们设置图片质量为100，与原图相同质量</span></span><br><span class=\"line\">bitmap.compress（Bitmap.CompressFormat.JPEG，<span class=\"number\">100</span>，bos）; </span><br><span class=\"line\">byte [] bitmapdata = bos.toByteArray（）;</span><br><span class=\"line\">...保存文件相关代码略...</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"尺寸巨大的图片（地图，星空图）\"><a href=\"#尺寸巨大的图片（地图，星空图）\" class=\"headerlink\" title=\"尺寸巨大的图片（地图，星空图）\"></a>尺寸巨大的图片（地图，星空图）</h5><p>这类图片不可能通过缩小尺寸显示来减少内存的时候，此时我们可以尝试使用加载部分区域显示详情</p>\n<ol>\n<li>多个等级的缩略图<br>在显示图片全貌的时候（用户屏幕就那么大，直接显示全貌无法查看细节），我们可以根据用户手机的分变率加载对应清晰度的缩略图进行显示而不是原图（如x1,x2,x3…多个级别的全景缩略），缩略图应该和原图一起下载，而不是在显示的时候通过原图生成（耗费大量时间，造成设备卡顿，闪退）</li>\n<li>查看局部细节<br>用户放大图片局部查看细节时，如果使用缩略图不能满足细节显示时，开始使用原图进行局部加载<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val imageInputStream = ....</span><br><span class=\"line\">val brd = BitmapRegionDecoder.newInstance(imageInputStream, false)</span><br><span class=\"line\"></span><br><span class=\"line\">// 更具要显示的区域获取局部Bitmap，一个Rect区域，options根据显示要求设置,同上的BitmapFactory.Options</span><br><span class=\"line\">val bmp = bitmapRegionDecoder.decodeRegion(Rect(0, 0, 40, 40), options)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<div class=\"tip tip-info\">注意：有几个库遵循加载图像的最佳实践。您可以在应用中使用这些库以最优化的方式加载图像。我们建议使用 Glide 库，尽可能快速，平稳地加载和显示图像。其他受欢迎的图像加载库包括Square的Picasso和 Facebook的Fresco。这些库简化了与Android上的位图和其他类型图像相关的大多数复杂任务。<br></div>"},{"title":"Gradle-构建Kotlin项目","date":"2019-07-09T11:17:28.000Z","_content":"\n## 下载与安装Gradle（Window10环境）\n\n* 确保Java开发环境配置好了（JDK）\n* [官方网站](https://gradle.org/)\n* [下载地址](https://gradle.org/next-steps/?version=5.5&format=all)\n* 解压文件到你想放在的地方（如图所示）\n![变量配置](/images/kotlin/gradle-folder.png)\n* 配置环境变量（以你gradle保存的地址为准，此处保存在D盘Gradle目录）\n![变量配置](/images/kotlin/gradle-path.png)\n\n\n## 创建项目\n0. 手动创建参考[官方文档](https://www.kotlincn.net/docs/reference/using-maven.html)\n1. gradle init --type=kotlin-application\n2. 根据提示一步步创建即可\n3. 创建例子\n\n1. 创建一个项目文件夹（kotlin-examle）\n2. 创建src/main/kotlin和src/main/java文件夹\n3. 创建gradle构建文件(build.gradle)\n\n```Groovy\napply plugin: 'java'\napply plugin: 'kotlin'\n\nbuildscript {\n    ext.kotlin_version = '1.3.41'\n\n    repositories {\n        mavenCentral()\n    }\n\n    dependencies {\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n    }\n}\n\nrepositories {\n    maven { \n        url 'https://maven.aliyun.com/nexus/content/groups/public/' \n    }\n    maven {\n        url 'https://maven.aliyun.com/nexus/content/repositories/jcenter'\n    }\n}\n\ndependencies {\n    compile \"org.jetbrains.kotlin:kotlin-stdlib\"\n}\n\n\njar {\n    manifest {\n        attributes 'Main-Class': 'com.cool1024.App'\n    }\n    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }\n}\n```\n\n4. 在kotlin目录中添加App.kt文件\n```Kotlin\npackage com.cool1024\n\nobject App{\n    @JvmStatic\n    fun main(args: Array<String>) {\n        println(\"Hello World\")\n    }\n}\n```\n\n5. 执行Build命令`gradle build`\n\n6. 运行结果`java -jar build/libs/kotlin-example.jar`\n","source":"_posts/Gradle-构建Kotlin项目.md","raw":"---\ntitle: Gradle-构建Kotlin项目\ndate: 2019-07-09 19:17:28\ntags: Kotlin\ncategories: Android开发\n---\n\n## 下载与安装Gradle（Window10环境）\n\n* 确保Java开发环境配置好了（JDK）\n* [官方网站](https://gradle.org/)\n* [下载地址](https://gradle.org/next-steps/?version=5.5&format=all)\n* 解压文件到你想放在的地方（如图所示）\n![变量配置](/images/kotlin/gradle-folder.png)\n* 配置环境变量（以你gradle保存的地址为准，此处保存在D盘Gradle目录）\n![变量配置](/images/kotlin/gradle-path.png)\n\n\n## 创建项目\n0. 手动创建参考[官方文档](https://www.kotlincn.net/docs/reference/using-maven.html)\n1. gradle init --type=kotlin-application\n2. 根据提示一步步创建即可\n3. 创建例子\n\n1. 创建一个项目文件夹（kotlin-examle）\n2. 创建src/main/kotlin和src/main/java文件夹\n3. 创建gradle构建文件(build.gradle)\n\n```Groovy\napply plugin: 'java'\napply plugin: 'kotlin'\n\nbuildscript {\n    ext.kotlin_version = '1.3.41'\n\n    repositories {\n        mavenCentral()\n    }\n\n    dependencies {\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n    }\n}\n\nrepositories {\n    maven { \n        url 'https://maven.aliyun.com/nexus/content/groups/public/' \n    }\n    maven {\n        url 'https://maven.aliyun.com/nexus/content/repositories/jcenter'\n    }\n}\n\ndependencies {\n    compile \"org.jetbrains.kotlin:kotlin-stdlib\"\n}\n\n\njar {\n    manifest {\n        attributes 'Main-Class': 'com.cool1024.App'\n    }\n    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }\n}\n```\n\n4. 在kotlin目录中添加App.kt文件\n```Kotlin\npackage com.cool1024\n\nobject App{\n    @JvmStatic\n    fun main(args: Array<String>) {\n        println(\"Hello World\")\n    }\n}\n```\n\n5. 执行Build命令`gradle build`\n\n6. 运行结果`java -jar build/libs/kotlin-example.jar`\n","slug":"Gradle-构建Kotlin项目","published":1,"updated":"2019-07-09T13:28:05.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld7l0002e8we3cn4irar","content":"<h2 id=\"下载与安装Gradle（Window10环境）\"><a href=\"#下载与安装Gradle（Window10环境）\" class=\"headerlink\" title=\"下载与安装Gradle（Window10环境）\"></a>下载与安装Gradle（Window10环境）</h2><ul>\n<li>确保Java开发环境配置好了（JDK）</li>\n<li><a href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">官方网站</a></li>\n<li><a href=\"https://gradle.org/next-steps/?version=5.5&amp;format=all\" target=\"_blank\" rel=\"noopener\">下载地址</a></li>\n<li>解压文件到你想放在的地方（如图所示）<br><img src=\"/images/kotlin/gradle-folder.png\" alt=\"变量配置\"></li>\n<li>配置环境变量（以你gradle保存的地址为准，此处保存在D盘Gradle目录）<br><img src=\"/images/kotlin/gradle-path.png\" alt=\"变量配置\"></li>\n</ul>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><ol start=\"0\">\n<li>手动创建参考<a href=\"https://www.kotlincn.net/docs/reference/using-maven.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></li>\n<li>gradle init –type=kotlin-application</li>\n<li>根据提示一步步创建即可</li>\n<li><p>创建例子</p>\n</li>\n<li><p>创建一个项目文件夹（kotlin-examle）</p>\n</li>\n<li>创建src/main/kotlin和src/main/java文件夹</li>\n<li>创建gradle构建文件(build.gradle)</li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'java'</span></span><br><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'kotlin'</span></span><br><span class=\"line\"></span><br><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    ext.kotlin_version = <span class=\"string\">'1.3.41'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenCentral()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath <span class=\"string\">\"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    maven &#123; </span><br><span class=\"line\">        url <span class=\"string\">'https://maven.aliyun.com/nexus/content/groups/public/'</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    maven &#123;</span><br><span class=\"line\">        url <span class=\"string\">'https://maven.aliyun.com/nexus/content/repositories/jcenter'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile <span class=\"string\">\"org.jetbrains.kotlin:kotlin-stdlib\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">jar &#123;</span><br><span class=\"line\">    manifest &#123;</span><br><span class=\"line\">        attributes <span class=\"string\">'Main-Class'</span>: <span class=\"string\">'com.cool1024.App'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    from &#123; configurations.compile.collect &#123; it.isDirectory() ? it : zipTree(it) &#125; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><p>在kotlin目录中添加App.kt文件</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cool1024</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> App&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Hello World\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行Build命令<code>gradle build</code></p>\n</li>\n<li><p>运行结果<code>java -jar build/libs/kotlin-example.jar</code></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"下载与安装Gradle（Window10环境）\"><a href=\"#下载与安装Gradle（Window10环境）\" class=\"headerlink\" title=\"下载与安装Gradle（Window10环境）\"></a>下载与安装Gradle（Window10环境）</h2><ul>\n<li>确保Java开发环境配置好了（JDK）</li>\n<li><a href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">官方网站</a></li>\n<li><a href=\"https://gradle.org/next-steps/?version=5.5&amp;format=all\" target=\"_blank\" rel=\"noopener\">下载地址</a></li>\n<li>解压文件到你想放在的地方（如图所示）<br><img src=\"/images/kotlin/gradle-folder.png\" alt=\"变量配置\"></li>\n<li>配置环境变量（以你gradle保存的地址为准，此处保存在D盘Gradle目录）<br><img src=\"/images/kotlin/gradle-path.png\" alt=\"变量配置\"></li>\n</ul>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><ol start=\"0\">\n<li>手动创建参考<a href=\"https://www.kotlincn.net/docs/reference/using-maven.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></li>\n<li>gradle init –type=kotlin-application</li>\n<li>根据提示一步步创建即可</li>\n<li><p>创建例子</p>\n</li>\n<li><p>创建一个项目文件夹（kotlin-examle）</p>\n</li>\n<li>创建src/main/kotlin和src/main/java文件夹</li>\n<li>创建gradle构建文件(build.gradle)</li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'java'</span></span><br><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'kotlin'</span></span><br><span class=\"line\"></span><br><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    ext.kotlin_version = <span class=\"string\">'1.3.41'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenCentral()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath <span class=\"string\">\"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    maven &#123; </span><br><span class=\"line\">        url <span class=\"string\">'https://maven.aliyun.com/nexus/content/groups/public/'</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    maven &#123;</span><br><span class=\"line\">        url <span class=\"string\">'https://maven.aliyun.com/nexus/content/repositories/jcenter'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile <span class=\"string\">\"org.jetbrains.kotlin:kotlin-stdlib\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">jar &#123;</span><br><span class=\"line\">    manifest &#123;</span><br><span class=\"line\">        attributes <span class=\"string\">'Main-Class'</span>: <span class=\"string\">'com.cool1024.App'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    from &#123; configurations.compile.collect &#123; it.isDirectory() ? it : zipTree(it) &#125; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><p>在kotlin目录中添加App.kt文件</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cool1024</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> App&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Hello World\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行Build命令<code>gradle build</code></p>\n</li>\n<li><p>运行结果<code>java -jar build/libs/kotlin-example.jar</code></p>\n</li>\n</ol>\n"},{"title":"JavaScript-编译器，引擎，作用域(一)","date":"2019-06-25T13:44:14.000Z","_content":"\n## 基本概念\n通常把JavaScript归类为“动态”或“解释执行”的语音，但实际上它是一门编译语言。在传统的编译语言中，程序的源代码在执行之前都会经历三个步骤：\n* **词法分析**\n    这个过程会把由字符组成的字符串分解成（对编程语音来说）有意义的代码块，这些代码块称为词法单元；如“var a = 0”会被分解成\"var\",\"a\",\"=\",\"0\"\n* **语法分析**\n    这个过程把词法单元（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树称为\"抽象语法树(AST)\",var a = 0的抽象语法树可能会有个一个变量声明的顶级节点，接着是一个变量标识节点（值为a）的子节点,以及一个AssignmentExpression的子节点。AssignmentExpression又有一个数字文字（值是2）的子节点\n* **代码生成**\n    将抽象语法树转换成可执行代码\n<!-- more -->\n\n## JavaScript引擎\n比起编译过程只有3步的语言的编译器，JavaScript引擎要复杂的多。它需要在语法分析和代码生成阶段有特定的步骤来对运行性能进行优化，包括冗余元素进行优化。\nJavaScript引擎的编译过程不是发生在构建之前的（不是直接把代码编译成可执行的代码-打包成应用程序，然后双击运行就好了～），大部分编译都是发生在代码片段要执行的前几微秒。\n\n一个JavaScript代码的运行需要由3个东东协同工作\n* **引擎**\n从头倒胃负责整个程序的编译及其执行过程\n* **编译器**\n协助引擎;负责词法，语法分析，代码生成\n* **作用域**\n协助引擎;负责收集和维护由所有变量组成的一系列查询，并按一套严格的规则确定当前执行的代码有没有这些变量的访问权限\n\n对于代码片段`var a = 1`,编译器会做如下处理：\n1. 遇到var a,编译器询问作用域是否已经在当前作用域中是否已经有一个这个名称的变量了，如果有的话，编译器会忽略这个声明，继续编译；否则它会请求作用域在当前作用域中新增这个变量（名称为a）\n2. 编译器为引擎生成可以运行的代码，这些代码用来处理 a = 2 这个赋值操作。引擎运行时，先询问作用域，当前作用域中有没有名称为a的变量，如果有引擎就使用这个变量，如果没有那么它会向外层嵌套的作用域进行查询直到找到了或查到了最外层作用域（全局作用域）为止，如果最后找到了那么就将2赋值给找到的a变量,如果最后没有找到，那么引擎抛出一个异常\n\n参考代码\n\n```js\nvar a = 2;\n```\n\n```js\nvar a;\na = 2;\n```\n\n如果直接执行这样的代码你可能会得到一个错误`ReferenceError: a is not defined`,然而有些浏览器如果没有设置严格模式，它可能依然有效(这里我们使用了ES5的严格模式‘use strict’)\n```js\n'use strict'\n a = 2;\n```\n\n注意 not defined 和 undefiend的区别，没有声明直接使用变量为`ReferenceError: xxx is not defined`,只声明没有赋值就会默认为undefined的初始值\n\n```js\n'use strict'\nvar b\nconsole.log(b) // 打印 undefined\na = 2 // 抛出异常 Uncaught ReferenceError: a is not defined\n```\n\n**undefined与null值**\n> 目前，null和undefined基本是同义的，只有一些细微的差别。\n1. null表示\"没有对象\"，即该处不应该有值。(值 null 特指对象的值未设置。它是 JavaScript 基本类型 之一。)[参考文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null)\n (1) null可以被转换成数字0而undefined不可以（null会执行类型转换undefined不会）\n ```js\ntypeof null        // \"object\" (因为一些以前的原因而不是'null')\ntypeof undefined   // \"undefined\"\nnull === undefined // false\nnull  == undefined // true\nnull === null // true\nnull == null // true\n!null //true\nisNaN(1 + null) // false\nisNaN(1 + undefined) // true\n ```\n2. undefined表示\"缺少值\"，就是此处应该有一个值，但是还没有定义\n（1）变量被声明了，但没有赋值时，就等于undefined。\n（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。\n（3）对象没有赋值的属性，该属性的值为undefined。\n（4）函数没有返回值时，默认返回undefined。\n ```js\n 'use strict'\n var a = {}\n console.log(a.title) // undefined\n\n function testFunc(a){\n     console.log(a)\n }\n testFunc() // undefined\n\n console.log(testFunc()) // undefined\n ```\n \n## 作用域\n作用域是根据名称查找变量的一套规则;当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。因此，在当前作用 域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量， 或抵达最外层的作用域（也就是全局作用域）为止\n\n1. 简单例子\n```javascript\nfunction foo(a) {     \n    console.log( a + b ); \n} \n \nvar b = 2; \n \nfoo(2); // 4\n\n```\n> 上面代码，在foo()中是无法找到b的声明的，这时候就会查询上一级作用域（在这个例子中就是全局作用域）发现了b\n\n2. 图片参考\n![作用域图片](/images/scope.png)\n\n这个建筑代表程序中的嵌套作用域链。第一层楼代表当前的执行作用域，也就是执行代码所处的位置。建筑的顶层代表全局作用域。\nLHS 和 RHS 引用都会在当前楼层进行查找，如果没有找到，就会坐电梯前往上一层楼， 如果还是没有找到就继续向上，以此类推。一旦抵达顶层（全局作用域），可能找到了你 所需的变量，也可能没找到，但无论如何查找过程都将停止。\n\n>RHS 查询与简单地查找某个变量的值别无二致，而 LHS 查询则是试图 找到变量的容器本身，从而可以对其赋值。从这个角度说，RHS 并不是真正意义上的“赋 值操作的右侧”，更准确地说是“非左侧”。\n你可以将 RHS 理解成 retrieve his source value（取到它的源值），这意味着“得到某某的 值”。\n\n## 总结\n**作用域**是一套规则，用于确定在何处以及如何查找变量（标识符）。如果查找的目的是对 变量进行赋值，那么就会使用 LHS 查询；如果目的是获取变量的值，就会使用 RHS 查询。\n赋值操作符会导致 LHS 查询。＝操作符或调用函数时传入参数的操作都会导致关联作用域 的赋值操作。\nJavaScript 引擎首先会在代码执行前对其进行编译，在这个过程中，像 var a = 2 这样的声 明会被分解成两个独立的步骤：\n1. 首先，var a 在其作用域中声明新变量。这会在最开始的阶段，也就是代码执行前进行。 \n2. 接下来，a = 2 会查询（LHS 查询）变量 a 并对其进行赋值。\nLHS 和 RHS 查询都会在当前执行作用域中开始，如果有需要（也就是说它们没有找到所 需的标识符），就会向上级作用域继续查找目标标识符，这样每次上升一级作用域（一层 楼），最后抵达全局作用域（顶层），无论找到或没找到都将停止。\n不成功的 RHS 引用会导致抛出 ReferenceError 异常。不成功的 LHS 引用会导致自动隐式 地创建一个全局变量（非严格模式下），该变量使用 LHS 引用的目标作为标识符，或者抛 出 ReferenceError 异常（严格模式下）。\n\n\n    \n","source":"_posts/JavaScript-编译器，引擎，作用域.md","raw":"---\ntitle: JavaScript-编译器，引擎，作用域(一)\ndate: 2019-06-25 21:44:14\ntags: javascript\ncategories: Web开发\n---\n\n## 基本概念\n通常把JavaScript归类为“动态”或“解释执行”的语音，但实际上它是一门编译语言。在传统的编译语言中，程序的源代码在执行之前都会经历三个步骤：\n* **词法分析**\n    这个过程会把由字符组成的字符串分解成（对编程语音来说）有意义的代码块，这些代码块称为词法单元；如“var a = 0”会被分解成\"var\",\"a\",\"=\",\"0\"\n* **语法分析**\n    这个过程把词法单元（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树称为\"抽象语法树(AST)\",var a = 0的抽象语法树可能会有个一个变量声明的顶级节点，接着是一个变量标识节点（值为a）的子节点,以及一个AssignmentExpression的子节点。AssignmentExpression又有一个数字文字（值是2）的子节点\n* **代码生成**\n    将抽象语法树转换成可执行代码\n<!-- more -->\n\n## JavaScript引擎\n比起编译过程只有3步的语言的编译器，JavaScript引擎要复杂的多。它需要在语法分析和代码生成阶段有特定的步骤来对运行性能进行优化，包括冗余元素进行优化。\nJavaScript引擎的编译过程不是发生在构建之前的（不是直接把代码编译成可执行的代码-打包成应用程序，然后双击运行就好了～），大部分编译都是发生在代码片段要执行的前几微秒。\n\n一个JavaScript代码的运行需要由3个东东协同工作\n* **引擎**\n从头倒胃负责整个程序的编译及其执行过程\n* **编译器**\n协助引擎;负责词法，语法分析，代码生成\n* **作用域**\n协助引擎;负责收集和维护由所有变量组成的一系列查询，并按一套严格的规则确定当前执行的代码有没有这些变量的访问权限\n\n对于代码片段`var a = 1`,编译器会做如下处理：\n1. 遇到var a,编译器询问作用域是否已经在当前作用域中是否已经有一个这个名称的变量了，如果有的话，编译器会忽略这个声明，继续编译；否则它会请求作用域在当前作用域中新增这个变量（名称为a）\n2. 编译器为引擎生成可以运行的代码，这些代码用来处理 a = 2 这个赋值操作。引擎运行时，先询问作用域，当前作用域中有没有名称为a的变量，如果有引擎就使用这个变量，如果没有那么它会向外层嵌套的作用域进行查询直到找到了或查到了最外层作用域（全局作用域）为止，如果最后找到了那么就将2赋值给找到的a变量,如果最后没有找到，那么引擎抛出一个异常\n\n参考代码\n\n```js\nvar a = 2;\n```\n\n```js\nvar a;\na = 2;\n```\n\n如果直接执行这样的代码你可能会得到一个错误`ReferenceError: a is not defined`,然而有些浏览器如果没有设置严格模式，它可能依然有效(这里我们使用了ES5的严格模式‘use strict’)\n```js\n'use strict'\n a = 2;\n```\n\n注意 not defined 和 undefiend的区别，没有声明直接使用变量为`ReferenceError: xxx is not defined`,只声明没有赋值就会默认为undefined的初始值\n\n```js\n'use strict'\nvar b\nconsole.log(b) // 打印 undefined\na = 2 // 抛出异常 Uncaught ReferenceError: a is not defined\n```\n\n**undefined与null值**\n> 目前，null和undefined基本是同义的，只有一些细微的差别。\n1. null表示\"没有对象\"，即该处不应该有值。(值 null 特指对象的值未设置。它是 JavaScript 基本类型 之一。)[参考文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null)\n (1) null可以被转换成数字0而undefined不可以（null会执行类型转换undefined不会）\n ```js\ntypeof null        // \"object\" (因为一些以前的原因而不是'null')\ntypeof undefined   // \"undefined\"\nnull === undefined // false\nnull  == undefined // true\nnull === null // true\nnull == null // true\n!null //true\nisNaN(1 + null) // false\nisNaN(1 + undefined) // true\n ```\n2. undefined表示\"缺少值\"，就是此处应该有一个值，但是还没有定义\n（1）变量被声明了，但没有赋值时，就等于undefined。\n（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。\n（3）对象没有赋值的属性，该属性的值为undefined。\n（4）函数没有返回值时，默认返回undefined。\n ```js\n 'use strict'\n var a = {}\n console.log(a.title) // undefined\n\n function testFunc(a){\n     console.log(a)\n }\n testFunc() // undefined\n\n console.log(testFunc()) // undefined\n ```\n \n## 作用域\n作用域是根据名称查找变量的一套规则;当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。因此，在当前作用 域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量， 或抵达最外层的作用域（也就是全局作用域）为止\n\n1. 简单例子\n```javascript\nfunction foo(a) {     \n    console.log( a + b ); \n} \n \nvar b = 2; \n \nfoo(2); // 4\n\n```\n> 上面代码，在foo()中是无法找到b的声明的，这时候就会查询上一级作用域（在这个例子中就是全局作用域）发现了b\n\n2. 图片参考\n![作用域图片](/images/scope.png)\n\n这个建筑代表程序中的嵌套作用域链。第一层楼代表当前的执行作用域，也就是执行代码所处的位置。建筑的顶层代表全局作用域。\nLHS 和 RHS 引用都会在当前楼层进行查找，如果没有找到，就会坐电梯前往上一层楼， 如果还是没有找到就继续向上，以此类推。一旦抵达顶层（全局作用域），可能找到了你 所需的变量，也可能没找到，但无论如何查找过程都将停止。\n\n>RHS 查询与简单地查找某个变量的值别无二致，而 LHS 查询则是试图 找到变量的容器本身，从而可以对其赋值。从这个角度说，RHS 并不是真正意义上的“赋 值操作的右侧”，更准确地说是“非左侧”。\n你可以将 RHS 理解成 retrieve his source value（取到它的源值），这意味着“得到某某的 值”。\n\n## 总结\n**作用域**是一套规则，用于确定在何处以及如何查找变量（标识符）。如果查找的目的是对 变量进行赋值，那么就会使用 LHS 查询；如果目的是获取变量的值，就会使用 RHS 查询。\n赋值操作符会导致 LHS 查询。＝操作符或调用函数时传入参数的操作都会导致关联作用域 的赋值操作。\nJavaScript 引擎首先会在代码执行前对其进行编译，在这个过程中，像 var a = 2 这样的声 明会被分解成两个独立的步骤：\n1. 首先，var a 在其作用域中声明新变量。这会在最开始的阶段，也就是代码执行前进行。 \n2. 接下来，a = 2 会查询（LHS 查询）变量 a 并对其进行赋值。\nLHS 和 RHS 查询都会在当前执行作用域中开始，如果有需要（也就是说它们没有找到所 需的标识符），就会向上级作用域继续查找目标标识符，这样每次上升一级作用域（一层 楼），最后抵达全局作用域（顶层），无论找到或没找到都将停止。\n不成功的 RHS 引用会导致抛出 ReferenceError 异常。不成功的 LHS 引用会导致自动隐式 地创建一个全局变量（非严格模式下），该变量使用 LHS 引用的目标作为标识符，或者抛 出 ReferenceError 异常（严格模式下）。\n\n\n    \n","slug":"JavaScript-编译器，引擎，作用域","published":1,"updated":"2019-07-09T09:50:57.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld7q0005e8we77qu9qoc","content":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>通常把JavaScript归类为“动态”或“解释执行”的语音，但实际上它是一门编译语言。在传统的编译语言中，程序的源代码在执行之前都会经历三个步骤：</p>\n<ul>\n<li><strong>词法分析</strong><br>  这个过程会把由字符组成的字符串分解成（对编程语音来说）有意义的代码块，这些代码块称为词法单元；如“var a = 0”会被分解成”var”,”a”,”=”,”0”</li>\n<li><strong>语法分析</strong><br>  这个过程把词法单元（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树称为”抽象语法树(AST)”,var a = 0的抽象语法树可能会有个一个变量声明的顶级节点，接着是一个变量标识节点（值为a）的子节点,以及一个AssignmentExpression的子节点。AssignmentExpression又有一个数字文字（值是2）的子节点</li>\n<li><strong>代码生成</strong><br>  将抽象语法树转换成可执行代码<a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"JavaScript引擎\"><a href=\"#JavaScript引擎\" class=\"headerlink\" title=\"JavaScript引擎\"></a>JavaScript引擎</h2><p>比起编译过程只有3步的语言的编译器，JavaScript引擎要复杂的多。它需要在语法分析和代码生成阶段有特定的步骤来对运行性能进行优化，包括冗余元素进行优化。<br>JavaScript引擎的编译过程不是发生在构建之前的（不是直接把代码编译成可执行的代码-打包成应用程序，然后双击运行就好了～），大部分编译都是发生在代码片段要执行的前几微秒。</p>\n<p>一个JavaScript代码的运行需要由3个东东协同工作</p>\n<ul>\n<li><strong>引擎</strong><br>从头倒胃负责整个程序的编译及其执行过程</li>\n<li><strong>编译器</strong><br>协助引擎;负责词法，语法分析，代码生成</li>\n<li><strong>作用域</strong><br>协助引擎;负责收集和维护由所有变量组成的一系列查询，并按一套严格的规则确定当前执行的代码有没有这些变量的访问权限</li>\n</ul>\n<p>对于代码片段<code>var a = 1</code>,编译器会做如下处理：</p>\n<ol>\n<li>遇到var a,编译器询问作用域是否已经在当前作用域中是否已经有一个这个名称的变量了，如果有的话，编译器会忽略这个声明，继续编译；否则它会请求作用域在当前作用域中新增这个变量（名称为a）</li>\n<li>编译器为引擎生成可以运行的代码，这些代码用来处理 a = 2 这个赋值操作。引擎运行时，先询问作用域，当前作用域中有没有名称为a的变量，如果有引擎就使用这个变量，如果没有那么它会向外层嵌套的作用域进行查询直到找到了或查到了最外层作用域（全局作用域）为止，如果最后找到了那么就将2赋值给找到的a变量,如果最后没有找到，那么引擎抛出一个异常</li>\n</ol>\n<p>参考代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">a = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>如果直接执行这样的代码你可能会得到一个错误<code>ReferenceError: a is not defined</code>,然而有些浏览器如果没有设置严格模式，它可能依然有效(这里我们使用了ES5的严格模式‘use strict’)<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"> a = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure></p>\n<p>注意 not defined 和 undefiend的区别，没有声明直接使用变量为<code>ReferenceError: xxx is not defined</code>,只声明没有赋值就会默认为undefined的初始值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 打印 undefined</span></span><br><span class=\"line\">a = <span class=\"number\">2</span> <span class=\"comment\">// 抛出异常 Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure>\n<p><strong>undefined与null值</strong></p>\n<blockquote>\n<p>目前，null和undefined基本是同义的，只有一些细微的差别。</p>\n<ol>\n<li>null表示”没有对象”，即该处不应该有值。(值 null 特指对象的值未设置。它是 JavaScript 基本类型 之一。)<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null\" target=\"_blank\" rel=\"noopener\">参考文档</a><br>(1) null可以被转换成数字0而undefined不可以（null会执行类型转换undefined不会）<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>        <span class=\"comment\">// \"object\" (因为一些以前的原因而不是'null')</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>   <span class=\"comment\">// \"undefined\"</span></span><br><span class=\"line\"><span class=\"literal\">null</span> === <span class=\"literal\">undefined</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">null</span>  == <span class=\"literal\">undefined</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">null</span> === <span class=\"literal\">null</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">null</span> <span class=\"comment\">// true</span></span><br><span class=\"line\">!<span class=\"literal\">null</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"number\">1</span> + <span class=\"literal\">null</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"number\">1</span> + <span class=\"literal\">undefined</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<ol start=\"2\">\n<li>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义<br>（1）变量被声明了，但没有赋值时，就等于undefined。<br>（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>（3）对象没有赋值的属性，该属性的值为undefined。<br>（4）函数没有返回值时，默认返回undefined。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.title) <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testFunc</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">testFunc() <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(testFunc()) <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>作用域是根据名称查找变量的一套规则;当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。因此，在当前作用 域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量， 或抵达最外层的作用域（也就是全局作用域）为止</p>\n<ol>\n<li>简单例子<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123;     </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( a + b ); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">foo(<span class=\"number\">2</span>); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>上面代码，在foo()中是无法找到b的声明的，这时候就会查询上一级作用域（在这个例子中就是全局作用域）发现了b</p>\n</blockquote>\n<ol start=\"2\">\n<li>图片参考<br><img src=\"/images/scope.png\" alt=\"作用域图片\"></li>\n</ol>\n<p>这个建筑代表程序中的嵌套作用域链。第一层楼代表当前的执行作用域，也就是执行代码所处的位置。建筑的顶层代表全局作用域。<br>LHS 和 RHS 引用都会在当前楼层进行查找，如果没有找到，就会坐电梯前往上一层楼， 如果还是没有找到就继续向上，以此类推。一旦抵达顶层（全局作用域），可能找到了你 所需的变量，也可能没找到，但无论如何查找过程都将停止。</p>\n<blockquote>\n<p>RHS 查询与简单地查找某个变量的值别无二致，而 LHS 查询则是试图 找到变量的容器本身，从而可以对其赋值。从这个角度说，RHS 并不是真正意义上的“赋 值操作的右侧”，更准确地说是“非左侧”。<br>你可以将 RHS 理解成 retrieve his source value（取到它的源值），这意味着“得到某某的 值”。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>作用域</strong>是一套规则，用于确定在何处以及如何查找变量（标识符）。如果查找的目的是对 变量进行赋值，那么就会使用 LHS 查询；如果目的是获取变量的值，就会使用 RHS 查询。<br>赋值操作符会导致 LHS 查询。＝操作符或调用函数时传入参数的操作都会导致关联作用域 的赋值操作。<br>JavaScript 引擎首先会在代码执行前对其进行编译，在这个过程中，像 var a = 2 这样的声 明会被分解成两个独立的步骤：</p>\n<ol>\n<li>首先，var a 在其作用域中声明新变量。这会在最开始的阶段，也就是代码执行前进行。 </li>\n<li>接下来，a = 2 会查询（LHS 查询）变量 a 并对其进行赋值。<br>LHS 和 RHS 查询都会在当前执行作用域中开始，如果有需要（也就是说它们没有找到所 需的标识符），就会向上级作用域继续查找目标标识符，这样每次上升一级作用域（一层 楼），最后抵达全局作用域（顶层），无论找到或没找到都将停止。<br>不成功的 RHS 引用会导致抛出 ReferenceError 异常。不成功的 LHS 引用会导致自动隐式 地创建一个全局变量（非严格模式下），该变量使用 LHS 引用的目标作为标识符，或者抛 出 ReferenceError 异常（严格模式下）。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>通常把JavaScript归类为“动态”或“解释执行”的语音，但实际上它是一门编译语言。在传统的编译语言中，程序的源代码在执行之前都会经历三个步骤：</p>\n<ul>\n<li><strong>词法分析</strong><br>  这个过程会把由字符组成的字符串分解成（对编程语音来说）有意义的代码块，这些代码块称为词法单元；如“var a = 0”会被分解成”var”,”a”,”=”,”0”</li>\n<li><strong>语法分析</strong><br>  这个过程把词法单元（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树称为”抽象语法树(AST)”,var a = 0的抽象语法树可能会有个一个变量声明的顶级节点，接着是一个变量标识节点（值为a）的子节点,以及一个AssignmentExpression的子节点。AssignmentExpression又有一个数字文字（值是2）的子节点</li>\n<li><strong>代码生成</strong><br>  将抽象语法树转换成可执行代码","more":"</li>\n</ul>\n<h2 id=\"JavaScript引擎\"><a href=\"#JavaScript引擎\" class=\"headerlink\" title=\"JavaScript引擎\"></a>JavaScript引擎</h2><p>比起编译过程只有3步的语言的编译器，JavaScript引擎要复杂的多。它需要在语法分析和代码生成阶段有特定的步骤来对运行性能进行优化，包括冗余元素进行优化。<br>JavaScript引擎的编译过程不是发生在构建之前的（不是直接把代码编译成可执行的代码-打包成应用程序，然后双击运行就好了～），大部分编译都是发生在代码片段要执行的前几微秒。</p>\n<p>一个JavaScript代码的运行需要由3个东东协同工作</p>\n<ul>\n<li><strong>引擎</strong><br>从头倒胃负责整个程序的编译及其执行过程</li>\n<li><strong>编译器</strong><br>协助引擎;负责词法，语法分析，代码生成</li>\n<li><strong>作用域</strong><br>协助引擎;负责收集和维护由所有变量组成的一系列查询，并按一套严格的规则确定当前执行的代码有没有这些变量的访问权限</li>\n</ul>\n<p>对于代码片段<code>var a = 1</code>,编译器会做如下处理：</p>\n<ol>\n<li>遇到var a,编译器询问作用域是否已经在当前作用域中是否已经有一个这个名称的变量了，如果有的话，编译器会忽略这个声明，继续编译；否则它会请求作用域在当前作用域中新增这个变量（名称为a）</li>\n<li>编译器为引擎生成可以运行的代码，这些代码用来处理 a = 2 这个赋值操作。引擎运行时，先询问作用域，当前作用域中有没有名称为a的变量，如果有引擎就使用这个变量，如果没有那么它会向外层嵌套的作用域进行查询直到找到了或查到了最外层作用域（全局作用域）为止，如果最后找到了那么就将2赋值给找到的a变量,如果最后没有找到，那么引擎抛出一个异常</li>\n</ol>\n<p>参考代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">a = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>如果直接执行这样的代码你可能会得到一个错误<code>ReferenceError: a is not defined</code>,然而有些浏览器如果没有设置严格模式，它可能依然有效(这里我们使用了ES5的严格模式‘use strict’)<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"> a = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure></p>\n<p>注意 not defined 和 undefiend的区别，没有声明直接使用变量为<code>ReferenceError: xxx is not defined</code>,只声明没有赋值就会默认为undefined的初始值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// 打印 undefined</span></span><br><span class=\"line\">a = <span class=\"number\">2</span> <span class=\"comment\">// 抛出异常 Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure>\n<p><strong>undefined与null值</strong></p>\n<blockquote>\n<p>目前，null和undefined基本是同义的，只有一些细微的差别。</p>\n<ol>\n<li>null表示”没有对象”，即该处不应该有值。(值 null 特指对象的值未设置。它是 JavaScript 基本类型 之一。)<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null\" target=\"_blank\" rel=\"noopener\">参考文档</a><br>(1) null可以被转换成数字0而undefined不可以（null会执行类型转换undefined不会）<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>        <span class=\"comment\">// \"object\" (因为一些以前的原因而不是'null')</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>   <span class=\"comment\">// \"undefined\"</span></span><br><span class=\"line\"><span class=\"literal\">null</span> === <span class=\"literal\">undefined</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"literal\">null</span>  == <span class=\"literal\">undefined</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">null</span> === <span class=\"literal\">null</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">null</span> <span class=\"comment\">// true</span></span><br><span class=\"line\">!<span class=\"literal\">null</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"number\">1</span> + <span class=\"literal\">null</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"number\">1</span> + <span class=\"literal\">undefined</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<ol start=\"2\">\n<li>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义<br>（1）变量被声明了，但没有赋值时，就等于undefined。<br>（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>（3）对象没有赋值的属性，该属性的值为undefined。<br>（4）函数没有返回值时，默认返回undefined。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.title) <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testFunc</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">testFunc() <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(testFunc()) <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>作用域是根据名称查找变量的一套规则;当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。因此，在当前作用 域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量， 或抵达最外层的作用域（也就是全局作用域）为止</p>\n<ol>\n<li>简单例子<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123;     </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( a + b ); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">foo(<span class=\"number\">2</span>); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>上面代码，在foo()中是无法找到b的声明的，这时候就会查询上一级作用域（在这个例子中就是全局作用域）发现了b</p>\n</blockquote>\n<ol start=\"2\">\n<li>图片参考<br><img src=\"/images/scope.png\" alt=\"作用域图片\"></li>\n</ol>\n<p>这个建筑代表程序中的嵌套作用域链。第一层楼代表当前的执行作用域，也就是执行代码所处的位置。建筑的顶层代表全局作用域。<br>LHS 和 RHS 引用都会在当前楼层进行查找，如果没有找到，就会坐电梯前往上一层楼， 如果还是没有找到就继续向上，以此类推。一旦抵达顶层（全局作用域），可能找到了你 所需的变量，也可能没找到，但无论如何查找过程都将停止。</p>\n<blockquote>\n<p>RHS 查询与简单地查找某个变量的值别无二致，而 LHS 查询则是试图 找到变量的容器本身，从而可以对其赋值。从这个角度说，RHS 并不是真正意义上的“赋 值操作的右侧”，更准确地说是“非左侧”。<br>你可以将 RHS 理解成 retrieve his source value（取到它的源值），这意味着“得到某某的 值”。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>作用域</strong>是一套规则，用于确定在何处以及如何查找变量（标识符）。如果查找的目的是对 变量进行赋值，那么就会使用 LHS 查询；如果目的是获取变量的值，就会使用 RHS 查询。<br>赋值操作符会导致 LHS 查询。＝操作符或调用函数时传入参数的操作都会导致关联作用域 的赋值操作。<br>JavaScript 引擎首先会在代码执行前对其进行编译，在这个过程中，像 var a = 2 这样的声 明会被分解成两个独立的步骤：</p>\n<ol>\n<li>首先，var a 在其作用域中声明新变量。这会在最开始的阶段，也就是代码执行前进行。 </li>\n<li>接下来，a = 2 会查询（LHS 查询）变量 a 并对其进行赋值。<br>LHS 和 RHS 查询都会在当前执行作用域中开始，如果有需要（也就是说它们没有找到所 需的标识符），就会向上级作用域继续查找目标标识符，这样每次上升一级作用域（一层 楼），最后抵达全局作用域（顶层），无论找到或没找到都将停止。<br>不成功的 RHS 引用会导致抛出 ReferenceError 异常。不成功的 LHS 引用会导致自动隐式 地创建一个全局变量（非严格模式下），该变量使用 LHS 引用的目标作为标识符，或者抛 出 ReferenceError 异常（严格模式下）。</li>\n</ol>"},{"title":"JavaScript值类型","date":"2019-06-14T12:12:56.000Z","_content":"\n# 内置类型(ES6七种)\n* 空值 `null`\n* 未定义 `undefined`\n* 布尔值 `boolean`\n* 数字 `number`\n* 字符串 `string`\n* 对象 `object`\n* 符号 `symbol`\n\n使用typeof运算符查看结果，并非一一对应\n\n```js\nconsole.log(typeof null === 'null') // false,typeof的结果为‘object’\nconsole.log(typeof undefined === 'undefined') // true\nconsole.log(typeof true === 'boolean') // true\nconsole.log(typeof 2233 === 'number') // true\nconsole.log(typeof '2233' === 'string') // true\nconsole.log(typeof { name: 'cool1204' } === 'object') // true\nconsole.log(typeof Symbol() === 'symbol') // true\n```\n> `null`并没得到对应的字符串，这是js中存在已久的bug，也许永远不会被修复,可以使用`!a && typeof a ==='object'`来判断变量的值是不是null\n\n### function是什么类型？\n```js\ntypeof function(){} === 'function' // true\n```\n虽然测试结果是function，但文档规范中说明了函数是object的'子类型'，是一个'可调用对象',内部有一个Call属性，使其可以调用；函数不仅是对象，还有属性\n```js\nfunction a(b, c) { }\nconsole.log(a.length) // 2,打印的是函数声明的参数个数\n```\n\n### 数组是什么类型？\n数组也是对象，数组元素按数字顺序来进行所言，而不是普对象那样通过字符串进行索引，其length是属性元素个数\n```js\ntypeof [1,2,3] === 'object' // true\n```\n\n> 只有值才有类型，变量可以随时持有任何类型的值","source":"_posts/JavaScript值类型.md","raw":"---\ntitle: JavaScript值类型\ndate: 2019-06-14 20:12:56\ntags: [\"JavaScript\"]\ncategories: Web开发\n---\n\n# 内置类型(ES6七种)\n* 空值 `null`\n* 未定义 `undefined`\n* 布尔值 `boolean`\n* 数字 `number`\n* 字符串 `string`\n* 对象 `object`\n* 符号 `symbol`\n\n使用typeof运算符查看结果，并非一一对应\n\n```js\nconsole.log(typeof null === 'null') // false,typeof的结果为‘object’\nconsole.log(typeof undefined === 'undefined') // true\nconsole.log(typeof true === 'boolean') // true\nconsole.log(typeof 2233 === 'number') // true\nconsole.log(typeof '2233' === 'string') // true\nconsole.log(typeof { name: 'cool1204' } === 'object') // true\nconsole.log(typeof Symbol() === 'symbol') // true\n```\n> `null`并没得到对应的字符串，这是js中存在已久的bug，也许永远不会被修复,可以使用`!a && typeof a ==='object'`来判断变量的值是不是null\n\n### function是什么类型？\n```js\ntypeof function(){} === 'function' // true\n```\n虽然测试结果是function，但文档规范中说明了函数是object的'子类型'，是一个'可调用对象',内部有一个Call属性，使其可以调用；函数不仅是对象，还有属性\n```js\nfunction a(b, c) { }\nconsole.log(a.length) // 2,打印的是函数声明的参数个数\n```\n\n### 数组是什么类型？\n数组也是对象，数组元素按数字顺序来进行所言，而不是普对象那样通过字符串进行索引，其length是属性元素个数\n```js\ntypeof [1,2,3] === 'object' // true\n```\n\n> 只有值才有类型，变量可以随时持有任何类型的值","slug":"JavaScript值类型","published":1,"updated":"2019-07-14T03:34:24.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld7u0008e8weeiqvim20","content":"<h1 id=\"内置类型-ES6七种\"><a href=\"#内置类型-ES6七种\" class=\"headerlink\" title=\"内置类型(ES6七种)\"></a>内置类型(ES6七种)</h1><ul>\n<li>空值 <code>null</code></li>\n<li>未定义 <code>undefined</code></li>\n<li>布尔值 <code>boolean</code></li>\n<li>数字 <code>number</code></li>\n<li>字符串 <code>string</code></li>\n<li>对象 <code>object</code></li>\n<li>符号 <code>symbol</code></li>\n</ul>\n<p>使用typeof运算符查看结果，并非一一对应</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span> === <span class=\"string\">'null'</span>) <span class=\"comment\">// false,typeof的结果为‘object’</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> === <span class=\"string\">'undefined'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">true</span> === <span class=\"string\">'boolean'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"number\">2233</span> === <span class=\"string\">'number'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"string\">'2233'</span> === <span class=\"string\">'string'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> &#123; <span class=\"attr\">name</span>: <span class=\"string\">'cool1204'</span> &#125; === <span class=\"string\">'object'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Symbol</span>() === <span class=\"string\">'symbol'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>null</code>并没得到对应的字符串，这是js中存在已久的bug，也许永远不会被修复,可以使用<code>!a &amp;&amp; typeof a ===&#39;object&#39;</code>来判断变量的值是不是null</p>\n</blockquote>\n<h3 id=\"function是什么类型？\"><a href=\"#function是什么类型？\" class=\"headerlink\" title=\"function是什么类型？\"></a>function是什么类型？</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; === <span class=\"string\">'function'</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>虽然测试结果是function，但文档规范中说明了函数是object的’子类型’，是一个’可调用对象’,内部有一个Call属性，使其可以调用；函数不仅是对象，还有属性<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">b, c</span>) </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.length) <span class=\"comment\">// 2,打印的是函数声明的参数个数</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数组是什么类型？\"><a href=\"#数组是什么类型？\" class=\"headerlink\" title=\"数组是什么类型？\"></a>数组是什么类型？</h3><p>数组也是对象，数组元素按数字顺序来进行所言，而不是普对象那样通过字符串进行索引，其length是属性元素个数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] === <span class=\"string\">'object'</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>只有值才有类型，变量可以随时持有任何类型的值</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"内置类型-ES6七种\"><a href=\"#内置类型-ES6七种\" class=\"headerlink\" title=\"内置类型(ES6七种)\"></a>内置类型(ES6七种)</h1><ul>\n<li>空值 <code>null</code></li>\n<li>未定义 <code>undefined</code></li>\n<li>布尔值 <code>boolean</code></li>\n<li>数字 <code>number</code></li>\n<li>字符串 <code>string</code></li>\n<li>对象 <code>object</code></li>\n<li>符号 <code>symbol</code></li>\n</ul>\n<p>使用typeof运算符查看结果，并非一一对应</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span> === <span class=\"string\">'null'</span>) <span class=\"comment\">// false,typeof的结果为‘object’</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> === <span class=\"string\">'undefined'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">true</span> === <span class=\"string\">'boolean'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"number\">2233</span> === <span class=\"string\">'number'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"string\">'2233'</span> === <span class=\"string\">'string'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> &#123; <span class=\"attr\">name</span>: <span class=\"string\">'cool1204'</span> &#125; === <span class=\"string\">'object'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"built_in\">Symbol</span>() === <span class=\"string\">'symbol'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>null</code>并没得到对应的字符串，这是js中存在已久的bug，也许永远不会被修复,可以使用<code>!a &amp;&amp; typeof a ===&#39;object&#39;</code>来判断变量的值是不是null</p>\n</blockquote>\n<h3 id=\"function是什么类型？\"><a href=\"#function是什么类型？\" class=\"headerlink\" title=\"function是什么类型？\"></a>function是什么类型？</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; === <span class=\"string\">'function'</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>虽然测试结果是function，但文档规范中说明了函数是object的’子类型’，是一个’可调用对象’,内部有一个Call属性，使其可以调用；函数不仅是对象，还有属性<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">b, c</span>) </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.length) <span class=\"comment\">// 2,打印的是函数声明的参数个数</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数组是什么类型？\"><a href=\"#数组是什么类型？\" class=\"headerlink\" title=\"数组是什么类型？\"></a>数组是什么类型？</h3><p>数组也是对象，数组元素按数字顺序来进行所言，而不是普对象那样通过字符串进行索引，其length是属性元素个数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] === <span class=\"string\">'object'</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>只有值才有类型，变量可以随时持有任何类型的值</p>\n</blockquote>\n"},{"title":"JavaScript 相等判断","date":"2018-07-25T00:35:20.000Z","_content":"\n#### 相等\n相等运算符有四种:==、===、!= 和 !==。! 形式显然是相应的“不等”版本;不要混淆了 不等关系和不相等。\n\n== 和 === 的区别在于，== 检查的是允许类型转换情况下的值的相等性，而 === 检查不允许类型转换 情况下的值的相等性;因此，=== 经常被称为“严格相等”。\n<!--more-->\n```js\nvar a = '1';\nvar b = 1;\na == b; // true;\na === b; // false;\n```\n\n####   == 的比较规则\n\n1. If Type(x) is the same as Type(y), then\n * If Type(x) is Undefined, return true.\n * If Type(x) is Null, return true.\n * If Type(x) is Number, then\n  * If x is NaN, return false.\n  * If y is NaN, return false.\n  * If x is the same Number value as y, return true.\n  * If x is +0 and y is −0, return true.\n  * If x is −0 and y is +0, return true.\n  * Return false.\n * If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same length and same characters in corresponding positions). Otherwise, return false.\n * If Type(x) is Boolean, return true if x and y are both true or both false. Otherwise, return false.\n * Return true if x and y refer to the same object. Otherwise, return false.\n2. If x is null and y is undefined, return true.\n3. If x is undefined and y is null, return true.\n4. If Type(x) is Number and Type(y) is String,\nreturn the result of the comparison x == ToNumber(y).\n5. If Type(x) is String and Type(y) is Number,\nreturn the result of the comparison ToNumber(x) == y.\n6. If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.\n7. If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).\n8. If Type(x) is either String or Number and Type(y) is Object,\nreturn the result of the comparison x == ToPrimitive(y).\n9. If Type(x) is Object and Type(y) is either String or Number,\nreturn the result of the comparison ToPrimitive(x) == y.\n10. Return false.\n\n#### === 的比较规则\n1. If Type(x) is different from Type(y), return false.\n2. If Type(x) is Undefined, return true.\n3. If Type(x) is Null, return true.\n4. If Type(x) is Number, then\n * If x is NaN, return false.\n * If y is NaN, return false.\n * If x is the same Number value as y, return true.\n * If x is +0 and y is −0, return true.\n * If x is −0 and y is +0, return true.\n * Return false.\n5. If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same length and same characters in corresponding positions); otherwise, return false.\n6. If Type(x) is Boolean, return true if x and y are both true or both false; otherwise, return false.\n7. Return true if x and y refer to the same object. Otherwise, return false.","source":"_posts/JavaScript-Note-1.md","raw":"---\ntitle: JavaScript 相等判断\ndate: 2018-07-25 08:35:20\ntags: JavaScript\ncategories: Web开发\n---\n\n#### 相等\n相等运算符有四种:==、===、!= 和 !==。! 形式显然是相应的“不等”版本;不要混淆了 不等关系和不相等。\n\n== 和 === 的区别在于，== 检查的是允许类型转换情况下的值的相等性，而 === 检查不允许类型转换 情况下的值的相等性;因此，=== 经常被称为“严格相等”。\n<!--more-->\n```js\nvar a = '1';\nvar b = 1;\na == b; // true;\na === b; // false;\n```\n\n####   == 的比较规则\n\n1. If Type(x) is the same as Type(y), then\n * If Type(x) is Undefined, return true.\n * If Type(x) is Null, return true.\n * If Type(x) is Number, then\n  * If x is NaN, return false.\n  * If y is NaN, return false.\n  * If x is the same Number value as y, return true.\n  * If x is +0 and y is −0, return true.\n  * If x is −0 and y is +0, return true.\n  * Return false.\n * If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same length and same characters in corresponding positions). Otherwise, return false.\n * If Type(x) is Boolean, return true if x and y are both true or both false. Otherwise, return false.\n * Return true if x and y refer to the same object. Otherwise, return false.\n2. If x is null and y is undefined, return true.\n3. If x is undefined and y is null, return true.\n4. If Type(x) is Number and Type(y) is String,\nreturn the result of the comparison x == ToNumber(y).\n5. If Type(x) is String and Type(y) is Number,\nreturn the result of the comparison ToNumber(x) == y.\n6. If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.\n7. If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).\n8. If Type(x) is either String or Number and Type(y) is Object,\nreturn the result of the comparison x == ToPrimitive(y).\n9. If Type(x) is Object and Type(y) is either String or Number,\nreturn the result of the comparison ToPrimitive(x) == y.\n10. Return false.\n\n#### === 的比较规则\n1. If Type(x) is different from Type(y), return false.\n2. If Type(x) is Undefined, return true.\n3. If Type(x) is Null, return true.\n4. If Type(x) is Number, then\n * If x is NaN, return false.\n * If y is NaN, return false.\n * If x is the same Number value as y, return true.\n * If x is +0 and y is −0, return true.\n * If x is −0 and y is +0, return true.\n * Return false.\n5. If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same length and same characters in corresponding positions); otherwise, return false.\n6. If Type(x) is Boolean, return true if x and y are both true or both false; otherwise, return false.\n7. Return true if x and y refer to the same object. Otherwise, return false.","slug":"JavaScript-Note-1","published":1,"updated":"2019-07-12T03:15:08.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld7x000ae8wev05a7ijc","content":"<h4 id=\"相等\"><a href=\"#相等\" class=\"headerlink\" title=\"相等\"></a>相等</h4><p>相等运算符有四种:==、===、!= 和 !==。! 形式显然是相应的“不等”版本;不要混淆了 不等关系和不相等。</p>\n<p>== 和 === 的区别在于，== 检查的是允许类型转换情况下的值的相等性，而 === 检查不允许类型转换 情况下的值的相等性;因此，=== 经常被称为“严格相等”。<br><a id=\"more\"></a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'1'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">a == b; <span class=\"comment\">// true;</span></span><br><span class=\"line\">a === b; <span class=\"comment\">// false;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"的比较规则\"><a href=\"#的比较规则\" class=\"headerlink\" title=\"== 的比较规则\"></a>== 的比较规则</h4><ol>\n<li>If Type(x) is the same as Type(y), then<ul>\n<li>If Type(x) is Undefined, return true.</li>\n<li>If Type(x) is Null, return true.</li>\n<li>If Type(x) is Number, then</li>\n<li>If x is NaN, return false.</li>\n<li>If y is NaN, return false.</li>\n<li>If x is the same Number value as y, return true.</li>\n<li>If x is +0 and y is −0, return true.</li>\n<li>If x is −0 and y is +0, return true.</li>\n<li>Return false.</li>\n<li>If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same length and same characters in corresponding positions). Otherwise, return false.</li>\n<li>If Type(x) is Boolean, return true if x and y are both true or both false. Otherwise, return false.</li>\n<li>Return true if x and y refer to the same object. Otherwise, return false.</li>\n</ul>\n</li>\n<li>If x is null and y is undefined, return true.</li>\n<li>If x is undefined and y is null, return true.</li>\n<li>If Type(x) is Number and Type(y) is String,<br>return the result of the comparison x == ToNumber(y).</li>\n<li>If Type(x) is String and Type(y) is Number,<br>return the result of the comparison ToNumber(x) == y.</li>\n<li>If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.</li>\n<li>If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).</li>\n<li>If Type(x) is either String or Number and Type(y) is Object,<br>return the result of the comparison x == ToPrimitive(y).</li>\n<li>If Type(x) is Object and Type(y) is either String or Number,<br>return the result of the comparison ToPrimitive(x) == y.</li>\n<li>Return false.</li>\n</ol>\n<h4 id=\"的比较规则-1\"><a href=\"#的比较规则-1\" class=\"headerlink\" title=\"=== 的比较规则\"></a>=== 的比较规则</h4><ol>\n<li>If Type(x) is different from Type(y), return false.</li>\n<li>If Type(x) is Undefined, return true.</li>\n<li>If Type(x) is Null, return true.</li>\n<li>If Type(x) is Number, then<ul>\n<li>If x is NaN, return false.</li>\n<li>If y is NaN, return false.</li>\n<li>If x is the same Number value as y, return true.</li>\n<li>If x is +0 and y is −0, return true.</li>\n<li>If x is −0 and y is +0, return true.</li>\n<li>Return false.</li>\n</ul>\n</li>\n<li>If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same length and same characters in corresponding positions); otherwise, return false.</li>\n<li>If Type(x) is Boolean, return true if x and y are both true or both false; otherwise, return false.</li>\n<li>Return true if x and y refer to the same object. Otherwise, return false.</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h4 id=\"相等\"><a href=\"#相等\" class=\"headerlink\" title=\"相等\"></a>相等</h4><p>相等运算符有四种:==、===、!= 和 !==。! 形式显然是相应的“不等”版本;不要混淆了 不等关系和不相等。</p>\n<p>== 和 === 的区别在于，== 检查的是允许类型转换情况下的值的相等性，而 === 检查不允许类型转换 情况下的值的相等性;因此，=== 经常被称为“严格相等”。<br>","more":"<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'1'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">a == b; <span class=\"comment\">// true;</span></span><br><span class=\"line\">a === b; <span class=\"comment\">// false;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"的比较规则\"><a href=\"#的比较规则\" class=\"headerlink\" title=\"== 的比较规则\"></a>== 的比较规则</h4><ol>\n<li>If Type(x) is the same as Type(y), then<ul>\n<li>If Type(x) is Undefined, return true.</li>\n<li>If Type(x) is Null, return true.</li>\n<li>If Type(x) is Number, then</li>\n<li>If x is NaN, return false.</li>\n<li>If y is NaN, return false.</li>\n<li>If x is the same Number value as y, return true.</li>\n<li>If x is +0 and y is −0, return true.</li>\n<li>If x is −0 and y is +0, return true.</li>\n<li>Return false.</li>\n<li>If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same length and same characters in corresponding positions). Otherwise, return false.</li>\n<li>If Type(x) is Boolean, return true if x and y are both true or both false. Otherwise, return false.</li>\n<li>Return true if x and y refer to the same object. Otherwise, return false.</li>\n</ul>\n</li>\n<li>If x is null and y is undefined, return true.</li>\n<li>If x is undefined and y is null, return true.</li>\n<li>If Type(x) is Number and Type(y) is String,<br>return the result of the comparison x == ToNumber(y).</li>\n<li>If Type(x) is String and Type(y) is Number,<br>return the result of the comparison ToNumber(x) == y.</li>\n<li>If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y.</li>\n<li>If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).</li>\n<li>If Type(x) is either String or Number and Type(y) is Object,<br>return the result of the comparison x == ToPrimitive(y).</li>\n<li>If Type(x) is Object and Type(y) is either String or Number,<br>return the result of the comparison ToPrimitive(x) == y.</li>\n<li>Return false.</li>\n</ol>\n<h4 id=\"的比较规则-1\"><a href=\"#的比较规则-1\" class=\"headerlink\" title=\"=== 的比较规则\"></a>=== 的比较规则</h4><ol>\n<li>If Type(x) is different from Type(y), return false.</li>\n<li>If Type(x) is Undefined, return true.</li>\n<li>If Type(x) is Null, return true.</li>\n<li>If Type(x) is Number, then<ul>\n<li>If x is NaN, return false.</li>\n<li>If y is NaN, return false.</li>\n<li>If x is the same Number value as y, return true.</li>\n<li>If x is +0 and y is −0, return true.</li>\n<li>If x is −0 and y is +0, return true.</li>\n<li>Return false.</li>\n</ul>\n</li>\n<li>If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same length and same characters in corresponding positions); otherwise, return false.</li>\n<li>If Type(x) is Boolean, return true if x and y are both true or both false; otherwise, return false.</li>\n<li>Return true if x and y refer to the same object. Otherwise, return false.</li>\n</ol>"},{"title":"使用SharedPreferences保存键值对数据","date":"2019-07-01T01:03:42.000Z","_content":"\n当我们不需要存储大量数据并且不需要特别的数据结构，则应使用SharedPreferences。SharedPreferencesAPI允许你读写基本数据类型的持久键值对：布尔型，浮点数，整型，长整型和字符串。\n\n这些键值将写入到XML文件中，并且在用户会话中持续存在，即使应用程序被终止任然会保存。可以手动指定文件的名称，也可以基于活动（指定Activity）保存数据文件。\n\nAPI名称“共享首选项”有点误导，API并不严格用于保存“用户首选项”，例如用户选择的铃声。您可以使用SharedPreferences 保存任何类型的简单数据，例如用户的高分。但是，如果您确实要为应用程序保存用户首选项，那么您应该阅读如何创建Setting UI，使用AndroidX Preference Library 构建设置屏幕并自动保留用户的设置。\n<!-- more -->\n\n# 简单的SharedPreferences使用\n\n1. 获取SharedPreferences句柄（Handle）\n a. `getSharedPreferences()` --指定文件名称，在应用中任使用Context调用即可\n b. `getPreferences()` --基于当前活动，这样将检索属于该活动的默认共享首选项文件\n\n```Kotlin\n// 使用context，指定名称获取，使用MODE_PRIVATE只允许本APP使用\nval sharedPreferencesOne = context?.getSharedPreferences(\"自定义名称，用于区分\", Context.MODE_PRIVATE)\n\n// 使用activity，指定活动获取，使用MODE_PRIVATE只允许本APP使用\nval sharedPreferencesTwo  = activity?.getPreferences(Context.MODE_PRIVATE)\n```\n>注意： MODE_WORLD_READABLE和 MODE_WORLD_WRITEABLE从API17开始被废弃.从Android 7.0（API级别24）时使用它们将会抛出一 SecurityException（异常）。如果您的应用程序需要与其他应用共享的私人文件，可以使用FileProvider与FLAG_GRANT_READ_URI_PERMISSION。有关更多信息，[另请参阅共享文件](https://developer.android.com/training/secure-file-sharing/index.html)。\n\n2. 写入数据\n\n写入数据需要创建一个编辑对象（SharedPreferences.Editor），使用上面创建好的获取SharedPreferences句柄的`edit()`方法可以创建一个编辑对象。\n编辑完成后使用`call()`或者`apply()`方法保存变更\n\n```Kotlin\nval sharedPreferences = context?.getSharedPreferences(\"自定义名称，用于区分\", Context.MODE_PRIVATE)\nsharedPreferences?.edit()?.apply {\n    putInt(\"age\", 18)\n    putBoolean(\"isActive\", true)\n    apply()\n}\n```\n> `commit()`是同步的并且会返回true/false告知是否写入成功，如果有多个编辑器对象同时执行commit操作，那么最后一次提交会生效（应该避免在主线程使用commit）\n`apply()`会立即更改内存中的对象，但异步将更新写入磁盘，它不会返回更改结果，如果我们不关心操作结果并且在主线程进行生效操作，那么这个是不错的选择\n\n3. 读取数据\n\n```Kotlin\nval sharedPreferences = context?.getSharedPreferences(\"自定义名称，用于区分\", Context.MODE_PRIVATE)\nval defaultValue = 10\nval age = sharedPreferences.getInt(\"age\", defaultValue)\n```\n\n# 使用Setting UI构建APP设置界面\n\nPreference库允许您构建交互式设置屏幕，而无需处理与设备存储的交互或管理用户界面。[点击查看相关库组件说明](https://developer.android.com/reference/androidx/preference/package-summary.html)\n\n1. Android Studio提供了快速创建的功能，如下图所示点击创建（File->New->Activity->Settings Activity）\n![参考图片](/images/jetpack/settings.png)\n\n2. 编写配置文件\n```xml\n<androidx.preference.PreferenceScreen\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n\n    <PreferenceCategory\n            app:title=\"@string/setting_play\">\n\n        <ListPreference\n                app:key=\"setting_play_decode_method\"\n                app:title=\"@string/setting_play_decode_method\"\n                app:entries=\"@array/decode_entries\"\n                app:entryValues=\"@array/decode_values\"\n                app:defaultValue=\"hardware\"\n                app:useSimpleSummaryProvider=\"true\"/>\n\n    </PreferenceCategory>\n\n    <PreferenceCategory\n            app:title=\"@string/setting_message_title\">\n\n        <SwitchPreferenceCompat\n                app:key=\"message_allow\"\n                app:title=\"@string/setting_message_allow\"/>\n\n        <SwitchPreferenceCompat\n                app:key=\"message_allow_call\"\n                app:dependency=\"message_allow\"\n                app:title=\"@string/setting_message_allow_call\"\n                app:summary=\"@string/setting_message_allow_call_subject\"/>\n\n        <SwitchPreferenceCompat\n                app:key=\"setting_message_allow_notify\"\n                app:dependency=\"message_allow\"\n                app:title=\"@string/setting_message_allow_notify\"\n                app:summary=\"@string/setting_message_allow_notify_subject\"/>\n\n    </PreferenceCategory>\n\n</androidx.preference.PreferenceScreen>\n```\n3. SettingsActivity 相关代码\n```Kotlin\npackage com.example.androidx_example\n\nimport android.os.Bundle\nimport android.view.MenuItem\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.preference.PreferenceFragmentCompat\nimport kotlinx.android.synthetic.main.settings_activity.*\n\nclass SettingsActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.settings_activity)\n        supportFragmentManager\n            .beginTransaction()\n            .replace(R.id.settings, SettingsFragment())\n            .commit()\n        setSupportActionBar(setting_toolbar)\n        supportActionBar?.title = \"设置\"\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\n    }\n\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n        if (item.itemId == android.R.id.home) finish()\n        return super.onOptionsItemSelected(item)\n    }\n\n    class SettingsFragment : PreferenceFragmentCompat() {\n        override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\n            setPreferencesFromResource(R.xml.root_preferences, rootKey)\n        }\n    }\n}\n```\n\n4. SettingsActivity布局文件\n```xml\n<LinearLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n    <com.google.android.material.appbar.AppBarLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n        <androidx.appcompat.widget.Toolbar\n                android:id=\"@+id/setting_toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"@dimen/actionbar_height\"\n                android:paddingStart=\"0dp\"\n                android:paddingEnd=\"@dimen/padding_lg\"\n                android:theme=\"@style/ActionBarStyle\"/>\n    </com.google.android.material.appbar.AppBarLayout>\n    <FrameLayout\n            android:id=\"@+id/settings\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"1\"/>\n</LinearLayout>\n```\n\n5. 预览结果\n![参考图片](/images/jetpack/setting-view.png)","source":"_posts/android-save-keyvaluedata.md","raw":"---\ntitle: 使用SharedPreferences保存键值对数据\ndate: 2019-07-01 09:03:42\ntags: [\"android\"]\ncategories: Android开发\n---\n\n当我们不需要存储大量数据并且不需要特别的数据结构，则应使用SharedPreferences。SharedPreferencesAPI允许你读写基本数据类型的持久键值对：布尔型，浮点数，整型，长整型和字符串。\n\n这些键值将写入到XML文件中，并且在用户会话中持续存在，即使应用程序被终止任然会保存。可以手动指定文件的名称，也可以基于活动（指定Activity）保存数据文件。\n\nAPI名称“共享首选项”有点误导，API并不严格用于保存“用户首选项”，例如用户选择的铃声。您可以使用SharedPreferences 保存任何类型的简单数据，例如用户的高分。但是，如果您确实要为应用程序保存用户首选项，那么您应该阅读如何创建Setting UI，使用AndroidX Preference Library 构建设置屏幕并自动保留用户的设置。\n<!-- more -->\n\n# 简单的SharedPreferences使用\n\n1. 获取SharedPreferences句柄（Handle）\n a. `getSharedPreferences()` --指定文件名称，在应用中任使用Context调用即可\n b. `getPreferences()` --基于当前活动，这样将检索属于该活动的默认共享首选项文件\n\n```Kotlin\n// 使用context，指定名称获取，使用MODE_PRIVATE只允许本APP使用\nval sharedPreferencesOne = context?.getSharedPreferences(\"自定义名称，用于区分\", Context.MODE_PRIVATE)\n\n// 使用activity，指定活动获取，使用MODE_PRIVATE只允许本APP使用\nval sharedPreferencesTwo  = activity?.getPreferences(Context.MODE_PRIVATE)\n```\n>注意： MODE_WORLD_READABLE和 MODE_WORLD_WRITEABLE从API17开始被废弃.从Android 7.0（API级别24）时使用它们将会抛出一 SecurityException（异常）。如果您的应用程序需要与其他应用共享的私人文件，可以使用FileProvider与FLAG_GRANT_READ_URI_PERMISSION。有关更多信息，[另请参阅共享文件](https://developer.android.com/training/secure-file-sharing/index.html)。\n\n2. 写入数据\n\n写入数据需要创建一个编辑对象（SharedPreferences.Editor），使用上面创建好的获取SharedPreferences句柄的`edit()`方法可以创建一个编辑对象。\n编辑完成后使用`call()`或者`apply()`方法保存变更\n\n```Kotlin\nval sharedPreferences = context?.getSharedPreferences(\"自定义名称，用于区分\", Context.MODE_PRIVATE)\nsharedPreferences?.edit()?.apply {\n    putInt(\"age\", 18)\n    putBoolean(\"isActive\", true)\n    apply()\n}\n```\n> `commit()`是同步的并且会返回true/false告知是否写入成功，如果有多个编辑器对象同时执行commit操作，那么最后一次提交会生效（应该避免在主线程使用commit）\n`apply()`会立即更改内存中的对象，但异步将更新写入磁盘，它不会返回更改结果，如果我们不关心操作结果并且在主线程进行生效操作，那么这个是不错的选择\n\n3. 读取数据\n\n```Kotlin\nval sharedPreferences = context?.getSharedPreferences(\"自定义名称，用于区分\", Context.MODE_PRIVATE)\nval defaultValue = 10\nval age = sharedPreferences.getInt(\"age\", defaultValue)\n```\n\n# 使用Setting UI构建APP设置界面\n\nPreference库允许您构建交互式设置屏幕，而无需处理与设备存储的交互或管理用户界面。[点击查看相关库组件说明](https://developer.android.com/reference/androidx/preference/package-summary.html)\n\n1. Android Studio提供了快速创建的功能，如下图所示点击创建（File->New->Activity->Settings Activity）\n![参考图片](/images/jetpack/settings.png)\n\n2. 编写配置文件\n```xml\n<androidx.preference.PreferenceScreen\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n\n    <PreferenceCategory\n            app:title=\"@string/setting_play\">\n\n        <ListPreference\n                app:key=\"setting_play_decode_method\"\n                app:title=\"@string/setting_play_decode_method\"\n                app:entries=\"@array/decode_entries\"\n                app:entryValues=\"@array/decode_values\"\n                app:defaultValue=\"hardware\"\n                app:useSimpleSummaryProvider=\"true\"/>\n\n    </PreferenceCategory>\n\n    <PreferenceCategory\n            app:title=\"@string/setting_message_title\">\n\n        <SwitchPreferenceCompat\n                app:key=\"message_allow\"\n                app:title=\"@string/setting_message_allow\"/>\n\n        <SwitchPreferenceCompat\n                app:key=\"message_allow_call\"\n                app:dependency=\"message_allow\"\n                app:title=\"@string/setting_message_allow_call\"\n                app:summary=\"@string/setting_message_allow_call_subject\"/>\n\n        <SwitchPreferenceCompat\n                app:key=\"setting_message_allow_notify\"\n                app:dependency=\"message_allow\"\n                app:title=\"@string/setting_message_allow_notify\"\n                app:summary=\"@string/setting_message_allow_notify_subject\"/>\n\n    </PreferenceCategory>\n\n</androidx.preference.PreferenceScreen>\n```\n3. SettingsActivity 相关代码\n```Kotlin\npackage com.example.androidx_example\n\nimport android.os.Bundle\nimport android.view.MenuItem\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.preference.PreferenceFragmentCompat\nimport kotlinx.android.synthetic.main.settings_activity.*\n\nclass SettingsActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.settings_activity)\n        supportFragmentManager\n            .beginTransaction()\n            .replace(R.id.settings, SettingsFragment())\n            .commit()\n        setSupportActionBar(setting_toolbar)\n        supportActionBar?.title = \"设置\"\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\n    }\n\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n        if (item.itemId == android.R.id.home) finish()\n        return super.onOptionsItemSelected(item)\n    }\n\n    class SettingsFragment : PreferenceFragmentCompat() {\n        override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\n            setPreferencesFromResource(R.xml.root_preferences, rootKey)\n        }\n    }\n}\n```\n\n4. SettingsActivity布局文件\n```xml\n<LinearLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n    <com.google.android.material.appbar.AppBarLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n        <androidx.appcompat.widget.Toolbar\n                android:id=\"@+id/setting_toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"@dimen/actionbar_height\"\n                android:paddingStart=\"0dp\"\n                android:paddingEnd=\"@dimen/padding_lg\"\n                android:theme=\"@style/ActionBarStyle\"/>\n    </com.google.android.material.appbar.AppBarLayout>\n    <FrameLayout\n            android:id=\"@+id/settings\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"1\"/>\n</LinearLayout>\n```\n\n5. 预览结果\n![参考图片](/images/jetpack/setting-view.png)","slug":"android-save-keyvaluedata","published":1,"updated":"2019-07-09T09:33:03.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld7z000de8weh9727deu","content":"<p>当我们不需要存储大量数据并且不需要特别的数据结构，则应使用SharedPreferences。SharedPreferencesAPI允许你读写基本数据类型的持久键值对：布尔型，浮点数，整型，长整型和字符串。</p>\n<p>这些键值将写入到XML文件中，并且在用户会话中持续存在，即使应用程序被终止任然会保存。可以手动指定文件的名称，也可以基于活动（指定Activity）保存数据文件。</p>\n<p>API名称“共享首选项”有点误导，API并不严格用于保存“用户首选项”，例如用户选择的铃声。您可以使用SharedPreferences 保存任何类型的简单数据，例如用户的高分。但是，如果您确实要为应用程序保存用户首选项，那么您应该阅读如何创建Setting UI，使用AndroidX Preference Library 构建设置屏幕并自动保留用户的设置。<br><a id=\"more\"></a></p>\n<h1 id=\"简单的SharedPreferences使用\"><a href=\"#简单的SharedPreferences使用\" class=\"headerlink\" title=\"简单的SharedPreferences使用\"></a>简单的SharedPreferences使用</h1><ol>\n<li>获取SharedPreferences句柄（Handle）<br>a. <code>getSharedPreferences()</code> –指定文件名称，在应用中任使用Context调用即可<br>b. <code>getPreferences()</code> –基于当前活动，这样将检索属于该活动的默认共享首选项文件</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用context，指定名称获取，使用MODE_PRIVATE只允许本APP使用</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sharedPreferencesOne = context?.getSharedPreferences(<span class=\"string\">\"自定义名称，用于区分\"</span>, Context.MODE_PRIVATE)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用activity，指定活动获取，使用MODE_PRIVATE只允许本APP使用</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sharedPreferencesTwo  = activity?.getPreferences(Context.MODE_PRIVATE)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意： MODE_WORLD_READABLE和 MODE_WORLD_WRITEABLE从API17开始被废弃.从Android 7.0（API级别24）时使用它们将会抛出一 SecurityException（异常）。如果您的应用程序需要与其他应用共享的私人文件，可以使用FileProvider与FLAG_GRANT_READ_URI_PERMISSION。有关更多信息，<a href=\"https://developer.android.com/training/secure-file-sharing/index.html\" target=\"_blank\" rel=\"noopener\">另请参阅共享文件</a>。</p>\n</blockquote>\n<ol start=\"2\">\n<li>写入数据</li>\n</ol>\n<p>写入数据需要创建一个编辑对象（SharedPreferences.Editor），使用上面创建好的获取SharedPreferences句柄的<code>edit()</code>方法可以创建一个编辑对象。<br>编辑完成后使用<code>call()</code>或者<code>apply()</code>方法保存变更</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> sharedPreferences = context?.getSharedPreferences(<span class=\"string\">\"自定义名称，用于区分\"</span>, Context.MODE_PRIVATE)</span><br><span class=\"line\">sharedPreferences?.edit()?.apply &#123;</span><br><span class=\"line\">    putInt(<span class=\"string\">\"age\"</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\">    putBoolean(<span class=\"string\">\"isActive\"</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    apply()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>commit()</code>是同步的并且会返回true/false告知是否写入成功，如果有多个编辑器对象同时执行commit操作，那么最后一次提交会生效（应该避免在主线程使用commit）<br><code>apply()</code>会立即更改内存中的对象，但异步将更新写入磁盘，它不会返回更改结果，如果我们不关心操作结果并且在主线程进行生效操作，那么这个是不错的选择</p>\n</blockquote>\n<ol start=\"3\">\n<li>读取数据</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> sharedPreferences = context?.getSharedPreferences(<span class=\"string\">\"自定义名称，用于区分\"</span>, Context.MODE_PRIVATE)</span><br><span class=\"line\"><span class=\"keyword\">val</span> defaultValue = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> age = sharedPreferences.getInt(<span class=\"string\">\"age\"</span>, defaultValue)</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用Setting-UI构建APP设置界面\"><a href=\"#使用Setting-UI构建APP设置界面\" class=\"headerlink\" title=\"使用Setting UI构建APP设置界面\"></a>使用Setting UI构建APP设置界面</h1><p>Preference库允许您构建交互式设置屏幕，而无需处理与设备存储的交互或管理用户界面。<a href=\"https://developer.android.com/reference/androidx/preference/package-summary.html\" target=\"_blank\" rel=\"noopener\">点击查看相关库组件说明</a></p>\n<ol>\n<li><p>Android Studio提供了快速创建的功能，如下图所示点击创建（File-&gt;New-&gt;Activity-&gt;Settings Activity）<br><img src=\"/images/jetpack/settings.png\" alt=\"参考图片\"></p>\n</li>\n<li><p>编写配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.preference.PreferenceScreen</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PreferenceCategory</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:title</span>=<span class=\"string\">\"@string/setting_play\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ListPreference</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:key</span>=<span class=\"string\">\"setting_play_decode_method\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:title</span>=<span class=\"string\">\"@string/setting_play_decode_method\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:entries</span>=<span class=\"string\">\"@array/decode_entries\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:entryValues</span>=<span class=\"string\">\"@array/decode_values\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:defaultValue</span>=<span class=\"string\">\"hardware\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:useSimpleSummaryProvider</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">PreferenceCategory</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PreferenceCategory</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:title</span>=<span class=\"string\">\"@string/setting_message_title\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">SwitchPreferenceCompat</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:key</span>=<span class=\"string\">\"message_allow\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:title</span>=<span class=\"string\">\"@string/setting_message_allow\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">SwitchPreferenceCompat</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:key</span>=<span class=\"string\">\"message_allow_call\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:dependency</span>=<span class=\"string\">\"message_allow\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:title</span>=<span class=\"string\">\"@string/setting_message_allow_call\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:summary</span>=<span class=\"string\">\"@string/setting_message_allow_call_subject\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">SwitchPreferenceCompat</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:key</span>=<span class=\"string\">\"setting_message_allow_notify\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:dependency</span>=<span class=\"string\">\"message_allow\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:title</span>=<span class=\"string\">\"@string/setting_message_allow_notify\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:summary</span>=<span class=\"string\">\"@string/setting_message_allow_notify_subject\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">PreferenceCategory</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.preference.PreferenceScreen</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>SettingsActivity 相关代码</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.androidx_example</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.preference.PreferenceFragmentCompat</span><br><span class=\"line\"><span class=\"keyword\">import</span> kotlinx.android.synthetic.main.settings_activity.*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SettingsActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.settings_activity)</span><br><span class=\"line\">        supportFragmentManager</span><br><span class=\"line\">            .beginTransaction()</span><br><span class=\"line\">            .replace(R.id.settings, SettingsFragment())</span><br><span class=\"line\">            .commit()</span><br><span class=\"line\">        setSupportActionBar(setting_toolbar)</span><br><span class=\"line\">        supportActionBar?.title = <span class=\"string\">\"设置\"</span></span><br><span class=\"line\">        supportActionBar?.setDisplayHomeAsUpEnabled(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(item: <span class=\"type\">MenuItem</span>)</span></span>: <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.itemId == android.R.id.home) finish()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SettingsFragment</span> : <span class=\"type\">PreferenceFragmentCompat</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreatePreferences</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?, rootKey: <span class=\"type\">String</span>?)</span></span> &#123;</span><br><span class=\"line\">            setPreferencesFromResource(R.xml.root_preferences, rootKey)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>SettingsActivity布局文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.appbar.AppBarLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">androidx.appcompat.widget.Toolbar</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/setting_toolbar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"@dimen/actionbar_height\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:paddingStart</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:paddingEnd</span>=<span class=\"string\">\"@dimen/padding_lg\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ActionBarStyle\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">com.google.android.material.appbar.AppBarLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/settings\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>预览结果<br><img src=\"/images/jetpack/setting-view.png\" alt=\"参考图片\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>当我们不需要存储大量数据并且不需要特别的数据结构，则应使用SharedPreferences。SharedPreferencesAPI允许你读写基本数据类型的持久键值对：布尔型，浮点数，整型，长整型和字符串。</p>\n<p>这些键值将写入到XML文件中，并且在用户会话中持续存在，即使应用程序被终止任然会保存。可以手动指定文件的名称，也可以基于活动（指定Activity）保存数据文件。</p>\n<p>API名称“共享首选项”有点误导，API并不严格用于保存“用户首选项”，例如用户选择的铃声。您可以使用SharedPreferences 保存任何类型的简单数据，例如用户的高分。但是，如果您确实要为应用程序保存用户首选项，那么您应该阅读如何创建Setting UI，使用AndroidX Preference Library 构建设置屏幕并自动保留用户的设置。<br>","more":"</p>\n<h1 id=\"简单的SharedPreferences使用\"><a href=\"#简单的SharedPreferences使用\" class=\"headerlink\" title=\"简单的SharedPreferences使用\"></a>简单的SharedPreferences使用</h1><ol>\n<li>获取SharedPreferences句柄（Handle）<br>a. <code>getSharedPreferences()</code> –指定文件名称，在应用中任使用Context调用即可<br>b. <code>getPreferences()</code> –基于当前活动，这样将检索属于该活动的默认共享首选项文件</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用context，指定名称获取，使用MODE_PRIVATE只允许本APP使用</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sharedPreferencesOne = context?.getSharedPreferences(<span class=\"string\">\"自定义名称，用于区分\"</span>, Context.MODE_PRIVATE)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用activity，指定活动获取，使用MODE_PRIVATE只允许本APP使用</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sharedPreferencesTwo  = activity?.getPreferences(Context.MODE_PRIVATE)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意： MODE_WORLD_READABLE和 MODE_WORLD_WRITEABLE从API17开始被废弃.从Android 7.0（API级别24）时使用它们将会抛出一 SecurityException（异常）。如果您的应用程序需要与其他应用共享的私人文件，可以使用FileProvider与FLAG_GRANT_READ_URI_PERMISSION。有关更多信息，<a href=\"https://developer.android.com/training/secure-file-sharing/index.html\" target=\"_blank\" rel=\"noopener\">另请参阅共享文件</a>。</p>\n</blockquote>\n<ol start=\"2\">\n<li>写入数据</li>\n</ol>\n<p>写入数据需要创建一个编辑对象（SharedPreferences.Editor），使用上面创建好的获取SharedPreferences句柄的<code>edit()</code>方法可以创建一个编辑对象。<br>编辑完成后使用<code>call()</code>或者<code>apply()</code>方法保存变更</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> sharedPreferences = context?.getSharedPreferences(<span class=\"string\">\"自定义名称，用于区分\"</span>, Context.MODE_PRIVATE)</span><br><span class=\"line\">sharedPreferences?.edit()?.apply &#123;</span><br><span class=\"line\">    putInt(<span class=\"string\">\"age\"</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\">    putBoolean(<span class=\"string\">\"isActive\"</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    apply()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>commit()</code>是同步的并且会返回true/false告知是否写入成功，如果有多个编辑器对象同时执行commit操作，那么最后一次提交会生效（应该避免在主线程使用commit）<br><code>apply()</code>会立即更改内存中的对象，但异步将更新写入磁盘，它不会返回更改结果，如果我们不关心操作结果并且在主线程进行生效操作，那么这个是不错的选择</p>\n</blockquote>\n<ol start=\"3\">\n<li>读取数据</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> sharedPreferences = context?.getSharedPreferences(<span class=\"string\">\"自定义名称，用于区分\"</span>, Context.MODE_PRIVATE)</span><br><span class=\"line\"><span class=\"keyword\">val</span> defaultValue = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> age = sharedPreferences.getInt(<span class=\"string\">\"age\"</span>, defaultValue)</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用Setting-UI构建APP设置界面\"><a href=\"#使用Setting-UI构建APP设置界面\" class=\"headerlink\" title=\"使用Setting UI构建APP设置界面\"></a>使用Setting UI构建APP设置界面</h1><p>Preference库允许您构建交互式设置屏幕，而无需处理与设备存储的交互或管理用户界面。<a href=\"https://developer.android.com/reference/androidx/preference/package-summary.html\" target=\"_blank\" rel=\"noopener\">点击查看相关库组件说明</a></p>\n<ol>\n<li><p>Android Studio提供了快速创建的功能，如下图所示点击创建（File-&gt;New-&gt;Activity-&gt;Settings Activity）<br><img src=\"/images/jetpack/settings.png\" alt=\"参考图片\"></p>\n</li>\n<li><p>编写配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.preference.PreferenceScreen</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PreferenceCategory</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:title</span>=<span class=\"string\">\"@string/setting_play\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ListPreference</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:key</span>=<span class=\"string\">\"setting_play_decode_method\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:title</span>=<span class=\"string\">\"@string/setting_play_decode_method\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:entries</span>=<span class=\"string\">\"@array/decode_entries\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:entryValues</span>=<span class=\"string\">\"@array/decode_values\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:defaultValue</span>=<span class=\"string\">\"hardware\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:useSimpleSummaryProvider</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">PreferenceCategory</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PreferenceCategory</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:title</span>=<span class=\"string\">\"@string/setting_message_title\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">SwitchPreferenceCompat</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:key</span>=<span class=\"string\">\"message_allow\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:title</span>=<span class=\"string\">\"@string/setting_message_allow\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">SwitchPreferenceCompat</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:key</span>=<span class=\"string\">\"message_allow_call\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:dependency</span>=<span class=\"string\">\"message_allow\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:title</span>=<span class=\"string\">\"@string/setting_message_allow_call\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:summary</span>=<span class=\"string\">\"@string/setting_message_allow_call_subject\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">SwitchPreferenceCompat</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:key</span>=<span class=\"string\">\"setting_message_allow_notify\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:dependency</span>=<span class=\"string\">\"message_allow\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:title</span>=<span class=\"string\">\"@string/setting_message_allow_notify\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:summary</span>=<span class=\"string\">\"@string/setting_message_allow_notify_subject\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">PreferenceCategory</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.preference.PreferenceScreen</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>SettingsActivity 相关代码</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.androidx_example</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.preference.PreferenceFragmentCompat</span><br><span class=\"line\"><span class=\"keyword\">import</span> kotlinx.android.synthetic.main.settings_activity.*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SettingsActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.settings_activity)</span><br><span class=\"line\">        supportFragmentManager</span><br><span class=\"line\">            .beginTransaction()</span><br><span class=\"line\">            .replace(R.id.settings, SettingsFragment())</span><br><span class=\"line\">            .commit()</span><br><span class=\"line\">        setSupportActionBar(setting_toolbar)</span><br><span class=\"line\">        supportActionBar?.title = <span class=\"string\">\"设置\"</span></span><br><span class=\"line\">        supportActionBar?.setDisplayHomeAsUpEnabled(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(item: <span class=\"type\">MenuItem</span>)</span></span>: <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.itemId == android.R.id.home) finish()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SettingsFragment</span> : <span class=\"type\">PreferenceFragmentCompat</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreatePreferences</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?, rootKey: <span class=\"type\">String</span>?)</span></span> &#123;</span><br><span class=\"line\">            setPreferencesFromResource(R.xml.root_preferences, rootKey)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>SettingsActivity布局文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.appbar.AppBarLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">androidx.appcompat.widget.Toolbar</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/setting_toolbar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"@dimen/actionbar_height\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:paddingStart</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:paddingEnd</span>=<span class=\"string\">\"@dimen/padding_lg\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ActionBarStyle\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">com.google.android.material.appbar.AppBarLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/settings\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>预览结果<br><img src=\"/images/jetpack/setting-view.png\" alt=\"参考图片\"></p>\n</li>\n</ol>"},{"title":"使用RxJs创建响应式查询","date":"2019-07-14T02:21:40.000Z","_content":"\n## 描述\n做一个类似百度搜索框的查询功能,[官方参考文档](https://rxjs-dev.firebaseapp.com/)\n\n事件/数据流图\n<img src=\"/images/rxjs/search.png\" width=\"300\">\n<!--more-->\n\n相关代码\n\n```html\n<input id=\"search_input\" type=\"text\">\n<ul id=\"search_result\"></ul>\n```\n\n```js\nimport { of, fromEvent } from 'rxjs';\nimport { map, switchMap, debounceTime, distinctUntilChanged, delay, tap } from 'rxjs/operators';\n\n\n/**\n * 返回一个搜索观察对象\n * @param {string} key 搜索关键词\n * @return {Observable<String[]>}\n */\nfunction doSearch(key) {\n    return of(['Amsterdam', 'Antwerp', 'Athens', 'Barcelona',\n        'Berlin', 'Birmingham', 'Bradford', 'Bremen', 'Brussels', 'Bucharest',\n        'Budapest', 'Cologne', 'Copenhagen', 'Dortmund', 'Dresden', 'Dublin',\n        'Düsseldorf', 'Essen', 'Frankfurt', 'Genoa', 'Glasgow', 'Gothenburg',\n        'Hamburg', 'Hannover', 'Helsinki', 'Kraków', 'Leeds', 'Leipzig', 'Lisbon',\n        'London', 'Madrid', 'Manchester', 'Marseille', 'Milan', 'Munich', 'Málaga',\n        'Naples', 'Palermo', 'Paris', 'Poznań', 'Prague', 'Riga', 'Rome',\n        'Rotterdam', 'Seville', 'Sheffield', 'Sofia', 'Stockholm', 'Stuttgart',\n        'The Hague', 'Turin', 'Valencia', 'Vienna', 'Vilnius', 'Warsaw', 'Wrocław',\n        'Zagreb', 'Zaragoza', 'Łódź'].filter(item => ~item.indexOf(key)))\n        .pipe(\n            delay(500), // 延迟半秒模拟网络请求\n            tap(results => {\n                console.log('接收到响应', results);\n            })\n        );\n}\n\n/**\n * 把查询结果添加到结果列表中\n *  @param {string} item\n */\nfunction appendItem(item) {\n    document.getElementById('search_result').innerHTML += '<li>' + item + '</li>';\n}\n\nconst observable = fromEvent(document.getElementById('search_input'), 'keyup');\n\nobservable.pipe(\n    // 格式化传递的数据\n    map(event => event.target.value),\n    // 300秒没有发送数据的化就发送\n    debounceTime(300),\n    // 忽略相同的数据\n    distinctUntilChanged(),\n    // 把搜索关键词的观察对象转化成搜索观察对象\n    switchMap(value => doSearch(value))\n).subscribe(results => {\n    document.getElementById('search_result').innerHTML = '';\n    results.forEach(item => {\n        appendItem(item);\n    })\n});\n\n```\n\n## 相关函数介绍\n* `of` 将参数转换为可观察序列,[详细文档](https://rxjs-dev.firebaseapp.com/api/index/function/of)\n![of](/images/rxjs/of.png)\n* `fromEvent`从给定事件目标的特定类型的事件创建一个可观察对象（这里使用了input的keyup事件创建）,[详细文档](https://rxjs-dev.firebaseapp.com/api/index/function/fromEvent)\n![of](/images/rxjs/fromEvent.png)\n**支持的类型事件目标**：\n * DOM EventTarget(addEventListener和removeEventListener)\n * Node.js EventEmitter(addListener和removeListener)\n * JQuery风格的事件目标(on和off)\n * DOM NodeList(DOM节点列表，例如由document.querySelectorAll或返回Node.childNodes)\n * DOM HtmlCollection(就像NodeList一样，它是DOM节点的集合。这里也在每个元素中安装和删除事件处理函数)","source":"_posts/RxJS-搜索查询.md","raw":"---\ntitle: 使用RxJs创建响应式查询\ndate: 2019-07-14 10:21:40\ntags: [\"RxJs\"]\ncategories: Web开发\n---\n\n## 描述\n做一个类似百度搜索框的查询功能,[官方参考文档](https://rxjs-dev.firebaseapp.com/)\n\n事件/数据流图\n<img src=\"/images/rxjs/search.png\" width=\"300\">\n<!--more-->\n\n相关代码\n\n```html\n<input id=\"search_input\" type=\"text\">\n<ul id=\"search_result\"></ul>\n```\n\n```js\nimport { of, fromEvent } from 'rxjs';\nimport { map, switchMap, debounceTime, distinctUntilChanged, delay, tap } from 'rxjs/operators';\n\n\n/**\n * 返回一个搜索观察对象\n * @param {string} key 搜索关键词\n * @return {Observable<String[]>}\n */\nfunction doSearch(key) {\n    return of(['Amsterdam', 'Antwerp', 'Athens', 'Barcelona',\n        'Berlin', 'Birmingham', 'Bradford', 'Bremen', 'Brussels', 'Bucharest',\n        'Budapest', 'Cologne', 'Copenhagen', 'Dortmund', 'Dresden', 'Dublin',\n        'Düsseldorf', 'Essen', 'Frankfurt', 'Genoa', 'Glasgow', 'Gothenburg',\n        'Hamburg', 'Hannover', 'Helsinki', 'Kraków', 'Leeds', 'Leipzig', 'Lisbon',\n        'London', 'Madrid', 'Manchester', 'Marseille', 'Milan', 'Munich', 'Málaga',\n        'Naples', 'Palermo', 'Paris', 'Poznań', 'Prague', 'Riga', 'Rome',\n        'Rotterdam', 'Seville', 'Sheffield', 'Sofia', 'Stockholm', 'Stuttgart',\n        'The Hague', 'Turin', 'Valencia', 'Vienna', 'Vilnius', 'Warsaw', 'Wrocław',\n        'Zagreb', 'Zaragoza', 'Łódź'].filter(item => ~item.indexOf(key)))\n        .pipe(\n            delay(500), // 延迟半秒模拟网络请求\n            tap(results => {\n                console.log('接收到响应', results);\n            })\n        );\n}\n\n/**\n * 把查询结果添加到结果列表中\n *  @param {string} item\n */\nfunction appendItem(item) {\n    document.getElementById('search_result').innerHTML += '<li>' + item + '</li>';\n}\n\nconst observable = fromEvent(document.getElementById('search_input'), 'keyup');\n\nobservable.pipe(\n    // 格式化传递的数据\n    map(event => event.target.value),\n    // 300秒没有发送数据的化就发送\n    debounceTime(300),\n    // 忽略相同的数据\n    distinctUntilChanged(),\n    // 把搜索关键词的观察对象转化成搜索观察对象\n    switchMap(value => doSearch(value))\n).subscribe(results => {\n    document.getElementById('search_result').innerHTML = '';\n    results.forEach(item => {\n        appendItem(item);\n    })\n});\n\n```\n\n## 相关函数介绍\n* `of` 将参数转换为可观察序列,[详细文档](https://rxjs-dev.firebaseapp.com/api/index/function/of)\n![of](/images/rxjs/of.png)\n* `fromEvent`从给定事件目标的特定类型的事件创建一个可观察对象（这里使用了input的keyup事件创建）,[详细文档](https://rxjs-dev.firebaseapp.com/api/index/function/fromEvent)\n![of](/images/rxjs/fromEvent.png)\n**支持的类型事件目标**：\n * DOM EventTarget(addEventListener和removeEventListener)\n * Node.js EventEmitter(addListener和removeListener)\n * JQuery风格的事件目标(on和off)\n * DOM NodeList(DOM节点列表，例如由document.querySelectorAll或返回Node.childNodes)\n * DOM HtmlCollection(就像NodeList一样，它是DOM节点的集合。这里也在每个元素中安装和删除事件处理函数)","slug":"RxJS-搜索查询","published":1,"updated":"2019-07-14T04:04:27.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld82000ge8wepo15eq8k","content":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>做一个类似百度搜索框的查询功能,<a href=\"https://rxjs-dev.firebaseapp.com/\" target=\"_blank\" rel=\"noopener\">官方参考文档</a></p>\n<p>事件/数据流图<br><img src=\"/images/rxjs/search.png\" width=\"300\"><br><a id=\"more\"></a></p>\n<p>相关代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"search_input\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"search_result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">of</span>, fromEvent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; map, switchMap, debounceTime, distinctUntilChanged, delay, tap &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/operators'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回一个搜索观察对象</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; key 搜索关键词</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;Observable&lt;String[]&gt;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSearch</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">of</span>([<span class=\"string\">'Amsterdam'</span>, <span class=\"string\">'Antwerp'</span>, <span class=\"string\">'Athens'</span>, <span class=\"string\">'Barcelona'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Berlin'</span>, <span class=\"string\">'Birmingham'</span>, <span class=\"string\">'Bradford'</span>, <span class=\"string\">'Bremen'</span>, <span class=\"string\">'Brussels'</span>, <span class=\"string\">'Bucharest'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Budapest'</span>, <span class=\"string\">'Cologne'</span>, <span class=\"string\">'Copenhagen'</span>, <span class=\"string\">'Dortmund'</span>, <span class=\"string\">'Dresden'</span>, <span class=\"string\">'Dublin'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Düsseldorf'</span>, <span class=\"string\">'Essen'</span>, <span class=\"string\">'Frankfurt'</span>, <span class=\"string\">'Genoa'</span>, <span class=\"string\">'Glasgow'</span>, <span class=\"string\">'Gothenburg'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Hamburg'</span>, <span class=\"string\">'Hannover'</span>, <span class=\"string\">'Helsinki'</span>, <span class=\"string\">'Kraków'</span>, <span class=\"string\">'Leeds'</span>, <span class=\"string\">'Leipzig'</span>, <span class=\"string\">'Lisbon'</span>,</span><br><span class=\"line\">        <span class=\"string\">'London'</span>, <span class=\"string\">'Madrid'</span>, <span class=\"string\">'Manchester'</span>, <span class=\"string\">'Marseille'</span>, <span class=\"string\">'Milan'</span>, <span class=\"string\">'Munich'</span>, <span class=\"string\">'Málaga'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Naples'</span>, <span class=\"string\">'Palermo'</span>, <span class=\"string\">'Paris'</span>, <span class=\"string\">'Poznań'</span>, <span class=\"string\">'Prague'</span>, <span class=\"string\">'Riga'</span>, <span class=\"string\">'Rome'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Rotterdam'</span>, <span class=\"string\">'Seville'</span>, <span class=\"string\">'Sheffield'</span>, <span class=\"string\">'Sofia'</span>, <span class=\"string\">'Stockholm'</span>, <span class=\"string\">'Stuttgart'</span>,</span><br><span class=\"line\">        <span class=\"string\">'The Hague'</span>, <span class=\"string\">'Turin'</span>, <span class=\"string\">'Valencia'</span>, <span class=\"string\">'Vienna'</span>, <span class=\"string\">'Vilnius'</span>, <span class=\"string\">'Warsaw'</span>, <span class=\"string\">'Wrocław'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Zagreb'</span>, <span class=\"string\">'Zaragoza'</span>, <span class=\"string\">'Łódź'</span>].filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> ~item.indexOf(key)))</span><br><span class=\"line\">        .pipe(</span><br><span class=\"line\">            delay(<span class=\"number\">500</span>), <span class=\"comment\">// 延迟半秒模拟网络请求</span></span><br><span class=\"line\">            tap(<span class=\"function\"><span class=\"params\">results</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'接收到响应'</span>, results);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把查询结果添加到结果列表中</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param &#123;string&#125; item</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">appendItem</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'search_result'</span>).innerHTML += <span class=\"string\">'&lt;li&gt;'</span> + item + <span class=\"string\">'&lt;/li&gt;'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> observable = fromEvent(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'search_input'</span>), <span class=\"string\">'keyup'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">observable.pipe(</span><br><span class=\"line\">    <span class=\"comment\">// 格式化传递的数据</span></span><br><span class=\"line\">    map(<span class=\"function\"><span class=\"params\">event</span> =&gt;</span> event.target.value),</span><br><span class=\"line\">    <span class=\"comment\">// 300秒没有发送数据的化就发送</span></span><br><span class=\"line\">    debounceTime(<span class=\"number\">300</span>),</span><br><span class=\"line\">    <span class=\"comment\">// 忽略相同的数据</span></span><br><span class=\"line\">    distinctUntilChanged(),</span><br><span class=\"line\">    <span class=\"comment\">// 把搜索关键词的观察对象转化成搜索观察对象</span></span><br><span class=\"line\">    switchMap(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> doSearch(value))</span><br><span class=\"line\">).subscribe(<span class=\"function\"><span class=\"params\">results</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'search_result'</span>).innerHTML = <span class=\"string\">''</span>;</span><br><span class=\"line\">    results.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        appendItem(item);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关函数介绍\"><a href=\"#相关函数介绍\" class=\"headerlink\" title=\"相关函数介绍\"></a>相关函数介绍</h2><ul>\n<li><code>of</code> 将参数转换为可观察序列,<a href=\"https://rxjs-dev.firebaseapp.com/api/index/function/of\" target=\"_blank\" rel=\"noopener\">详细文档</a><br><img src=\"/images/rxjs/of.png\" alt=\"of\"></li>\n<li><code>fromEvent</code>从给定事件目标的特定类型的事件创建一个可观察对象（这里使用了input的keyup事件创建）,<a href=\"https://rxjs-dev.firebaseapp.com/api/index/function/fromEvent\" target=\"_blank\" rel=\"noopener\">详细文档</a><br><img src=\"/images/rxjs/fromEvent.png\" alt=\"of\"><br><strong>支持的类型事件目标</strong>：<ul>\n<li>DOM EventTarget(addEventListener和removeEventListener)</li>\n<li>Node.js EventEmitter(addListener和removeListener)</li>\n<li>JQuery风格的事件目标(on和off)</li>\n<li>DOM NodeList(DOM节点列表，例如由document.querySelectorAll或返回Node.childNodes)</li>\n<li>DOM HtmlCollection(就像NodeList一样，它是DOM节点的集合。这里也在每个元素中安装和删除事件处理函数)</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>做一个类似百度搜索框的查询功能,<a href=\"https://rxjs-dev.firebaseapp.com/\" target=\"_blank\" rel=\"noopener\">官方参考文档</a></p>\n<p>事件/数据流图<br><img src=\"/images/rxjs/search.png\" width=\"300\"><br>","more":"</p>\n<p>相关代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"search_input\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"search_result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">of</span>, fromEvent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; map, switchMap, debounceTime, distinctUntilChanged, delay, tap &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/operators'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回一个搜索观察对象</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; key 搜索关键词</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;Observable&lt;String[]&gt;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSearch</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">of</span>([<span class=\"string\">'Amsterdam'</span>, <span class=\"string\">'Antwerp'</span>, <span class=\"string\">'Athens'</span>, <span class=\"string\">'Barcelona'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Berlin'</span>, <span class=\"string\">'Birmingham'</span>, <span class=\"string\">'Bradford'</span>, <span class=\"string\">'Bremen'</span>, <span class=\"string\">'Brussels'</span>, <span class=\"string\">'Bucharest'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Budapest'</span>, <span class=\"string\">'Cologne'</span>, <span class=\"string\">'Copenhagen'</span>, <span class=\"string\">'Dortmund'</span>, <span class=\"string\">'Dresden'</span>, <span class=\"string\">'Dublin'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Düsseldorf'</span>, <span class=\"string\">'Essen'</span>, <span class=\"string\">'Frankfurt'</span>, <span class=\"string\">'Genoa'</span>, <span class=\"string\">'Glasgow'</span>, <span class=\"string\">'Gothenburg'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Hamburg'</span>, <span class=\"string\">'Hannover'</span>, <span class=\"string\">'Helsinki'</span>, <span class=\"string\">'Kraków'</span>, <span class=\"string\">'Leeds'</span>, <span class=\"string\">'Leipzig'</span>, <span class=\"string\">'Lisbon'</span>,</span><br><span class=\"line\">        <span class=\"string\">'London'</span>, <span class=\"string\">'Madrid'</span>, <span class=\"string\">'Manchester'</span>, <span class=\"string\">'Marseille'</span>, <span class=\"string\">'Milan'</span>, <span class=\"string\">'Munich'</span>, <span class=\"string\">'Málaga'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Naples'</span>, <span class=\"string\">'Palermo'</span>, <span class=\"string\">'Paris'</span>, <span class=\"string\">'Poznań'</span>, <span class=\"string\">'Prague'</span>, <span class=\"string\">'Riga'</span>, <span class=\"string\">'Rome'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Rotterdam'</span>, <span class=\"string\">'Seville'</span>, <span class=\"string\">'Sheffield'</span>, <span class=\"string\">'Sofia'</span>, <span class=\"string\">'Stockholm'</span>, <span class=\"string\">'Stuttgart'</span>,</span><br><span class=\"line\">        <span class=\"string\">'The Hague'</span>, <span class=\"string\">'Turin'</span>, <span class=\"string\">'Valencia'</span>, <span class=\"string\">'Vienna'</span>, <span class=\"string\">'Vilnius'</span>, <span class=\"string\">'Warsaw'</span>, <span class=\"string\">'Wrocław'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Zagreb'</span>, <span class=\"string\">'Zaragoza'</span>, <span class=\"string\">'Łódź'</span>].filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> ~item.indexOf(key)))</span><br><span class=\"line\">        .pipe(</span><br><span class=\"line\">            delay(<span class=\"number\">500</span>), <span class=\"comment\">// 延迟半秒模拟网络请求</span></span><br><span class=\"line\">            tap(<span class=\"function\"><span class=\"params\">results</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'接收到响应'</span>, results);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 把查询结果添加到结果列表中</span></span><br><span class=\"line\"><span class=\"comment\"> *  @param &#123;string&#125; item</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">appendItem</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'search_result'</span>).innerHTML += <span class=\"string\">'&lt;li&gt;'</span> + item + <span class=\"string\">'&lt;/li&gt;'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> observable = fromEvent(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'search_input'</span>), <span class=\"string\">'keyup'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">observable.pipe(</span><br><span class=\"line\">    <span class=\"comment\">// 格式化传递的数据</span></span><br><span class=\"line\">    map(<span class=\"function\"><span class=\"params\">event</span> =&gt;</span> event.target.value),</span><br><span class=\"line\">    <span class=\"comment\">// 300秒没有发送数据的化就发送</span></span><br><span class=\"line\">    debounceTime(<span class=\"number\">300</span>),</span><br><span class=\"line\">    <span class=\"comment\">// 忽略相同的数据</span></span><br><span class=\"line\">    distinctUntilChanged(),</span><br><span class=\"line\">    <span class=\"comment\">// 把搜索关键词的观察对象转化成搜索观察对象</span></span><br><span class=\"line\">    switchMap(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> doSearch(value))</span><br><span class=\"line\">).subscribe(<span class=\"function\"><span class=\"params\">results</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'search_result'</span>).innerHTML = <span class=\"string\">''</span>;</span><br><span class=\"line\">    results.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        appendItem(item);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关函数介绍\"><a href=\"#相关函数介绍\" class=\"headerlink\" title=\"相关函数介绍\"></a>相关函数介绍</h2><ul>\n<li><code>of</code> 将参数转换为可观察序列,<a href=\"https://rxjs-dev.firebaseapp.com/api/index/function/of\" target=\"_blank\" rel=\"noopener\">详细文档</a><br><img src=\"/images/rxjs/of.png\" alt=\"of\"></li>\n<li><code>fromEvent</code>从给定事件目标的特定类型的事件创建一个可观察对象（这里使用了input的keyup事件创建）,<a href=\"https://rxjs-dev.firebaseapp.com/api/index/function/fromEvent\" target=\"_blank\" rel=\"noopener\">详细文档</a><br><img src=\"/images/rxjs/fromEvent.png\" alt=\"of\"><br><strong>支持的类型事件目标</strong>：<ul>\n<li>DOM EventTarget(addEventListener和removeEventListener)</li>\n<li>Node.js EventEmitter(addListener和removeListener)</li>\n<li>JQuery风格的事件目标(on和off)</li>\n<li>DOM NodeList(DOM节点列表，例如由document.querySelectorAll或返回Node.childNodes)</li>\n<li>DOM HtmlCollection(就像NodeList一样，它是DOM节点的集合。这里也在每个元素中安装和删除事件处理函数)</li>\n</ul>\n</li>\n</ul>"},{"title":"Android共享文件","date":"2019-06-30T11:05:35.000Z","_content":"\n应用程序通常需要将一个或多个文件提供给另一个应用程序。例如，图库可能希望向图像编辑器提供文件，或者文件管理应用允许用户在外部存储区域之间复制和粘贴文件。\n\n在任何情况下，从您的应用程序向另一个应用程序提供文件的唯一安全方法是向接收应用程序发送文件的内容URI，并授予该URI的临时访问权限。具有临时URI访问权限的内容URI是安全的，因为它们仅适用于接收URI的应用程序，并且它们会自动过期。Android FileProvider组件提供了 getUriForFile()生成文件内容URI的方法。\n<!-- more -->\n\n注意：如果要在应用程序之间共享少量文本或数字数据，则应在发送的Intent中包含文本或数字数据即可。\n\n1. 设置文件共享,指定可共享的目录\n```xml\n<!-- xml/paths.xml -->\n<paths>\n<!-- context.getFilesDir() + \"/images/\" -->\n<files-path path=\"images/\" name=\"myimages\"/>\n<cache-path path=\"files\" name=\"cache\" /> \n<external-path path=\"files\" name=\"external\" />\n<external-files-path path=\"files\" name=\"externalfiles\"/>\n<!-- 此标签需要 support 25.0.0以上才可以使用-->\n<external-cache-path  path=\"files\" name=\"externalcache\"/> \n<root-path name=\"name\" path=\"path\" /> \n</paths>\n```\n file-path\t物理路径为Context.getFilesDir() + /files/*\n cache-path\t物理路径为Context.getCacheDir() + /files/*\n external-path\t物理路径为Environment.getExternalStorageDirectory() + /files/*\n external-files-path\t物理路径为Context.getExternalFilesDir(String) + /files/*\n external-cache-path\t物理路径为Context.getExternalCacheDir() + /files/*\n root-path\t物理路径相当于 /path/*\n\n2. 在AndroidManifest.xml文件中添加FileProvider\n```xml\n<application\n  ...\n  ...>\n    <provider\n        android:authorities=\"com.example.cool1024.file\"\n        android:name=\"androidx.core.content.FileProvider\"\n        android:grantUriPermissions=\"true\"\n        android:exported=\"false\">\n        <meta-data \n            android:name=\"android.support.FILE_PROVIDER_PATHS\"\n            android:resource=\"@xml/paths\"/>\n    </provider>\n</application>\n ```\nandroid:authorities属性指定要用于生成的内容URI的URI权限FileProvider。这里权限是com.example.cool1024.file；这样生成content uri是`content://com.example.cool1024.file/myimages`,myimages是上面xml配置的`<files-path path=\"images/\" name=\"myimages\"/>`\n\n如果外部应用访问`content://com.example.cool1024.file/myimages/xxx.jpg`就会对应访问到文件`context.getFilesDir() + \"/images/xxx.jpg\"`\n\n3. 使用例子-图片分享\n```Kotlin\nval bitmap = BitmapFactory.decodeResource(resources, R.drawable.share_image);\nval intent = Intent(Intent.ACTION_SEND).apply {\n    type = \"image/*\"\n    putExtra(Intent.EXTRA_STREAM, getTempBitmapUri(context, bitmap))\n}\ncontext.startActivity(Intent.createChooser(intent, \"图片分享到\"))\n```\n\n#### 参考文档\n* https://developer.android.com/training/secure-file-sharing","source":"_posts/android-share-file.md","raw":"---\ntitle: Android共享文件\ndate: 2019-06-30 19:05:35\ntags: [\"android\"]\ncategories: Android开发\n---\n\n应用程序通常需要将一个或多个文件提供给另一个应用程序。例如，图库可能希望向图像编辑器提供文件，或者文件管理应用允许用户在外部存储区域之间复制和粘贴文件。\n\n在任何情况下，从您的应用程序向另一个应用程序提供文件的唯一安全方法是向接收应用程序发送文件的内容URI，并授予该URI的临时访问权限。具有临时URI访问权限的内容URI是安全的，因为它们仅适用于接收URI的应用程序，并且它们会自动过期。Android FileProvider组件提供了 getUriForFile()生成文件内容URI的方法。\n<!-- more -->\n\n注意：如果要在应用程序之间共享少量文本或数字数据，则应在发送的Intent中包含文本或数字数据即可。\n\n1. 设置文件共享,指定可共享的目录\n```xml\n<!-- xml/paths.xml -->\n<paths>\n<!-- context.getFilesDir() + \"/images/\" -->\n<files-path path=\"images/\" name=\"myimages\"/>\n<cache-path path=\"files\" name=\"cache\" /> \n<external-path path=\"files\" name=\"external\" />\n<external-files-path path=\"files\" name=\"externalfiles\"/>\n<!-- 此标签需要 support 25.0.0以上才可以使用-->\n<external-cache-path  path=\"files\" name=\"externalcache\"/> \n<root-path name=\"name\" path=\"path\" /> \n</paths>\n```\n file-path\t物理路径为Context.getFilesDir() + /files/*\n cache-path\t物理路径为Context.getCacheDir() + /files/*\n external-path\t物理路径为Environment.getExternalStorageDirectory() + /files/*\n external-files-path\t物理路径为Context.getExternalFilesDir(String) + /files/*\n external-cache-path\t物理路径为Context.getExternalCacheDir() + /files/*\n root-path\t物理路径相当于 /path/*\n\n2. 在AndroidManifest.xml文件中添加FileProvider\n```xml\n<application\n  ...\n  ...>\n    <provider\n        android:authorities=\"com.example.cool1024.file\"\n        android:name=\"androidx.core.content.FileProvider\"\n        android:grantUriPermissions=\"true\"\n        android:exported=\"false\">\n        <meta-data \n            android:name=\"android.support.FILE_PROVIDER_PATHS\"\n            android:resource=\"@xml/paths\"/>\n    </provider>\n</application>\n ```\nandroid:authorities属性指定要用于生成的内容URI的URI权限FileProvider。这里权限是com.example.cool1024.file；这样生成content uri是`content://com.example.cool1024.file/myimages`,myimages是上面xml配置的`<files-path path=\"images/\" name=\"myimages\"/>`\n\n如果外部应用访问`content://com.example.cool1024.file/myimages/xxx.jpg`就会对应访问到文件`context.getFilesDir() + \"/images/xxx.jpg\"`\n\n3. 使用例子-图片分享\n```Kotlin\nval bitmap = BitmapFactory.decodeResource(resources, R.drawable.share_image);\nval intent = Intent(Intent.ACTION_SEND).apply {\n    type = \"image/*\"\n    putExtra(Intent.EXTRA_STREAM, getTempBitmapUri(context, bitmap))\n}\ncontext.startActivity(Intent.createChooser(intent, \"图片分享到\"))\n```\n\n#### 参考文档\n* https://developer.android.com/training/secure-file-sharing","slug":"android-share-file","published":1,"updated":"2019-07-09T04:51:10.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld84000ke8wexmpejz5j","content":"<p>应用程序通常需要将一个或多个文件提供给另一个应用程序。例如，图库可能希望向图像编辑器提供文件，或者文件管理应用允许用户在外部存储区域之间复制和粘贴文件。</p>\n<p>在任何情况下，从您的应用程序向另一个应用程序提供文件的唯一安全方法是向接收应用程序发送文件的内容URI，并授予该URI的临时访问权限。具有临时URI访问权限的内容URI是安全的，因为它们仅适用于接收URI的应用程序，并且它们会自动过期。Android FileProvider组件提供了 getUriForFile()生成文件内容URI的方法。<br><a id=\"more\"></a></p>\n<p>注意：如果要在应用程序之间共享少量文本或数字数据，则应在发送的Intent中包含文本或数字数据即可。</p>\n<ol>\n<li><p>设置文件共享,指定可共享的目录</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- xml/paths.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- context.getFilesDir() + \"/images/\" --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">files-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"images/\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myimages\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cache-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"files\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cache\"</span> /&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"files\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"external\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">external-files-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"files\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"externalfiles\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 此标签需要 support 25.0.0以上才可以使用--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">external-cache-path</span>  <span class=\"attr\">path</span>=<span class=\"string\">\"files\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"externalcache\"</span>/&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">root-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"path\"</span> /&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>file-path    物理路径为Context.getFilesDir() + /files/<em><br>cache-path    物理路径为Context.getCacheDir() + /files/</em><br>external-path    物理路径为Environment.getExternalStorageDirectory() + /files/<em><br>external-files-path    物理路径为Context.getExternalFilesDir(String) + /files/</em><br>external-cache-path    物理路径为Context.getExternalCacheDir() + /files/<em><br>root-path    物理路径相当于 /path/</em></p>\n</li>\n<li><p>在AndroidManifest.xml文件中添加FileProvider</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">provider</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"com.example.cool1024.file\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"androidx.core.content.FileProvider\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta-data</span> </span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.FILE_PROVIDER_PATHS\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/paths\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>android:authorities属性指定要用于生成的内容URI的URI权限FileProvider。这里权限是com.example.cool1024.file；这样生成content uri是<code>content://com.example.cool1024.file/myimages</code>,myimages是上面xml配置的<code>&lt;files-path path=&quot;images/&quot; name=&quot;myimages&quot;/&gt;</code></p>\n<p>如果外部应用访问<code>content://com.example.cool1024.file/myimages/xxx.jpg</code>就会对应访问到文件<code>context.getFilesDir() + &quot;/images/xxx.jpg&quot;</code></p>\n<ol start=\"3\">\n<li>使用例子-图片分享<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> bitmap = BitmapFactory.decodeResource(resources, R.drawable.share_image);</span><br><span class=\"line\"><span class=\"keyword\">val</span> intent = Intent(Intent.ACTION_SEND).apply &#123;</span><br><span class=\"line\">    type = <span class=\"string\">\"image/*\"</span></span><br><span class=\"line\">    putExtra(Intent.EXTRA_STREAM, getTempBitmapUri(context, bitmap))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">context.startActivity(Intent.createChooser(intent, <span class=\"string\">\"图片分享到\"</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h4><ul>\n<li><a href=\"https://developer.android.com/training/secure-file-sharing\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/training/secure-file-sharing</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>应用程序通常需要将一个或多个文件提供给另一个应用程序。例如，图库可能希望向图像编辑器提供文件，或者文件管理应用允许用户在外部存储区域之间复制和粘贴文件。</p>\n<p>在任何情况下，从您的应用程序向另一个应用程序提供文件的唯一安全方法是向接收应用程序发送文件的内容URI，并授予该URI的临时访问权限。具有临时URI访问权限的内容URI是安全的，因为它们仅适用于接收URI的应用程序，并且它们会自动过期。Android FileProvider组件提供了 getUriForFile()生成文件内容URI的方法。<br>","more":"</p>\n<p>注意：如果要在应用程序之间共享少量文本或数字数据，则应在发送的Intent中包含文本或数字数据即可。</p>\n<ol>\n<li><p>设置文件共享,指定可共享的目录</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- xml/paths.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- context.getFilesDir() + \"/images/\" --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">files-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"images/\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myimages\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cache-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"files\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cache\"</span> /&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"files\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"external\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">external-files-path</span> <span class=\"attr\">path</span>=<span class=\"string\">\"files\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"externalfiles\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 此标签需要 support 25.0.0以上才可以使用--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">external-cache-path</span>  <span class=\"attr\">path</span>=<span class=\"string\">\"files\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"externalcache\"</span>/&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">root-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"path\"</span> /&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>file-path    物理路径为Context.getFilesDir() + /files/<em><br>cache-path    物理路径为Context.getCacheDir() + /files/</em><br>external-path    物理路径为Environment.getExternalStorageDirectory() + /files/<em><br>external-files-path    物理路径为Context.getExternalFilesDir(String) + /files/</em><br>external-cache-path    物理路径为Context.getExternalCacheDir() + /files/<em><br>root-path    物理路径相当于 /path/</em></p>\n</li>\n<li><p>在AndroidManifest.xml文件中添加FileProvider</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">provider</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"com.example.cool1024.file\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"androidx.core.content.FileProvider\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta-data</span> </span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.FILE_PROVIDER_PATHS\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/paths\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>android:authorities属性指定要用于生成的内容URI的URI权限FileProvider。这里权限是com.example.cool1024.file；这样生成content uri是<code>content://com.example.cool1024.file/myimages</code>,myimages是上面xml配置的<code>&lt;files-path path=&quot;images/&quot; name=&quot;myimages&quot;/&gt;</code></p>\n<p>如果外部应用访问<code>content://com.example.cool1024.file/myimages/xxx.jpg</code>就会对应访问到文件<code>context.getFilesDir() + &quot;/images/xxx.jpg&quot;</code></p>\n<ol start=\"3\">\n<li>使用例子-图片分享<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> bitmap = BitmapFactory.decodeResource(resources, R.drawable.share_image);</span><br><span class=\"line\"><span class=\"keyword\">val</span> intent = Intent(Intent.ACTION_SEND).apply &#123;</span><br><span class=\"line\">    type = <span class=\"string\">\"image/*\"</span></span><br><span class=\"line\">    putExtra(Intent.EXTRA_STREAM, getTempBitmapUri(context, bitmap))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">context.startActivity(Intent.createChooser(intent, <span class=\"string\">\"图片分享到\"</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h4><ul>\n<li><a href=\"https://developer.android.com/training/secure-file-sharing\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/training/secure-file-sharing</a></li>\n</ul>"},{"title":"AndroidX记录","date":"2019-02-02T10:11:53.000Z","_content":"\nAndroidX是Android团队为Android Jetpack开发，测试，打包，发布和发布库的开源项目 。\n\nAndroidX是对原始Android支持库的重大改进 。与支持库一样，AndroidX与Android操作系统分开提供，并提供跨Android版本的向后兼容性。AndroidX通过提供功能奇偶校验和新库完全取代了支持库。此外，AndroidX还包括以下功能：\n\n* AndroidX库中的所有包都以字符串androidx开头。原先的支持库在androix中都有对应的包，详情查看[支持库与androidx的包名映射表](https://developer.android.com/jetpack/androidx/migrate)\n\n* 与支持库不同，AndroidX软件包是**单独维护和更新**的。这些androidx包使用严格的语义版本控制， 从版本1.0.0开始。您可以单独更新项目中的AndroidX库。\n\n所有新的支持库开发都将在AndroidX库中进行。这包括维护原始支持库工件和引入新的Jetpack组件。\n\n> 相比之前的support的混乱局面，升级牵一发而动全身，androidx的使用更简单\n\n\n\n","source":"_posts/androidx-note-1.md","raw":"---\ntitle: AndroidX记录\ndate: 2019-02-02 18:11:53\ntags: androidx\n---\n\nAndroidX是Android团队为Android Jetpack开发，测试，打包，发布和发布库的开源项目 。\n\nAndroidX是对原始Android支持库的重大改进 。与支持库一样，AndroidX与Android操作系统分开提供，并提供跨Android版本的向后兼容性。AndroidX通过提供功能奇偶校验和新库完全取代了支持库。此外，AndroidX还包括以下功能：\n\n* AndroidX库中的所有包都以字符串androidx开头。原先的支持库在androix中都有对应的包，详情查看[支持库与androidx的包名映射表](https://developer.android.com/jetpack/androidx/migrate)\n\n* 与支持库不同，AndroidX软件包是**单独维护和更新**的。这些androidx包使用严格的语义版本控制， 从版本1.0.0开始。您可以单独更新项目中的AndroidX库。\n\n所有新的支持库开发都将在AndroidX库中进行。这包括维护原始支持库工件和引入新的Jetpack组件。\n\n> 相比之前的support的混乱局面，升级牵一发而动全身，androidx的使用更简单\n\n\n\n","slug":"androidx-note-1","published":1,"updated":"2019-07-09T05:16:49.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld89000pe8weukdduy5q","content":"<p>AndroidX是Android团队为Android Jetpack开发，测试，打包，发布和发布库的开源项目 。</p>\n<p>AndroidX是对原始Android支持库的重大改进 。与支持库一样，AndroidX与Android操作系统分开提供，并提供跨Android版本的向后兼容性。AndroidX通过提供功能奇偶校验和新库完全取代了支持库。此外，AndroidX还包括以下功能：</p>\n<ul>\n<li><p>AndroidX库中的所有包都以字符串androidx开头。原先的支持库在androix中都有对应的包，详情查看<a href=\"https://developer.android.com/jetpack/androidx/migrate\" target=\"_blank\" rel=\"noopener\">支持库与androidx的包名映射表</a></p>\n</li>\n<li><p>与支持库不同，AndroidX软件包是<strong>单独维护和更新</strong>的。这些androidx包使用严格的语义版本控制， 从版本1.0.0开始。您可以单独更新项目中的AndroidX库。</p>\n</li>\n</ul>\n<p>所有新的支持库开发都将在AndroidX库中进行。这包括维护原始支持库工件和引入新的Jetpack组件。</p>\n<blockquote>\n<p>相比之前的support的混乱局面，升级牵一发而动全身，androidx的使用更简单</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>AndroidX是Android团队为Android Jetpack开发，测试，打包，发布和发布库的开源项目 。</p>\n<p>AndroidX是对原始Android支持库的重大改进 。与支持库一样，AndroidX与Android操作系统分开提供，并提供跨Android版本的向后兼容性。AndroidX通过提供功能奇偶校验和新库完全取代了支持库。此外，AndroidX还包括以下功能：</p>\n<ul>\n<li><p>AndroidX库中的所有包都以字符串androidx开头。原先的支持库在androix中都有对应的包，详情查看<a href=\"https://developer.android.com/jetpack/androidx/migrate\" target=\"_blank\" rel=\"noopener\">支持库与androidx的包名映射表</a></p>\n</li>\n<li><p>与支持库不同，AndroidX软件包是<strong>单独维护和更新</strong>的。这些androidx包使用严格的语义版本控制， 从版本1.0.0开始。您可以单独更新项目中的AndroidX库。</p>\n</li>\n</ul>\n<p>所有新的支持库开发都将在AndroidX库中进行。这包括维护原始支持库工件和引入新的Jetpack组件。</p>\n<blockquote>\n<p>相比之前的support的混乱局面，升级牵一发而动全身，androidx的使用更简单</p>\n</blockquote>\n"},{"title":"animate.css","date":"2018-07-10T12:26:55.000Z","_content":"#### 描述（来源animate.css github 说明）\nanimate.css 是一个非常强大，有趣，兼容性很好动画库。适合用在需要给死气沉沉的页面添上活力，更引人注目！\n<div class=\"tip\">animate.css github 地址 \nhttps://github.com/daneden/animate.css\n</div>\n\n#### 安装\n1.我们可以直接使用npm安装\n`npm install animate.css`\n2.当然，你可以选择直接下载animate.css文件，然后在html页面中添加这样的代码\n```html\n<head>\n  <link rel=\"stylesheet\" href=\"animate.min.css\">\n</head>\n```\n\n#### 使用\n这里我们以sass引用为例，在你需要用的页面对应的scss文件使用import引入需要用到的动画css（不要全部引入，只需要加需要用到的哦）\n```scss\n@import \"~animate.css/source/fading_entrances/fadeInUp\";\n\n// 编写你自己的样式,继承aniamte和自己需要的动画样式（animate）\n.myclass {\n    @extend .animate;\n    @extend .fadeInUp;\n}\n```\n这样我们可以看到页面带有.myclass的标签出现了对应的动画效果\n```html\n<div class=\"myclass\"></div>\n```\n","source":"_posts/animate.md","raw":"---\ntitle: animate.css\ndate: 2018-07-10 20:26:55\ntags: css\ncategories: Web开发\n---\n#### 描述（来源animate.css github 说明）\nanimate.css 是一个非常强大，有趣，兼容性很好动画库。适合用在需要给死气沉沉的页面添上活力，更引人注目！\n<div class=\"tip\">animate.css github 地址 \nhttps://github.com/daneden/animate.css\n</div>\n\n#### 安装\n1.我们可以直接使用npm安装\n`npm install animate.css`\n2.当然，你可以选择直接下载animate.css文件，然后在html页面中添加这样的代码\n```html\n<head>\n  <link rel=\"stylesheet\" href=\"animate.min.css\">\n</head>\n```\n\n#### 使用\n这里我们以sass引用为例，在你需要用的页面对应的scss文件使用import引入需要用到的动画css（不要全部引入，只需要加需要用到的哦）\n```scss\n@import \"~animate.css/source/fading_entrances/fadeInUp\";\n\n// 编写你自己的样式,继承aniamte和自己需要的动画样式（animate）\n.myclass {\n    @extend .animate;\n    @extend .fadeInUp;\n}\n```\n这样我们可以看到页面带有.myclass的标签出现了对应的动画效果\n```html\n<div class=\"myclass\"></div>\n```\n","slug":"animate","published":1,"updated":"2019-07-12T03:06:35.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld8c000ue8weahcrqi3b","content":"<h4 id=\"描述（来源animate-css-github-说明）\"><a href=\"#描述（来源animate-css-github-说明）\" class=\"headerlink\" title=\"描述（来源animate.css github 说明）\"></a>描述（来源animate.css github 说明）</h4><p>animate.css 是一个非常强大，有趣，兼容性很好动画库。适合用在需要给死气沉沉的页面添上活力，更引人注目！</p>\n<div class=\"tip\">animate.css github 地址<br><a href=\"https://github.com/daneden/animate.css\" target=\"_blank\" rel=\"noopener\">https://github.com/daneden/animate.css</a><br></div>\n\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>1.我们可以直接使用npm安装<br><code>npm install animate.css</code><br>2.当然，你可以选择直接下载animate.css文件，然后在html页面中添加这样的代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"animate.min.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>这里我们以sass引用为例，在你需要用的页面对应的scss文件使用import引入需要用到的动画css（不要全部引入，只需要加需要用到的哦）<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"~animate.css/source/fading_entrances/fadeInUp\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 编写你自己的样式,继承aniamte和自己需要的动画样式（animate）</span></span><br><span class=\"line\"><span class=\"selector-class\">.myclass</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">extend</span> .animate;</span><br><span class=\"line\">    @<span class=\"keyword\">extend</span> .fadeInUp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样我们可以看到页面带有.myclass的标签出现了对应的动画效果<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"myclass\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"描述（来源animate-css-github-说明）\"><a href=\"#描述（来源animate-css-github-说明）\" class=\"headerlink\" title=\"描述（来源animate.css github 说明）\"></a>描述（来源animate.css github 说明）</h4><p>animate.css 是一个非常强大，有趣，兼容性很好动画库。适合用在需要给死气沉沉的页面添上活力，更引人注目！</p>\n<div class=\"tip\">animate.css github 地址<br><a href=\"https://github.com/daneden/animate.css\" target=\"_blank\" rel=\"noopener\">https://github.com/daneden/animate.css</a><br></div>\n\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>1.我们可以直接使用npm安装<br><code>npm install animate.css</code><br>2.当然，你可以选择直接下载animate.css文件，然后在html页面中添加这样的代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"animate.min.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>这里我们以sass引用为例，在你需要用的页面对应的scss文件使用import引入需要用到的动画css（不要全部引入，只需要加需要用到的哦）<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"~animate.css/source/fading_entrances/fadeInUp\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 编写你自己的样式,继承aniamte和自己需要的动画样式（animate）</span></span><br><span class=\"line\"><span class=\"selector-class\">.myclass</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">extend</span> .animate;</span><br><span class=\"line\">    @<span class=\"keyword\">extend</span> .fadeInUp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样我们可以看到页面带有.myclass的标签出现了对应的动画效果<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"myclass\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"几种浏览器能力记录","date":"2019-04-22T09:21:12.000Z","_content":"\n#### 音频播放\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>媒体播放</title>\n</head>\n\n<body>\n    <button onclick=\"play()\">播放</button>\n</body>\n<script>\n\n    const audio = new Audio();\n\n    function play() {\n        audio.pause();\n        audio.src = 'https://hello1024.oss-cn-beijing.aliyuncs.com/mssage.mp3';\n        audio.play();\n    }\n\n</script>\n\n</html>\n```\n\n#### 录音\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>录音</title>\n</head>\n\n<body>\n    <button onclick=\"startRecord()\">录音</button>\n    <button onclick=\"endRecord()\">结束</button>\n</body>\n<script>\n\n    const constraints = {\n        audio: true,\n    };\n\n    const recordDatas = [];\n\n    let mediaRecorder;\n\n    navigator.mediaDevices.getUserMedia(constraints)\n        .then(function (stream) {\n\n            mediaRecorder = new MediaRecorder(stream);\n\n            // 每次录到数据执行\n            mediaRecorder.ondataavailable = function (e) {\n                recordDatas.push(e.data);\n            }\n\n            // 录音结束，生成录音数据对象\n            mediaRecorder.onstop = function () {\n                const blob = new Blob(recordDatas, { 'type': 'audio/ogg; codecs=opus' });\n                console.log(blob);\n            }\n        })\n        .catch(function (err) {\n            console.log('The following error occurred: ' + err);\n        });\n\n    function startRecord() {\n        mediaRecorder && mediaRecorder.start();\n    }\n\n    function endRecord() {\n        mediaRecorder && mediaRecorder.stop();\n    }\n</script>\n\n</html>\n```\n\n#### 摄像头获取\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>媒体播放</title>\n</head>\n\n<body>\n\n</body>\n<script>\n\n    const constraints = {\n        audio: true,\n        video: { width: 1280, height: 720 }\n    };\n\n    navigator.mediaDevices.getUserMedia(constraints)\n        .then(function (stream) {\n            const video = document.createElement('video');\n            video.srcObject = stream;\n            video.width = 600;\n            video.controls = true;\n            document.body.appendChild(video);\n        })\n        .catch(function (err) {\n            console.log('The following error occurred: ' + err);\n        });\n</script>\n\n</html>\n```\n\n#### 打印\n```js\ndoPrint() {\n    const htmlStr = document.querySelector('.table').parentElement.innerHTML;\n    const htmlStr = `<div>...</div>`;\n    const frame = window.document.createElement('iframe');\n    frame.style.display = 'none';\n    window.document.body.appendChild(frame);\n    frame.contentWindow.document.write(htmlStr);\n    frame.contentWindow.print();\n    window.document.body.removeChild(frame);\n}\n```\n#### 音频解析\n```js\n// 音频播放相关数据对象\nconst audioContext = new AudioContext();\nconst audioSource = audioContext.createBufferSource();\nconst audioAnalyser = audioContext.createAnalyser();\n\n// 读取音频文件为ArrayBuffer\nconst file = ....音频文件...;\nconst reader = new FileReader();\nreader.readAsArrayBuffer(file);\nreader.onload = function(){\n    byteToAudio(event.target.result)\n}\n\n// 把ArrayBuffer转换为音频数据\nfunction byteToAudio(byteArrys) {\n    audioContext.decodeAudioData(byteArrys, startPlay, errorFunc);\n}\n\n// 开始播放\nfunction startPlay(buffer){\n    audioSource.buffer = buffer;\n    audioSource.connect(audioAnalyser);\n    audioAnalyser.connect(audioContext.destination);\n    audioSource.start();\n    setTimout(()=>{\n        const array = new Uint8Array(audioAnalyser.frequencyBinCount);\n        audioAnalyser.getByteFrequencyData(array);\n        // 打印音频数据\n        console.log(array);\n    },1000);\n  }\n}\n```\n","source":"_posts/browser-devices.md","raw":"---\ntitle: 几种浏览器能力记录\ndate: 2019-04-22 17:21:12\ntags: html\ncategories: Web开发\n---\n\n#### 音频播放\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>媒体播放</title>\n</head>\n\n<body>\n    <button onclick=\"play()\">播放</button>\n</body>\n<script>\n\n    const audio = new Audio();\n\n    function play() {\n        audio.pause();\n        audio.src = 'https://hello1024.oss-cn-beijing.aliyuncs.com/mssage.mp3';\n        audio.play();\n    }\n\n</script>\n\n</html>\n```\n\n#### 录音\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>录音</title>\n</head>\n\n<body>\n    <button onclick=\"startRecord()\">录音</button>\n    <button onclick=\"endRecord()\">结束</button>\n</body>\n<script>\n\n    const constraints = {\n        audio: true,\n    };\n\n    const recordDatas = [];\n\n    let mediaRecorder;\n\n    navigator.mediaDevices.getUserMedia(constraints)\n        .then(function (stream) {\n\n            mediaRecorder = new MediaRecorder(stream);\n\n            // 每次录到数据执行\n            mediaRecorder.ondataavailable = function (e) {\n                recordDatas.push(e.data);\n            }\n\n            // 录音结束，生成录音数据对象\n            mediaRecorder.onstop = function () {\n                const blob = new Blob(recordDatas, { 'type': 'audio/ogg; codecs=opus' });\n                console.log(blob);\n            }\n        })\n        .catch(function (err) {\n            console.log('The following error occurred: ' + err);\n        });\n\n    function startRecord() {\n        mediaRecorder && mediaRecorder.start();\n    }\n\n    function endRecord() {\n        mediaRecorder && mediaRecorder.stop();\n    }\n</script>\n\n</html>\n```\n\n#### 摄像头获取\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>媒体播放</title>\n</head>\n\n<body>\n\n</body>\n<script>\n\n    const constraints = {\n        audio: true,\n        video: { width: 1280, height: 720 }\n    };\n\n    navigator.mediaDevices.getUserMedia(constraints)\n        .then(function (stream) {\n            const video = document.createElement('video');\n            video.srcObject = stream;\n            video.width = 600;\n            video.controls = true;\n            document.body.appendChild(video);\n        })\n        .catch(function (err) {\n            console.log('The following error occurred: ' + err);\n        });\n</script>\n\n</html>\n```\n\n#### 打印\n```js\ndoPrint() {\n    const htmlStr = document.querySelector('.table').parentElement.innerHTML;\n    const htmlStr = `<div>...</div>`;\n    const frame = window.document.createElement('iframe');\n    frame.style.display = 'none';\n    window.document.body.appendChild(frame);\n    frame.contentWindow.document.write(htmlStr);\n    frame.contentWindow.print();\n    window.document.body.removeChild(frame);\n}\n```\n#### 音频解析\n```js\n// 音频播放相关数据对象\nconst audioContext = new AudioContext();\nconst audioSource = audioContext.createBufferSource();\nconst audioAnalyser = audioContext.createAnalyser();\n\n// 读取音频文件为ArrayBuffer\nconst file = ....音频文件...;\nconst reader = new FileReader();\nreader.readAsArrayBuffer(file);\nreader.onload = function(){\n    byteToAudio(event.target.result)\n}\n\n// 把ArrayBuffer转换为音频数据\nfunction byteToAudio(byteArrys) {\n    audioContext.decodeAudioData(byteArrys, startPlay, errorFunc);\n}\n\n// 开始播放\nfunction startPlay(buffer){\n    audioSource.buffer = buffer;\n    audioSource.connect(audioAnalyser);\n    audioAnalyser.connect(audioContext.destination);\n    audioSource.start();\n    setTimout(()=>{\n        const array = new Uint8Array(audioAnalyser.frequencyBinCount);\n        audioAnalyser.getByteFrequencyData(array);\n        // 打印音频数据\n        console.log(array);\n    },1000);\n  }\n}\n```\n","slug":"browser-devices","published":1,"updated":"2019-07-12T03:06:30.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld8e000ze8we1qaps86t","content":"<h4 id=\"音频播放\"><a href=\"#音频播放\" class=\"headerlink\" title=\"音频播放\"></a>音频播放</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>媒体播放<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"play()\"</span>&gt;</span>播放<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> audio = <span class=\"keyword\">new</span> Audio();</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">play</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        audio.pause();</span></span><br><span class=\"line\"><span class=\"javascript\">        audio.src = <span class=\"string\">'https://hello1024.oss-cn-beijing.aliyuncs.com/mssage.mp3'</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        audio.play();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"录音\"><a href=\"#录音\" class=\"headerlink\" title=\"录音\"></a>录音</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>录音<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"startRecord()\"</span>&gt;</span>录音<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"endRecord()\"</span>&gt;</span>结束<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> constraints = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        audio: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> recordDatas = [];</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> mediaRecorder;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    navigator.mediaDevices.getUserMedia(constraints)</span></span><br><span class=\"line\"><span class=\"javascript\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stream</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">            mediaRecorder = <span class=\"keyword\">new</span> MediaRecorder(stream);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 每次录到数据执行</span></span></span><br><span class=\"line\"><span class=\"javascript\">            mediaRecorder.ondataavailable = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                recordDatas.push(e.data);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 录音结束，生成录音数据对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">            mediaRecorder.onstop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">const</span> blob = <span class=\"keyword\">new</span> Blob(recordDatas, &#123; <span class=\"string\">'type'</span>: <span class=\"string\">'audio/ogg; codecs=opus'</span> &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(blob);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'The following error occurred: '</span> + err);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startRecord</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        mediaRecorder &amp;&amp; mediaRecorder.start();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">endRecord</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        mediaRecorder &amp;&amp; mediaRecorder.stop();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"摄像头获取\"><a href=\"#摄像头获取\" class=\"headerlink\" title=\"摄像头获取\"></a>摄像头获取</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>媒体播放<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> constraints = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        audio: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        video: &#123; width: 1280, height: 720 &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    navigator.mediaDevices.getUserMedia(constraints)</span></span><br><span class=\"line\"><span class=\"javascript\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stream</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> video = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'video'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">            video.srcObject = stream;</span></span><br><span class=\"line\"><span class=\"undefined\">            video.width = 600;</span></span><br><span class=\"line\"><span class=\"javascript\">            video.controls = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.body.appendChild(video);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'The following error occurred: '</span> + err);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"打印\"><a href=\"#打印\" class=\"headerlink\" title=\"打印\"></a>打印</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doPrint() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> htmlStr = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.table'</span>).parentElement.innerHTML;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> htmlStr = <span class=\"string\">`&lt;div&gt;...&lt;/div&gt;`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> frame = <span class=\"built_in\">window</span>.document.createElement(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\">    frame.style.display = <span class=\"string\">'none'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.document.body.appendChild(frame);</span><br><span class=\"line\">    frame.contentWindow.document.write(htmlStr);</span><br><span class=\"line\">    frame.contentWindow.print();</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.document.body.removeChild(frame);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"音频解析\"><a href=\"#音频解析\" class=\"headerlink\" title=\"音频解析\"></a>音频解析</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 音频播放相关数据对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> audioContext = <span class=\"keyword\">new</span> AudioContext();</span><br><span class=\"line\"><span class=\"keyword\">const</span> audioSource = audioContext.createBufferSource();</span><br><span class=\"line\"><span class=\"keyword\">const</span> audioAnalyser = audioContext.createAnalyser();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取音频文件为ArrayBuffer</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> file = ....音频文件...;</span><br><span class=\"line\"><span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">reader.readAsArrayBuffer(file);</span><br><span class=\"line\">reader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    byteToAudio(event.target.result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把ArrayBuffer转换为音频数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">byteToAudio</span>(<span class=\"params\">byteArrys</span>) </span>&#123;</span><br><span class=\"line\">    audioContext.decodeAudioData(byteArrys, startPlay, errorFunc);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开始播放</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startPlay</span>(<span class=\"params\">buffer</span>)</span>&#123;</span><br><span class=\"line\">    audioSource.buffer = buffer;</span><br><span class=\"line\">    audioSource.connect(audioAnalyser);</span><br><span class=\"line\">    audioAnalyser.connect(audioContext.destination);</span><br><span class=\"line\">    audioSource.start();</span><br><span class=\"line\">    setTimout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> array = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(audioAnalyser.frequencyBinCount);</span><br><span class=\"line\">        audioAnalyser.getByteFrequencyData(array);</span><br><span class=\"line\">        <span class=\"comment\">// 打印音频数据</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(array);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"音频播放\"><a href=\"#音频播放\" class=\"headerlink\" title=\"音频播放\"></a>音频播放</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>媒体播放<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"play()\"</span>&gt;</span>播放<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> audio = <span class=\"keyword\">new</span> Audio();</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">play</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        audio.pause();</span></span><br><span class=\"line\"><span class=\"javascript\">        audio.src = <span class=\"string\">'https://hello1024.oss-cn-beijing.aliyuncs.com/mssage.mp3'</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        audio.play();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"录音\"><a href=\"#录音\" class=\"headerlink\" title=\"录音\"></a>录音</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>录音<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"startRecord()\"</span>&gt;</span>录音<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"endRecord()\"</span>&gt;</span>结束<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> constraints = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        audio: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> recordDatas = [];</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> mediaRecorder;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    navigator.mediaDevices.getUserMedia(constraints)</span></span><br><span class=\"line\"><span class=\"javascript\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stream</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">            mediaRecorder = <span class=\"keyword\">new</span> MediaRecorder(stream);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 每次录到数据执行</span></span></span><br><span class=\"line\"><span class=\"javascript\">            mediaRecorder.ondataavailable = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                recordDatas.push(e.data);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 录音结束，生成录音数据对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">            mediaRecorder.onstop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">const</span> blob = <span class=\"keyword\">new</span> Blob(recordDatas, &#123; <span class=\"string\">'type'</span>: <span class=\"string\">'audio/ogg; codecs=opus'</span> &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(blob);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'The following error occurred: '</span> + err);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startRecord</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        mediaRecorder &amp;&amp; mediaRecorder.start();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">endRecord</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        mediaRecorder &amp;&amp; mediaRecorder.stop();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"摄像头获取\"><a href=\"#摄像头获取\" class=\"headerlink\" title=\"摄像头获取\"></a>摄像头获取</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>媒体播放<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> constraints = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        audio: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        video: &#123; width: 1280, height: 720 &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    navigator.mediaDevices.getUserMedia(constraints)</span></span><br><span class=\"line\"><span class=\"javascript\">        .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stream</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> video = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'video'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">            video.srcObject = stream;</span></span><br><span class=\"line\"><span class=\"undefined\">            video.width = 600;</span></span><br><span class=\"line\"><span class=\"javascript\">            video.controls = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.body.appendChild(video);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'The following error occurred: '</span> + err);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"打印\"><a href=\"#打印\" class=\"headerlink\" title=\"打印\"></a>打印</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doPrint() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> htmlStr = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.table'</span>).parentElement.innerHTML;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> htmlStr = <span class=\"string\">`&lt;div&gt;...&lt;/div&gt;`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> frame = <span class=\"built_in\">window</span>.document.createElement(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\">    frame.style.display = <span class=\"string\">'none'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.document.body.appendChild(frame);</span><br><span class=\"line\">    frame.contentWindow.document.write(htmlStr);</span><br><span class=\"line\">    frame.contentWindow.print();</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.document.body.removeChild(frame);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"音频解析\"><a href=\"#音频解析\" class=\"headerlink\" title=\"音频解析\"></a>音频解析</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 音频播放相关数据对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> audioContext = <span class=\"keyword\">new</span> AudioContext();</span><br><span class=\"line\"><span class=\"keyword\">const</span> audioSource = audioContext.createBufferSource();</span><br><span class=\"line\"><span class=\"keyword\">const</span> audioAnalyser = audioContext.createAnalyser();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取音频文件为ArrayBuffer</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> file = ....音频文件...;</span><br><span class=\"line\"><span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">reader.readAsArrayBuffer(file);</span><br><span class=\"line\">reader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    byteToAudio(event.target.result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把ArrayBuffer转换为音频数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">byteToAudio</span>(<span class=\"params\">byteArrys</span>) </span>&#123;</span><br><span class=\"line\">    audioContext.decodeAudioData(byteArrys, startPlay, errorFunc);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开始播放</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startPlay</span>(<span class=\"params\">buffer</span>)</span>&#123;</span><br><span class=\"line\">    audioSource.buffer = buffer;</span><br><span class=\"line\">    audioSource.connect(audioAnalyser);</span><br><span class=\"line\">    audioAnalyser.connect(audioContext.destination);</span><br><span class=\"line\">    audioSource.start();</span><br><span class=\"line\">    setTimout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> array = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(audioAnalyser.frequencyBinCount);</span><br><span class=\"line\">        audioAnalyser.getByteFrequencyData(array);</span><br><span class=\"line\">        <span class=\"comment\">// 打印音频数据</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(array);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"AppStore应用发布参考","date":"2018-12-03T03:57:15.000Z","_content":"\n#### 图片裁剪\n1. 2345看图 图片批量格式转换\n2. 图片尺寸\n * 5.5 英寸（iPhone 6s Plus、iPhone 7 Plus、iPhone 8 Plus） 1242 x 2208 \n * 12.9 英寸（iPad Pro（第二代，第三代））2048 x 2732 \n\n","source":"_posts/appstore-publish.md","raw":"---\ntitle: AppStore应用发布参考\ndate: 2018-12-03 11:57:15\ntags: ios\n---\n\n#### 图片裁剪\n1. 2345看图 图片批量格式转换\n2. 图片尺寸\n * 5.5 英寸（iPhone 6s Plus、iPhone 7 Plus、iPhone 8 Plus） 1242 x 2208 \n * 12.9 英寸（iPad Pro（第二代，第三代））2048 x 2732 \n\n","slug":"appstore-publish","published":1,"updated":"2019-07-05T04:24:05.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld8g0013e8wee3p7n3oc","content":"<h4 id=\"图片裁剪\"><a href=\"#图片裁剪\" class=\"headerlink\" title=\"图片裁剪\"></a>图片裁剪</h4><ol>\n<li>2345看图 图片批量格式转换</li>\n<li>图片尺寸<ul>\n<li>5.5 英寸（iPhone 6s Plus、iPhone 7 Plus、iPhone 8 Plus） 1242 x 2208 </li>\n<li>12.9 英寸（iPad Pro（第二代，第三代））2048 x 2732 </li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"图片裁剪\"><a href=\"#图片裁剪\" class=\"headerlink\" title=\"图片裁剪\"></a>图片裁剪</h4><ol>\n<li>2345看图 图片批量格式转换</li>\n<li>图片尺寸<ul>\n<li>5.5 英寸（iPhone 6s Plus、iPhone 7 Plus、iPhone 8 Plus） 1242 x 2208 </li>\n<li>12.9 英寸（iPad Pro（第二代，第三代））2048 x 2732 </li>\n</ul>\n</li>\n</ol>\n"},{"title":"Html Canvas 记录","date":"2019-04-24T08:57:21.000Z","_content":"\n#### 绘画\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>画布</title>\n</head>\n\n<body>\n    <canvas id=\"canvas\" width=\"600\" height=\"400\" style=\"border:1px solid black;\"></canvas>\n    <button onclick=\"unDo()\">撤销</button>\n</body>\n<script>\n\n    // 当前允不允许进行绘画\n    var canDraw = false;\n    // 记录上一次画笔的坐标\n    var panPoint = { x: 0, y: 0 };\n    // 历史记录保存数组\n    var cacheArray = [];\n    // 画布上下文，用于绘画\n    var context;\n\n    function initDrawPad() {\n\n        const canvas = document.getElementById('canvas');\n        context = this.canvas.getContext('2d');\n\n        // 鼠标按下时，开始绘画\n        canvas.addEventListener('mousedown', (event) => {\n            canDraw = true;\n            panPoint = { x: event.offsetX, y: event.offsetY };\n            // 绘画前保存当前的数据\n            cacheArray.push(this.canvas.toDataURL());\n        });\n\n        canvas.addEventListener('mousemove', (event) => {\n            drawLine(panPoint, { x: event.offsetX, y: event.offsetY });\n        });\n\n        canvas.addEventListener('mouseup', (event) => {\n            this.canDraw = false;\n        });\n\n        canvas.addEventListener('mouseleave', (event) => {\n            this.canDraw = false;\n        });\n    }\n\n    function drawLine(startPoint, endPoint) {\n        if (canDraw) {\n            context.beginPath();\n            context.lineJoin = 'round';\n            this.context.strokeStyle = '#000000';\n            this.context.moveTo(startPoint.x, startPoint.y);\n            this.context.lineTo(endPoint.x, endPoint.y);\n            this.context.closePath();\n            this.context.stroke();\n            // 记住画笔的位置\n            panPoint = endPoint;\n        }\n    }\n\n    function unDo() {\n        if (cacheArray.length > 0) {\n            // 清空画笔\n            context.clearRect(0, 0, 600, 400);\n            const image = new Image();\n            image.src = this.cacheArray.pop();\n            image.onload = () => this.context.drawImage(image, 0, 0);\n        }\n    }\n\n    initDrawPad();\n\n</script>\n\n</html>\n```\n#### 裁剪\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>画布-裁剪</title>\n</head>\n\n<body>\n\n</body>\n<script>\n\n    // {x:0, y:0, w:600, h:400 }\n    function clipImage(rect, src, callback) {\n        const img = new Image();\n        img.src = src;\n\n        img.onload = () => {\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            canvas.width = rect.w;\n            canvas.height = rect.h;\n            ctx.drawImage(img, -rect.x, -rect.y, img.naturalWidth, img.naturalHeight);\n            callback(canvas.toDataURL());\n        };\n    }\n\n    // {x:0, y:0, w:600, h:400 }\n    function clipEllipse(rect, src, callback) {\n        const img = new Image();\n        img.src = src;\n\n        img.onload = () => {\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            canvas.width = rect.w;\n            canvas.height = rect.h;\n            const a = rect.w / 2;\n            const b = rect.h / 2;\n            const r = Math.max(a, b);\n            const ratioX = a / r;\n            const ratioY = b / r;\n            ctx.save();\n            ctx.beginPath();\n            ctx.arc(a / ratioX, b / ratioY, r, 0, 2 * Math.PI, false);\n            ctx.closePath();\n            ctx.clip();\n            ctx.drawImage(img, -rect.x, -rect.y, img.naturalWidth, img.naturalHeight);\n            ctx.restore();\n            callback(canvas.toDataURL());\n        }\n    }\n\n    clipImage(\n        { x: 200, y: 200, w: 400, h: 400 },\n        'source.jpg',\n        (url) => {\n            const img = new Image();\n            img.src = url;\n            document.body.appendChild(img);\n        }\n    );\n\n    clipEllipse(\n        { x: 200, y: 200, w: 400, h: 400 },\n        'source.jpg',\n        (url) => {\n            const img = new Image();\n            img.src = url;\n            document.body.appendChild(img);\n        }\n    );\n\n\n\n\n</script>\n\n</html>\n```\n#### 图片清晰度处理\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>画布</title>\n</head>\n\n<body>\n    <img src=\"source.jpg\">\n</body>\n<script>\n\n    function saveQto(k, src, callback) {\n        const img = new Image();\n        img.src = src;\n\n        img.onload = () => {\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            canvas.width = img.naturalWidth;\n            canvas.height = img.naturalHeight;\n            ctx.drawImage(img, 0, 0, img.naturalWidth, img.naturalHeight);\n            callback(canvas.toDataURL('image/jpeg', k));\n        };\n    }\n\n    saveQto(\n        0.01,\n        'source.jpg',\n        (url) => {\n            const img = new Image();\n            img.src = url;\n            document.body.appendChild(img);\n        }\n    );\n\n</script>\n\n</html>\n```\n\n<!-- #### Live2d\nLive2D是一种应用于电子游戏的绘图渲染技术，技术由日本Cybernoids公司开发。通过一系列的连续图像和人物建模来生成一种类似三维模型的二维图像，对于以动画风格为主的冒险游戏来说非常有用，缺点是Live 2D人物无法大幅度转身，开发商正设法让该技术可显示360度图像。 -->","source":"_posts/canvas.md","raw":"---\ntitle: Html Canvas 记录\ndate: 2019-04-24 16:57:21\ntags: canvas\ncategories: Web开发\n---\n\n#### 绘画\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>画布</title>\n</head>\n\n<body>\n    <canvas id=\"canvas\" width=\"600\" height=\"400\" style=\"border:1px solid black;\"></canvas>\n    <button onclick=\"unDo()\">撤销</button>\n</body>\n<script>\n\n    // 当前允不允许进行绘画\n    var canDraw = false;\n    // 记录上一次画笔的坐标\n    var panPoint = { x: 0, y: 0 };\n    // 历史记录保存数组\n    var cacheArray = [];\n    // 画布上下文，用于绘画\n    var context;\n\n    function initDrawPad() {\n\n        const canvas = document.getElementById('canvas');\n        context = this.canvas.getContext('2d');\n\n        // 鼠标按下时，开始绘画\n        canvas.addEventListener('mousedown', (event) => {\n            canDraw = true;\n            panPoint = { x: event.offsetX, y: event.offsetY };\n            // 绘画前保存当前的数据\n            cacheArray.push(this.canvas.toDataURL());\n        });\n\n        canvas.addEventListener('mousemove', (event) => {\n            drawLine(panPoint, { x: event.offsetX, y: event.offsetY });\n        });\n\n        canvas.addEventListener('mouseup', (event) => {\n            this.canDraw = false;\n        });\n\n        canvas.addEventListener('mouseleave', (event) => {\n            this.canDraw = false;\n        });\n    }\n\n    function drawLine(startPoint, endPoint) {\n        if (canDraw) {\n            context.beginPath();\n            context.lineJoin = 'round';\n            this.context.strokeStyle = '#000000';\n            this.context.moveTo(startPoint.x, startPoint.y);\n            this.context.lineTo(endPoint.x, endPoint.y);\n            this.context.closePath();\n            this.context.stroke();\n            // 记住画笔的位置\n            panPoint = endPoint;\n        }\n    }\n\n    function unDo() {\n        if (cacheArray.length > 0) {\n            // 清空画笔\n            context.clearRect(0, 0, 600, 400);\n            const image = new Image();\n            image.src = this.cacheArray.pop();\n            image.onload = () => this.context.drawImage(image, 0, 0);\n        }\n    }\n\n    initDrawPad();\n\n</script>\n\n</html>\n```\n#### 裁剪\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>画布-裁剪</title>\n</head>\n\n<body>\n\n</body>\n<script>\n\n    // {x:0, y:0, w:600, h:400 }\n    function clipImage(rect, src, callback) {\n        const img = new Image();\n        img.src = src;\n\n        img.onload = () => {\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            canvas.width = rect.w;\n            canvas.height = rect.h;\n            ctx.drawImage(img, -rect.x, -rect.y, img.naturalWidth, img.naturalHeight);\n            callback(canvas.toDataURL());\n        };\n    }\n\n    // {x:0, y:0, w:600, h:400 }\n    function clipEllipse(rect, src, callback) {\n        const img = new Image();\n        img.src = src;\n\n        img.onload = () => {\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            canvas.width = rect.w;\n            canvas.height = rect.h;\n            const a = rect.w / 2;\n            const b = rect.h / 2;\n            const r = Math.max(a, b);\n            const ratioX = a / r;\n            const ratioY = b / r;\n            ctx.save();\n            ctx.beginPath();\n            ctx.arc(a / ratioX, b / ratioY, r, 0, 2 * Math.PI, false);\n            ctx.closePath();\n            ctx.clip();\n            ctx.drawImage(img, -rect.x, -rect.y, img.naturalWidth, img.naturalHeight);\n            ctx.restore();\n            callback(canvas.toDataURL());\n        }\n    }\n\n    clipImage(\n        { x: 200, y: 200, w: 400, h: 400 },\n        'source.jpg',\n        (url) => {\n            const img = new Image();\n            img.src = url;\n            document.body.appendChild(img);\n        }\n    );\n\n    clipEllipse(\n        { x: 200, y: 200, w: 400, h: 400 },\n        'source.jpg',\n        (url) => {\n            const img = new Image();\n            img.src = url;\n            document.body.appendChild(img);\n        }\n    );\n\n\n\n\n</script>\n\n</html>\n```\n#### 图片清晰度处理\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>画布</title>\n</head>\n\n<body>\n    <img src=\"source.jpg\">\n</body>\n<script>\n\n    function saveQto(k, src, callback) {\n        const img = new Image();\n        img.src = src;\n\n        img.onload = () => {\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            canvas.width = img.naturalWidth;\n            canvas.height = img.naturalHeight;\n            ctx.drawImage(img, 0, 0, img.naturalWidth, img.naturalHeight);\n            callback(canvas.toDataURL('image/jpeg', k));\n        };\n    }\n\n    saveQto(\n        0.01,\n        'source.jpg',\n        (url) => {\n            const img = new Image();\n            img.src = url;\n            document.body.appendChild(img);\n        }\n    );\n\n</script>\n\n</html>\n```\n\n<!-- #### Live2d\nLive2D是一种应用于电子游戏的绘图渲染技术，技术由日本Cybernoids公司开发。通过一系列的连续图像和人物建模来生成一种类似三维模型的二维图像，对于以动画风格为主的冒险游戏来说非常有用，缺点是Live 2D人物无法大幅度转身，开发商正设法让该技术可显示360度图像。 -->","slug":"canvas","published":1,"updated":"2019-07-12T03:06:12.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld8i0016e8wen8j6v7ul","content":"<h4 id=\"绘画\"><a href=\"#绘画\" class=\"headerlink\" title=\"绘画\"></a>绘画</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>画布<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"400\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border:1px solid black;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"unDo()\"</span>&gt;</span>撤销<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 当前允不允许进行绘画</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> canDraw = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 记录上一次画笔的坐标</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> panPoint = &#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span> &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 历史记录保存数组</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> cacheArray = [];</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 画布上下文，用于绘画</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> context;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initDrawPad</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        context = <span class=\"keyword\">this</span>.canvas.getContext(<span class=\"string\">'2d'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 鼠标按下时，开始绘画</span></span></span><br><span class=\"line\"><span class=\"javascript\">        canvas.addEventListener(<span class=\"string\">'mousedown'</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            canDraw = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">            panPoint = &#123; x: event.offsetX, y: event.offsetY &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 绘画前保存当前的数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">            cacheArray.push(<span class=\"keyword\">this</span>.canvas.toDataURL());</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        canvas.addEventListener(<span class=\"string\">'mousemove'</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            drawLine(panPoint, &#123; x: event.offsetX, y: event.offsetY &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        canvas.addEventListener(<span class=\"string\">'mouseup'</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.canDraw = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        canvas.addEventListener(<span class=\"string\">'mouseleave'</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.canDraw = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawLine</span>(<span class=\"params\">startPoint, endPoint</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (canDraw) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            context.beginPath();</span></span><br><span class=\"line\"><span class=\"javascript\">            context.lineJoin = <span class=\"string\">'round'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.context.strokeStyle = <span class=\"string\">'#000000'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.context.moveTo(startPoint.x, startPoint.y);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.context.lineTo(endPoint.x, endPoint.y);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.context.closePath();</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.context.stroke();</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 记住画笔的位置</span></span></span><br><span class=\"line\"><span class=\"undefined\">            panPoint = endPoint;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unDo</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (cacheArray.length &gt; <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 清空画笔</span></span></span><br><span class=\"line\"><span class=\"undefined\">            context.clearRect(0, 0, 600, 400);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> Image();</span></span><br><span class=\"line\"><span class=\"javascript\">            image.src = <span class=\"keyword\">this</span>.cacheArray.pop();</span></span><br><span class=\"line\"><span class=\"javascript\">            image.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.context.drawImage(image, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    initDrawPad();</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"裁剪\"><a href=\"#裁剪\" class=\"headerlink\" title=\"裁剪\"></a>裁剪</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>画布-裁剪<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// &#123;x:0, y:0, w:600, h:400 &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clipImage</span>(<span class=\"params\">rect, src, callback</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image();</span></span><br><span class=\"line\"><span class=\"undefined\">        img.src = src;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">            canvas.width = rect.w;</span></span><br><span class=\"line\"><span class=\"undefined\">            canvas.height = rect.h;</span></span><br><span class=\"line\"><span class=\"undefined\">            ctx.drawImage(img, -rect.x, -rect.y, img.naturalWidth, img.naturalHeight);</span></span><br><span class=\"line\"><span class=\"undefined\">            callback(canvas.toDataURL());</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// &#123;x:0, y:0, w:600, h:400 &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clipEllipse</span>(<span class=\"params\">rect, src, callback</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image();</span></span><br><span class=\"line\"><span class=\"undefined\">        img.src = src;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">            canvas.width = rect.w;</span></span><br><span class=\"line\"><span class=\"undefined\">            canvas.height = rect.h;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> a = rect.w / <span class=\"number\">2</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> b = rect.h / <span class=\"number\">2</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> r = <span class=\"built_in\">Math</span>.max(a, b);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> ratioX = a / r;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> ratioY = b / r;</span></span><br><span class=\"line\"><span class=\"undefined\">            ctx.save();</span></span><br><span class=\"line\"><span class=\"undefined\">            ctx.beginPath();</span></span><br><span class=\"line\"><span class=\"javascript\">            ctx.arc(a / ratioX, b / ratioY, r, <span class=\"number\">0</span>, <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">            ctx.closePath();</span></span><br><span class=\"line\"><span class=\"undefined\">            ctx.clip();</span></span><br><span class=\"line\"><span class=\"undefined\">            ctx.drawImage(img, -rect.x, -rect.y, img.naturalWidth, img.naturalHeight);</span></span><br><span class=\"line\"><span class=\"undefined\">            ctx.restore();</span></span><br><span class=\"line\"><span class=\"undefined\">            callback(canvas.toDataURL());</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    clipImage(</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123; x: 200, y: 200, w: 400, h: 400 &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">'source.jpg'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        (url) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image();</span></span><br><span class=\"line\"><span class=\"undefined\">            img.src = url;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.body.appendChild(img);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    );</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    clipEllipse(</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123; x: 200, y: 200, w: 400, h: 400 &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">'source.jpg'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        (url) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image();</span></span><br><span class=\"line\"><span class=\"undefined\">            img.src = url;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.body.appendChild(img);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    );</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"图片清晰度处理\"><a href=\"#图片清晰度处理\" class=\"headerlink\" title=\"图片清晰度处理\"></a>图片清晰度处理</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>画布<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"source.jpg\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saveQto</span>(<span class=\"params\">k, src, callback</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image();</span></span><br><span class=\"line\"><span class=\"undefined\">        img.src = src;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">            canvas.width = img.naturalWidth;</span></span><br><span class=\"line\"><span class=\"undefined\">            canvas.height = img.naturalHeight;</span></span><br><span class=\"line\"><span class=\"undefined\">            ctx.drawImage(img, 0, 0, img.naturalWidth, img.naturalHeight);</span></span><br><span class=\"line\"><span class=\"javascript\">            callback(canvas.toDataURL(<span class=\"string\">'image/jpeg'</span>, k));</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    saveQto(</span></span><br><span class=\"line\"><span class=\"undefined\">        0.01,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">'source.jpg'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        (url) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image();</span></span><br><span class=\"line\"><span class=\"undefined\">            img.src = url;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.body.appendChild(img);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    );</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<!-- #### Live2d\nLive2D是一种应用于电子游戏的绘图渲染技术，技术由日本Cybernoids公司开发。通过一系列的连续图像和人物建模来生成一种类似三维模型的二维图像，对于以动画风格为主的冒险游戏来说非常有用，缺点是Live 2D人物无法大幅度转身，开发商正设法让该技术可显示360度图像。 -->","site":{"data":{}},"excerpt":"","more":"<h4 id=\"绘画\"><a href=\"#绘画\" class=\"headerlink\" title=\"绘画\"></a>绘画</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>画布<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"400\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border:1px solid black;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"unDo()\"</span>&gt;</span>撤销<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 当前允不允许进行绘画</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> canDraw = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 记录上一次画笔的坐标</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> panPoint = &#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span> &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 历史记录保存数组</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> cacheArray = [];</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 画布上下文，用于绘画</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> context;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initDrawPad</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        context = <span class=\"keyword\">this</span>.canvas.getContext(<span class=\"string\">'2d'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 鼠标按下时，开始绘画</span></span></span><br><span class=\"line\"><span class=\"javascript\">        canvas.addEventListener(<span class=\"string\">'mousedown'</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            canDraw = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">            panPoint = &#123; x: event.offsetX, y: event.offsetY &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 绘画前保存当前的数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">            cacheArray.push(<span class=\"keyword\">this</span>.canvas.toDataURL());</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        canvas.addEventListener(<span class=\"string\">'mousemove'</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            drawLine(panPoint, &#123; x: event.offsetX, y: event.offsetY &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        canvas.addEventListener(<span class=\"string\">'mouseup'</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.canDraw = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        canvas.addEventListener(<span class=\"string\">'mouseleave'</span>, (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.canDraw = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawLine</span>(<span class=\"params\">startPoint, endPoint</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (canDraw) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            context.beginPath();</span></span><br><span class=\"line\"><span class=\"javascript\">            context.lineJoin = <span class=\"string\">'round'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.context.strokeStyle = <span class=\"string\">'#000000'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.context.moveTo(startPoint.x, startPoint.y);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.context.lineTo(endPoint.x, endPoint.y);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.context.closePath();</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.context.stroke();</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 记住画笔的位置</span></span></span><br><span class=\"line\"><span class=\"undefined\">            panPoint = endPoint;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unDo</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (cacheArray.length &gt; <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 清空画笔</span></span></span><br><span class=\"line\"><span class=\"undefined\">            context.clearRect(0, 0, 600, 400);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> Image();</span></span><br><span class=\"line\"><span class=\"javascript\">            image.src = <span class=\"keyword\">this</span>.cacheArray.pop();</span></span><br><span class=\"line\"><span class=\"javascript\">            image.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.context.drawImage(image, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    initDrawPad();</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"裁剪\"><a href=\"#裁剪\" class=\"headerlink\" title=\"裁剪\"></a>裁剪</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>画布-裁剪<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// &#123;x:0, y:0, w:600, h:400 &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clipImage</span>(<span class=\"params\">rect, src, callback</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image();</span></span><br><span class=\"line\"><span class=\"undefined\">        img.src = src;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">            canvas.width = rect.w;</span></span><br><span class=\"line\"><span class=\"undefined\">            canvas.height = rect.h;</span></span><br><span class=\"line\"><span class=\"undefined\">            ctx.drawImage(img, -rect.x, -rect.y, img.naturalWidth, img.naturalHeight);</span></span><br><span class=\"line\"><span class=\"undefined\">            callback(canvas.toDataURL());</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// &#123;x:0, y:0, w:600, h:400 &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clipEllipse</span>(<span class=\"params\">rect, src, callback</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image();</span></span><br><span class=\"line\"><span class=\"undefined\">        img.src = src;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">            canvas.width = rect.w;</span></span><br><span class=\"line\"><span class=\"undefined\">            canvas.height = rect.h;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> a = rect.w / <span class=\"number\">2</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> b = rect.h / <span class=\"number\">2</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> r = <span class=\"built_in\">Math</span>.max(a, b);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> ratioX = a / r;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> ratioY = b / r;</span></span><br><span class=\"line\"><span class=\"undefined\">            ctx.save();</span></span><br><span class=\"line\"><span class=\"undefined\">            ctx.beginPath();</span></span><br><span class=\"line\"><span class=\"javascript\">            ctx.arc(a / ratioX, b / ratioY, r, <span class=\"number\">0</span>, <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">            ctx.closePath();</span></span><br><span class=\"line\"><span class=\"undefined\">            ctx.clip();</span></span><br><span class=\"line\"><span class=\"undefined\">            ctx.drawImage(img, -rect.x, -rect.y, img.naturalWidth, img.naturalHeight);</span></span><br><span class=\"line\"><span class=\"undefined\">            ctx.restore();</span></span><br><span class=\"line\"><span class=\"undefined\">            callback(canvas.toDataURL());</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    clipImage(</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123; x: 200, y: 200, w: 400, h: 400 &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">'source.jpg'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        (url) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image();</span></span><br><span class=\"line\"><span class=\"undefined\">            img.src = url;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.body.appendChild(img);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    );</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    clipEllipse(</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123; x: 200, y: 200, w: 400, h: 400 &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">'source.jpg'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        (url) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image();</span></span><br><span class=\"line\"><span class=\"undefined\">            img.src = url;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.body.appendChild(img);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    );</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"图片清晰度处理\"><a href=\"#图片清晰度处理\" class=\"headerlink\" title=\"图片清晰度处理\"></a>图片清晰度处理</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>画布<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"source.jpg\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saveQto</span>(<span class=\"params\">k, src, callback</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image();</span></span><br><span class=\"line\"><span class=\"undefined\">        img.src = src;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        img.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">            canvas.width = img.naturalWidth;</span></span><br><span class=\"line\"><span class=\"undefined\">            canvas.height = img.naturalHeight;</span></span><br><span class=\"line\"><span class=\"undefined\">            ctx.drawImage(img, 0, 0, img.naturalWidth, img.naturalHeight);</span></span><br><span class=\"line\"><span class=\"javascript\">            callback(canvas.toDataURL(<span class=\"string\">'image/jpeg'</span>, k));</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    saveQto(</span></span><br><span class=\"line\"><span class=\"undefined\">        0.01,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">'source.jpg'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">        (url) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image();</span></span><br><span class=\"line\"><span class=\"undefined\">            img.src = url;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.body.appendChild(img);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    );</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<!-- #### Live2d\nLive2D是一种应用于电子游戏的绘图渲染技术，技术由日本Cybernoids公司开发。通过一系列的连续图像和人物建模来生成一种类似三维模型的二维图像，对于以动画风格为主的冒险游戏来说非常有用，缺点是Live 2D人物无法大幅度转身，开发商正设法让该技术可显示360度图像。 -->"},{"title":"Cordova环境配置","date":"2018-08-31T07:17:04.000Z","_content":"\n#### 环境要求\n1. node环境（包含npm）\n2. java环境（JDK）\n3. android环境 （Android SDK）\n4. ios环境 （X-CODE）\n\n#### 安装node环境\n[中文网站下载](http://nodejs.cn)\n\n##### Windows\n如果是window那么使用安装包安装即可（安装成功后你就已经完成了node环境的安装，后面步骤不需要了）\n\n##### Mac\n如果是mac系统，也是同window一样双击按提示一步步安装，安装成功后即可\n\n##### Linux\n1. 如果是linux，我们使用的是一个编译好的压缩包，把压缩包放在你（当前用户，不是root）有权限访问的文件夹中（如你的home目录中）\n2. 配置环境变量(下面两种方式二选一)\n* `vi ~/.bash_profile`(当前用户)\n* `vi /etc/profile`(全局，这个需要root全选才能打开)\n\n3. 在打开的文件末尾追加环境变量(根据具体目录编写)\nexport NODE_HOME=/home/cool1024/DevTool/node\nexport PATH=$PATH:${NODE_HOME}/bin\n\n#### npm换源\n1. 安装nrm\n`npm install -g nrm`\n2. 查看当前的源\n`nrm ls`\n3. 使用淘宝镜像\n`nrm use taobao`\n\n#### npn修改相关缓存目录(这个很有必要，避免文件是没有权限的目录中)\n1. `npm config set cache [目录]` // 设置缓存文件夹；\n2. `npm config set prefix [目录]` // 设置全局模块存放路径；\n\n#### node_sass在windows系统下无法编译安装问题\n`npm config set sass_binary_site=https://npm.taobao.org/mirrors/node-sass/`\n\n#### JDK安装\n\n1. windows下的安装方法这里就不介绍了（网上一大把）\n2. mac预安装了jdk(你可以安装其它版本的，cordova目前要JDK8)\n3. linux下，去下载压缩包，解压到你有权限读写的目录下\n * 配置环境变量 \n ```conf\n #JAVA_HOME\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home\n#CLASS_PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n#PATH\nexport PATH=$JAVA_HOME/bin:$PATH\n ```\n#### ANDROID_SDK\n1. [中文网下载](http://tools.android-studio.org)\n2. 在有权限的目录下创建一个android-sdk目录，把下载的命令行工具解压到sdk目录中\n3. 配置ANDROID_HOME\n```conf\n#ANDROID_HOME\nexport ANDROID_HOME=/Users/anasit/Documents/Android/android-sdk-macosx\n#PATH\nexport PATH=$ANDROID_HOME/tools:$PATH\n```\n4. 配置好环境变量都要人工执行应用\n * `source ~/.bash_profile`(当前用户)\n * `source /etc/profile`(全局生效，要root权限)\n\n#### Gradle\n1. cordova目前使用了gradle构建项目\n\n\n#### 使用sdkmanager安装需要的开发包（sdkmanager在tools/bin目录下，你需要自己配置环境变量）\n1. `sdkmanager --list` 查看所有的开发包\n2. `sdkmanager \"build-tools;19.1.0\"` 安装指定的开发包\n\n#### 安装Cordova\n1. `npm install cordova -g` 安装cordova命令行工具\n2. `cordova create myApp` 创建项目\n3. `cordova platform add android` 添加android平台\n4. `cordova bulid android` 打包apk","source":"_posts/cordova-note-1.md","raw":"---\ntitle: Cordova环境配置\ndate: 2018-08-31 15:17:04\ntags: ['cordova','node.js']\ncategories: Web开发\n---\n\n#### 环境要求\n1. node环境（包含npm）\n2. java环境（JDK）\n3. android环境 （Android SDK）\n4. ios环境 （X-CODE）\n\n#### 安装node环境\n[中文网站下载](http://nodejs.cn)\n\n##### Windows\n如果是window那么使用安装包安装即可（安装成功后你就已经完成了node环境的安装，后面步骤不需要了）\n\n##### Mac\n如果是mac系统，也是同window一样双击按提示一步步安装，安装成功后即可\n\n##### Linux\n1. 如果是linux，我们使用的是一个编译好的压缩包，把压缩包放在你（当前用户，不是root）有权限访问的文件夹中（如你的home目录中）\n2. 配置环境变量(下面两种方式二选一)\n* `vi ~/.bash_profile`(当前用户)\n* `vi /etc/profile`(全局，这个需要root全选才能打开)\n\n3. 在打开的文件末尾追加环境变量(根据具体目录编写)\nexport NODE_HOME=/home/cool1024/DevTool/node\nexport PATH=$PATH:${NODE_HOME}/bin\n\n#### npm换源\n1. 安装nrm\n`npm install -g nrm`\n2. 查看当前的源\n`nrm ls`\n3. 使用淘宝镜像\n`nrm use taobao`\n\n#### npn修改相关缓存目录(这个很有必要，避免文件是没有权限的目录中)\n1. `npm config set cache [目录]` // 设置缓存文件夹；\n2. `npm config set prefix [目录]` // 设置全局模块存放路径；\n\n#### node_sass在windows系统下无法编译安装问题\n`npm config set sass_binary_site=https://npm.taobao.org/mirrors/node-sass/`\n\n#### JDK安装\n\n1. windows下的安装方法这里就不介绍了（网上一大把）\n2. mac预安装了jdk(你可以安装其它版本的，cordova目前要JDK8)\n3. linux下，去下载压缩包，解压到你有权限读写的目录下\n * 配置环境变量 \n ```conf\n #JAVA_HOME\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home\n#CLASS_PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n#PATH\nexport PATH=$JAVA_HOME/bin:$PATH\n ```\n#### ANDROID_SDK\n1. [中文网下载](http://tools.android-studio.org)\n2. 在有权限的目录下创建一个android-sdk目录，把下载的命令行工具解压到sdk目录中\n3. 配置ANDROID_HOME\n```conf\n#ANDROID_HOME\nexport ANDROID_HOME=/Users/anasit/Documents/Android/android-sdk-macosx\n#PATH\nexport PATH=$ANDROID_HOME/tools:$PATH\n```\n4. 配置好环境变量都要人工执行应用\n * `source ~/.bash_profile`(当前用户)\n * `source /etc/profile`(全局生效，要root权限)\n\n#### Gradle\n1. cordova目前使用了gradle构建项目\n\n\n#### 使用sdkmanager安装需要的开发包（sdkmanager在tools/bin目录下，你需要自己配置环境变量）\n1. `sdkmanager --list` 查看所有的开发包\n2. `sdkmanager \"build-tools;19.1.0\"` 安装指定的开发包\n\n#### 安装Cordova\n1. `npm install cordova -g` 安装cordova命令行工具\n2. `cordova create myApp` 创建项目\n3. `cordova platform add android` 添加android平台\n4. `cordova bulid android` 打包apk","slug":"cordova-note-1","published":1,"updated":"2019-07-12T03:06:17.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld8j0018e8wejtqsp0cg","content":"<h4 id=\"环境要求\"><a href=\"#环境要求\" class=\"headerlink\" title=\"环境要求\"></a>环境要求</h4><ol>\n<li>node环境（包含npm）</li>\n<li>java环境（JDK）</li>\n<li>android环境 （Android SDK）</li>\n<li>ios环境 （X-CODE）</li>\n</ol>\n<h4 id=\"安装node环境\"><a href=\"#安装node环境\" class=\"headerlink\" title=\"安装node环境\"></a>安装node环境</h4><p><a href=\"http://nodejs.cn\" target=\"_blank\" rel=\"noopener\">中文网站下载</a></p>\n<h5 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h5><p>如果是window那么使用安装包安装即可（安装成功后你就已经完成了node环境的安装，后面步骤不需要了）</p>\n<h5 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h5><p>如果是mac系统，也是同window一样双击按提示一步步安装，安装成功后即可</p>\n<h5 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h5><ol>\n<li>如果是linux，我们使用的是一个编译好的压缩包，把压缩包放在你（当前用户，不是root）有权限访问的文件夹中（如你的home目录中）</li>\n<li>配置环境变量(下面两种方式二选一)</li>\n</ol>\n<ul>\n<li><code>vi ~/.bash_profile</code>(当前用户)</li>\n<li><code>vi /etc/profile</code>(全局，这个需要root全选才能打开)</li>\n</ul>\n<ol start=\"3\">\n<li>在打开的文件末尾追加环境变量(根据具体目录编写)<br>export NODE_HOME=/home/cool1024/DevTool/node<br>export PATH=$PATH:${NODE_HOME}/bin</li>\n</ol>\n<h4 id=\"npm换源\"><a href=\"#npm换源\" class=\"headerlink\" title=\"npm换源\"></a>npm换源</h4><ol>\n<li>安装nrm<br><code>npm install -g nrm</code></li>\n<li>查看当前的源<br><code>nrm ls</code></li>\n<li>使用淘宝镜像<br><code>nrm use taobao</code></li>\n</ol>\n<h4 id=\"npn修改相关缓存目录-这个很有必要，避免文件是没有权限的目录中\"><a href=\"#npn修改相关缓存目录-这个很有必要，避免文件是没有权限的目录中\" class=\"headerlink\" title=\"npn修改相关缓存目录(这个很有必要，避免文件是没有权限的目录中)\"></a>npn修改相关缓存目录(这个很有必要，避免文件是没有权限的目录中)</h4><ol>\n<li><code>npm config set cache [目录]</code> // 设置缓存文件夹；</li>\n<li><code>npm config set prefix [目录]</code> // 设置全局模块存放路径；</li>\n</ol>\n<h4 id=\"node-sass在windows系统下无法编译安装问题\"><a href=\"#node-sass在windows系统下无法编译安装问题\" class=\"headerlink\" title=\"node_sass在windows系统下无法编译安装问题\"></a>node_sass在windows系统下无法编译安装问题</h4><p><code>npm config set sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</code></p>\n<h4 id=\"JDK安装\"><a href=\"#JDK安装\" class=\"headerlink\" title=\"JDK安装\"></a>JDK安装</h4><ol>\n<li>windows下的安装方法这里就不介绍了（网上一大把）</li>\n<li>mac预安装了jdk(你可以安装其它版本的，cordova目前要JDK8)</li>\n<li>linux下，去下载压缩包，解压到你有权限读写的目录下<ul>\n<li>配置环境变量 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> #JAVA_HOME</span><br><span class=\"line\">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home</span><br><span class=\"line\">#CLASS_PATH</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">#PATH</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"ANDROID-SDK\"><a href=\"#ANDROID-SDK\" class=\"headerlink\" title=\"ANDROID_SDK\"></a>ANDROID_SDK</h4><ol>\n<li><a href=\"http://tools.android-studio.org\" target=\"_blank\" rel=\"noopener\">中文网下载</a></li>\n<li>在有权限的目录下创建一个android-sdk目录，把下载的命令行工具解压到sdk目录中</li>\n<li><p>配置ANDROID_HOME</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ANDROID_HOME</span><br><span class=\"line\">export ANDROID_HOME=/Users/anasit/Documents/Android/android-sdk-macosx</span><br><span class=\"line\">#PATH</span><br><span class=\"line\">export PATH=$ANDROID_HOME/tools:$PATH</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置好环境变量都要人工执行应用</p>\n<ul>\n<li><code>source ~/.bash_profile</code>(当前用户)</li>\n<li><code>source /etc/profile</code>(全局生效，要root权限)</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h4><ol>\n<li>cordova目前使用了gradle构建项目</li>\n</ol>\n<h4 id=\"使用sdkmanager安装需要的开发包（sdkmanager在tools-bin目录下，你需要自己配置环境变量）\"><a href=\"#使用sdkmanager安装需要的开发包（sdkmanager在tools-bin目录下，你需要自己配置环境变量）\" class=\"headerlink\" title=\"使用sdkmanager安装需要的开发包（sdkmanager在tools/bin目录下，你需要自己配置环境变量）\"></a>使用sdkmanager安装需要的开发包（sdkmanager在tools/bin目录下，你需要自己配置环境变量）</h4><ol>\n<li><code>sdkmanager --list</code> 查看所有的开发包</li>\n<li><code>sdkmanager &quot;build-tools;19.1.0&quot;</code> 安装指定的开发包</li>\n</ol>\n<h4 id=\"安装Cordova\"><a href=\"#安装Cordova\" class=\"headerlink\" title=\"安装Cordova\"></a>安装Cordova</h4><ol>\n<li><code>npm install cordova -g</code> 安装cordova命令行工具</li>\n<li><code>cordova create myApp</code> 创建项目</li>\n<li><code>cordova platform add android</code> 添加android平台</li>\n<li><code>cordova bulid android</code> 打包apk</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"环境要求\"><a href=\"#环境要求\" class=\"headerlink\" title=\"环境要求\"></a>环境要求</h4><ol>\n<li>node环境（包含npm）</li>\n<li>java环境（JDK）</li>\n<li>android环境 （Android SDK）</li>\n<li>ios环境 （X-CODE）</li>\n</ol>\n<h4 id=\"安装node环境\"><a href=\"#安装node环境\" class=\"headerlink\" title=\"安装node环境\"></a>安装node环境</h4><p><a href=\"http://nodejs.cn\" target=\"_blank\" rel=\"noopener\">中文网站下载</a></p>\n<h5 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h5><p>如果是window那么使用安装包安装即可（安装成功后你就已经完成了node环境的安装，后面步骤不需要了）</p>\n<h5 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h5><p>如果是mac系统，也是同window一样双击按提示一步步安装，安装成功后即可</p>\n<h5 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h5><ol>\n<li>如果是linux，我们使用的是一个编译好的压缩包，把压缩包放在你（当前用户，不是root）有权限访问的文件夹中（如你的home目录中）</li>\n<li>配置环境变量(下面两种方式二选一)</li>\n</ol>\n<ul>\n<li><code>vi ~/.bash_profile</code>(当前用户)</li>\n<li><code>vi /etc/profile</code>(全局，这个需要root全选才能打开)</li>\n</ul>\n<ol start=\"3\">\n<li>在打开的文件末尾追加环境变量(根据具体目录编写)<br>export NODE_HOME=/home/cool1024/DevTool/node<br>export PATH=$PATH:${NODE_HOME}/bin</li>\n</ol>\n<h4 id=\"npm换源\"><a href=\"#npm换源\" class=\"headerlink\" title=\"npm换源\"></a>npm换源</h4><ol>\n<li>安装nrm<br><code>npm install -g nrm</code></li>\n<li>查看当前的源<br><code>nrm ls</code></li>\n<li>使用淘宝镜像<br><code>nrm use taobao</code></li>\n</ol>\n<h4 id=\"npn修改相关缓存目录-这个很有必要，避免文件是没有权限的目录中\"><a href=\"#npn修改相关缓存目录-这个很有必要，避免文件是没有权限的目录中\" class=\"headerlink\" title=\"npn修改相关缓存目录(这个很有必要，避免文件是没有权限的目录中)\"></a>npn修改相关缓存目录(这个很有必要，避免文件是没有权限的目录中)</h4><ol>\n<li><code>npm config set cache [目录]</code> // 设置缓存文件夹；</li>\n<li><code>npm config set prefix [目录]</code> // 设置全局模块存放路径；</li>\n</ol>\n<h4 id=\"node-sass在windows系统下无法编译安装问题\"><a href=\"#node-sass在windows系统下无法编译安装问题\" class=\"headerlink\" title=\"node_sass在windows系统下无法编译安装问题\"></a>node_sass在windows系统下无法编译安装问题</h4><p><code>npm config set sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</code></p>\n<h4 id=\"JDK安装\"><a href=\"#JDK安装\" class=\"headerlink\" title=\"JDK安装\"></a>JDK安装</h4><ol>\n<li>windows下的安装方法这里就不介绍了（网上一大把）</li>\n<li>mac预安装了jdk(你可以安装其它版本的，cordova目前要JDK8)</li>\n<li>linux下，去下载压缩包，解压到你有权限读写的目录下<ul>\n<li>配置环境变量 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> #JAVA_HOME</span><br><span class=\"line\">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home</span><br><span class=\"line\">#CLASS_PATH</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">#PATH</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"ANDROID-SDK\"><a href=\"#ANDROID-SDK\" class=\"headerlink\" title=\"ANDROID_SDK\"></a>ANDROID_SDK</h4><ol>\n<li><a href=\"http://tools.android-studio.org\" target=\"_blank\" rel=\"noopener\">中文网下载</a></li>\n<li>在有权限的目录下创建一个android-sdk目录，把下载的命令行工具解压到sdk目录中</li>\n<li><p>配置ANDROID_HOME</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ANDROID_HOME</span><br><span class=\"line\">export ANDROID_HOME=/Users/anasit/Documents/Android/android-sdk-macosx</span><br><span class=\"line\">#PATH</span><br><span class=\"line\">export PATH=$ANDROID_HOME/tools:$PATH</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置好环境变量都要人工执行应用</p>\n<ul>\n<li><code>source ~/.bash_profile</code>(当前用户)</li>\n<li><code>source /etc/profile</code>(全局生效，要root权限)</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h4><ol>\n<li>cordova目前使用了gradle构建项目</li>\n</ol>\n<h4 id=\"使用sdkmanager安装需要的开发包（sdkmanager在tools-bin目录下，你需要自己配置环境变量）\"><a href=\"#使用sdkmanager安装需要的开发包（sdkmanager在tools-bin目录下，你需要自己配置环境变量）\" class=\"headerlink\" title=\"使用sdkmanager安装需要的开发包（sdkmanager在tools/bin目录下，你需要自己配置环境变量）\"></a>使用sdkmanager安装需要的开发包（sdkmanager在tools/bin目录下，你需要自己配置环境变量）</h4><ol>\n<li><code>sdkmanager --list</code> 查看所有的开发包</li>\n<li><code>sdkmanager &quot;build-tools;19.1.0&quot;</code> 安装指定的开发包</li>\n</ol>\n<h4 id=\"安装Cordova\"><a href=\"#安装Cordova\" class=\"headerlink\" title=\"安装Cordova\"></a>安装Cordova</h4><ol>\n<li><code>npm install cordova -g</code> 安装cordova命令行工具</li>\n<li><code>cordova create myApp</code> 创建项目</li>\n<li><code>cordova platform add android</code> 添加android平台</li>\n<li><code>cordova bulid android</code> 打包apk</li>\n</ol>\n"},{"title":"cordova-swift-support","date":"2018-09-27T03:35:55.000Z","_content":"\n#### Github地址\nhttps://github.com/akofman/cordova-plugin-add-swift-support\n\n#### 在插件的plugin.xml,ios平台配置中加入下面配置\n`<dependency id=\"cordova-plugin-add-swift-support\" spec=\"~1.7.1\" />`\n\n#### 参考cordova-plugin-qrscanner的配置文件\n```xml\n<platform name=\"ios\">\n    <config-file target=\"config.xml\" parent=\"/*\">\n      <feature name=\"QRScanner\">\n        <param name=\"ios-package\" value=\"QRScanner\"/>\n      </feature>\n    </config-file>\n    <dependency id=\"cordova-plugin-add-swift-support\" spec=\"~1.7.1\" />\n    <source-file src=\"src/ios/QRScanner.swift\"/>\n    <config-file target=\"*-Info.plist\" parent=\"NSCameraUsageDescription\">\n      <string>The camera is used to scan QR codes.</string>\n    </config-file>\n</platform>\n```\nhttps://github.com/bitpay/cordova-plugin-qrscanner","source":"_posts/cordova-swift-support.md","raw":"---\ntitle: cordova-swift-support\ndate: 2018-09-27 11:35:55\ntags: [cordova,swift]\ncategories: Web开发\n---\n\n#### Github地址\nhttps://github.com/akofman/cordova-plugin-add-swift-support\n\n#### 在插件的plugin.xml,ios平台配置中加入下面配置\n`<dependency id=\"cordova-plugin-add-swift-support\" spec=\"~1.7.1\" />`\n\n#### 参考cordova-plugin-qrscanner的配置文件\n```xml\n<platform name=\"ios\">\n    <config-file target=\"config.xml\" parent=\"/*\">\n      <feature name=\"QRScanner\">\n        <param name=\"ios-package\" value=\"QRScanner\"/>\n      </feature>\n    </config-file>\n    <dependency id=\"cordova-plugin-add-swift-support\" spec=\"~1.7.1\" />\n    <source-file src=\"src/ios/QRScanner.swift\"/>\n    <config-file target=\"*-Info.plist\" parent=\"NSCameraUsageDescription\">\n      <string>The camera is used to scan QR codes.</string>\n    </config-file>\n</platform>\n```\nhttps://github.com/bitpay/cordova-plugin-qrscanner","slug":"cordova-swift-support","published":1,"updated":"2019-07-12T03:06:25.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld8l001ce8we9nobsj5v","content":"<h4 id=\"Github地址\"><a href=\"#Github地址\" class=\"headerlink\" title=\"Github地址\"></a>Github地址</h4><p><a href=\"https://github.com/akofman/cordova-plugin-add-swift-support\" target=\"_blank\" rel=\"noopener\">https://github.com/akofman/cordova-plugin-add-swift-support</a></p>\n<h4 id=\"在插件的plugin-xml-ios平台配置中加入下面配置\"><a href=\"#在插件的plugin-xml-ios平台配置中加入下面配置\" class=\"headerlink\" title=\"在插件的plugin.xml,ios平台配置中加入下面配置\"></a>在插件的plugin.xml,ios平台配置中加入下面配置</h4><p><code>&lt;dependency id=&quot;cordova-plugin-add-swift-support&quot; spec=&quot;~1.7.1&quot; /&gt;</code></p>\n<h4 id=\"参考cordova-plugin-qrscanner的配置文件\"><a href=\"#参考cordova-plugin-qrscanner的配置文件\" class=\"headerlink\" title=\"参考cordova-plugin-qrscanner的配置文件\"></a>参考cordova-plugin-qrscanner的配置文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">platform</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ios\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">config-file</span> <span class=\"attr\">target</span>=<span class=\"string\">\"config.xml\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"/*\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">feature</span> <span class=\"attr\">name</span>=<span class=\"string\">\"QRScanner\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ios-package\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"QRScanner\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">feature</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">config-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span> <span class=\"attr\">id</span>=<span class=\"string\">\"cordova-plugin-add-swift-support\"</span> <span class=\"attr\">spec</span>=<span class=\"string\">\"~1.7.1\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source-file</span> <span class=\"attr\">src</span>=<span class=\"string\">\"src/ios/QRScanner.swift\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">config-file</span> <span class=\"attr\">target</span>=<span class=\"string\">\"*-Info.plist\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"NSCameraUsageDescription\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>The camera is used to scan QR codes.<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">config-file</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">platform</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/bitpay/cordova-plugin-qrscanner\" target=\"_blank\" rel=\"noopener\">https://github.com/bitpay/cordova-plugin-qrscanner</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Github地址\"><a href=\"#Github地址\" class=\"headerlink\" title=\"Github地址\"></a>Github地址</h4><p><a href=\"https://github.com/akofman/cordova-plugin-add-swift-support\" target=\"_blank\" rel=\"noopener\">https://github.com/akofman/cordova-plugin-add-swift-support</a></p>\n<h4 id=\"在插件的plugin-xml-ios平台配置中加入下面配置\"><a href=\"#在插件的plugin-xml-ios平台配置中加入下面配置\" class=\"headerlink\" title=\"在插件的plugin.xml,ios平台配置中加入下面配置\"></a>在插件的plugin.xml,ios平台配置中加入下面配置</h4><p><code>&lt;dependency id=&quot;cordova-plugin-add-swift-support&quot; spec=&quot;~1.7.1&quot; /&gt;</code></p>\n<h4 id=\"参考cordova-plugin-qrscanner的配置文件\"><a href=\"#参考cordova-plugin-qrscanner的配置文件\" class=\"headerlink\" title=\"参考cordova-plugin-qrscanner的配置文件\"></a>参考cordova-plugin-qrscanner的配置文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">platform</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ios\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">config-file</span> <span class=\"attr\">target</span>=<span class=\"string\">\"config.xml\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"/*\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">feature</span> <span class=\"attr\">name</span>=<span class=\"string\">\"QRScanner\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ios-package\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"QRScanner\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">feature</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">config-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span> <span class=\"attr\">id</span>=<span class=\"string\">\"cordova-plugin-add-swift-support\"</span> <span class=\"attr\">spec</span>=<span class=\"string\">\"~1.7.1\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source-file</span> <span class=\"attr\">src</span>=<span class=\"string\">\"src/ios/QRScanner.swift\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">config-file</span> <span class=\"attr\">target</span>=<span class=\"string\">\"*-Info.plist\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"NSCameraUsageDescription\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>The camera is used to scan QR codes.<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">config-file</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">platform</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/bitpay/cordova-plugin-qrscanner\" target=\"_blank\" rel=\"noopener\">https://github.com/bitpay/cordova-plugin-qrscanner</a></p>\n"},{"title":"FFMPEG视频切割/按碎片进行播放","date":"2019-01-21T07:38:16.000Z","_content":"#### 视频切割\n1. 按时间间隔进行切割（由于关键帧的问题，每个碎片的时间不会完全一样）\n参考格式\n`ffmpeg -i 要切割的视频.flv -threads [线程数量] -vcodec copy -f segment -segment_time [片段时间-秒] [输出文件]`\n例子，我们把origin.flv文件按60秒间隔进行切割，结果输出到output文件夹中，%04d为4位数（如果不够会补0，如0001）,使用了4个线程，注意output这个目录必须先创建\n`ffmpeg -i origin.flv -threads 4 -vcodec copy -f segment -segment_time 60 ./output/%04d.flv`\n\n2. 碎片信息获取\n每个视频的时间长度是不一样的，跳转进度的时候需要根据具体时间推算出应该加载的碎片\n参考格式\n`ffprobe -v quiet -print_format json -show_format [视频文件]`\n例子，我们获取了0000.flv视频碎片的信息\n`ffprobe -v quiet -print_format json -show_format 0000.flv`\n测试结果\n```json\n{\n    \"format\": {\n        \"filename\": \"0000.flv\",\n        \"nb_streams\": 2,\n        \"nb_programs\": 0,\n        \"format_name\": \"flv\",\n        \"format_long_name\": \"FLV (Flash Video)\",\n        \"start_time\": \"0.000000\",\n        \"duration\": \"61.108000\",\n        \"size\": \"24466108\",\n        \"bit_rate\": \"3202999\",\n        \"probe_score\": 100,\n        \"tags\": {\n            \"major_brand\": \"isom\",\n            \"minor_version\": \"1\",\n            \"compatible_brands\": \"isom\",\n            \"lastkeyframelocation\": \"425679152\",\n            \"canSeekToEnd\": \"true\",\n            \"videosize\": \"402910584\",\n            \"audiosize\": \"23709850\",\n            \"lastkeyframetimestamp\": \"1411\",\n            \"encoder\": \"Lavf58.25.100\"\n        }\n    }\n}\n```\n\n3. 批量获取（使用脚本）\n这里使用的是php编写的脚本，并把结果输出到segment.json文件中\n```php\n<?php\n\n// 这个方法是用来获取一个目录下指定拓展名称的所有文件\nfunction list_files($path, $ext)\n{\n    $tree = array();\n    $temp = glob($path . \"/*\" . $ext);\n    if ($temp) $tree = array_merge($tree, $temp);\n    foreach (glob($path . \"/*\", GLOB_ONLYDIR) as $dir) {\n        $temp = list_files($dir, $ext);\n        if ($temp) $tree = array_merge($tree, $temp);\n    }\n    return $tree;\n}\n\n\n// 第一个是视频碎片的文件夹，第二个是视频的拓展名\n$flvs = list_files('/usr/local/var/www/html/output', 'flv');\n$segments = [];\n$count = 0;\n\nforeach ($flvs as $flv) {\n    $result = shell_exec('ffprobe -v quiet -print_format json -show_format ' . $flv);\n    $result = json_decode($result, true);\n    $result = $result['format'];\n    $count += $result['duration'] * 1000;\n    $segments[] = [\n        'duration' => $result['duration'] * 1000, // 时长（这里*1000转换为毫秒）\n        'filesize' => (int)$result['size'], // 文件大小\n        'url' => '/html/output/' . array_pop(explode('/', $result['filename'])) // 碎片访问路径\n    ];\n}\n// 输出总时长\necho ($count);\n\n// 把结果写入到segment.json中\nfile_put_contents('segment.json', json_encode($segments));\n```\n\n4. 生成关键帧快照，用于视频缩略图预览\n参考格式\n`ffmpeg -i [原始视频] -vf select='eq(pict_type\\,I)' -vsync 2 -s [分辨率] -f image2 core-%02d.jpg`\n例子,注意snapshot这个目录必须先创建\n`ffmpeg -i live.mp4 -threads 8 -vf select='eq(pict_type\\,I)' -vsync 2 -s 960*540 -f image2 ./snapshot/%02d.jpg`\n* -i :输入文件，这里的话其实就是视频, \n* -vf:是一个命令行，表示过滤图形的描述, 选择过滤器select会选择帧进行输出：包括过滤器常量 \n* pict_type和对应的类型:PICT_TYPE_I 表示是I帧，即关键帧。 \n* -vsync 2:阻止每个关键帧产生多余的拷贝 \n* -f image2 name_%02d.jpeg:将视频帧写入到图片中，样式的格式一般是: \n* -s:分辨率，1920*1080\n\n5. 生成对应关键帧的参数记录文件(等待完善)\n参考格式\n`ffprobe -print_format json -show_frames [视频文件] > [保存文件]`\n例子\n`ffprobe -print_format json -show_frames live.mp4 > index.json`","source":"_posts/ffmpeg-note-1.md","raw":"---\ntitle: FFMPEG视频切割/按碎片进行播放\ndate: 2019-01-21 15:38:16\ntags: ffmpeg\n---\n#### 视频切割\n1. 按时间间隔进行切割（由于关键帧的问题，每个碎片的时间不会完全一样）\n参考格式\n`ffmpeg -i 要切割的视频.flv -threads [线程数量] -vcodec copy -f segment -segment_time [片段时间-秒] [输出文件]`\n例子，我们把origin.flv文件按60秒间隔进行切割，结果输出到output文件夹中，%04d为4位数（如果不够会补0，如0001）,使用了4个线程，注意output这个目录必须先创建\n`ffmpeg -i origin.flv -threads 4 -vcodec copy -f segment -segment_time 60 ./output/%04d.flv`\n\n2. 碎片信息获取\n每个视频的时间长度是不一样的，跳转进度的时候需要根据具体时间推算出应该加载的碎片\n参考格式\n`ffprobe -v quiet -print_format json -show_format [视频文件]`\n例子，我们获取了0000.flv视频碎片的信息\n`ffprobe -v quiet -print_format json -show_format 0000.flv`\n测试结果\n```json\n{\n    \"format\": {\n        \"filename\": \"0000.flv\",\n        \"nb_streams\": 2,\n        \"nb_programs\": 0,\n        \"format_name\": \"flv\",\n        \"format_long_name\": \"FLV (Flash Video)\",\n        \"start_time\": \"0.000000\",\n        \"duration\": \"61.108000\",\n        \"size\": \"24466108\",\n        \"bit_rate\": \"3202999\",\n        \"probe_score\": 100,\n        \"tags\": {\n            \"major_brand\": \"isom\",\n            \"minor_version\": \"1\",\n            \"compatible_brands\": \"isom\",\n            \"lastkeyframelocation\": \"425679152\",\n            \"canSeekToEnd\": \"true\",\n            \"videosize\": \"402910584\",\n            \"audiosize\": \"23709850\",\n            \"lastkeyframetimestamp\": \"1411\",\n            \"encoder\": \"Lavf58.25.100\"\n        }\n    }\n}\n```\n\n3. 批量获取（使用脚本）\n这里使用的是php编写的脚本，并把结果输出到segment.json文件中\n```php\n<?php\n\n// 这个方法是用来获取一个目录下指定拓展名称的所有文件\nfunction list_files($path, $ext)\n{\n    $tree = array();\n    $temp = glob($path . \"/*\" . $ext);\n    if ($temp) $tree = array_merge($tree, $temp);\n    foreach (glob($path . \"/*\", GLOB_ONLYDIR) as $dir) {\n        $temp = list_files($dir, $ext);\n        if ($temp) $tree = array_merge($tree, $temp);\n    }\n    return $tree;\n}\n\n\n// 第一个是视频碎片的文件夹，第二个是视频的拓展名\n$flvs = list_files('/usr/local/var/www/html/output', 'flv');\n$segments = [];\n$count = 0;\n\nforeach ($flvs as $flv) {\n    $result = shell_exec('ffprobe -v quiet -print_format json -show_format ' . $flv);\n    $result = json_decode($result, true);\n    $result = $result['format'];\n    $count += $result['duration'] * 1000;\n    $segments[] = [\n        'duration' => $result['duration'] * 1000, // 时长（这里*1000转换为毫秒）\n        'filesize' => (int)$result['size'], // 文件大小\n        'url' => '/html/output/' . array_pop(explode('/', $result['filename'])) // 碎片访问路径\n    ];\n}\n// 输出总时长\necho ($count);\n\n// 把结果写入到segment.json中\nfile_put_contents('segment.json', json_encode($segments));\n```\n\n4. 生成关键帧快照，用于视频缩略图预览\n参考格式\n`ffmpeg -i [原始视频] -vf select='eq(pict_type\\,I)' -vsync 2 -s [分辨率] -f image2 core-%02d.jpg`\n例子,注意snapshot这个目录必须先创建\n`ffmpeg -i live.mp4 -threads 8 -vf select='eq(pict_type\\,I)' -vsync 2 -s 960*540 -f image2 ./snapshot/%02d.jpg`\n* -i :输入文件，这里的话其实就是视频, \n* -vf:是一个命令行，表示过滤图形的描述, 选择过滤器select会选择帧进行输出：包括过滤器常量 \n* pict_type和对应的类型:PICT_TYPE_I 表示是I帧，即关键帧。 \n* -vsync 2:阻止每个关键帧产生多余的拷贝 \n* -f image2 name_%02d.jpeg:将视频帧写入到图片中，样式的格式一般是: \n* -s:分辨率，1920*1080\n\n5. 生成对应关键帧的参数记录文件(等待完善)\n参考格式\n`ffprobe -print_format json -show_frames [视频文件] > [保存文件]`\n例子\n`ffprobe -print_format json -show_frames live.mp4 > index.json`","slug":"ffmpeg-note-1","published":1,"updated":"2019-07-05T04:24:05.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld8n001ee8we4h74958h","content":"<h4 id=\"视频切割\"><a href=\"#视频切割\" class=\"headerlink\" title=\"视频切割\"></a>视频切割</h4><ol>\n<li><p>按时间间隔进行切割（由于关键帧的问题，每个碎片的时间不会完全一样）<br>参考格式<br><code>ffmpeg -i 要切割的视频.flv -threads [线程数量] -vcodec copy -f segment -segment_time [片段时间-秒] [输出文件]</code><br>例子，我们把origin.flv文件按60秒间隔进行切割，结果输出到output文件夹中，%04d为4位数（如果不够会补0，如0001）,使用了4个线程，注意output这个目录必须先创建<br><code>ffmpeg -i origin.flv -threads 4 -vcodec copy -f segment -segment_time 60 ./output/%04d.flv</code></p>\n</li>\n<li><p>碎片信息获取<br>每个视频的时间长度是不一样的，跳转进度的时候需要根据具体时间推算出应该加载的碎片<br>参考格式<br><code>ffprobe -v quiet -print_format json -show_format [视频文件]</code><br>例子，我们获取了0000.flv视频碎片的信息<br><code>ffprobe -v quiet -print_format json -show_format 0000.flv</code><br>测试结果</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"format\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"filename\"</span>: <span class=\"string\">\"0000.flv\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"nb_streams\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"nb_programs\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"format_name\"</span>: <span class=\"string\">\"flv\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"format_long_name\"</span>: <span class=\"string\">\"FLV (Flash Video)\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"start_time\"</span>: <span class=\"string\">\"0.000000\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"duration\"</span>: <span class=\"string\">\"61.108000\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"size\"</span>: <span class=\"string\">\"24466108\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"bit_rate\"</span>: <span class=\"string\">\"3202999\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"probe_score\"</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"tags\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"major_brand\"</span>: <span class=\"string\">\"isom\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"minor_version\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"compatible_brands\"</span>: <span class=\"string\">\"isom\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lastkeyframelocation\"</span>: <span class=\"string\">\"425679152\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"canSeekToEnd\"</span>: <span class=\"string\">\"true\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"videosize\"</span>: <span class=\"string\">\"402910584\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"audiosize\"</span>: <span class=\"string\">\"23709850\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lastkeyframetimestamp\"</span>: <span class=\"string\">\"1411\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"encoder\"</span>: <span class=\"string\">\"Lavf58.25.100\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>批量获取（使用脚本）<br>这里使用的是php编写的脚本，并把结果输出到segment.json文件中</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个方法是用来获取一个目录下指定拓展名称的所有文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">list_files</span><span class=\"params\">($path, $ext)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $tree = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    $temp = glob($path . <span class=\"string\">\"/*\"</span> . $ext);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($temp) $tree = array_merge($tree, $temp);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (glob($path . <span class=\"string\">\"/*\"</span>, GLOB_ONLYDIR) <span class=\"keyword\">as</span> $dir) &#123;</span><br><span class=\"line\">        $temp = list_files($dir, $ext);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($temp) $tree = array_merge($tree, $temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $tree;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一个是视频碎片的文件夹，第二个是视频的拓展名</span></span><br><span class=\"line\">$flvs = list_files(<span class=\"string\">'/usr/local/var/www/html/output'</span>, <span class=\"string\">'flv'</span>);</span><br><span class=\"line\">$segments = [];</span><br><span class=\"line\">$count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($flvs <span class=\"keyword\">as</span> $flv) &#123;</span><br><span class=\"line\">    $result = shell_exec(<span class=\"string\">'ffprobe -v quiet -print_format json -show_format '</span> . $flv);</span><br><span class=\"line\">    $result = json_decode($result, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    $result = $result[<span class=\"string\">'format'</span>];</span><br><span class=\"line\">    $count += $result[<span class=\"string\">'duration'</span>] * <span class=\"number\">1000</span>;</span><br><span class=\"line\">    $segments[] = [</span><br><span class=\"line\">        <span class=\"string\">'duration'</span> =&gt; $result[<span class=\"string\">'duration'</span>] * <span class=\"number\">1000</span>, <span class=\"comment\">// 时长（这里*1000转换为毫秒）</span></span><br><span class=\"line\">        <span class=\"string\">'filesize'</span> =&gt; (int)$result[<span class=\"string\">'size'</span>], <span class=\"comment\">// 文件大小</span></span><br><span class=\"line\">        <span class=\"string\">'url'</span> =&gt; <span class=\"string\">'/html/output/'</span> . array_pop(explode(<span class=\"string\">'/'</span>, $result[<span class=\"string\">'filename'</span>])) <span class=\"comment\">// 碎片访问路径</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出总时长</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> ($count);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把结果写入到segment.json中</span></span><br><span class=\"line\">file_put_contents(<span class=\"string\">'segment.json'</span>, json_encode($segments));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成关键帧快照，用于视频缩略图预览<br>参考格式<br><code>ffmpeg -i [原始视频] -vf select=&#39;eq(pict_type\\,I)&#39; -vsync 2 -s [分辨率] -f image2 core-%02d.jpg</code><br>例子,注意snapshot这个目录必须先创建<br><code>ffmpeg -i live.mp4 -threads 8 -vf select=&#39;eq(pict_type\\,I)&#39; -vsync 2 -s 960*540 -f image2 ./snapshot/%02d.jpg</code></p>\n</li>\n</ol>\n<ul>\n<li>-i :输入文件，这里的话其实就是视频, </li>\n<li>-vf:是一个命令行，表示过滤图形的描述, 选择过滤器select会选择帧进行输出：包括过滤器常量 </li>\n<li>pict_type和对应的类型:PICT_TYPE_I 表示是I帧，即关键帧。 </li>\n<li>-vsync 2:阻止每个关键帧产生多余的拷贝 </li>\n<li>-f image2 name_%02d.jpeg:将视频帧写入到图片中，样式的格式一般是: </li>\n<li>-s:分辨率，1920*1080</li>\n</ul>\n<ol start=\"5\">\n<li>生成对应关键帧的参数记录文件(等待完善)<br>参考格式<br><code>ffprobe -print_format json -show_frames [视频文件] &gt; [保存文件]</code><br>例子<br><code>ffprobe -print_format json -show_frames live.mp4 &gt; index.json</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"视频切割\"><a href=\"#视频切割\" class=\"headerlink\" title=\"视频切割\"></a>视频切割</h4><ol>\n<li><p>按时间间隔进行切割（由于关键帧的问题，每个碎片的时间不会完全一样）<br>参考格式<br><code>ffmpeg -i 要切割的视频.flv -threads [线程数量] -vcodec copy -f segment -segment_time [片段时间-秒] [输出文件]</code><br>例子，我们把origin.flv文件按60秒间隔进行切割，结果输出到output文件夹中，%04d为4位数（如果不够会补0，如0001）,使用了4个线程，注意output这个目录必须先创建<br><code>ffmpeg -i origin.flv -threads 4 -vcodec copy -f segment -segment_time 60 ./output/%04d.flv</code></p>\n</li>\n<li><p>碎片信息获取<br>每个视频的时间长度是不一样的，跳转进度的时候需要根据具体时间推算出应该加载的碎片<br>参考格式<br><code>ffprobe -v quiet -print_format json -show_format [视频文件]</code><br>例子，我们获取了0000.flv视频碎片的信息<br><code>ffprobe -v quiet -print_format json -show_format 0000.flv</code><br>测试结果</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"format\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"filename\"</span>: <span class=\"string\">\"0000.flv\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"nb_streams\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"nb_programs\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"format_name\"</span>: <span class=\"string\">\"flv\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"format_long_name\"</span>: <span class=\"string\">\"FLV (Flash Video)\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"start_time\"</span>: <span class=\"string\">\"0.000000\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"duration\"</span>: <span class=\"string\">\"61.108000\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"size\"</span>: <span class=\"string\">\"24466108\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"bit_rate\"</span>: <span class=\"string\">\"3202999\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"probe_score\"</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"tags\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"major_brand\"</span>: <span class=\"string\">\"isom\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"minor_version\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"compatible_brands\"</span>: <span class=\"string\">\"isom\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lastkeyframelocation\"</span>: <span class=\"string\">\"425679152\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"canSeekToEnd\"</span>: <span class=\"string\">\"true\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"videosize\"</span>: <span class=\"string\">\"402910584\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"audiosize\"</span>: <span class=\"string\">\"23709850\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"lastkeyframetimestamp\"</span>: <span class=\"string\">\"1411\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"encoder\"</span>: <span class=\"string\">\"Lavf58.25.100\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>批量获取（使用脚本）<br>这里使用的是php编写的脚本，并把结果输出到segment.json文件中</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个方法是用来获取一个目录下指定拓展名称的所有文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">list_files</span><span class=\"params\">($path, $ext)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $tree = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    $temp = glob($path . <span class=\"string\">\"/*\"</span> . $ext);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($temp) $tree = array_merge($tree, $temp);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (glob($path . <span class=\"string\">\"/*\"</span>, GLOB_ONLYDIR) <span class=\"keyword\">as</span> $dir) &#123;</span><br><span class=\"line\">        $temp = list_files($dir, $ext);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($temp) $tree = array_merge($tree, $temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $tree;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一个是视频碎片的文件夹，第二个是视频的拓展名</span></span><br><span class=\"line\">$flvs = list_files(<span class=\"string\">'/usr/local/var/www/html/output'</span>, <span class=\"string\">'flv'</span>);</span><br><span class=\"line\">$segments = [];</span><br><span class=\"line\">$count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($flvs <span class=\"keyword\">as</span> $flv) &#123;</span><br><span class=\"line\">    $result = shell_exec(<span class=\"string\">'ffprobe -v quiet -print_format json -show_format '</span> . $flv);</span><br><span class=\"line\">    $result = json_decode($result, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    $result = $result[<span class=\"string\">'format'</span>];</span><br><span class=\"line\">    $count += $result[<span class=\"string\">'duration'</span>] * <span class=\"number\">1000</span>;</span><br><span class=\"line\">    $segments[] = [</span><br><span class=\"line\">        <span class=\"string\">'duration'</span> =&gt; $result[<span class=\"string\">'duration'</span>] * <span class=\"number\">1000</span>, <span class=\"comment\">// 时长（这里*1000转换为毫秒）</span></span><br><span class=\"line\">        <span class=\"string\">'filesize'</span> =&gt; (int)$result[<span class=\"string\">'size'</span>], <span class=\"comment\">// 文件大小</span></span><br><span class=\"line\">        <span class=\"string\">'url'</span> =&gt; <span class=\"string\">'/html/output/'</span> . array_pop(explode(<span class=\"string\">'/'</span>, $result[<span class=\"string\">'filename'</span>])) <span class=\"comment\">// 碎片访问路径</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出总时长</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> ($count);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把结果写入到segment.json中</span></span><br><span class=\"line\">file_put_contents(<span class=\"string\">'segment.json'</span>, json_encode($segments));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成关键帧快照，用于视频缩略图预览<br>参考格式<br><code>ffmpeg -i [原始视频] -vf select=&#39;eq(pict_type\\,I)&#39; -vsync 2 -s [分辨率] -f image2 core-%02d.jpg</code><br>例子,注意snapshot这个目录必须先创建<br><code>ffmpeg -i live.mp4 -threads 8 -vf select=&#39;eq(pict_type\\,I)&#39; -vsync 2 -s 960*540 -f image2 ./snapshot/%02d.jpg</code></p>\n</li>\n</ol>\n<ul>\n<li>-i :输入文件，这里的话其实就是视频, </li>\n<li>-vf:是一个命令行，表示过滤图形的描述, 选择过滤器select会选择帧进行输出：包括过滤器常量 </li>\n<li>pict_type和对应的类型:PICT_TYPE_I 表示是I帧，即关键帧。 </li>\n<li>-vsync 2:阻止每个关键帧产生多余的拷贝 </li>\n<li>-f image2 name_%02d.jpeg:将视频帧写入到图片中，样式的格式一般是: </li>\n<li>-s:分辨率，1920*1080</li>\n</ul>\n<ol start=\"5\">\n<li>生成对应关键帧的参数记录文件(等待完善)<br>参考格式<br><code>ffprobe -print_format json -show_frames [视频文件] &gt; [保存文件]</code><br>例子<br><code>ffprobe -print_format json -show_frames live.mp4 &gt; index.json</code></li>\n</ol>\n"},{"title":"JetPack-Databinding简单数据绑定(一)","date":"2019-06-22T06:06:06.000Z","_content":"\n数据绑定库是一种支持库，借助该库，您可以使用声明性格式（而非程序化地）将布局中的界面组件绑定到应用中的数据源。\n<!--more-->\n\n## 参考文档链接\n* 中文官方网站 https://developer.android.google.cn/topic/libraries/data-binding/start\n* 博客翻译版本 https://blog.gokit.info/post/android-data-binding/#6-binding%E7%94%9F%E6%88%90\n\n## 相关配置\n* 要使用数据绑定，请在项目app模块目录的`build.gradle`文件中添加相关配置参数，如以下示例所示：\n```gradle\nandroid {\n    ...\n    dataBinding {\n        enabled = true\n    }\n}\n```\n* 使用新的数据绑定编译器生产数据绑定类文件(非必须，详情参考官方文档说明)，在项目的`gradle.properties`文件中加入下面代码\n```gradle\nandroid.databinding.enableV2=true\n```\n\n## 简单绑定\n* 准备数据对象，这个数据将会在模版中使用\n```Kotlin\npackage com.example.androidx_example.data\n\ndata class VideoInfo(\n    val title: String,\n    val author: String\n)\n```\n* 修改布局文件，使用layout标签把之前的布局内容包裹起来（如下）\n```xml\n<!-- layout/fragment_player.xml 修改前-->\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    tools:context=\".PlayerFragment\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\">\n    <TextView\n        android:id=\"@+id/video_title\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"标题\"/>\n    <TextView\n        android:id=\"@+id/video_author\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"作者\"/>\n</LinearLayout>\n\n<!-- layout/fragment_player.xml 使用数据绑定修改后-->\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        tools:context=\".PlayerFragment\">\n    <data>\n        <!-- 这里的name将作为编译对象对应属性的名称 -->\n        <variable name=\"video\" type=\"com.example.androidx_example.data.VideoInfo\"/>\n    </data>\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n        <!-- video.name,video为variable name=\"video\"中定义的 -->\n        <TextView\n            android:id=\"@+id/video_title\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@{video.title}\"/>\n        <TextView\n            android:id=\"@+id/video_author\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@{video.author}\"/>\n    </LinearLayout>\n</layout>\n```\n\n* 对视图与数据进行数据绑定\n```Kotlin\npackage com.example.androidx_example\n\n...\n\nclass PlayerFragment : Fragment() {\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.fragment_player, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        // FragmentPlayerBinding为数据绑定编译器自动生成，默认为布局文件转大驼峰命名\n        val viewDataBinding = FragmentPlayerBinding.bind(view)\n        viewDataBinding.video = VideoDetail(\n            title = \"视频标题\",\n            author = \"视频作者\"\n        )\n    }\n}\n```\n\n## 一些参考绑定模版语法\n* 默认值\n```xml\n<data>\n    <variable name=\"video\" type=\"com.example.androidx_example.data.VideoInfo\"/>\n</data>\n<TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@{video.title,default=`视频标题`}\"/>\n<!-- 我们也可以直接使用res中的string资源 -->\n<TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@{video.title,default=@string/default_title}\"/>\n```\n* 简单的表达式计算（我们最好应该使用编写好的相关转换方法，而不是直接在模版中编写复杂逻辑转换数据）\n * 数学 + - / * %\n * 字符串连接 +\n * 逻辑 && ||\n * 二进制 & | ^\n * 一元运算 + - ! ~\n * 移位 >> >>> <<\n * 比较 == > < >= <=\n * instanceof\n * 分组 ()\n * null\n * Cast\n * 方法调用\n * 数据访问 []\n * 三元运算 ?:\n\n```xml\n<data>\n    <variable name=\"video\" type=\"com.example.androidx_example.data.VideoInfo\"/>\n</data>\n<TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@{`【` + video.title + `】`}\"/>\n<TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@{video.author == `某个条件` ? `输出结果-1` : `输出结果-2`}\"/>\n```\n* \n\n\n## 从外部导入相关对象\n\n* 简单例子\n```xml\n<data>\n    <!-- 我们需要使用 View.VISIBLE,View.GONE -->\n    <import type=\"android.view.View\"/>\n    <variable name=\"video\" type=\"com.example.androidx_example.data.VideoInfo\"/>\n</data>\n<TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:visibility=\"@{video.title == `某个条件` ? View.VISIBLE : View.GONE}\"/>\n```\n\n* 自定义相关工具方法\n * 工具类\n```Kotlin\npackage com.example.androidx_example.data\n\nimport android.view.View\n\nobject BindingUntil{\n    @JvmStatic fun booleanToVisibility(title: String): Int {\n        return if (video.title == \"某个条件\") View.GONE else View.VISIBLE\n    }\n}\n```\n * 模版中使用\n ```xml\n <data>\n    <!-- 自行定义的一些相关格式化方法 -->\n    <import type=\"com.example.androidx_example.data.BindingUntil\"/>\n    <variable name=\"video\" type=\"com.example.androidx_example.data.VideoInfo\"/>\n </data>\n <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:visibility=\"@{ConverterUtil.isZero(video.title)}\"/>\n ```\n\n ## 指定数据绑定操作（自定义设置视图的相关操作@BindingAdapter）\n ```Kotlin\n package com.example.androidx_example.fragments.player\n\nimport android.widget.ImageView\nimport android.widget.TextView\nimport androidx.databinding.BindingAdapter\nimport com.example.androidx_example.R\nimport com.example.androidx_example.until.GlideApp\nimport com.example.androidx_example.until.debugInfo\n\nobject DetailBindingAdapter {\n\n    // 使用BindingAdapter注解定义glideUrl属性绑定时的设置方法\n    @BindingAdapter(\"glideUrl\")\n    @JvmStatic\n    fun loadAvatarImage(imageView: ImageView, imageUrl: String?) {\n        imageUrl?.run {\n            GlideApp.with(imageView.context)\n                .load(imageUrl)\n                .placeholder(R.drawable.ic_avatar)\n                .circleCrop()\n                .into(imageView)\n        }\n    }\n}\n ```\n ```xml\n<data>\n    <variable name=\"video\" type=\"com.example.androidx_example.data.VideoDetail\"/>\n</data>\n<ImageView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    app:glideUrl=\"@{video.thumbImageUrl}\"/>\n ```\n\n\n","source":"_posts/jectpack-databinding.md","raw":"---\ntitle: JetPack-Databinding简单数据绑定(一)\ndate: 2019-06-22 14:06:06\ntags: ['android','jetpack']\ncategories: Android开发\n---\n\n数据绑定库是一种支持库，借助该库，您可以使用声明性格式（而非程序化地）将布局中的界面组件绑定到应用中的数据源。\n<!--more-->\n\n## 参考文档链接\n* 中文官方网站 https://developer.android.google.cn/topic/libraries/data-binding/start\n* 博客翻译版本 https://blog.gokit.info/post/android-data-binding/#6-binding%E7%94%9F%E6%88%90\n\n## 相关配置\n* 要使用数据绑定，请在项目app模块目录的`build.gradle`文件中添加相关配置参数，如以下示例所示：\n```gradle\nandroid {\n    ...\n    dataBinding {\n        enabled = true\n    }\n}\n```\n* 使用新的数据绑定编译器生产数据绑定类文件(非必须，详情参考官方文档说明)，在项目的`gradle.properties`文件中加入下面代码\n```gradle\nandroid.databinding.enableV2=true\n```\n\n## 简单绑定\n* 准备数据对象，这个数据将会在模版中使用\n```Kotlin\npackage com.example.androidx_example.data\n\ndata class VideoInfo(\n    val title: String,\n    val author: String\n)\n```\n* 修改布局文件，使用layout标签把之前的布局内容包裹起来（如下）\n```xml\n<!-- layout/fragment_player.xml 修改前-->\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    tools:context=\".PlayerFragment\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\">\n    <TextView\n        android:id=\"@+id/video_title\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"标题\"/>\n    <TextView\n        android:id=\"@+id/video_author\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"作者\"/>\n</LinearLayout>\n\n<!-- layout/fragment_player.xml 使用数据绑定修改后-->\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        tools:context=\".PlayerFragment\">\n    <data>\n        <!-- 这里的name将作为编译对象对应属性的名称 -->\n        <variable name=\"video\" type=\"com.example.androidx_example.data.VideoInfo\"/>\n    </data>\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n        <!-- video.name,video为variable name=\"video\"中定义的 -->\n        <TextView\n            android:id=\"@+id/video_title\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@{video.title}\"/>\n        <TextView\n            android:id=\"@+id/video_author\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@{video.author}\"/>\n    </LinearLayout>\n</layout>\n```\n\n* 对视图与数据进行数据绑定\n```Kotlin\npackage com.example.androidx_example\n\n...\n\nclass PlayerFragment : Fragment() {\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.fragment_player, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        // FragmentPlayerBinding为数据绑定编译器自动生成，默认为布局文件转大驼峰命名\n        val viewDataBinding = FragmentPlayerBinding.bind(view)\n        viewDataBinding.video = VideoDetail(\n            title = \"视频标题\",\n            author = \"视频作者\"\n        )\n    }\n}\n```\n\n## 一些参考绑定模版语法\n* 默认值\n```xml\n<data>\n    <variable name=\"video\" type=\"com.example.androidx_example.data.VideoInfo\"/>\n</data>\n<TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@{video.title,default=`视频标题`}\"/>\n<!-- 我们也可以直接使用res中的string资源 -->\n<TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@{video.title,default=@string/default_title}\"/>\n```\n* 简单的表达式计算（我们最好应该使用编写好的相关转换方法，而不是直接在模版中编写复杂逻辑转换数据）\n * 数学 + - / * %\n * 字符串连接 +\n * 逻辑 && ||\n * 二进制 & | ^\n * 一元运算 + - ! ~\n * 移位 >> >>> <<\n * 比较 == > < >= <=\n * instanceof\n * 分组 ()\n * null\n * Cast\n * 方法调用\n * 数据访问 []\n * 三元运算 ?:\n\n```xml\n<data>\n    <variable name=\"video\" type=\"com.example.androidx_example.data.VideoInfo\"/>\n</data>\n<TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@{`【` + video.title + `】`}\"/>\n<TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@{video.author == `某个条件` ? `输出结果-1` : `输出结果-2`}\"/>\n```\n* \n\n\n## 从外部导入相关对象\n\n* 简单例子\n```xml\n<data>\n    <!-- 我们需要使用 View.VISIBLE,View.GONE -->\n    <import type=\"android.view.View\"/>\n    <variable name=\"video\" type=\"com.example.androidx_example.data.VideoInfo\"/>\n</data>\n<TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:visibility=\"@{video.title == `某个条件` ? View.VISIBLE : View.GONE}\"/>\n```\n\n* 自定义相关工具方法\n * 工具类\n```Kotlin\npackage com.example.androidx_example.data\n\nimport android.view.View\n\nobject BindingUntil{\n    @JvmStatic fun booleanToVisibility(title: String): Int {\n        return if (video.title == \"某个条件\") View.GONE else View.VISIBLE\n    }\n}\n```\n * 模版中使用\n ```xml\n <data>\n    <!-- 自行定义的一些相关格式化方法 -->\n    <import type=\"com.example.androidx_example.data.BindingUntil\"/>\n    <variable name=\"video\" type=\"com.example.androidx_example.data.VideoInfo\"/>\n </data>\n <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:visibility=\"@{ConverterUtil.isZero(video.title)}\"/>\n ```\n\n ## 指定数据绑定操作（自定义设置视图的相关操作@BindingAdapter）\n ```Kotlin\n package com.example.androidx_example.fragments.player\n\nimport android.widget.ImageView\nimport android.widget.TextView\nimport androidx.databinding.BindingAdapter\nimport com.example.androidx_example.R\nimport com.example.androidx_example.until.GlideApp\nimport com.example.androidx_example.until.debugInfo\n\nobject DetailBindingAdapter {\n\n    // 使用BindingAdapter注解定义glideUrl属性绑定时的设置方法\n    @BindingAdapter(\"glideUrl\")\n    @JvmStatic\n    fun loadAvatarImage(imageView: ImageView, imageUrl: String?) {\n        imageUrl?.run {\n            GlideApp.with(imageView.context)\n                .load(imageUrl)\n                .placeholder(R.drawable.ic_avatar)\n                .circleCrop()\n                .into(imageView)\n        }\n    }\n}\n ```\n ```xml\n<data>\n    <variable name=\"video\" type=\"com.example.androidx_example.data.VideoDetail\"/>\n</data>\n<ImageView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    app:glideUrl=\"@{video.thumbImageUrl}\"/>\n ```\n\n\n","slug":"jectpack-databinding","published":1,"updated":"2019-07-09T05:01:22.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld8o001ie8we03j5sqzi","content":"<p>数据绑定库是一种支持库，借助该库，您可以使用声明性格式（而非程序化地）将布局中的界面组件绑定到应用中的数据源。<br><a id=\"more\"></a></p>\n<h2 id=\"参考文档链接\"><a href=\"#参考文档链接\" class=\"headerlink\" title=\"参考文档链接\"></a>参考文档链接</h2><ul>\n<li>中文官方网站 <a href=\"https://developer.android.google.cn/topic/libraries/data-binding/start\" target=\"_blank\" rel=\"noopener\">https://developer.android.google.cn/topic/libraries/data-binding/start</a></li>\n<li>博客翻译版本 <a href=\"https://blog.gokit.info/post/android-data-binding/#6-binding%E7%94%9F%E6%88%90\" target=\"_blank\" rel=\"noopener\">https://blog.gokit.info/post/android-data-binding/#6-binding%E7%94%9F%E6%88%90</a></li>\n</ul>\n<h2 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h2><ul>\n<li><p>要使用数据绑定，请在项目app模块目录的<code>build.gradle</code>文件中添加相关配置参数，如以下示例所示：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    dataBinding &#123;</span><br><span class=\"line\">        enabled = <span class=\"keyword\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用新的数据绑定编译器生产数据绑定类文件(非必须，详情参考官方文档说明)，在项目的<code>gradle.properties</code>文件中加入下面代码</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android.databinding.enableV2=<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"简单绑定\"><a href=\"#简单绑定\" class=\"headerlink\" title=\"简单绑定\"></a>简单绑定</h2><ul>\n<li><p>准备数据对象，这个数据将会在模版中使用</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.androidx_example.<span class=\"keyword\">data</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VideoInfo</span></span>(</span><br><span class=\"line\">    <span class=\"keyword\">val</span> title: String,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> author: String</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改布局文件，使用layout标签把之前的布局内容包裹起来（如下）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- layout/fragment_player.xml 修改前--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\".PlayerFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/video_title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"标题\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/video_author\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"作者\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- layout/fragment_player.xml 使用数据绑定修改后--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:context</span>=<span class=\"string\">\".PlayerFragment\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 这里的name将作为编译对象对应属性的名称 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.androidx_example.data.VideoInfo\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- video.name,video为variable name=\"video\"中定义的 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/video_title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;video.title&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/video_author\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;video.author&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对视图与数据进行数据绑定</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.androidx_example</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlayerFragment</span> : <span class=\"type\">Fragment</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        inflater: <span class=\"type\">LayoutInflater</span>, container: <span class=\"type\">ViewGroup</span>?,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        savedInstanceState: <span class=\"type\">Bundle</span>?</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_player, container, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// FragmentPlayerBinding为数据绑定编译器自动生成，默认为布局文件转大驼峰命名</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> viewDataBinding = FragmentPlayerBinding.bind(view)</span><br><span class=\"line\">        viewDataBinding.video = VideoDetail(</span><br><span class=\"line\">            title = <span class=\"string\">\"视频标题\"</span>,</span><br><span class=\"line\">            author = <span class=\"string\">\"视频作者\"</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"一些参考绑定模版语法\"><a href=\"#一些参考绑定模版语法\" class=\"headerlink\" title=\"一些参考绑定模版语法\"></a>一些参考绑定模版语法</h2><ul>\n<li><p>默认值</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.androidx_example.data.VideoInfo\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;video.title,default=`视频标题`&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 我们也可以直接使用res中的string资源 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;video.title,default=@string/default_title&#125;\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>简单的表达式计算（我们最好应该使用编写好的相关转换方法，而不是直接在模版中编写复杂逻辑转换数据）</p>\n<ul>\n<li>数学 + - / * %</li>\n<li>字符串连接 +</li>\n<li>逻辑 &amp;&amp; ||</li>\n<li>二进制 &amp; | ^</li>\n<li>一元运算 + - ! ~</li>\n<li>移位 &gt;&gt; &gt;&gt;&gt; &lt;&lt;</li>\n<li>比较 == &gt; &lt; &gt;= &lt;=</li>\n<li>instanceof</li>\n<li>分组 ()</li>\n<li>null</li>\n<li>Cast</li>\n<li>方法调用</li>\n<li>数据访问 []</li>\n<li>三元运算 ?:</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.androidx_example.data.VideoInfo\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;`【` + video.title + `】`&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;video.author == `某个条件` ? `输出结果-1` : `输出结果-2`&#125;\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li></li>\n</ul>\n<h2 id=\"从外部导入相关对象\"><a href=\"#从外部导入相关对象\" class=\"headerlink\" title=\"从外部导入相关对象\"></a>从外部导入相关对象</h2><ul>\n<li><p>简单例子</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 我们需要使用 View.VISIBLE,View.GONE --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"android.view.View\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.androidx_example.data.VideoInfo\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:visibility</span>=<span class=\"string\">\"@&#123;video.title == `某个条件` ? View.VISIBLE : View.GONE&#125;\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义相关工具方法</p>\n<ul>\n<li><p>工具类</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.androidx_example.<span class=\"keyword\">data</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> BindingUntil&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">booleanToVisibility</span><span class=\"params\">(title: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">if</span> (video.title == <span class=\"string\">\"某个条件\"</span>) View.GONE <span class=\"keyword\">else</span> View.VISIBLE</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模版中使用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 自行定义的一些相关格式化方法 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.androidx_example.data.BindingUntil\"</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.androidx_example.data.VideoInfo\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">android:visibility</span>=<span class=\"string\">\"@&#123;ConverterUtil.isZero(video.title)&#125;\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"指定数据绑定操作（自定义设置视图的相关操作-BindingAdapter）\"><a href=\"#指定数据绑定操作（自定义设置视图的相关操作-BindingAdapter）\" class=\"headerlink\" title=\"指定数据绑定操作（自定义设置视图的相关操作@BindingAdapter）\"></a>指定数据绑定操作（自定义设置视图的相关操作@BindingAdapter）</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">package</span> com.example.androidx_example.fragments.player</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.ImageView</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.databinding.BindingAdapter</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.androidx_example.R</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.androidx_example.until.GlideApp</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.androidx_example.until.debugInfo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> DetailBindingAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用BindingAdapter注解定义glideUrl属性绑定时的设置方法</span></span><br><span class=\"line\">    <span class=\"meta\">@BindingAdapter(<span class=\"meta-string\">\"glideUrl\"</span>)</span></span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadAvatarImage</span><span class=\"params\">(imageView: <span class=\"type\">ImageView</span>, imageUrl: <span class=\"type\">String</span>?)</span></span> &#123;</span><br><span class=\"line\">        imageUrl?.run &#123;</span><br><span class=\"line\">            GlideApp.with(imageView.context)</span><br><span class=\"line\">                .load(imageUrl)</span><br><span class=\"line\">                .placeholder(R.drawable.ic_avatar)</span><br><span class=\"line\">                .circleCrop()</span><br><span class=\"line\">                .into(imageView)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.androidx_example.data.VideoDetail\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:glideUrl</span>=<span class=\"string\">\"@&#123;video.thumbImageUrl&#125;\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>数据绑定库是一种支持库，借助该库，您可以使用声明性格式（而非程序化地）将布局中的界面组件绑定到应用中的数据源。<br>","more":"</p>\n<h2 id=\"参考文档链接\"><a href=\"#参考文档链接\" class=\"headerlink\" title=\"参考文档链接\"></a>参考文档链接</h2><ul>\n<li>中文官方网站 <a href=\"https://developer.android.google.cn/topic/libraries/data-binding/start\" target=\"_blank\" rel=\"noopener\">https://developer.android.google.cn/topic/libraries/data-binding/start</a></li>\n<li>博客翻译版本 <a href=\"https://blog.gokit.info/post/android-data-binding/#6-binding%E7%94%9F%E6%88%90\" target=\"_blank\" rel=\"noopener\">https://blog.gokit.info/post/android-data-binding/#6-binding%E7%94%9F%E6%88%90</a></li>\n</ul>\n<h2 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h2><ul>\n<li><p>要使用数据绑定，请在项目app模块目录的<code>build.gradle</code>文件中添加相关配置参数，如以下示例所示：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    dataBinding &#123;</span><br><span class=\"line\">        enabled = <span class=\"keyword\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用新的数据绑定编译器生产数据绑定类文件(非必须，详情参考官方文档说明)，在项目的<code>gradle.properties</code>文件中加入下面代码</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android.databinding.enableV2=<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"简单绑定\"><a href=\"#简单绑定\" class=\"headerlink\" title=\"简单绑定\"></a>简单绑定</h2><ul>\n<li><p>准备数据对象，这个数据将会在模版中使用</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.androidx_example.<span class=\"keyword\">data</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VideoInfo</span></span>(</span><br><span class=\"line\">    <span class=\"keyword\">val</span> title: String,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> author: String</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改布局文件，使用layout标签把之前的布局内容包裹起来（如下）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- layout/fragment_player.xml 修改前--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\".PlayerFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/video_title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"标题\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/video_author\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"作者\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- layout/fragment_player.xml 使用数据绑定修改后--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:context</span>=<span class=\"string\">\".PlayerFragment\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 这里的name将作为编译对象对应属性的名称 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.androidx_example.data.VideoInfo\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- video.name,video为variable name=\"video\"中定义的 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/video_title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;video.title&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/video_author\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;video.author&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对视图与数据进行数据绑定</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.androidx_example</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlayerFragment</span> : <span class=\"type\">Fragment</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        inflater: <span class=\"type\">LayoutInflater</span>, container: <span class=\"type\">ViewGroup</span>?,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        savedInstanceState: <span class=\"type\">Bundle</span>?</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_player, container, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// FragmentPlayerBinding为数据绑定编译器自动生成，默认为布局文件转大驼峰命名</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> viewDataBinding = FragmentPlayerBinding.bind(view)</span><br><span class=\"line\">        viewDataBinding.video = VideoDetail(</span><br><span class=\"line\">            title = <span class=\"string\">\"视频标题\"</span>,</span><br><span class=\"line\">            author = <span class=\"string\">\"视频作者\"</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"一些参考绑定模版语法\"><a href=\"#一些参考绑定模版语法\" class=\"headerlink\" title=\"一些参考绑定模版语法\"></a>一些参考绑定模版语法</h2><ul>\n<li><p>默认值</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.androidx_example.data.VideoInfo\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;video.title,default=`视频标题`&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 我们也可以直接使用res中的string资源 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;video.title,default=@string/default_title&#125;\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>简单的表达式计算（我们最好应该使用编写好的相关转换方法，而不是直接在模版中编写复杂逻辑转换数据）</p>\n<ul>\n<li>数学 + - / * %</li>\n<li>字符串连接 +</li>\n<li>逻辑 &amp;&amp; ||</li>\n<li>二进制 &amp; | ^</li>\n<li>一元运算 + - ! ~</li>\n<li>移位 &gt;&gt; &gt;&gt;&gt; &lt;&lt;</li>\n<li>比较 == &gt; &lt; &gt;= &lt;=</li>\n<li>instanceof</li>\n<li>分组 ()</li>\n<li>null</li>\n<li>Cast</li>\n<li>方法调用</li>\n<li>数据访问 []</li>\n<li>三元运算 ?:</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.androidx_example.data.VideoInfo\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;`【` + video.title + `】`&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;video.author == `某个条件` ? `输出结果-1` : `输出结果-2`&#125;\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li></li>\n</ul>\n<h2 id=\"从外部导入相关对象\"><a href=\"#从外部导入相关对象\" class=\"headerlink\" title=\"从外部导入相关对象\"></a>从外部导入相关对象</h2><ul>\n<li><p>简单例子</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 我们需要使用 View.VISIBLE,View.GONE --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"android.view.View\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.androidx_example.data.VideoInfo\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:visibility</span>=<span class=\"string\">\"@&#123;video.title == `某个条件` ? View.VISIBLE : View.GONE&#125;\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义相关工具方法</p>\n<ul>\n<li><p>工具类</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.androidx_example.<span class=\"keyword\">data</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> BindingUntil&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">booleanToVisibility</span><span class=\"params\">(title: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">if</span> (video.title == <span class=\"string\">\"某个条件\"</span>) View.GONE <span class=\"keyword\">else</span> View.VISIBLE</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模版中使用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 自行定义的一些相关格式化方法 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.androidx_example.data.BindingUntil\"</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.androidx_example.data.VideoInfo\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">android:visibility</span>=<span class=\"string\">\"@&#123;ConverterUtil.isZero(video.title)&#125;\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"指定数据绑定操作（自定义设置视图的相关操作-BindingAdapter）\"><a href=\"#指定数据绑定操作（自定义设置视图的相关操作-BindingAdapter）\" class=\"headerlink\" title=\"指定数据绑定操作（自定义设置视图的相关操作@BindingAdapter）\"></a>指定数据绑定操作（自定义设置视图的相关操作@BindingAdapter）</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">package</span> com.example.androidx_example.fragments.player</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.ImageView</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.databinding.BindingAdapter</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.androidx_example.R</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.androidx_example.until.GlideApp</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.androidx_example.until.debugInfo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> DetailBindingAdapter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用BindingAdapter注解定义glideUrl属性绑定时的设置方法</span></span><br><span class=\"line\">    <span class=\"meta\">@BindingAdapter(<span class=\"meta-string\">\"glideUrl\"</span>)</span></span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">loadAvatarImage</span><span class=\"params\">(imageView: <span class=\"type\">ImageView</span>, imageUrl: <span class=\"type\">String</span>?)</span></span> &#123;</span><br><span class=\"line\">        imageUrl?.run &#123;</span><br><span class=\"line\">            GlideApp.with(imageView.context)</span><br><span class=\"line\">                .load(imageUrl)</span><br><span class=\"line\">                .placeholder(R.drawable.ic_avatar)</span><br><span class=\"line\">                .circleCrop()</span><br><span class=\"line\">                .into(imageView)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.androidx_example.data.VideoDetail\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:glideUrl</span>=<span class=\"string\">\"@&#123;video.thumbImageUrl&#125;\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"https证书获取与配置（nginx）","date":"2018-08-14T07:04:35.000Z","_content":"\n#### 使用git克隆项目到`/var/www`目录下\n1. Clone with SSH : git@github.com:lukas2511/dehydrated.git\n2. Clone with HTTPS : https://github.com/lukas2511/dehydrated.git\n3. [Github地址](https://github.com/lukas2511/dehydrated)\n\n#### 把克隆好的项目中docs/examples/目录中的config,domains.txt,hook.sh复制到项目的根目录（项目指代的是克隆下来的dehydrated）\n1. 如果你会修改config参数，可以自行取消相关注释修改相关参数\n\n2. 如果你不会修改，那么直接清空config文件，写入下面内容\n```bash\n#!/bin/bash\n\nCA=\"https://acme-v01.api.letsencrypt.org/directory\"\nCHALLENGETYPE=\"http-01\"\nCERTDIR=\"${BASEDIR}/certs\"\nHOOK=\"${BASEDIR}/hook.sh\"\nCONTACT_EMAIL='你的邮箱地址，别写错了；如example@mail.com'\nWELLKNOWN=\"/tmp/acme-wellknown\"\n\nmkdir -p $WELLKNOWN\nchmod -R 777 $WELLKNOWN\n```\n\n3. 修改domains.txt(如果你会改，那么自己改...),清空里面的内容，写入下面内容\n```conf\n# 每一个子域名都写在后面，域名之间空一格就好（这些域名是你要配置https的域名，如果以后多了，可以继续后面加）\ncool1024.com blog.cool1024 www.cool1024.com\n\n```\n\n4. 修改hook.sh(如果你想自动化部署，这个很重要，如果你喜欢人工操作，这里可以跳过)，在证书获取成功后的执行方法中写入下面代码（deploy_cert就是那个方法）\n```bash\ndeploy_cert() {\n    local DOMAIN=\"${1}\" KEYFILE=\"${2}\" CERTFILE=\"${3}\" FULLCHAINFILE=\"${4}\" CHAINFILE=\"${5}\" TIMESTAMP=\"${6}\"\n\n    # 拷贝证书文件到项目根目录的certs文件夹下\n    cp \"${KEYFILE}\" \"${BASEDIR}/certs/\"\n    cp \"${FULLCHAINFILE}\" \"${BASEDIR}/certs/\";\n    # 重启服务器\n    nginx -s reload\n    # 记录日志\n    echo [`date`]执行结束 >> \"${BASEDIR}/certs/log.txt\"\n}\n```\n\n#### 修改nginx的默认站点配置，添加一条新规则，用于证书颁发机构确认这个域名和服务器是属于你的（/etc/nginx/sites-enabled/default）\n```conf\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    # 你的域名，注意这里写的是*匹配的规则，所有的子域名都会配置\n    server_name *.example.com;\n\n    # 这条规则是用来验证域名和服务器的\n    location /.well-known/acme-challenge {\n        alias /tmp/acme-wellknown;\n    }\n\n    # 所有的其它http请求全部重新定向到https(这个很重要，用户浏览器没有输入https我们要重定向到https的站点)\n    location / {\n        rewrite ^(.*)$ https://$host$request_uri permanent;\n    }\n}\n```\n\n#### 开始获取证书\n1. 在之前克隆的项目根目录，执行项目里面的dehydrated脚本\n * 注册 `./dehydrated --register`\n * 获取证书 `./dehydrated -c`\n\n2. 如果你出现了报错（请自己看文档，啥文档在哪里？？～～～～～这个真不适合你，去花钱买个证书吧）,一切都顺利的话你可以看的项目目录下有一个certs目录，点开目录，可以看到证书文件(fullchain.pem  privkey.pem 这两个很重要)，还有一个你域名的文件夹，里面存放了历史以来的证书\n\n3. 好了，如果你会nginx配置https那么就到此为止咯，直接用上面的两个文件去配置吧～\n\n\n#### nginx配置证书\n1. 编辑这个文件`/etc/nginx/snippets/snakeoil.conf`，把原来默认的证书配置去掉，改为如下\n```conf\n# Self signed certificates generated by the ssl-cert package\n# Don't use them in a production server!\n\n# 这是之前生成的证书文件路径哦～\nssl_certificate /var/www/letsencrypt.sh/certs/fullchain.pem;\nssl_certificate_key /var/www/letsencrypt.sh/certs/privkey.pem;\nssl_protocols TLSv1 TLSv1.1 TLSv1.2;\nssl_ciphers HIGH:!aNULL:!MD5;\n```\n\n2. 尝试给我的一个站点开始https\n一个没有开启https的配置文件是下面这样的（使用的是80端口），我们发现配置文件中有一段443的端口配置被注释掉了\n```conf\nserver {\n        listen 80;\n        listen [::]:80 default_server;\n\n        # SSL configuration\n        #\n        # listen 443;\n        # ssl on;\n        #\n        # Note: You should disable gzip for SSL traffic.\n        # See: https://bugs.debian.org/773332\n        #\n        # Read up on ssl_ciphers to ensure a secure configuration.\n        # See: https://bugs.debian.org/765782\n        #\n        # Self signed certs generated by the ssl-cert package\n        # Don't use them in a production server!\n        #\n        # include snippets/snakeoil.conf;\n\n        root /var/www/站点的根目录;\n\n        # Add index.php to the list if you are using PHP\n        index index.html;\n\n        server_name blog.cool1024.com;\n\n        location / {\n                # First attempt to serve request as file, then\n                # as directory, then fall back to displaying a 404.\n                try_files $uri $uri/ =404;\n        }\n}\n```\n3. 把注释去掉，并写注释掉80端口的相关配置，如下，就好了\n```conf\nserver {\n        # listen 80;\n        # listen [::]:80 default_server;\n\n        # SSL configuration\n        #\n        listen 443;\n        ssl on;\n        #\n        # Note: You should disable gzip for SSL traffic.\n        # See: https://bugs.debian.org/773332\n        #\n        # Read up on ssl_ciphers to ensure a secure configuration.\n        # See: https://bugs.debian.org/765782\n        #\n        # Self signed certs generated by the ssl-cert package\n        # Don't use them in a production server!\n        #\n        include snippets/snakeoil.conf;\n\n        root /var/www/站点的根目录;\n\n        # Add index.php to the list if you are using PHP\n        index index.html;\n\n        server_name blog.cool1024.com;\n\n        location / {\n                # First attempt to serve request as file, then\n                # as directory, then fall back to displaying a 404.\n                try_files $uri $uri/ =404;\n        }\n}\n```\n\n4. 定时任务\n * 打开控制台，输入 `crontab -e`\n * 按下 i 进入编辑模式\n * 任务书写格式如下\n ```\n * * * * * *\n第1个星号表示分钟（0－59）\n第2个星号表示小时（0－23）\n第3个星号表示日期（0－31）\n第4个星号表示月份（0－12）\n第5个星号表示星期几（0－6，0是周日，6是周六）\n第6个星号表示要执行的脚本文件名。\n\n示例：\n*/1 * * * * 1分钟一次\n0 13 * * * 表示每天下午13点执行\n30 * * * * 表示每30分钟执行\n ```\n例子：`59 23 * * * /var/www/letsencrypt.sh/dehydrated -c`\n<div class=\"tip\">\n1. 证书颁发机构官网[Let's Encrypt](https://letsencrypt.org)\n2. 证书有效期为3个月，我们要在快要过期的时候获取一个新的（只需要重新执行./dehydrated -c）\n3. 聪明的你一定写了一个定时任务（自动在快过期的时候执行证书更新）\n</div>\n\n\n\n","source":"_posts/https.md","raw":"---\ntitle: https证书获取与配置（nginx）\ndate: 2018-08-14 15:04:35\ntags: [nginx,https]\n---\n\n#### 使用git克隆项目到`/var/www`目录下\n1. Clone with SSH : git@github.com:lukas2511/dehydrated.git\n2. Clone with HTTPS : https://github.com/lukas2511/dehydrated.git\n3. [Github地址](https://github.com/lukas2511/dehydrated)\n\n#### 把克隆好的项目中docs/examples/目录中的config,domains.txt,hook.sh复制到项目的根目录（项目指代的是克隆下来的dehydrated）\n1. 如果你会修改config参数，可以自行取消相关注释修改相关参数\n\n2. 如果你不会修改，那么直接清空config文件，写入下面内容\n```bash\n#!/bin/bash\n\nCA=\"https://acme-v01.api.letsencrypt.org/directory\"\nCHALLENGETYPE=\"http-01\"\nCERTDIR=\"${BASEDIR}/certs\"\nHOOK=\"${BASEDIR}/hook.sh\"\nCONTACT_EMAIL='你的邮箱地址，别写错了；如example@mail.com'\nWELLKNOWN=\"/tmp/acme-wellknown\"\n\nmkdir -p $WELLKNOWN\nchmod -R 777 $WELLKNOWN\n```\n\n3. 修改domains.txt(如果你会改，那么自己改...),清空里面的内容，写入下面内容\n```conf\n# 每一个子域名都写在后面，域名之间空一格就好（这些域名是你要配置https的域名，如果以后多了，可以继续后面加）\ncool1024.com blog.cool1024 www.cool1024.com\n\n```\n\n4. 修改hook.sh(如果你想自动化部署，这个很重要，如果你喜欢人工操作，这里可以跳过)，在证书获取成功后的执行方法中写入下面代码（deploy_cert就是那个方法）\n```bash\ndeploy_cert() {\n    local DOMAIN=\"${1}\" KEYFILE=\"${2}\" CERTFILE=\"${3}\" FULLCHAINFILE=\"${4}\" CHAINFILE=\"${5}\" TIMESTAMP=\"${6}\"\n\n    # 拷贝证书文件到项目根目录的certs文件夹下\n    cp \"${KEYFILE}\" \"${BASEDIR}/certs/\"\n    cp \"${FULLCHAINFILE}\" \"${BASEDIR}/certs/\";\n    # 重启服务器\n    nginx -s reload\n    # 记录日志\n    echo [`date`]执行结束 >> \"${BASEDIR}/certs/log.txt\"\n}\n```\n\n#### 修改nginx的默认站点配置，添加一条新规则，用于证书颁发机构确认这个域名和服务器是属于你的（/etc/nginx/sites-enabled/default）\n```conf\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    # 你的域名，注意这里写的是*匹配的规则，所有的子域名都会配置\n    server_name *.example.com;\n\n    # 这条规则是用来验证域名和服务器的\n    location /.well-known/acme-challenge {\n        alias /tmp/acme-wellknown;\n    }\n\n    # 所有的其它http请求全部重新定向到https(这个很重要，用户浏览器没有输入https我们要重定向到https的站点)\n    location / {\n        rewrite ^(.*)$ https://$host$request_uri permanent;\n    }\n}\n```\n\n#### 开始获取证书\n1. 在之前克隆的项目根目录，执行项目里面的dehydrated脚本\n * 注册 `./dehydrated --register`\n * 获取证书 `./dehydrated -c`\n\n2. 如果你出现了报错（请自己看文档，啥文档在哪里？？～～～～～这个真不适合你，去花钱买个证书吧）,一切都顺利的话你可以看的项目目录下有一个certs目录，点开目录，可以看到证书文件(fullchain.pem  privkey.pem 这两个很重要)，还有一个你域名的文件夹，里面存放了历史以来的证书\n\n3. 好了，如果你会nginx配置https那么就到此为止咯，直接用上面的两个文件去配置吧～\n\n\n#### nginx配置证书\n1. 编辑这个文件`/etc/nginx/snippets/snakeoil.conf`，把原来默认的证书配置去掉，改为如下\n```conf\n# Self signed certificates generated by the ssl-cert package\n# Don't use them in a production server!\n\n# 这是之前生成的证书文件路径哦～\nssl_certificate /var/www/letsencrypt.sh/certs/fullchain.pem;\nssl_certificate_key /var/www/letsencrypt.sh/certs/privkey.pem;\nssl_protocols TLSv1 TLSv1.1 TLSv1.2;\nssl_ciphers HIGH:!aNULL:!MD5;\n```\n\n2. 尝试给我的一个站点开始https\n一个没有开启https的配置文件是下面这样的（使用的是80端口），我们发现配置文件中有一段443的端口配置被注释掉了\n```conf\nserver {\n        listen 80;\n        listen [::]:80 default_server;\n\n        # SSL configuration\n        #\n        # listen 443;\n        # ssl on;\n        #\n        # Note: You should disable gzip for SSL traffic.\n        # See: https://bugs.debian.org/773332\n        #\n        # Read up on ssl_ciphers to ensure a secure configuration.\n        # See: https://bugs.debian.org/765782\n        #\n        # Self signed certs generated by the ssl-cert package\n        # Don't use them in a production server!\n        #\n        # include snippets/snakeoil.conf;\n\n        root /var/www/站点的根目录;\n\n        # Add index.php to the list if you are using PHP\n        index index.html;\n\n        server_name blog.cool1024.com;\n\n        location / {\n                # First attempt to serve request as file, then\n                # as directory, then fall back to displaying a 404.\n                try_files $uri $uri/ =404;\n        }\n}\n```\n3. 把注释去掉，并写注释掉80端口的相关配置，如下，就好了\n```conf\nserver {\n        # listen 80;\n        # listen [::]:80 default_server;\n\n        # SSL configuration\n        #\n        listen 443;\n        ssl on;\n        #\n        # Note: You should disable gzip for SSL traffic.\n        # See: https://bugs.debian.org/773332\n        #\n        # Read up on ssl_ciphers to ensure a secure configuration.\n        # See: https://bugs.debian.org/765782\n        #\n        # Self signed certs generated by the ssl-cert package\n        # Don't use them in a production server!\n        #\n        include snippets/snakeoil.conf;\n\n        root /var/www/站点的根目录;\n\n        # Add index.php to the list if you are using PHP\n        index index.html;\n\n        server_name blog.cool1024.com;\n\n        location / {\n                # First attempt to serve request as file, then\n                # as directory, then fall back to displaying a 404.\n                try_files $uri $uri/ =404;\n        }\n}\n```\n\n4. 定时任务\n * 打开控制台，输入 `crontab -e`\n * 按下 i 进入编辑模式\n * 任务书写格式如下\n ```\n * * * * * *\n第1个星号表示分钟（0－59）\n第2个星号表示小时（0－23）\n第3个星号表示日期（0－31）\n第4个星号表示月份（0－12）\n第5个星号表示星期几（0－6，0是周日，6是周六）\n第6个星号表示要执行的脚本文件名。\n\n示例：\n*/1 * * * * 1分钟一次\n0 13 * * * 表示每天下午13点执行\n30 * * * * 表示每30分钟执行\n ```\n例子：`59 23 * * * /var/www/letsencrypt.sh/dehydrated -c`\n<div class=\"tip\">\n1. 证书颁发机构官网[Let's Encrypt](https://letsencrypt.org)\n2. 证书有效期为3个月，我们要在快要过期的时候获取一个新的（只需要重新执行./dehydrated -c）\n3. 聪明的你一定写了一个定时任务（自动在快过期的时候执行证书更新）\n</div>\n\n\n\n","slug":"https","published":1,"updated":"2019-07-05T04:24:05.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld8q001ke8we5apshemd","content":"<h4 id=\"使用git克隆项目到-var-www目录下\"><a href=\"#使用git克隆项目到-var-www目录下\" class=\"headerlink\" title=\"使用git克隆项目到/var/www目录下\"></a>使用git克隆项目到<code>/var/www</code>目录下</h4><ol>\n<li>Clone with SSH : <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:lukas2511/dehydrated.git</li>\n<li>Clone with HTTPS : <a href=\"https://github.com/lukas2511/dehydrated.git\" target=\"_blank\" rel=\"noopener\">https://github.com/lukas2511/dehydrated.git</a></li>\n<li><a href=\"https://github.com/lukas2511/dehydrated\" target=\"_blank\" rel=\"noopener\">Github地址</a></li>\n</ol>\n<h4 id=\"把克隆好的项目中docs-examples-目录中的config-domains-txt-hook-sh复制到项目的根目录（项目指代的是克隆下来的dehydrated）\"><a href=\"#把克隆好的项目中docs-examples-目录中的config-domains-txt-hook-sh复制到项目的根目录（项目指代的是克隆下来的dehydrated）\" class=\"headerlink\" title=\"把克隆好的项目中docs/examples/目录中的config,domains.txt,hook.sh复制到项目的根目录（项目指代的是克隆下来的dehydrated）\"></a>把克隆好的项目中docs/examples/目录中的config,domains.txt,hook.sh复制到项目的根目录（项目指代的是克隆下来的dehydrated）</h4><ol>\n<li><p>如果你会修改config参数，可以自行取消相关注释修改相关参数</p>\n</li>\n<li><p>如果你不会修改，那么直接清空config文件，写入下面内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">CA=<span class=\"string\">\"https://acme-v01.api.letsencrypt.org/directory\"</span></span><br><span class=\"line\">CHALLENGETYPE=<span class=\"string\">\"http-01\"</span></span><br><span class=\"line\">CERTDIR=<span class=\"string\">\"<span class=\"variable\">$&#123;BASEDIR&#125;</span>/certs\"</span></span><br><span class=\"line\">HOOK=<span class=\"string\">\"<span class=\"variable\">$&#123;BASEDIR&#125;</span>/hook.sh\"</span></span><br><span class=\"line\">CONTACT_EMAIL=<span class=\"string\">'你的邮箱地址，别写错了；如example@mail.com'</span></span><br><span class=\"line\">WELLKNOWN=<span class=\"string\">\"/tmp/acme-wellknown\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p <span class=\"variable\">$WELLKNOWN</span></span><br><span class=\"line\">chmod -R 777 <span class=\"variable\">$WELLKNOWN</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改domains.txt(如果你会改，那么自己改…),清空里面的内容，写入下面内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 每一个子域名都写在后面，域名之间空一格就好（这些域名是你要配置https的域名，如果以后多了，可以继续后面加）</span><br><span class=\"line\">cool1024.com blog.cool1024 www.cool1024.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改hook.sh(如果你想自动化部署，这个很重要，如果你喜欢人工操作，这里可以跳过)，在证书获取成功后的执行方法中写入下面代码（deploy_cert就是那个方法）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">deploy_cert</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> DOMAIN=<span class=\"string\">\"<span class=\"variable\">$&#123;1&#125;</span>\"</span> KEYFILE=<span class=\"string\">\"<span class=\"variable\">$&#123;2&#125;</span>\"</span> CERTFILE=<span class=\"string\">\"<span class=\"variable\">$&#123;3&#125;</span>\"</span> FULLCHAINFILE=<span class=\"string\">\"<span class=\"variable\">$&#123;4&#125;</span>\"</span> CHAINFILE=<span class=\"string\">\"<span class=\"variable\">$&#123;5&#125;</span>\"</span> TIMESTAMP=<span class=\"string\">\"<span class=\"variable\">$&#123;6&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 拷贝证书文件到项目根目录的certs文件夹下</span></span><br><span class=\"line\">    cp <span class=\"string\">\"<span class=\"variable\">$&#123;KEYFILE&#125;</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$&#123;BASEDIR&#125;</span>/certs/\"</span></span><br><span class=\"line\">    cp <span class=\"string\">\"<span class=\"variable\">$&#123;FULLCHAINFILE&#125;</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$&#123;BASEDIR&#125;</span>/certs/\"</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 重启服务器</span></span><br><span class=\"line\">    nginx -s reload</span><br><span class=\"line\">    <span class=\"comment\"># 记录日志</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> [`date`]执行结束 &gt;&gt; <span class=\"string\">\"<span class=\"variable\">$&#123;BASEDIR&#125;</span>/certs/log.txt\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"修改nginx的默认站点配置，添加一条新规则，用于证书颁发机构确认这个域名和服务器是属于你的（-etc-nginx-sites-enabled-default）\"><a href=\"#修改nginx的默认站点配置，添加一条新规则，用于证书颁发机构确认这个域名和服务器是属于你的（-etc-nginx-sites-enabled-default）\" class=\"headerlink\" title=\"修改nginx的默认站点配置，添加一条新规则，用于证书颁发机构确认这个域名和服务器是属于你的（/etc/nginx/sites-enabled/default）\"></a>修改nginx的默认站点配置，添加一条新规则，用于证书颁发机构确认这个域名和服务器是属于你的（/etc/nginx/sites-enabled/default）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80 default_server;</span><br><span class=\"line\">    listen [::]:80 default_server;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 你的域名，注意这里写的是*匹配的规则，所有的子域名都会配置</span><br><span class=\"line\">    server_name *.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 这条规则是用来验证域名和服务器的</span><br><span class=\"line\">    location /.well-known/acme-challenge &#123;</span><br><span class=\"line\">        alias /tmp/acme-wellknown;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 所有的其它http请求全部重新定向到https(这个很重要，用户浏览器没有输入https我们要重定向到https的站点)</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        rewrite ^(.*)$ https://$host$request_uri permanent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"开始获取证书\"><a href=\"#开始获取证书\" class=\"headerlink\" title=\"开始获取证书\"></a>开始获取证书</h4><ol>\n<li><p>在之前克隆的项目根目录，执行项目里面的dehydrated脚本</p>\n<ul>\n<li>注册 <code>./dehydrated --register</code></li>\n<li>获取证书 <code>./dehydrated -c</code></li>\n</ul>\n</li>\n<li><p>如果你出现了报错（请自己看文档，啥文档在哪里？？～～～～～这个真不适合你，去花钱买个证书吧）,一切都顺利的话你可以看的项目目录下有一个certs目录，点开目录，可以看到证书文件(fullchain.pem  privkey.pem 这两个很重要)，还有一个你域名的文件夹，里面存放了历史以来的证书</p>\n</li>\n<li><p>好了，如果你会nginx配置https那么就到此为止咯，直接用上面的两个文件去配置吧～</p>\n</li>\n</ol>\n<h4 id=\"nginx配置证书\"><a href=\"#nginx配置证书\" class=\"headerlink\" title=\"nginx配置证书\"></a>nginx配置证书</h4><ol>\n<li><p>编辑这个文件<code>/etc/nginx/snippets/snakeoil.conf</code>，把原来默认的证书配置去掉，改为如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Self signed certificates generated by the ssl-cert package</span><br><span class=\"line\"># Don&apos;t use them in a production server!</span><br><span class=\"line\"></span><br><span class=\"line\"># 这是之前生成的证书文件路径哦～</span><br><span class=\"line\">ssl_certificate /var/www/letsencrypt.sh/certs/fullchain.pem;</span><br><span class=\"line\">ssl_certificate_key /var/www/letsencrypt.sh/certs/privkey.pem;</span><br><span class=\"line\">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">ssl_ciphers HIGH:!aNULL:!MD5;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>尝试给我的一个站点开始https<br>一个没有开启https的配置文件是下面这样的（使用的是80端口），我们发现配置文件中有一段443的端口配置被注释掉了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        listen [::]:80 default_server;</span><br><span class=\"line\"></span><br><span class=\"line\">        # SSL configuration</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # listen 443;</span><br><span class=\"line\">        # ssl on;</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # Note: You should disable gzip for SSL traffic.</span><br><span class=\"line\">        # See: https://bugs.debian.org/773332</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # Read up on ssl_ciphers to ensure a secure configuration.</span><br><span class=\"line\">        # See: https://bugs.debian.org/765782</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # Self signed certs generated by the ssl-cert package</span><br><span class=\"line\">        # Don&apos;t use them in a production server!</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # include snippets/snakeoil.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        root /var/www/站点的根目录;</span><br><span class=\"line\"></span><br><span class=\"line\">        # Add index.php to the list if you are using PHP</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        server_name blog.cool1024.com;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                # First attempt to serve request as file, then</span><br><span class=\"line\">                # as directory, then fall back to displaying a 404.</span><br><span class=\"line\">                try_files $uri $uri/ =404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把注释去掉，并写注释掉80端口的相关配置，如下，就好了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        # listen 80;</span><br><span class=\"line\">        # listen [::]:80 default_server;</span><br><span class=\"line\"></span><br><span class=\"line\">        # SSL configuration</span><br><span class=\"line\">        #</span><br><span class=\"line\">        listen 443;</span><br><span class=\"line\">        ssl on;</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # Note: You should disable gzip for SSL traffic.</span><br><span class=\"line\">        # See: https://bugs.debian.org/773332</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # Read up on ssl_ciphers to ensure a secure configuration.</span><br><span class=\"line\">        # See: https://bugs.debian.org/765782</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # Self signed certs generated by the ssl-cert package</span><br><span class=\"line\">        # Don&apos;t use them in a production server!</span><br><span class=\"line\">        #</span><br><span class=\"line\">        include snippets/snakeoil.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        root /var/www/站点的根目录;</span><br><span class=\"line\"></span><br><span class=\"line\">        # Add index.php to the list if you are using PHP</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        server_name blog.cool1024.com;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                # First attempt to serve request as file, then</span><br><span class=\"line\">                # as directory, then fall back to displaying a 404.</span><br><span class=\"line\">                try_files $uri $uri/ =404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定时任务</p>\n<ul>\n<li>打开控制台，输入 <code>crontab -e</code></li>\n<li>按下 i 进入编辑模式</li>\n<li>任务书写格式如下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> * * * * * *</span><br><span class=\"line\">第1个星号表示分钟（0－59）</span><br><span class=\"line\">第2个星号表示小时（0－23）</span><br><span class=\"line\">第3个星号表示日期（0－31）</span><br><span class=\"line\">第4个星号表示月份（0－12）</span><br><span class=\"line\">第5个星号表示星期几（0－6，0是周日，6是周六）</span><br><span class=\"line\">第6个星号表示要执行的脚本文件名。</span><br><span class=\"line\"></span><br><span class=\"line\">示例：</span><br><span class=\"line\">*/1 * * * * 1分钟一次</span><br><span class=\"line\">0 13 * * * 表示每天下午13点执行</span><br><span class=\"line\">30 * * * * 表示每30分钟执行</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<p>例子：<code>59 23 * * * /var/www/letsencrypt.sh/dehydrated -c</code></p>\n<div class=\"tip\"><br>1. 证书颁发机构官网<a href=\"https://letsencrypt.org\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt</a><br>2. 证书有效期为3个月，我们要在快要过期的时候获取一个新的（只需要重新执行./dehydrated -c）<br>3. 聪明的你一定写了一个定时任务（自动在快过期的时候执行证书更新）<br></div>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"使用git克隆项目到-var-www目录下\"><a href=\"#使用git克隆项目到-var-www目录下\" class=\"headerlink\" title=\"使用git克隆项目到/var/www目录下\"></a>使用git克隆项目到<code>/var/www</code>目录下</h4><ol>\n<li>Clone with SSH : <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:lukas2511/dehydrated.git</li>\n<li>Clone with HTTPS : <a href=\"https://github.com/lukas2511/dehydrated.git\" target=\"_blank\" rel=\"noopener\">https://github.com/lukas2511/dehydrated.git</a></li>\n<li><a href=\"https://github.com/lukas2511/dehydrated\" target=\"_blank\" rel=\"noopener\">Github地址</a></li>\n</ol>\n<h4 id=\"把克隆好的项目中docs-examples-目录中的config-domains-txt-hook-sh复制到项目的根目录（项目指代的是克隆下来的dehydrated）\"><a href=\"#把克隆好的项目中docs-examples-目录中的config-domains-txt-hook-sh复制到项目的根目录（项目指代的是克隆下来的dehydrated）\" class=\"headerlink\" title=\"把克隆好的项目中docs/examples/目录中的config,domains.txt,hook.sh复制到项目的根目录（项目指代的是克隆下来的dehydrated）\"></a>把克隆好的项目中docs/examples/目录中的config,domains.txt,hook.sh复制到项目的根目录（项目指代的是克隆下来的dehydrated）</h4><ol>\n<li><p>如果你会修改config参数，可以自行取消相关注释修改相关参数</p>\n</li>\n<li><p>如果你不会修改，那么直接清空config文件，写入下面内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">CA=<span class=\"string\">\"https://acme-v01.api.letsencrypt.org/directory\"</span></span><br><span class=\"line\">CHALLENGETYPE=<span class=\"string\">\"http-01\"</span></span><br><span class=\"line\">CERTDIR=<span class=\"string\">\"<span class=\"variable\">$&#123;BASEDIR&#125;</span>/certs\"</span></span><br><span class=\"line\">HOOK=<span class=\"string\">\"<span class=\"variable\">$&#123;BASEDIR&#125;</span>/hook.sh\"</span></span><br><span class=\"line\">CONTACT_EMAIL=<span class=\"string\">'你的邮箱地址，别写错了；如example@mail.com'</span></span><br><span class=\"line\">WELLKNOWN=<span class=\"string\">\"/tmp/acme-wellknown\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p <span class=\"variable\">$WELLKNOWN</span></span><br><span class=\"line\">chmod -R 777 <span class=\"variable\">$WELLKNOWN</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改domains.txt(如果你会改，那么自己改…),清空里面的内容，写入下面内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 每一个子域名都写在后面，域名之间空一格就好（这些域名是你要配置https的域名，如果以后多了，可以继续后面加）</span><br><span class=\"line\">cool1024.com blog.cool1024 www.cool1024.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改hook.sh(如果你想自动化部署，这个很重要，如果你喜欢人工操作，这里可以跳过)，在证书获取成功后的执行方法中写入下面代码（deploy_cert就是那个方法）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">deploy_cert</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> DOMAIN=<span class=\"string\">\"<span class=\"variable\">$&#123;1&#125;</span>\"</span> KEYFILE=<span class=\"string\">\"<span class=\"variable\">$&#123;2&#125;</span>\"</span> CERTFILE=<span class=\"string\">\"<span class=\"variable\">$&#123;3&#125;</span>\"</span> FULLCHAINFILE=<span class=\"string\">\"<span class=\"variable\">$&#123;4&#125;</span>\"</span> CHAINFILE=<span class=\"string\">\"<span class=\"variable\">$&#123;5&#125;</span>\"</span> TIMESTAMP=<span class=\"string\">\"<span class=\"variable\">$&#123;6&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 拷贝证书文件到项目根目录的certs文件夹下</span></span><br><span class=\"line\">    cp <span class=\"string\">\"<span class=\"variable\">$&#123;KEYFILE&#125;</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$&#123;BASEDIR&#125;</span>/certs/\"</span></span><br><span class=\"line\">    cp <span class=\"string\">\"<span class=\"variable\">$&#123;FULLCHAINFILE&#125;</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$&#123;BASEDIR&#125;</span>/certs/\"</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 重启服务器</span></span><br><span class=\"line\">    nginx -s reload</span><br><span class=\"line\">    <span class=\"comment\"># 记录日志</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> [`date`]执行结束 &gt;&gt; <span class=\"string\">\"<span class=\"variable\">$&#123;BASEDIR&#125;</span>/certs/log.txt\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"修改nginx的默认站点配置，添加一条新规则，用于证书颁发机构确认这个域名和服务器是属于你的（-etc-nginx-sites-enabled-default）\"><a href=\"#修改nginx的默认站点配置，添加一条新规则，用于证书颁发机构确认这个域名和服务器是属于你的（-etc-nginx-sites-enabled-default）\" class=\"headerlink\" title=\"修改nginx的默认站点配置，添加一条新规则，用于证书颁发机构确认这个域名和服务器是属于你的（/etc/nginx/sites-enabled/default）\"></a>修改nginx的默认站点配置，添加一条新规则，用于证书颁发机构确认这个域名和服务器是属于你的（/etc/nginx/sites-enabled/default）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80 default_server;</span><br><span class=\"line\">    listen [::]:80 default_server;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 你的域名，注意这里写的是*匹配的规则，所有的子域名都会配置</span><br><span class=\"line\">    server_name *.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 这条规则是用来验证域名和服务器的</span><br><span class=\"line\">    location /.well-known/acme-challenge &#123;</span><br><span class=\"line\">        alias /tmp/acme-wellknown;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 所有的其它http请求全部重新定向到https(这个很重要，用户浏览器没有输入https我们要重定向到https的站点)</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        rewrite ^(.*)$ https://$host$request_uri permanent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"开始获取证书\"><a href=\"#开始获取证书\" class=\"headerlink\" title=\"开始获取证书\"></a>开始获取证书</h4><ol>\n<li><p>在之前克隆的项目根目录，执行项目里面的dehydrated脚本</p>\n<ul>\n<li>注册 <code>./dehydrated --register</code></li>\n<li>获取证书 <code>./dehydrated -c</code></li>\n</ul>\n</li>\n<li><p>如果你出现了报错（请自己看文档，啥文档在哪里？？～～～～～这个真不适合你，去花钱买个证书吧）,一切都顺利的话你可以看的项目目录下有一个certs目录，点开目录，可以看到证书文件(fullchain.pem  privkey.pem 这两个很重要)，还有一个你域名的文件夹，里面存放了历史以来的证书</p>\n</li>\n<li><p>好了，如果你会nginx配置https那么就到此为止咯，直接用上面的两个文件去配置吧～</p>\n</li>\n</ol>\n<h4 id=\"nginx配置证书\"><a href=\"#nginx配置证书\" class=\"headerlink\" title=\"nginx配置证书\"></a>nginx配置证书</h4><ol>\n<li><p>编辑这个文件<code>/etc/nginx/snippets/snakeoil.conf</code>，把原来默认的证书配置去掉，改为如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Self signed certificates generated by the ssl-cert package</span><br><span class=\"line\"># Don&apos;t use them in a production server!</span><br><span class=\"line\"></span><br><span class=\"line\"># 这是之前生成的证书文件路径哦～</span><br><span class=\"line\">ssl_certificate /var/www/letsencrypt.sh/certs/fullchain.pem;</span><br><span class=\"line\">ssl_certificate_key /var/www/letsencrypt.sh/certs/privkey.pem;</span><br><span class=\"line\">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">ssl_ciphers HIGH:!aNULL:!MD5;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>尝试给我的一个站点开始https<br>一个没有开启https的配置文件是下面这样的（使用的是80端口），我们发现配置文件中有一段443的端口配置被注释掉了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        listen [::]:80 default_server;</span><br><span class=\"line\"></span><br><span class=\"line\">        # SSL configuration</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # listen 443;</span><br><span class=\"line\">        # ssl on;</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # Note: You should disable gzip for SSL traffic.</span><br><span class=\"line\">        # See: https://bugs.debian.org/773332</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # Read up on ssl_ciphers to ensure a secure configuration.</span><br><span class=\"line\">        # See: https://bugs.debian.org/765782</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # Self signed certs generated by the ssl-cert package</span><br><span class=\"line\">        # Don&apos;t use them in a production server!</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # include snippets/snakeoil.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        root /var/www/站点的根目录;</span><br><span class=\"line\"></span><br><span class=\"line\">        # Add index.php to the list if you are using PHP</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        server_name blog.cool1024.com;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                # First attempt to serve request as file, then</span><br><span class=\"line\">                # as directory, then fall back to displaying a 404.</span><br><span class=\"line\">                try_files $uri $uri/ =404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把注释去掉，并写注释掉80端口的相关配置，如下，就好了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        # listen 80;</span><br><span class=\"line\">        # listen [::]:80 default_server;</span><br><span class=\"line\"></span><br><span class=\"line\">        # SSL configuration</span><br><span class=\"line\">        #</span><br><span class=\"line\">        listen 443;</span><br><span class=\"line\">        ssl on;</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # Note: You should disable gzip for SSL traffic.</span><br><span class=\"line\">        # See: https://bugs.debian.org/773332</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # Read up on ssl_ciphers to ensure a secure configuration.</span><br><span class=\"line\">        # See: https://bugs.debian.org/765782</span><br><span class=\"line\">        #</span><br><span class=\"line\">        # Self signed certs generated by the ssl-cert package</span><br><span class=\"line\">        # Don&apos;t use them in a production server!</span><br><span class=\"line\">        #</span><br><span class=\"line\">        include snippets/snakeoil.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        root /var/www/站点的根目录;</span><br><span class=\"line\"></span><br><span class=\"line\">        # Add index.php to the list if you are using PHP</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        server_name blog.cool1024.com;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                # First attempt to serve request as file, then</span><br><span class=\"line\">                # as directory, then fall back to displaying a 404.</span><br><span class=\"line\">                try_files $uri $uri/ =404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定时任务</p>\n<ul>\n<li>打开控制台，输入 <code>crontab -e</code></li>\n<li>按下 i 进入编辑模式</li>\n<li>任务书写格式如下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> * * * * * *</span><br><span class=\"line\">第1个星号表示分钟（0－59）</span><br><span class=\"line\">第2个星号表示小时（0－23）</span><br><span class=\"line\">第3个星号表示日期（0－31）</span><br><span class=\"line\">第4个星号表示月份（0－12）</span><br><span class=\"line\">第5个星号表示星期几（0－6，0是周日，6是周六）</span><br><span class=\"line\">第6个星号表示要执行的脚本文件名。</span><br><span class=\"line\"></span><br><span class=\"line\">示例：</span><br><span class=\"line\">*/1 * * * * 1分钟一次</span><br><span class=\"line\">0 13 * * * 表示每天下午13点执行</span><br><span class=\"line\">30 * * * * 表示每30分钟执行</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<p>例子：<code>59 23 * * * /var/www/letsencrypt.sh/dehydrated -c</code></p>\n<div class=\"tip\"><br>1. 证书颁发机构官网<a href=\"https://letsencrypt.org\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt</a><br>2. 证书有效期为3个月，我们要在快要过期的时候获取一个新的（只需要重新执行./dehydrated -c）<br>3. 聪明的你一定写了一个定时任务（自动在快过期的时候执行证书更新）<br></div>\n\n\n\n"},{"title":"JetPack导航组件之抽屉导航","date":"2019-05-25T09:04:34.000Z","_content":"\n<!--more-->\n\n## Jetpack导航-侧边抽屉导航\n![效果图](/images/jetpack/side-navigation.png)\n\n## 1. 在MainActivity的布局文件中使用抽屉布局\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.drawerlayout.widget.DrawerLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:id=\"@+id/drawer\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\">\n\n    <!-- 主体内容 -->\n    <androidx.constraintlayout.widget.ConstraintLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\">\n\n        <!-- 导航根视图预留 -->\n        <!-- ... 页面将会在此处显示 ... -->\n\n    </androidx.constraintlayout.widget.ConstraintLayout>\n\n    <!-- 侧边导航组件 -->\n    <!-- app:menu 绑定菜单文件，后面将会创建  -->\n    <!-- app:headerLayout 绑定头部视图布局，此文章不与介绍 -->\n    <com.google.android.material.navigation.NavigationView\n            android:id=\"@+id/navigation_side\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"match_parent\"\n            android:layout_gravity=\"start\"\n            android:background=\"@color/colorWhite\"\n            android:clickable=\"true\"\n            android:focusable=\"true\"\n            android:focusableInTouchMode=\"true\"\n            app:headerLayout=\"@layout/app_side_tool_header\"\n            app:itemBackground=\"@drawable/app_drawer_item_bg\"\n            app:itemTextColor=\"@color/colorText\"\n            app:menu=\"@menu/main_side_menu\"/>\n\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\n## 2.创建若干个用于切换的页面碎片（androidx.fragment.app.Fragment）\n* 如：HomeFragment,CenterFragment,DashboardFragment\n```kotlin\n/**\n * 首页\n */\nclass HomeFragment : Fragment() {\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.fragment_home, container, false)\n    }\n\n}\n\n/**\n * 中心\n */\nclass CenterFragment : Fragment() {\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.fragment_center, container, false)\n    }\n\n}\n\n/**\n * 仪表盘\n */\nclass DashboardFragment : Fragment() {\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.fragment_dashboard, container, false)\n    }\n\n}\n```\n\n## 创建导航图（main_navigation.xml）\n```xml\n<!-- main_navigation.xml -->\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<navigation xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n            xmlns:tools=\"http://schemas.android.com/tools\" \n            android:id=\"@+id/main_navigation\"\n            app:startDestination=\"@+id/homeFragment\" \n            android:label=\"home\">\n\n    <fragment android:id=\"@+id/homeFragment\" \n              android:name=\"com.example.androidx_example.fragments.HomeFragment\"\n              android:label=\"home\" \n              tools:layout=\"@layout/fragment_home\">\n    </fragment>\n\n    <fragment android:id=\"@+id/centerFragment\" \n                android:name=\"com.example.androidx_example.fragments.CenterFragment\"\n              android:label=\"center\" \n              tools:layout=\"@layout/fragment_center\"/>\n    </fragment>\n\n    <fragment android:id=\"@+id/dashboardfragment\" \n                android:name=\"com.example.androidx_example.fragments.DashboardFragment\"\n              android:label=\"dashboard\" \n              tools:layout=\"@layout/fragment_dashboard\"/>\n    </fragment>\n\n</navigation>\n```\n\n## 4.在MainActivity的布局文件中添加导航根视图\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.drawerlayout.widget.DrawerLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:id=\"@+id/drawer\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\">\n\n    <!-- 主体内容 -->\n    <androidx.constraintlayout.widget.ConstraintLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\">\n\n        <!-- 导航根视图 -->\n        <!-- navGraph 绑定之前的导航图 main_navigation -->\n        <fragment\n                android:id=\"@+id/nav_host\"\n                android:name=\"androidx.navigation.fragment.NavHostFragment\"\n                android:layout_width=\"0dp\"\n                android:layout_height=\"0dp\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\"\n                app:layout_constraintBottom_toTopOf=\"@+id/main_bottom_navigation\"\n                app:defaultNavHost=\"true\"\n                app:navGraph=\"@navigation/main_navigation\"/>\n\n    </androidx.constraintlayout.widget.ConstraintLayout>\n\n    <!-- 侧边导航组件 -->\n    <com.google.android.material.navigation.NavigationView\n            android:id=\"@+id/navigation_side\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"match_parent\"\n            android:layout_gravity=\"start\"\n            android:background=\"@color/colorWhite\"\n            android:clickable=\"true\"\n            android:focusable=\"true\"\n            android:focusableInTouchMode=\"true\"\n            app:headerLayout=\"@layout/app_side_tool_header\"\n            app:itemBackground=\"@drawable/app_drawer_item_bg\"\n            app:itemTextColor=\"@color/colorText\"\n            app:menu=\"@menu/main_side_menu\"/>\n\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\n## 5.为抽屉导航添加菜单（main_side_menu.xml）\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:checkableBehavior=\"single\"\n      tools:showIn=\"navigation\">\n    <!-- 分组要给予一个id才会出现分割线 -->\n    <group android:id=\"@+id/group_one\">\n        <!-- 每一个菜单项的id需要和导航目的地的id一致 -->\n        <!-- <fragment android:id=\"@+id/homeFragment\" \n              android:name=\"com.example.androidx_example.fragments.HomeFragment\"\n              android:label=\"home\" \n              tools:layout=\"@layout/fragment_home\">\n        </fragment> -->\n        <!-- checkable设置为true，才能让每一项可以被选中（添加选中效果） -->\n        <item android:id=\"@+id/homeFragment\"\n              android:checkable=\"true\"\n              android:icon=\"@drawable/ic_home\"\n              android:title=\"首页\"/>\n        <item android:id=\"@+id/centerFragment\"\n              android:checkable=\"true\"\n              android:icon=\"@drawable/ic_center\"\n              android:title=\"中心\"/>\n    </group>\n    <group android:id=\"@+id/group_two\">\n        <item android:id=\"@+id/dashboardFragment\"\n              android:checkable=\"true\"\n              android:icon=\"@drawable/ic_dashboard\"\n              android:title=\"仪表盘\"/>\n    </group>\n</menu>\n```\n\n## 6.选中后的效果-----菜单背景切换，图标切换\n* 使用selector来添加两种状态下的图标(drawable/ic_home.xml)\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item android:state_selected=\"false\" android:drawable=\"@drawable/ic_home_default\"/>\n    <item android:state_selected=\"true\" android:drawable=\"@drawable/ic_home_selected\"/>\n</selector>\n```\n* 同理使用selector来添加两种状态下的背景(drawable/app_drawer_item_bg.xml)\n```xml\n<!-- 我们在NavigationView标签中使用了app:itemBackground设置了此背景 -->\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item android:state_checked=\"false\">\n        <shape>\n            <solid android:color=\"#FFFFFF\"/>\n        </shape>\n    </item>\n    <item android:state_checked=\"true\">\n        <shape>\n            <solid android:color=\"#EEEEEE\"/>\n        </shape>\n    </item>\n</selector>\n```\n\n## 7.将NavigationView与导航控制器绑定在一起\n```kotlin\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        initNav()\n    }\n\n    private fun initNav() {\n        // 我们使用导航根视图的findNavController方法可以快速获取当前导航\n        val navCtrl = nav_host.findNavController().apply {\n            // 我们监听导航事件，每次发生导航，把对应的菜单项设置为选中状态（这个不是必要的，根据需求）\n            addOnDestinationChangedListener { _, destination, _ ->\n                navigation_side?.setCheckedItem(destination.id)\n            }\n        }\n        navigation_side.apply {\n            // 使用NavigationUI给Navigation拓展的setupWithNavController方法然导航控制器管理Navigation\n            setupWithNavController(navCtrl)\n            // 如果需要使用图标原有的色彩（彩色），那么把iconTint全部设为空（这个不是必要的，根据需求）\n            itemIconTintList = null\n        }\n    }\n}\n```\n\n## 8.其它\n* 分割线颜色调整,通过设置应用主题listDivider可以修改分割线的颜色\n```\n<!-- Base application theme. -->\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n    <item name=\"colorPrimary\">@color/colorPrimary</item>\n    <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n    <item name=\"colorAccent\">@color/colorAccent</item>\n    <!-- 分割线颜色 -->\n    <item name=\"android:listDivider\">@color/colorLine</item>\n</style>\n```\n* 配置底部导航时，需要对某些特别菜单单独处理，可以自行在导航事件中处理\n如：某些侧边导航的页面会导航到一个不在底部导航的目的地（页面碎片），我们需要隐藏底部导航，而有些页面又需要显示底部导航\n```kotlin\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        initNav()\n    }\n\n    private fun initNav() {\n        val navCtrl = nav_host.findNavController().apply {\n            addOnDestinationChangedListener { _, destination, _ ->\n                navigation_side?.setCheckedItem(destination.id)\n                // home,center,dashboard可以用底部导航切换，也可以用侧边导航切换，其它页面都隐藏掉底部导航\n                main_bottom_navigation?.visibility = when (destination.id) {\n                    R.id.homeFragment, R.id.centerFragment, R.id.dashboardFragment -> View.VISIBLE\n                    else -> View.GONE\n                }\n            }\n        }\n        main_bottom_navigation.setupWithNavController(navCtrl)\n        navigation_side.apply {\n            setupWithNavController(navCtrl)\n            itemIconTintList = null\n        }\n    }\n}\n```\n\n\n","source":"_posts/jetpack-navigation-NavigationView.md","raw":"---\ntitle: JetPack导航组件之抽屉导航\ndate: 2019-05-25 17:04:34\ntags: ['android','jetpack']\ncategories: Android开发\n---\n\n<!--more-->\n\n## Jetpack导航-侧边抽屉导航\n![效果图](/images/jetpack/side-navigation.png)\n\n## 1. 在MainActivity的布局文件中使用抽屉布局\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.drawerlayout.widget.DrawerLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:id=\"@+id/drawer\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\">\n\n    <!-- 主体内容 -->\n    <androidx.constraintlayout.widget.ConstraintLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\">\n\n        <!-- 导航根视图预留 -->\n        <!-- ... 页面将会在此处显示 ... -->\n\n    </androidx.constraintlayout.widget.ConstraintLayout>\n\n    <!-- 侧边导航组件 -->\n    <!-- app:menu 绑定菜单文件，后面将会创建  -->\n    <!-- app:headerLayout 绑定头部视图布局，此文章不与介绍 -->\n    <com.google.android.material.navigation.NavigationView\n            android:id=\"@+id/navigation_side\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"match_parent\"\n            android:layout_gravity=\"start\"\n            android:background=\"@color/colorWhite\"\n            android:clickable=\"true\"\n            android:focusable=\"true\"\n            android:focusableInTouchMode=\"true\"\n            app:headerLayout=\"@layout/app_side_tool_header\"\n            app:itemBackground=\"@drawable/app_drawer_item_bg\"\n            app:itemTextColor=\"@color/colorText\"\n            app:menu=\"@menu/main_side_menu\"/>\n\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\n## 2.创建若干个用于切换的页面碎片（androidx.fragment.app.Fragment）\n* 如：HomeFragment,CenterFragment,DashboardFragment\n```kotlin\n/**\n * 首页\n */\nclass HomeFragment : Fragment() {\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.fragment_home, container, false)\n    }\n\n}\n\n/**\n * 中心\n */\nclass CenterFragment : Fragment() {\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.fragment_center, container, false)\n    }\n\n}\n\n/**\n * 仪表盘\n */\nclass DashboardFragment : Fragment() {\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.fragment_dashboard, container, false)\n    }\n\n}\n```\n\n## 创建导航图（main_navigation.xml）\n```xml\n<!-- main_navigation.xml -->\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<navigation xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n            xmlns:tools=\"http://schemas.android.com/tools\" \n            android:id=\"@+id/main_navigation\"\n            app:startDestination=\"@+id/homeFragment\" \n            android:label=\"home\">\n\n    <fragment android:id=\"@+id/homeFragment\" \n              android:name=\"com.example.androidx_example.fragments.HomeFragment\"\n              android:label=\"home\" \n              tools:layout=\"@layout/fragment_home\">\n    </fragment>\n\n    <fragment android:id=\"@+id/centerFragment\" \n                android:name=\"com.example.androidx_example.fragments.CenterFragment\"\n              android:label=\"center\" \n              tools:layout=\"@layout/fragment_center\"/>\n    </fragment>\n\n    <fragment android:id=\"@+id/dashboardfragment\" \n                android:name=\"com.example.androidx_example.fragments.DashboardFragment\"\n              android:label=\"dashboard\" \n              tools:layout=\"@layout/fragment_dashboard\"/>\n    </fragment>\n\n</navigation>\n```\n\n## 4.在MainActivity的布局文件中添加导航根视图\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.drawerlayout.widget.DrawerLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:id=\"@+id/drawer\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\">\n\n    <!-- 主体内容 -->\n    <androidx.constraintlayout.widget.ConstraintLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\">\n\n        <!-- 导航根视图 -->\n        <!-- navGraph 绑定之前的导航图 main_navigation -->\n        <fragment\n                android:id=\"@+id/nav_host\"\n                android:name=\"androidx.navigation.fragment.NavHostFragment\"\n                android:layout_width=\"0dp\"\n                android:layout_height=\"0dp\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\"\n                app:layout_constraintBottom_toTopOf=\"@+id/main_bottom_navigation\"\n                app:defaultNavHost=\"true\"\n                app:navGraph=\"@navigation/main_navigation\"/>\n\n    </androidx.constraintlayout.widget.ConstraintLayout>\n\n    <!-- 侧边导航组件 -->\n    <com.google.android.material.navigation.NavigationView\n            android:id=\"@+id/navigation_side\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"match_parent\"\n            android:layout_gravity=\"start\"\n            android:background=\"@color/colorWhite\"\n            android:clickable=\"true\"\n            android:focusable=\"true\"\n            android:focusableInTouchMode=\"true\"\n            app:headerLayout=\"@layout/app_side_tool_header\"\n            app:itemBackground=\"@drawable/app_drawer_item_bg\"\n            app:itemTextColor=\"@color/colorText\"\n            app:menu=\"@menu/main_side_menu\"/>\n\n</androidx.drawerlayout.widget.DrawerLayout>\n```\n\n## 5.为抽屉导航添加菜单（main_side_menu.xml）\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:checkableBehavior=\"single\"\n      tools:showIn=\"navigation\">\n    <!-- 分组要给予一个id才会出现分割线 -->\n    <group android:id=\"@+id/group_one\">\n        <!-- 每一个菜单项的id需要和导航目的地的id一致 -->\n        <!-- <fragment android:id=\"@+id/homeFragment\" \n              android:name=\"com.example.androidx_example.fragments.HomeFragment\"\n              android:label=\"home\" \n              tools:layout=\"@layout/fragment_home\">\n        </fragment> -->\n        <!-- checkable设置为true，才能让每一项可以被选中（添加选中效果） -->\n        <item android:id=\"@+id/homeFragment\"\n              android:checkable=\"true\"\n              android:icon=\"@drawable/ic_home\"\n              android:title=\"首页\"/>\n        <item android:id=\"@+id/centerFragment\"\n              android:checkable=\"true\"\n              android:icon=\"@drawable/ic_center\"\n              android:title=\"中心\"/>\n    </group>\n    <group android:id=\"@+id/group_two\">\n        <item android:id=\"@+id/dashboardFragment\"\n              android:checkable=\"true\"\n              android:icon=\"@drawable/ic_dashboard\"\n              android:title=\"仪表盘\"/>\n    </group>\n</menu>\n```\n\n## 6.选中后的效果-----菜单背景切换，图标切换\n* 使用selector来添加两种状态下的图标(drawable/ic_home.xml)\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item android:state_selected=\"false\" android:drawable=\"@drawable/ic_home_default\"/>\n    <item android:state_selected=\"true\" android:drawable=\"@drawable/ic_home_selected\"/>\n</selector>\n```\n* 同理使用selector来添加两种状态下的背景(drawable/app_drawer_item_bg.xml)\n```xml\n<!-- 我们在NavigationView标签中使用了app:itemBackground设置了此背景 -->\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item android:state_checked=\"false\">\n        <shape>\n            <solid android:color=\"#FFFFFF\"/>\n        </shape>\n    </item>\n    <item android:state_checked=\"true\">\n        <shape>\n            <solid android:color=\"#EEEEEE\"/>\n        </shape>\n    </item>\n</selector>\n```\n\n## 7.将NavigationView与导航控制器绑定在一起\n```kotlin\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        initNav()\n    }\n\n    private fun initNav() {\n        // 我们使用导航根视图的findNavController方法可以快速获取当前导航\n        val navCtrl = nav_host.findNavController().apply {\n            // 我们监听导航事件，每次发生导航，把对应的菜单项设置为选中状态（这个不是必要的，根据需求）\n            addOnDestinationChangedListener { _, destination, _ ->\n                navigation_side?.setCheckedItem(destination.id)\n            }\n        }\n        navigation_side.apply {\n            // 使用NavigationUI给Navigation拓展的setupWithNavController方法然导航控制器管理Navigation\n            setupWithNavController(navCtrl)\n            // 如果需要使用图标原有的色彩（彩色），那么把iconTint全部设为空（这个不是必要的，根据需求）\n            itemIconTintList = null\n        }\n    }\n}\n```\n\n## 8.其它\n* 分割线颜色调整,通过设置应用主题listDivider可以修改分割线的颜色\n```\n<!-- Base application theme. -->\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n    <item name=\"colorPrimary\">@color/colorPrimary</item>\n    <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n    <item name=\"colorAccent\">@color/colorAccent</item>\n    <!-- 分割线颜色 -->\n    <item name=\"android:listDivider\">@color/colorLine</item>\n</style>\n```\n* 配置底部导航时，需要对某些特别菜单单独处理，可以自行在导航事件中处理\n如：某些侧边导航的页面会导航到一个不在底部导航的目的地（页面碎片），我们需要隐藏底部导航，而有些页面又需要显示底部导航\n```kotlin\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        initNav()\n    }\n\n    private fun initNav() {\n        val navCtrl = nav_host.findNavController().apply {\n            addOnDestinationChangedListener { _, destination, _ ->\n                navigation_side?.setCheckedItem(destination.id)\n                // home,center,dashboard可以用底部导航切换，也可以用侧边导航切换，其它页面都隐藏掉底部导航\n                main_bottom_navigation?.visibility = when (destination.id) {\n                    R.id.homeFragment, R.id.centerFragment, R.id.dashboardFragment -> View.VISIBLE\n                    else -> View.GONE\n                }\n            }\n        }\n        main_bottom_navigation.setupWithNavController(navCtrl)\n        navigation_side.apply {\n            setupWithNavController(navCtrl)\n            itemIconTintList = null\n        }\n    }\n}\n```\n\n\n","slug":"jetpack-navigation-NavigationView","published":1,"updated":"2019-07-09T05:12:56.775Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld8r001ne8wenxero5ko","content":"<a id=\"more\"></a>\n<h2 id=\"Jetpack导航-侧边抽屉导航\"><a href=\"#Jetpack导航-侧边抽屉导航\" class=\"headerlink\" title=\"Jetpack导航-侧边抽屉导航\"></a>Jetpack导航-侧边抽屉导航</h2><p><img src=\"/images/jetpack/side-navigation.png\" alt=\"效果图\"></p>\n<h2 id=\"1-在MainActivity的布局文件中使用抽屉布局\"><a href=\"#1-在MainActivity的布局文件中使用抽屉布局\" class=\"headerlink\" title=\"1. 在MainActivity的布局文件中使用抽屉布局\"></a>1. 在MainActivity的布局文件中使用抽屉布局</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/drawer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:context</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 主体内容 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 导航根视图预留 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- ... 页面将会在此处显示 ... --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 侧边导航组件 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- app:menu 绑定菜单文件，后面将会创建  --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- app:headerLayout 绑定头部视图布局，此文章不与介绍 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.navigation.NavigationView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/navigation_side\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"start\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorWhite\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:clickable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:focusable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:focusableInTouchMode</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:headerLayout</span>=<span class=\"string\">\"@layout/app_side_tool_header\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:itemBackground</span>=<span class=\"string\">\"@drawable/app_drawer_item_bg\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:itemTextColor</span>=<span class=\"string\">\"@color/colorText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/main_side_menu\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-创建若干个用于切换的页面碎片（androidx-fragment-app-Fragment）\"><a href=\"#2-创建若干个用于切换的页面碎片（androidx-fragment-app-Fragment）\" class=\"headerlink\" title=\"2.创建若干个用于切换的页面碎片（androidx.fragment.app.Fragment）\"></a>2.创建若干个用于切换的页面碎片（androidx.fragment.app.Fragment）</h2><ul>\n<li>如：HomeFragment,CenterFragment,DashboardFragment<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 首页</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeFragment</span> : <span class=\"type\">Fragment</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        inflater: <span class=\"type\">LayoutInflater</span>, container: <span class=\"type\">ViewGroup</span>?,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        savedInstanceState: <span class=\"type\">Bundle</span>?</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_home, container, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 中心</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CenterFragment</span> : <span class=\"type\">Fragment</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        inflater: <span class=\"type\">LayoutInflater</span>, container: <span class=\"type\">ViewGroup</span>?,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        savedInstanceState: <span class=\"type\">Bundle</span>?</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_center, container, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 仪表盘</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DashboardFragment</span> : <span class=\"type\">Fragment</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        inflater: <span class=\"type\">LayoutInflater</span>, container: <span class=\"type\">ViewGroup</span>?,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        savedInstanceState: <span class=\"type\">Bundle</span>?</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_dashboard, container, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"创建导航图（main-navigation-xml）\"><a href=\"#创建导航图（main-navigation-xml）\" class=\"headerlink\" title=\"创建导航图（main_navigation.xml）\"></a>创建导航图（main_navigation.xml）</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- main_navigation.xml --&gt;</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">navigation</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/main_navigation\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:startDestination</span>=<span class=\"string\">\"@+id/homeFragment\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:label</span>=<span class=\"string\">\"home\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fragment</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/homeFragment\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.androidx_example.fragments.HomeFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:label</span>=<span class=\"string\">\"home\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">tools:layout</span>=<span class=\"string\">\"@layout/fragment_home\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fragment</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fragment</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/centerFragment\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.androidx_example.fragments.CenterFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:label</span>=<span class=\"string\">\"center\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">tools:layout</span>=<span class=\"string\">\"@layout/fragment_center\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fragment</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fragment</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dashboardfragment\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.androidx_example.fragments.DashboardFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:label</span>=<span class=\"string\">\"dashboard\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">tools:layout</span>=<span class=\"string\">\"@layout/fragment_dashboard\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fragment</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">navigation</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-在MainActivity的布局文件中添加导航根视图\"><a href=\"#4-在MainActivity的布局文件中添加导航根视图\" class=\"headerlink\" title=\"4.在MainActivity的布局文件中添加导航根视图\"></a>4.在MainActivity的布局文件中添加导航根视图</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/drawer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:context</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 主体内容 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 导航根视图 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- navGraph 绑定之前的导航图 main_navigation --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_host\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:name</span>=<span class=\"string\">\"androidx.navigation.fragment.NavHostFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:layout_constraintStart_toStartOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:layout_constraintEnd_toEndOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:layout_constraintBottom_toTopOf</span>=<span class=\"string\">\"@+id/main_bottom_navigation\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:defaultNavHost</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:navGraph</span>=<span class=\"string\">\"@navigation/main_navigation\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 侧边导航组件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.navigation.NavigationView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/navigation_side\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"start\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorWhite\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:clickable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:focusable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:focusableInTouchMode</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:headerLayout</span>=<span class=\"string\">\"@layout/app_side_tool_header\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:itemBackground</span>=<span class=\"string\">\"@drawable/app_drawer_item_bg\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:itemTextColor</span>=<span class=\"string\">\"@color/colorText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/main_side_menu\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-为抽屉导航添加菜单（main-side-menu-xml）\"><a href=\"#5-为抽屉导航添加菜单（main-side-menu-xml）\" class=\"headerlink\" title=\"5.为抽屉导航添加菜单（main_side_menu.xml）\"></a>5.为抽屉导航添加菜单（main_side_menu.xml）</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:checkableBehavior</span>=<span class=\"string\">\"single\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">tools:showIn</span>=<span class=\"string\">\"navigation\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 分组要给予一个id才会出现分割线 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">group</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/group_one\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 每一个菜单项的id需要和导航目的地的id一致 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- &lt;fragment android:id=\"@+id/homeFragment\" </span></span><br><span class=\"line\"><span class=\"comment\">              android:name=\"com.example.androidx_example.fragments.HomeFragment\"</span></span><br><span class=\"line\"><span class=\"comment\">              android:label=\"home\" </span></span><br><span class=\"line\"><span class=\"comment\">              tools:layout=\"@layout/fragment_home\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/fragment&gt; --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- checkable设置为true，才能让每一项可以被选中（添加选中效果） --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/homeFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:checkable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_home\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:title</span>=<span class=\"string\">\"首页\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/centerFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:checkable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:title</span>=<span class=\"string\">\"中心\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">group</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">group</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/group_two\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dashboardFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:checkable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_dashboard\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:title</span>=<span class=\"string\">\"仪表盘\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">group</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"6-选中后的效果—–菜单背景切换，图标切换\"><a href=\"#6-选中后的效果—–菜单背景切换，图标切换\" class=\"headerlink\" title=\"6.选中后的效果—–菜单背景切换，图标切换\"></a>6.选中后的效果—–菜单背景切换，图标切换</h2><ul>\n<li><p>使用selector来添加两种状态下的图标(drawable/ic_home.xml)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">selector</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_selected</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/ic_home_default\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_selected</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/ic_home_selected\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同理使用selector来添加两种状态下的背景(drawable/app_drawer_item_bg.xml)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 我们在NavigationView标签中使用了app:itemBackground设置了此背景 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">selector</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_checked</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"#FFFFFF\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_checked</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"#EEEEEE\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"7-将NavigationView与导航控制器绑定在一起\"><a href=\"#7-将NavigationView与导航控制器绑定在一起\" class=\"headerlink\" title=\"7.将NavigationView与导航控制器绑定在一起\"></a>7.将NavigationView与导航控制器绑定在一起</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\">        initNav()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initNav</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 我们使用导航根视图的findNavController方法可以快速获取当前导航</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> navCtrl = nav_host.findNavController().apply &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 我们监听导航事件，每次发生导航，把对应的菜单项设置为选中状态（这个不是必要的，根据需求）</span></span><br><span class=\"line\">            addOnDestinationChangedListener &#123; _, destination, _ -&gt;</span><br><span class=\"line\">                navigation_side?.setCheckedItem(destination.id)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        navigation_side.apply &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使用NavigationUI给Navigation拓展的setupWithNavController方法然导航控制器管理Navigation</span></span><br><span class=\"line\">            setupWithNavController(navCtrl)</span><br><span class=\"line\">            <span class=\"comment\">// 如果需要使用图标原有的色彩（彩色），那么把iconTint全部设为空（这个不是必要的，根据需求）</span></span><br><span class=\"line\">            itemIconTintList = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-其它\"><a href=\"#8-其它\" class=\"headerlink\" title=\"8.其它\"></a>8.其它</h2><ul>\n<li><p>分割线颜色调整,通过设置应用主题listDivider可以修改分割线的颜色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Base application theme. --&gt;</span><br><span class=\"line\">&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</span><br><span class=\"line\">    &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;</span><br><span class=\"line\">    &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;</span><br><span class=\"line\">    &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;</span><br><span class=\"line\">    &lt;!-- 分割线颜色 --&gt;</span><br><span class=\"line\">    &lt;item name=&quot;android:listDivider&quot;&gt;@color/colorLine&lt;/item&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置底部导航时，需要对某些特别菜单单独处理，可以自行在导航事件中处理<br>如：某些侧边导航的页面会导航到一个不在底部导航的目的地（页面碎片），我们需要隐藏底部导航，而有些页面又需要显示底部导航</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\">        initNav()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initNav</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> navCtrl = nav_host.findNavController().apply &#123;</span><br><span class=\"line\">            addOnDestinationChangedListener &#123; _, destination, _ -&gt;</span><br><span class=\"line\">                navigation_side?.setCheckedItem(destination.id)</span><br><span class=\"line\">                <span class=\"comment\">// home,center,dashboard可以用底部导航切换，也可以用侧边导航切换，其它页面都隐藏掉底部导航</span></span><br><span class=\"line\">                main_bottom_navigation?.visibility = <span class=\"keyword\">when</span> (destination.id) &#123;</span><br><span class=\"line\">                    R.id.homeFragment, R.id.centerFragment, R.id.dashboardFragment -&gt; View.VISIBLE</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> -&gt; View.GONE</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        main_bottom_navigation.setupWithNavController(navCtrl)</span><br><span class=\"line\">        navigation_side.apply &#123;</span><br><span class=\"line\">            setupWithNavController(navCtrl)</span><br><span class=\"line\">            itemIconTintList = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Jetpack导航-侧边抽屉导航\"><a href=\"#Jetpack导航-侧边抽屉导航\" class=\"headerlink\" title=\"Jetpack导航-侧边抽屉导航\"></a>Jetpack导航-侧边抽屉导航</h2><p><img src=\"/images/jetpack/side-navigation.png\" alt=\"效果图\"></p>\n<h2 id=\"1-在MainActivity的布局文件中使用抽屉布局\"><a href=\"#1-在MainActivity的布局文件中使用抽屉布局\" class=\"headerlink\" title=\"1. 在MainActivity的布局文件中使用抽屉布局\"></a>1. 在MainActivity的布局文件中使用抽屉布局</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/drawer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:context</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 主体内容 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 导航根视图预留 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- ... 页面将会在此处显示 ... --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 侧边导航组件 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- app:menu 绑定菜单文件，后面将会创建  --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- app:headerLayout 绑定头部视图布局，此文章不与介绍 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.navigation.NavigationView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/navigation_side\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"start\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorWhite\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:clickable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:focusable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:focusableInTouchMode</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:headerLayout</span>=<span class=\"string\">\"@layout/app_side_tool_header\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:itemBackground</span>=<span class=\"string\">\"@drawable/app_drawer_item_bg\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:itemTextColor</span>=<span class=\"string\">\"@color/colorText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/main_side_menu\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-创建若干个用于切换的页面碎片（androidx-fragment-app-Fragment）\"><a href=\"#2-创建若干个用于切换的页面碎片（androidx-fragment-app-Fragment）\" class=\"headerlink\" title=\"2.创建若干个用于切换的页面碎片（androidx.fragment.app.Fragment）\"></a>2.创建若干个用于切换的页面碎片（androidx.fragment.app.Fragment）</h2><ul>\n<li>如：HomeFragment,CenterFragment,DashboardFragment<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 首页</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeFragment</span> : <span class=\"type\">Fragment</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        inflater: <span class=\"type\">LayoutInflater</span>, container: <span class=\"type\">ViewGroup</span>?,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        savedInstanceState: <span class=\"type\">Bundle</span>?</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_home, container, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 中心</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CenterFragment</span> : <span class=\"type\">Fragment</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        inflater: <span class=\"type\">LayoutInflater</span>, container: <span class=\"type\">ViewGroup</span>?,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        savedInstanceState: <span class=\"type\">Bundle</span>?</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_center, container, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 仪表盘</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DashboardFragment</span> : <span class=\"type\">Fragment</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        inflater: <span class=\"type\">LayoutInflater</span>, container: <span class=\"type\">ViewGroup</span>?,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        savedInstanceState: <span class=\"type\">Bundle</span>?</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_dashboard, container, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"创建导航图（main-navigation-xml）\"><a href=\"#创建导航图（main-navigation-xml）\" class=\"headerlink\" title=\"创建导航图（main_navigation.xml）\"></a>创建导航图（main_navigation.xml）</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- main_navigation.xml --&gt;</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">navigation</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/main_navigation\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:startDestination</span>=<span class=\"string\">\"@+id/homeFragment\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:label</span>=<span class=\"string\">\"home\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fragment</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/homeFragment\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.androidx_example.fragments.HomeFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:label</span>=<span class=\"string\">\"home\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">tools:layout</span>=<span class=\"string\">\"@layout/fragment_home\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fragment</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fragment</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/centerFragment\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.androidx_example.fragments.CenterFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:label</span>=<span class=\"string\">\"center\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">tools:layout</span>=<span class=\"string\">\"@layout/fragment_center\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fragment</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">fragment</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dashboardfragment\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.androidx_example.fragments.DashboardFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:label</span>=<span class=\"string\">\"dashboard\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">tools:layout</span>=<span class=\"string\">\"@layout/fragment_dashboard\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">fragment</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">navigation</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-在MainActivity的布局文件中添加导航根视图\"><a href=\"#4-在MainActivity的布局文件中添加导航根视图\" class=\"headerlink\" title=\"4.在MainActivity的布局文件中添加导航根视图\"></a>4.在MainActivity的布局文件中添加导航根视图</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/drawer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:context</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 主体内容 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 导航根视图 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- navGraph 绑定之前的导航图 main_navigation --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nav_host\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:name</span>=<span class=\"string\">\"androidx.navigation.fragment.NavHostFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:layout_constraintStart_toStartOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:layout_constraintEnd_toEndOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:layout_constraintBottom_toTopOf</span>=<span class=\"string\">\"@+id/main_bottom_navigation\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:defaultNavHost</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:navGraph</span>=<span class=\"string\">\"@navigation/main_navigation\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 侧边导航组件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.navigation.NavigationView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/navigation_side\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"start\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorWhite\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:clickable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:focusable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:focusableInTouchMode</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:headerLayout</span>=<span class=\"string\">\"@layout/app_side_tool_header\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:itemBackground</span>=<span class=\"string\">\"@drawable/app_drawer_item_bg\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:itemTextColor</span>=<span class=\"string\">\"@color/colorText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">app:menu</span>=<span class=\"string\">\"@menu/main_side_menu\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-为抽屉导航添加菜单（main-side-menu-xml）\"><a href=\"#5-为抽屉导航添加菜单（main-side-menu-xml）\" class=\"headerlink\" title=\"5.为抽屉导航添加菜单（main_side_menu.xml）\"></a>5.为抽屉导航添加菜单（main_side_menu.xml）</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">menu</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:checkableBehavior</span>=<span class=\"string\">\"single\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">tools:showIn</span>=<span class=\"string\">\"navigation\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 分组要给予一个id才会出现分割线 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">group</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/group_one\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 每一个菜单项的id需要和导航目的地的id一致 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- &lt;fragment android:id=\"@+id/homeFragment\" </span></span><br><span class=\"line\"><span class=\"comment\">              android:name=\"com.example.androidx_example.fragments.HomeFragment\"</span></span><br><span class=\"line\"><span class=\"comment\">              android:label=\"home\" </span></span><br><span class=\"line\"><span class=\"comment\">              tools:layout=\"@layout/fragment_home\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/fragment&gt; --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- checkable设置为true，才能让每一项可以被选中（添加选中效果） --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/homeFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:checkable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_home\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:title</span>=<span class=\"string\">\"首页\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/centerFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:checkable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:title</span>=<span class=\"string\">\"中心\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">group</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">group</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/group_two\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/dashboardFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:checkable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ic_dashboard\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:title</span>=<span class=\"string\">\"仪表盘\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">group</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"6-选中后的效果—–菜单背景切换，图标切换\"><a href=\"#6-选中后的效果—–菜单背景切换，图标切换\" class=\"headerlink\" title=\"6.选中后的效果—–菜单背景切换，图标切换\"></a>6.选中后的效果—–菜单背景切换，图标切换</h2><ul>\n<li><p>使用selector来添加两种状态下的图标(drawable/ic_home.xml)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">selector</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_selected</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/ic_home_default\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_selected</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/ic_home_selected\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同理使用selector来添加两种状态下的背景(drawable/app_drawer_item_bg.xml)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 我们在NavigationView标签中使用了app:itemBackground设置了此背景 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">selector</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_checked</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"#FFFFFF\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_checked</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"#EEEEEE\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"7-将NavigationView与导航控制器绑定在一起\"><a href=\"#7-将NavigationView与导航控制器绑定在一起\" class=\"headerlink\" title=\"7.将NavigationView与导航控制器绑定在一起\"></a>7.将NavigationView与导航控制器绑定在一起</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\">        initNav()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initNav</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 我们使用导航根视图的findNavController方法可以快速获取当前导航</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> navCtrl = nav_host.findNavController().apply &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 我们监听导航事件，每次发生导航，把对应的菜单项设置为选中状态（这个不是必要的，根据需求）</span></span><br><span class=\"line\">            addOnDestinationChangedListener &#123; _, destination, _ -&gt;</span><br><span class=\"line\">                navigation_side?.setCheckedItem(destination.id)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        navigation_side.apply &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使用NavigationUI给Navigation拓展的setupWithNavController方法然导航控制器管理Navigation</span></span><br><span class=\"line\">            setupWithNavController(navCtrl)</span><br><span class=\"line\">            <span class=\"comment\">// 如果需要使用图标原有的色彩（彩色），那么把iconTint全部设为空（这个不是必要的，根据需求）</span></span><br><span class=\"line\">            itemIconTintList = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-其它\"><a href=\"#8-其它\" class=\"headerlink\" title=\"8.其它\"></a>8.其它</h2><ul>\n<li><p>分割线颜色调整,通过设置应用主题listDivider可以修改分割线的颜色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Base application theme. --&gt;</span><br><span class=\"line\">&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</span><br><span class=\"line\">    &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;</span><br><span class=\"line\">    &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;</span><br><span class=\"line\">    &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;</span><br><span class=\"line\">    &lt;!-- 分割线颜色 --&gt;</span><br><span class=\"line\">    &lt;item name=&quot;android:listDivider&quot;&gt;@color/colorLine&lt;/item&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置底部导航时，需要对某些特别菜单单独处理，可以自行在导航事件中处理<br>如：某些侧边导航的页面会导航到一个不在底部导航的目的地（页面碎片），我们需要隐藏底部导航，而有些页面又需要显示底部导航</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_main)</span><br><span class=\"line\">        initNav()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initNav</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> navCtrl = nav_host.findNavController().apply &#123;</span><br><span class=\"line\">            addOnDestinationChangedListener &#123; _, destination, _ -&gt;</span><br><span class=\"line\">                navigation_side?.setCheckedItem(destination.id)</span><br><span class=\"line\">                <span class=\"comment\">// home,center,dashboard可以用底部导航切换，也可以用侧边导航切换，其它页面都隐藏掉底部导航</span></span><br><span class=\"line\">                main_bottom_navigation?.visibility = <span class=\"keyword\">when</span> (destination.id) &#123;</span><br><span class=\"line\">                    R.id.homeFragment, R.id.centerFragment, R.id.dashboardFragment -&gt; View.VISIBLE</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> -&gt; View.GONE</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        main_bottom_navigation.setupWithNavController(navCtrl)</span><br><span class=\"line\">        navigation_side.apply &#123;</span><br><span class=\"line\">            setupWithNavController(navCtrl)</span><br><span class=\"line\">            itemIconTintList = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"JetPack-WorkManager预览","date":"2019-06-28T08:33:16.000Z","_content":"\n使用WorkManager，您可以轻松设置任务并将其交给系统，以便在您指定的条件下运行。\n<!--more-->\n\n##### 后台任务指南\n每个Android应用程序都有一个主线程，负责处理UI（包括测量和绘图视图），协调用户交互和接收生命周期事件。如果此线程上发生了太多工作，则应用程序会出现挂起或减速等情况，这会给用户带来不良好体验。任何长时间运行的计算和操作（如解码位图，访问磁盘或执行网络请求）都应在单独的后台线程上完成。通常，任何花费超过几毫秒的事情都应该委托给后台线程。当用户主动与应用程序交互时，可能需要执行其中一些任务。要了解如何在应用程序正在使用时在后台线程和主UI线程上运行任务，请查看线程解决方案指南。\n\n即使用户没有主动使用应用程序，应用程序也可能需要运行某些任务，例如定期与后端服务器同步或定期在应用程序中获取新内容。即使用户已完成与应用程序的交互，应用程序也可能要求服务立即运行完成。\n\n\n**后台任务**：实际做法选择途径\n\n1. 长时间运行的HTTP下载 --> DownloadManager\n2. 刻不容缓的任务 --> Foreground service（你不应该在后台处理，这是一个前台服务）\n3. 根据系统设备的状态触发执行 --> WorkManager\n4. 在某个精确的时间段执行 --> AlarmManager\n5. 如果以上都不是那么使用 WorkManager\n\n**前台服务**：对于需要立即运行并且必须执行完成的用户启动的工作，请使用前台服务。使用前台服务告诉系统应用程序正在执行重要操作并且不应该被杀死。通过通知托盘中的不允许通知，用户可以看到前台服务。\n\n##### WorkManager说明\n推荐：WorkManager适用于可延迟的任务，即：不需要立即运行，即使应用程序退出或设备重新启动也需要可靠运行。例如：\n\n1. 将日志或分析发送到后端服务\n2. 定期将应用程序数据与服务器同步\n\n注意：WorkManager不适用于在应用程序进程消失时可以安全终止的进程内后台工作，也不适用于需要立即执行的任务。请查看后台处理指南，了解哪种解决方案符合您的需求。\n\n优势：\n* 向后兼容API 14\n* 添加网络可用性或计费状态等工作约束\n* 设置异步一次性或定期任务\n* 可以监控和管理计划任务\n* 任务可以组合\n* 保证执行，程序设备重启也能确保任务执行\n* Adheres to power-saving features like Doze mode\n\n##### 简单使用\n\n0. 依赖包引入\n```Groovy\ndef work_version = '2.1.0-beta02'\nimplementation \"androidx.work:work-runtime-ktx:$work_version\"\n// implementation \"androidx.work:work-rxjava2:$work_version\"\n```\n\n\n1. 创建一个简单的Worker\n```Kotlin\nclass ImageDownloadWorker(appContext: Context, workerParams: WorkerParameters) :\n    Worker(appContext, workerParams) {\n\n    override fun doWork(): Result {\n        // 获取图片下载链接\n        val imageUrl = inputData.getString(DOWNLOAD_IMAGE_URL)\n        return imageUrl?.let {\n            // 下载图片方法，下载成功返回true，失败返回false\n            val result = downloadImage(imageUrl)\n            // 如果下载失败，返回Result.retry()重试\n            return if(result) Result.success() else Result.retry()\n            Result.success()\n        } ?: Result.failure()\n    }\n\n    companion object {\n\n        private const val DOWNLOAD_IMAGE_URL = \"DOWNLOAD_IMAGE_URL\"\n\n        /**\n         * 执行图片下载任务，并返回任务信息的LiveData\n         */\n        fun execute(app: Application, imageUrl: String): LiveData<WorkInfo> {\n            // 设置传递的参数，图片下载地址\n            val inputData = Data.Builder()\n                .putString(DOWNLOAD_IMAGE_URL, imageUrl)\n                .build()\n            // 设置Work执行约束\n            val constraints = Constraints.Builder()\n                .setRequiredNetworkType(NetworkType.CONNECTED) // 有网络才执行\n                .build()\n            // 创建work请求\n            val workRequest = OneTimeWorkRequestBuilder<ImageDownloadWorker>()\n                .setConstraints(constraints)\n                .setInputData(inputData)\n                .build()\n            // 把work加入到队列中\n            WorkManager.getInstance(app).enqueue(workRequest)\n            // 返回work的livedata用于观察work的状态\n            return WorkManager.getInstance(app).getWorkInfoByIdLiveData(workRequest.id)\n        }\n    }\n}\n```\n\n2. 执行\n```Kotlin\nImageDownloadWorker.execute(\n    activity!!.application,\n    \"...一个图片URL...\"\n).observe(this, Observer {\n    if (it != null && it.state == WorkInfo.State.SUCCEEDED) {\n        showToast(\"图片下载成功\")\n    }\n})\n```\n3. 行为分析\n * 网络断开时，如果调用了执行`ImageDownloadWorker.execute()`把worker加入到队列中，下载不会执行，如果之后网络恢复，worker会立即执行\n * 任务执行过程中，直接退出app，任务会被提前结束；如果下次再次进入应用，它会再次执行（如果网络连接正常的话)\n * 下载途中网络中断，导致下载终止；我们在代码里返回了Result.retry(),那么任务会在适当的时候再次执行（重新下载）\n\n##### 概览图\n![概览图](/images/jetpack/workmanager.png)\n\n##### 请求类别（单次任务/重复执行任务）\n\n1. OneTimeWorkRequest\n\n2. PeriodicWorkRequest [参考文档](https://developer.android.google.cn/reference/androidx/work/PeriodicWorkRequest.Builder)\n\n##### 任务约束 Constraints [参考文档](https://developer.android.com/reference/androidx/work/Constraints)\n\n|方法名称|设置说明|\n|--|--|\n|requiresBatteryNotLow|需要当前电量充足|\n|requiresCharging|正在充电|\n|requiresDeviceIdle|设备空闲|\n|requiresStorageNotLow|存储空间充足|\n|setRequiredNetworkType|当前网络状态必须满足XX条件|\n\n|网络状态|说明|\n|--|--|\n|NetworkType.CONNECTED|有有效的网络连接|\n|NetworkType.METERED|要计量网络连接|\n|NetworkType.NOT_ROAMING|非漫游网络|\n|NetworkType.UNMETERED|要非计量网络连接|\n\n```Kotlin\n val constraints = Constraints.Builder()\n    .setRequiredNetworkType(NetworkType.CONNECTED) // 有网络才执行\n    .setRequiresDeviceIdle(true) // 设备空闲\n    .setRequiresCharging(true) // 设备充电\n    .build()\n```\n\n##### 取消任务\n```Kotlin\n// 可以根据任务的requestId来取消\nWorkManager.getInstance(appliction)\n    .cancelByWorkId(workRequestId);\n\n// 如果我们对任务分了组（addTag），我们可以就可以同时取消一个组的所有任务\n// 注意一个request是可以添加多个Tag，也就是可以同时属于不同的组，只要它在的任何一个组要被取消，就会被取消\n val workRequest = OneTimeWorkRequestBuilder<ImageDownloadWorker>()\n    .addTag(\"A GROUP\")\n    .build()\n\n// 取消操作\nWorkManager.getInstance(app).cancelAllWorkByTag(\"A GROUP\")\n```\n\n##### 参数传递\nWorkManager 为每个 WorkRequest 对象提供一个LiveData，LiveData持有一个WorkStatus对象，通过观察LiveData，我们可以确定任务的当前状态，并在任务完成后获取返回的任何值。\n\n```Kotlin\n\n// 在构件请求的时候使用setInputData把参数传人\nval inputData = Data.Builder()\n            .putString(\"downloadUrl\", \"https://www.xx.com/1.jpg\")\n            .build()\nWorkRequestBuilder<XXXXXXWorker>().setInputData(inputData)\n\n\n// 在Worker中使用Result.success(data)作为返回值\n...\noverride fun doWork(): Result {\n    // 获取图片下载链接\n    val imageUrl = inputData.getString(\"downloadUrl\")\n    return imageUrl?.let {\n        // 下载图片方法，下载成功返回true，失败返回false\n        val result = downloadImage(imageUrl)\n        // 如果下载失败，返回Result.retry()重试\n        return if(result) Result.success(\n            Data.Builder()\n                .putString(\"xxxx参数名称\", \"xxxx参数的值\")\n                .build()\n        ) else Result.retry()\n        Result.success()\n    } ?: Result.failure()\n}\n...\n\n// 在状态监听中可以获取传出的值\nImageDownloadWorker.execute(\n    activity!!.application,\n    \"...一个图片URL...\"\n).observe(this, Observer {\n    if (it != null && it.state == WorkInfo.State.SUCCEEDED) {\n        showToast(\"图片下载成功\")\n        // 获取传出的参数\n        val param =  it.outputData.getString(\"xxxx参数名称\")\n    }\n})\n```\n\n##### 任务链\n1. A->B->C\n```Kotlin\nWorkManager.getInstance(app)\n    .beginWith(A)\n    .then(B)\n    .then(C)\n    .enqueue(workRequest)\n```\n\n2. 使用WorkContinuation进行任务组合 ((A->B) & (C->D)) -> E\n```Kotlin\n// A->B\nval worksOne = WorkManager.getInstance(app)\n            .beginWith(A)\n            .then(B)\n// C->D\nval worksTwo = WorkManager.getInstance(app)\n            .beginWith(C)\n            .then(D)   \n\n// (worksOne & worksTwo) -> E   worksOne组和wokrsTwo组结束后才会执行E\nWorkContinuation.combine(listOf(worksOne, worksTwo))\n            .then(E)\n            .enqueue()         \n```\n\n详情参考源代码说明\n```Java\n/**\n    * Combines multiple {@link WorkContinuation}s as prerequisites for a new WorkContinuation to\n    * allow for complex chaining.  For example, to create a graph like this:\n    *\n    * <pre>\n    *     A       C\n    *     |       |\n    *     B       D\n    *     |       |\n    *     +-------+\n    *         |\n    *         E    </pre>\n    *\n    * you would write the following:\n    *\n    * <pre>\n    * {@code\n    *  WorkContinuation left = workManager.beginWith(A).then(B);\n    *  WorkContinuation right = workManager.beginWith(C).then(D);\n    *  WorkContinuation final = WorkContinuation.combine(Arrays.asList(left, right)).then(E);\n    *  final.enqueue();}</pre>\n    *\n    * @param continuations One or more {@link WorkContinuation}s that are prerequisites for the\n    *                      return value\n    * @return A {@link WorkContinuation} that allows further chaining\n    */\npublic static @NonNull WorkContinuation combine(@NonNull List<WorkContinuation> continuations) {\n    return continuations.get(0).combineInternal(continuations);\n}\n```\n\n<div class=\"tip\">WorkManager不保证worksOne 和 worksTwo中的任务同时执行；只能保证同一个组和中的任务按顺序执行（如A->B，必须A完成才执行B）；而One和Two都结束后就进入到E","source":"_posts/jetpack-workmanager.md","raw":"---\ntitle: JetPack-WorkManager预览\ndate: 2019-06-28 16:33:16\ntags: [\"android\",\"jetpack\"]\ncategories: Android开发\n---\n\n使用WorkManager，您可以轻松设置任务并将其交给系统，以便在您指定的条件下运行。\n<!--more-->\n\n##### 后台任务指南\n每个Android应用程序都有一个主线程，负责处理UI（包括测量和绘图视图），协调用户交互和接收生命周期事件。如果此线程上发生了太多工作，则应用程序会出现挂起或减速等情况，这会给用户带来不良好体验。任何长时间运行的计算和操作（如解码位图，访问磁盘或执行网络请求）都应在单独的后台线程上完成。通常，任何花费超过几毫秒的事情都应该委托给后台线程。当用户主动与应用程序交互时，可能需要执行其中一些任务。要了解如何在应用程序正在使用时在后台线程和主UI线程上运行任务，请查看线程解决方案指南。\n\n即使用户没有主动使用应用程序，应用程序也可能需要运行某些任务，例如定期与后端服务器同步或定期在应用程序中获取新内容。即使用户已完成与应用程序的交互，应用程序也可能要求服务立即运行完成。\n\n\n**后台任务**：实际做法选择途径\n\n1. 长时间运行的HTTP下载 --> DownloadManager\n2. 刻不容缓的任务 --> Foreground service（你不应该在后台处理，这是一个前台服务）\n3. 根据系统设备的状态触发执行 --> WorkManager\n4. 在某个精确的时间段执行 --> AlarmManager\n5. 如果以上都不是那么使用 WorkManager\n\n**前台服务**：对于需要立即运行并且必须执行完成的用户启动的工作，请使用前台服务。使用前台服务告诉系统应用程序正在执行重要操作并且不应该被杀死。通过通知托盘中的不允许通知，用户可以看到前台服务。\n\n##### WorkManager说明\n推荐：WorkManager适用于可延迟的任务，即：不需要立即运行，即使应用程序退出或设备重新启动也需要可靠运行。例如：\n\n1. 将日志或分析发送到后端服务\n2. 定期将应用程序数据与服务器同步\n\n注意：WorkManager不适用于在应用程序进程消失时可以安全终止的进程内后台工作，也不适用于需要立即执行的任务。请查看后台处理指南，了解哪种解决方案符合您的需求。\n\n优势：\n* 向后兼容API 14\n* 添加网络可用性或计费状态等工作约束\n* 设置异步一次性或定期任务\n* 可以监控和管理计划任务\n* 任务可以组合\n* 保证执行，程序设备重启也能确保任务执行\n* Adheres to power-saving features like Doze mode\n\n##### 简单使用\n\n0. 依赖包引入\n```Groovy\ndef work_version = '2.1.0-beta02'\nimplementation \"androidx.work:work-runtime-ktx:$work_version\"\n// implementation \"androidx.work:work-rxjava2:$work_version\"\n```\n\n\n1. 创建一个简单的Worker\n```Kotlin\nclass ImageDownloadWorker(appContext: Context, workerParams: WorkerParameters) :\n    Worker(appContext, workerParams) {\n\n    override fun doWork(): Result {\n        // 获取图片下载链接\n        val imageUrl = inputData.getString(DOWNLOAD_IMAGE_URL)\n        return imageUrl?.let {\n            // 下载图片方法，下载成功返回true，失败返回false\n            val result = downloadImage(imageUrl)\n            // 如果下载失败，返回Result.retry()重试\n            return if(result) Result.success() else Result.retry()\n            Result.success()\n        } ?: Result.failure()\n    }\n\n    companion object {\n\n        private const val DOWNLOAD_IMAGE_URL = \"DOWNLOAD_IMAGE_URL\"\n\n        /**\n         * 执行图片下载任务，并返回任务信息的LiveData\n         */\n        fun execute(app: Application, imageUrl: String): LiveData<WorkInfo> {\n            // 设置传递的参数，图片下载地址\n            val inputData = Data.Builder()\n                .putString(DOWNLOAD_IMAGE_URL, imageUrl)\n                .build()\n            // 设置Work执行约束\n            val constraints = Constraints.Builder()\n                .setRequiredNetworkType(NetworkType.CONNECTED) // 有网络才执行\n                .build()\n            // 创建work请求\n            val workRequest = OneTimeWorkRequestBuilder<ImageDownloadWorker>()\n                .setConstraints(constraints)\n                .setInputData(inputData)\n                .build()\n            // 把work加入到队列中\n            WorkManager.getInstance(app).enqueue(workRequest)\n            // 返回work的livedata用于观察work的状态\n            return WorkManager.getInstance(app).getWorkInfoByIdLiveData(workRequest.id)\n        }\n    }\n}\n```\n\n2. 执行\n```Kotlin\nImageDownloadWorker.execute(\n    activity!!.application,\n    \"...一个图片URL...\"\n).observe(this, Observer {\n    if (it != null && it.state == WorkInfo.State.SUCCEEDED) {\n        showToast(\"图片下载成功\")\n    }\n})\n```\n3. 行为分析\n * 网络断开时，如果调用了执行`ImageDownloadWorker.execute()`把worker加入到队列中，下载不会执行，如果之后网络恢复，worker会立即执行\n * 任务执行过程中，直接退出app，任务会被提前结束；如果下次再次进入应用，它会再次执行（如果网络连接正常的话)\n * 下载途中网络中断，导致下载终止；我们在代码里返回了Result.retry(),那么任务会在适当的时候再次执行（重新下载）\n\n##### 概览图\n![概览图](/images/jetpack/workmanager.png)\n\n##### 请求类别（单次任务/重复执行任务）\n\n1. OneTimeWorkRequest\n\n2. PeriodicWorkRequest [参考文档](https://developer.android.google.cn/reference/androidx/work/PeriodicWorkRequest.Builder)\n\n##### 任务约束 Constraints [参考文档](https://developer.android.com/reference/androidx/work/Constraints)\n\n|方法名称|设置说明|\n|--|--|\n|requiresBatteryNotLow|需要当前电量充足|\n|requiresCharging|正在充电|\n|requiresDeviceIdle|设备空闲|\n|requiresStorageNotLow|存储空间充足|\n|setRequiredNetworkType|当前网络状态必须满足XX条件|\n\n|网络状态|说明|\n|--|--|\n|NetworkType.CONNECTED|有有效的网络连接|\n|NetworkType.METERED|要计量网络连接|\n|NetworkType.NOT_ROAMING|非漫游网络|\n|NetworkType.UNMETERED|要非计量网络连接|\n\n```Kotlin\n val constraints = Constraints.Builder()\n    .setRequiredNetworkType(NetworkType.CONNECTED) // 有网络才执行\n    .setRequiresDeviceIdle(true) // 设备空闲\n    .setRequiresCharging(true) // 设备充电\n    .build()\n```\n\n##### 取消任务\n```Kotlin\n// 可以根据任务的requestId来取消\nWorkManager.getInstance(appliction)\n    .cancelByWorkId(workRequestId);\n\n// 如果我们对任务分了组（addTag），我们可以就可以同时取消一个组的所有任务\n// 注意一个request是可以添加多个Tag，也就是可以同时属于不同的组，只要它在的任何一个组要被取消，就会被取消\n val workRequest = OneTimeWorkRequestBuilder<ImageDownloadWorker>()\n    .addTag(\"A GROUP\")\n    .build()\n\n// 取消操作\nWorkManager.getInstance(app).cancelAllWorkByTag(\"A GROUP\")\n```\n\n##### 参数传递\nWorkManager 为每个 WorkRequest 对象提供一个LiveData，LiveData持有一个WorkStatus对象，通过观察LiveData，我们可以确定任务的当前状态，并在任务完成后获取返回的任何值。\n\n```Kotlin\n\n// 在构件请求的时候使用setInputData把参数传人\nval inputData = Data.Builder()\n            .putString(\"downloadUrl\", \"https://www.xx.com/1.jpg\")\n            .build()\nWorkRequestBuilder<XXXXXXWorker>().setInputData(inputData)\n\n\n// 在Worker中使用Result.success(data)作为返回值\n...\noverride fun doWork(): Result {\n    // 获取图片下载链接\n    val imageUrl = inputData.getString(\"downloadUrl\")\n    return imageUrl?.let {\n        // 下载图片方法，下载成功返回true，失败返回false\n        val result = downloadImage(imageUrl)\n        // 如果下载失败，返回Result.retry()重试\n        return if(result) Result.success(\n            Data.Builder()\n                .putString(\"xxxx参数名称\", \"xxxx参数的值\")\n                .build()\n        ) else Result.retry()\n        Result.success()\n    } ?: Result.failure()\n}\n...\n\n// 在状态监听中可以获取传出的值\nImageDownloadWorker.execute(\n    activity!!.application,\n    \"...一个图片URL...\"\n).observe(this, Observer {\n    if (it != null && it.state == WorkInfo.State.SUCCEEDED) {\n        showToast(\"图片下载成功\")\n        // 获取传出的参数\n        val param =  it.outputData.getString(\"xxxx参数名称\")\n    }\n})\n```\n\n##### 任务链\n1. A->B->C\n```Kotlin\nWorkManager.getInstance(app)\n    .beginWith(A)\n    .then(B)\n    .then(C)\n    .enqueue(workRequest)\n```\n\n2. 使用WorkContinuation进行任务组合 ((A->B) & (C->D)) -> E\n```Kotlin\n// A->B\nval worksOne = WorkManager.getInstance(app)\n            .beginWith(A)\n            .then(B)\n// C->D\nval worksTwo = WorkManager.getInstance(app)\n            .beginWith(C)\n            .then(D)   \n\n// (worksOne & worksTwo) -> E   worksOne组和wokrsTwo组结束后才会执行E\nWorkContinuation.combine(listOf(worksOne, worksTwo))\n            .then(E)\n            .enqueue()         \n```\n\n详情参考源代码说明\n```Java\n/**\n    * Combines multiple {@link WorkContinuation}s as prerequisites for a new WorkContinuation to\n    * allow for complex chaining.  For example, to create a graph like this:\n    *\n    * <pre>\n    *     A       C\n    *     |       |\n    *     B       D\n    *     |       |\n    *     +-------+\n    *         |\n    *         E    </pre>\n    *\n    * you would write the following:\n    *\n    * <pre>\n    * {@code\n    *  WorkContinuation left = workManager.beginWith(A).then(B);\n    *  WorkContinuation right = workManager.beginWith(C).then(D);\n    *  WorkContinuation final = WorkContinuation.combine(Arrays.asList(left, right)).then(E);\n    *  final.enqueue();}</pre>\n    *\n    * @param continuations One or more {@link WorkContinuation}s that are prerequisites for the\n    *                      return value\n    * @return A {@link WorkContinuation} that allows further chaining\n    */\npublic static @NonNull WorkContinuation combine(@NonNull List<WorkContinuation> continuations) {\n    return continuations.get(0).combineInternal(continuations);\n}\n```\n\n<div class=\"tip\">WorkManager不保证worksOne 和 worksTwo中的任务同时执行；只能保证同一个组和中的任务按顺序执行（如A->B，必须A完成才执行B）；而One和Two都结束后就进入到E","slug":"jetpack-workmanager","published":1,"updated":"2019-07-09T04:56:38.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld8t001qe8we4bk40y2y","content":"<p>使用WorkManager，您可以轻松设置任务并将其交给系统，以便在您指定的条件下运行。<br><a id=\"more\"></a></p>\n<h5 id=\"后台任务指南\"><a href=\"#后台任务指南\" class=\"headerlink\" title=\"后台任务指南\"></a>后台任务指南</h5><p>每个Android应用程序都有一个主线程，负责处理UI（包括测量和绘图视图），协调用户交互和接收生命周期事件。如果此线程上发生了太多工作，则应用程序会出现挂起或减速等情况，这会给用户带来不良好体验。任何长时间运行的计算和操作（如解码位图，访问磁盘或执行网络请求）都应在单独的后台线程上完成。通常，任何花费超过几毫秒的事情都应该委托给后台线程。当用户主动与应用程序交互时，可能需要执行其中一些任务。要了解如何在应用程序正在使用时在后台线程和主UI线程上运行任务，请查看线程解决方案指南。</p>\n<p>即使用户没有主动使用应用程序，应用程序也可能需要运行某些任务，例如定期与后端服务器同步或定期在应用程序中获取新内容。即使用户已完成与应用程序的交互，应用程序也可能要求服务立即运行完成。</p>\n<p><strong>后台任务</strong>：实际做法选择途径</p>\n<ol>\n<li>长时间运行的HTTP下载 –&gt; DownloadManager</li>\n<li>刻不容缓的任务 –&gt; Foreground service（你不应该在后台处理，这是一个前台服务）</li>\n<li>根据系统设备的状态触发执行 –&gt; WorkManager</li>\n<li>在某个精确的时间段执行 –&gt; AlarmManager</li>\n<li>如果以上都不是那么使用 WorkManager</li>\n</ol>\n<p><strong>前台服务</strong>：对于需要立即运行并且必须执行完成的用户启动的工作，请使用前台服务。使用前台服务告诉系统应用程序正在执行重要操作并且不应该被杀死。通过通知托盘中的不允许通知，用户可以看到前台服务。</p>\n<h5 id=\"WorkManager说明\"><a href=\"#WorkManager说明\" class=\"headerlink\" title=\"WorkManager说明\"></a>WorkManager说明</h5><p>推荐：WorkManager适用于可延迟的任务，即：不需要立即运行，即使应用程序退出或设备重新启动也需要可靠运行。例如：</p>\n<ol>\n<li>将日志或分析发送到后端服务</li>\n<li>定期将应用程序数据与服务器同步</li>\n</ol>\n<p>注意：WorkManager不适用于在应用程序进程消失时可以安全终止的进程内后台工作，也不适用于需要立即执行的任务。请查看后台处理指南，了解哪种解决方案符合您的需求。</p>\n<p>优势：</p>\n<ul>\n<li>向后兼容API 14</li>\n<li>添加网络可用性或计费状态等工作约束</li>\n<li>设置异步一次性或定期任务</li>\n<li>可以监控和管理计划任务</li>\n<li>任务可以组合</li>\n<li>保证执行，程序设备重启也能确保任务执行</li>\n<li>Adheres to power-saving features like Doze mode</li>\n</ul>\n<h5 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h5><ol start=\"0\">\n<li><p>依赖包引入</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> work_version = <span class=\"string\">'2.1.0-beta02'</span></span><br><span class=\"line\">implementation <span class=\"string\">\"androidx.work:work-runtime-ktx:$work_version\"</span></span><br><span class=\"line\"><span class=\"comment\">// implementation \"androidx.work:work-rxjava2:$work_version\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个简单的Worker</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDownloadWorker</span></span>(appContext: Context, workerParams: WorkerParameters) :</span><br><span class=\"line\">    Worker(appContext, workerParams) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doWork</span><span class=\"params\">()</span></span>: Result &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取图片下载链接</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> imageUrl = inputData.getString(DOWNLOAD_IMAGE_URL)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> imageUrl?.let &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 下载图片方法，下载成功返回true，失败返回false</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> result = downloadImage(imageUrl)</span><br><span class=\"line\">            <span class=\"comment\">// 如果下载失败，返回Result.retry()重试</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">if</span>(result) Result.success() <span class=\"keyword\">else</span> Result.retry()</span><br><span class=\"line\">            Result.success()</span><br><span class=\"line\">        &#125; ?: Result.failure()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> const <span class=\"keyword\">val</span> DOWNLOAD_IMAGE_URL = <span class=\"string\">\"DOWNLOAD_IMAGE_URL\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 执行图片下载任务，并返回任务信息的LiveData</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">execute</span><span class=\"params\">(app: <span class=\"type\">Application</span>, imageUrl: <span class=\"type\">String</span>)</span></span>: LiveData&lt;WorkInfo&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 设置传递的参数，图片下载地址</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> inputData = Data.Builder()</span><br><span class=\"line\">                .putString(DOWNLOAD_IMAGE_URL, imageUrl)</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">            <span class=\"comment\">// 设置Work执行约束</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> constraints = Constraints.Builder()</span><br><span class=\"line\">                .setRequiredNetworkType(NetworkType.CONNECTED) <span class=\"comment\">// 有网络才执行</span></span><br><span class=\"line\">                .build()</span><br><span class=\"line\">            <span class=\"comment\">// 创建work请求</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> workRequest = OneTimeWorkRequestBuilder&lt;ImageDownloadWorker&gt;()</span><br><span class=\"line\">                .setConstraints(constraints)</span><br><span class=\"line\">                .setInputData(inputData)</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">            <span class=\"comment\">// 把work加入到队列中</span></span><br><span class=\"line\">            WorkManager.getInstance(app).enqueue(workRequest)</span><br><span class=\"line\">            <span class=\"comment\">// 返回work的livedata用于观察work的状态</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> WorkManager.getInstance(app).getWorkInfoByIdLiveData(workRequest.id)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImageDownloadWorker.execute(</span><br><span class=\"line\">    activity!!.application,</span><br><span class=\"line\">    <span class=\"string\">\"...一个图片URL...\"</span></span><br><span class=\"line\">).observe(<span class=\"keyword\">this</span>, Observer &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it != <span class=\"literal\">null</span> &amp;&amp; it.state == WorkInfo.State.SUCCEEDED) &#123;</span><br><span class=\"line\">        showToast(<span class=\"string\">\"图片下载成功\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>行为分析</p>\n<ul>\n<li>网络断开时，如果调用了执行<code>ImageDownloadWorker.execute()</code>把worker加入到队列中，下载不会执行，如果之后网络恢复，worker会立即执行</li>\n<li>任务执行过程中，直接退出app，任务会被提前结束；如果下次再次进入应用，它会再次执行（如果网络连接正常的话)</li>\n<li>下载途中网络中断，导致下载终止；我们在代码里返回了Result.retry(),那么任务会在适当的时候再次执行（重新下载）</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"概览图\"><a href=\"#概览图\" class=\"headerlink\" title=\"概览图\"></a>概览图</h5><p><img src=\"/images/jetpack/workmanager.png\" alt=\"概览图\"></p>\n<h5 id=\"请求类别（单次任务-重复执行任务）\"><a href=\"#请求类别（单次任务-重复执行任务）\" class=\"headerlink\" title=\"请求类别（单次任务/重复执行任务）\"></a>请求类别（单次任务/重复执行任务）</h5><ol>\n<li><p>OneTimeWorkRequest</p>\n</li>\n<li><p>PeriodicWorkRequest <a href=\"https://developer.android.google.cn/reference/androidx/work/PeriodicWorkRequest.Builder\" target=\"_blank\" rel=\"noopener\">参考文档</a></p>\n</li>\n</ol>\n<h5 id=\"任务约束-Constraints-参考文档\"><a href=\"#任务约束-Constraints-参考文档\" class=\"headerlink\" title=\"任务约束 Constraints 参考文档\"></a>任务约束 Constraints <a href=\"https://developer.android.com/reference/androidx/work/Constraints\" target=\"_blank\" rel=\"noopener\">参考文档</a></h5><table>\n<thead>\n<tr>\n<th>方法名称</th>\n<th>设置说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>requiresBatteryNotLow</td>\n<td>需要当前电量充足</td>\n</tr>\n<tr>\n<td>requiresCharging</td>\n<td>正在充电</td>\n</tr>\n<tr>\n<td>requiresDeviceIdle</td>\n<td>设备空闲</td>\n</tr>\n<tr>\n<td>requiresStorageNotLow</td>\n<td>存储空间充足</td>\n</tr>\n<tr>\n<td>setRequiredNetworkType</td>\n<td>当前网络状态必须满足XX条件</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>网络状态</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NetworkType.CONNECTED</td>\n<td>有有效的网络连接</td>\n</tr>\n<tr>\n<td>NetworkType.METERED</td>\n<td>要计量网络连接</td>\n</tr>\n<tr>\n<td>NetworkType.NOT_ROAMING</td>\n<td>非漫游网络</td>\n</tr>\n<tr>\n<td>NetworkType.UNMETERED</td>\n<td>要非计量网络连接</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> constraints = Constraints.Builder()</span><br><span class=\"line\">   .setRequiredNetworkType(NetworkType.CONNECTED) <span class=\"comment\">// 有网络才执行</span></span><br><span class=\"line\">   .setRequiresDeviceIdle(<span class=\"literal\">true</span>) <span class=\"comment\">// 设备空闲</span></span><br><span class=\"line\">   .setRequiresCharging(<span class=\"literal\">true</span>) <span class=\"comment\">// 设备充电</span></span><br><span class=\"line\">   .build()</span><br></pre></td></tr></table></figure>\n<h5 id=\"取消任务\"><a href=\"#取消任务\" class=\"headerlink\" title=\"取消任务\"></a>取消任务</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以根据任务的requestId来取消</span></span><br><span class=\"line\">WorkManager.getInstance(appliction)</span><br><span class=\"line\">    .cancelByWorkId(workRequestId);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果我们对任务分了组（addTag），我们可以就可以同时取消一个组的所有任务</span></span><br><span class=\"line\"><span class=\"comment\">// 注意一个request是可以添加多个Tag，也就是可以同时属于不同的组，只要它在的任何一个组要被取消，就会被取消</span></span><br><span class=\"line\"> <span class=\"keyword\">val</span> workRequest = OneTimeWorkRequestBuilder&lt;ImageDownloadWorker&gt;()</span><br><span class=\"line\">    .addTag(<span class=\"string\">\"A GROUP\"</span>)</span><br><span class=\"line\">    .build()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取消操作</span></span><br><span class=\"line\">WorkManager.getInstance(app).cancelAllWorkByTag(<span class=\"string\">\"A GROUP\"</span>)</span><br></pre></td></tr></table></figure>\n<h5 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h5><p>WorkManager 为每个 WorkRequest 对象提供一个LiveData，LiveData持有一个WorkStatus对象，通过观察LiveData，我们可以确定任务的当前状态，并在任务完成后获取返回的任何值。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在构件请求的时候使用setInputData把参数传人</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> inputData = Data.Builder()</span><br><span class=\"line\">            .putString(<span class=\"string\">\"downloadUrl\"</span>, <span class=\"string\">\"https://www.xx.com/1.jpg\"</span>)</span><br><span class=\"line\">            .build()</span><br><span class=\"line\">WorkRequestBuilder&lt;XXXXXXWorker&gt;().setInputData(inputData)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在Worker中使用Result.success(data)作为返回值</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doWork</span><span class=\"params\">()</span></span>: Result &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取图片下载链接</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> imageUrl = inputData.getString(<span class=\"string\">\"downloadUrl\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> imageUrl?.let &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 下载图片方法，下载成功返回true，失败返回false</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> result = downloadImage(imageUrl)</span><br><span class=\"line\">        <span class=\"comment\">// 如果下载失败，返回Result.retry()重试</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">if</span>(result) Result.success(</span><br><span class=\"line\">            Data.Builder()</span><br><span class=\"line\">                .putString(<span class=\"string\">\"xxxx参数名称\"</span>, <span class=\"string\">\"xxxx参数的值\"</span>)</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">        ) <span class=\"keyword\">else</span> Result.retry()</span><br><span class=\"line\">        Result.success()</span><br><span class=\"line\">    &#125; ?: Result.failure()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在状态监听中可以获取传出的值</span></span><br><span class=\"line\">ImageDownloadWorker.execute(</span><br><span class=\"line\">    activity!!.application,</span><br><span class=\"line\">    <span class=\"string\">\"...一个图片URL...\"</span></span><br><span class=\"line\">).observe(<span class=\"keyword\">this</span>, Observer &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it != <span class=\"literal\">null</span> &amp;&amp; it.state == WorkInfo.State.SUCCEEDED) &#123;</span><br><span class=\"line\">        showToast(<span class=\"string\">\"图片下载成功\"</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 获取传出的参数</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> param =  it.outputData.getString(<span class=\"string\">\"xxxx参数名称\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"任务链\"><a href=\"#任务链\" class=\"headerlink\" title=\"任务链\"></a>任务链</h5><ol>\n<li><p>A-&gt;B-&gt;C</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(app)</span><br><span class=\"line\">    .beginWith(A)</span><br><span class=\"line\">    .then(B)</span><br><span class=\"line\">    .then(C)</span><br><span class=\"line\">    .enqueue(workRequest)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用WorkContinuation进行任务组合 ((A-&gt;B) &amp; (C-&gt;D)) -&gt; E</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A-&gt;B</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> worksOne = WorkManager.getInstance(app)</span><br><span class=\"line\">            .beginWith(A)</span><br><span class=\"line\">            .then(B)</span><br><span class=\"line\"><span class=\"comment\">// C-&gt;D</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> worksTwo = WorkManager.getInstance(app)</span><br><span class=\"line\">            .beginWith(C)</span><br><span class=\"line\">            .then(D)   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (worksOne &amp; worksTwo) -&gt; E   worksOne组和wokrsTwo组结束后才会执行E</span></span><br><span class=\"line\">WorkContinuation.combine(listOf(worksOne, worksTwo))</span><br><span class=\"line\">            .then(E)</span><br><span class=\"line\">            .enqueue()</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>详情参考源代码说明<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Combines multiple &#123;<span class=\"doctag\">@link</span> WorkContinuation&#125;s as prerequisites for a new WorkContinuation to</span></span><br><span class=\"line\"><span class=\"comment\">    * allow for complex chaining.  For example, to create a graph like this:</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * &lt;pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    *     A       C</span></span><br><span class=\"line\"><span class=\"comment\">    *     |       |</span></span><br><span class=\"line\"><span class=\"comment\">    *     B       D</span></span><br><span class=\"line\"><span class=\"comment\">    *     |       |</span></span><br><span class=\"line\"><span class=\"comment\">    *     +-------+</span></span><br><span class=\"line\"><span class=\"comment\">    *         |</span></span><br><span class=\"line\"><span class=\"comment\">    *         E    &lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * you would write the following:</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * &lt;pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    * &#123;<span class=\"doctag\">@code</span></span></span><br><span class=\"line\"><span class=\"comment\">    *  WorkContinuation left = workManager.beginWith(A).then(B);</span></span><br><span class=\"line\"><span class=\"comment\">    *  WorkContinuation right = workManager.beginWith(C).then(D);</span></span><br><span class=\"line\"><span class=\"comment\">    *  WorkContinuation final = WorkContinuation.combine(Arrays.asList(left, right)).then(E);</span></span><br><span class=\"line\"><span class=\"comment\">    *  final.enqueue();&#125;&lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> continuations One or more &#123;<span class=\"doctag\">@link</span> WorkContinuation&#125;s that are prerequisites for the</span></span><br><span class=\"line\"><span class=\"comment\">    *                      return value</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> A &#123;<span class=\"doctag\">@link</span> WorkContinuation&#125; that allows further chaining</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"meta\">@NonNull</span> <span class=\"function\">WorkContinuation <span class=\"title\">combine</span><span class=\"params\">(@NonNull List&lt;WorkContinuation&gt; continuations)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> continuations.get(<span class=\"number\">0</span>).combineInternal(continuations);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><div class=\"tip\">WorkManager不保证worksOne 和 worksTwo中的任务同时执行；只能保证同一个组和中的任务按顺序执行（如A-&gt;B，必须A完成才执行B）；而One和Two都结束后就进入到E</div></p>\n","site":{"data":{}},"excerpt":"<p>使用WorkManager，您可以轻松设置任务并将其交给系统，以便在您指定的条件下运行。<br>","more":"</p>\n<h5 id=\"后台任务指南\"><a href=\"#后台任务指南\" class=\"headerlink\" title=\"后台任务指南\"></a>后台任务指南</h5><p>每个Android应用程序都有一个主线程，负责处理UI（包括测量和绘图视图），协调用户交互和接收生命周期事件。如果此线程上发生了太多工作，则应用程序会出现挂起或减速等情况，这会给用户带来不良好体验。任何长时间运行的计算和操作（如解码位图，访问磁盘或执行网络请求）都应在单独的后台线程上完成。通常，任何花费超过几毫秒的事情都应该委托给后台线程。当用户主动与应用程序交互时，可能需要执行其中一些任务。要了解如何在应用程序正在使用时在后台线程和主UI线程上运行任务，请查看线程解决方案指南。</p>\n<p>即使用户没有主动使用应用程序，应用程序也可能需要运行某些任务，例如定期与后端服务器同步或定期在应用程序中获取新内容。即使用户已完成与应用程序的交互，应用程序也可能要求服务立即运行完成。</p>\n<p><strong>后台任务</strong>：实际做法选择途径</p>\n<ol>\n<li>长时间运行的HTTP下载 –&gt; DownloadManager</li>\n<li>刻不容缓的任务 –&gt; Foreground service（你不应该在后台处理，这是一个前台服务）</li>\n<li>根据系统设备的状态触发执行 –&gt; WorkManager</li>\n<li>在某个精确的时间段执行 –&gt; AlarmManager</li>\n<li>如果以上都不是那么使用 WorkManager</li>\n</ol>\n<p><strong>前台服务</strong>：对于需要立即运行并且必须执行完成的用户启动的工作，请使用前台服务。使用前台服务告诉系统应用程序正在执行重要操作并且不应该被杀死。通过通知托盘中的不允许通知，用户可以看到前台服务。</p>\n<h5 id=\"WorkManager说明\"><a href=\"#WorkManager说明\" class=\"headerlink\" title=\"WorkManager说明\"></a>WorkManager说明</h5><p>推荐：WorkManager适用于可延迟的任务，即：不需要立即运行，即使应用程序退出或设备重新启动也需要可靠运行。例如：</p>\n<ol>\n<li>将日志或分析发送到后端服务</li>\n<li>定期将应用程序数据与服务器同步</li>\n</ol>\n<p>注意：WorkManager不适用于在应用程序进程消失时可以安全终止的进程内后台工作，也不适用于需要立即执行的任务。请查看后台处理指南，了解哪种解决方案符合您的需求。</p>\n<p>优势：</p>\n<ul>\n<li>向后兼容API 14</li>\n<li>添加网络可用性或计费状态等工作约束</li>\n<li>设置异步一次性或定期任务</li>\n<li>可以监控和管理计划任务</li>\n<li>任务可以组合</li>\n<li>保证执行，程序设备重启也能确保任务执行</li>\n<li>Adheres to power-saving features like Doze mode</li>\n</ul>\n<h5 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h5><ol start=\"0\">\n<li><p>依赖包引入</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> work_version = <span class=\"string\">'2.1.0-beta02'</span></span><br><span class=\"line\">implementation <span class=\"string\">\"androidx.work:work-runtime-ktx:$work_version\"</span></span><br><span class=\"line\"><span class=\"comment\">// implementation \"androidx.work:work-rxjava2:$work_version\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个简单的Worker</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageDownloadWorker</span></span>(appContext: Context, workerParams: WorkerParameters) :</span><br><span class=\"line\">    Worker(appContext, workerParams) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doWork</span><span class=\"params\">()</span></span>: Result &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取图片下载链接</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> imageUrl = inputData.getString(DOWNLOAD_IMAGE_URL)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> imageUrl?.let &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 下载图片方法，下载成功返回true，失败返回false</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> result = downloadImage(imageUrl)</span><br><span class=\"line\">            <span class=\"comment\">// 如果下载失败，返回Result.retry()重试</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">if</span>(result) Result.success() <span class=\"keyword\">else</span> Result.retry()</span><br><span class=\"line\">            Result.success()</span><br><span class=\"line\">        &#125; ?: Result.failure()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> const <span class=\"keyword\">val</span> DOWNLOAD_IMAGE_URL = <span class=\"string\">\"DOWNLOAD_IMAGE_URL\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 执行图片下载任务，并返回任务信息的LiveData</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">execute</span><span class=\"params\">(app: <span class=\"type\">Application</span>, imageUrl: <span class=\"type\">String</span>)</span></span>: LiveData&lt;WorkInfo&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 设置传递的参数，图片下载地址</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> inputData = Data.Builder()</span><br><span class=\"line\">                .putString(DOWNLOAD_IMAGE_URL, imageUrl)</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">            <span class=\"comment\">// 设置Work执行约束</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> constraints = Constraints.Builder()</span><br><span class=\"line\">                .setRequiredNetworkType(NetworkType.CONNECTED) <span class=\"comment\">// 有网络才执行</span></span><br><span class=\"line\">                .build()</span><br><span class=\"line\">            <span class=\"comment\">// 创建work请求</span></span><br><span class=\"line\">            <span class=\"keyword\">val</span> workRequest = OneTimeWorkRequestBuilder&lt;ImageDownloadWorker&gt;()</span><br><span class=\"line\">                .setConstraints(constraints)</span><br><span class=\"line\">                .setInputData(inputData)</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">            <span class=\"comment\">// 把work加入到队列中</span></span><br><span class=\"line\">            WorkManager.getInstance(app).enqueue(workRequest)</span><br><span class=\"line\">            <span class=\"comment\">// 返回work的livedata用于观察work的状态</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> WorkManager.getInstance(app).getWorkInfoByIdLiveData(workRequest.id)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImageDownloadWorker.execute(</span><br><span class=\"line\">    activity!!.application,</span><br><span class=\"line\">    <span class=\"string\">\"...一个图片URL...\"</span></span><br><span class=\"line\">).observe(<span class=\"keyword\">this</span>, Observer &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it != <span class=\"literal\">null</span> &amp;&amp; it.state == WorkInfo.State.SUCCEEDED) &#123;</span><br><span class=\"line\">        showToast(<span class=\"string\">\"图片下载成功\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>行为分析</p>\n<ul>\n<li>网络断开时，如果调用了执行<code>ImageDownloadWorker.execute()</code>把worker加入到队列中，下载不会执行，如果之后网络恢复，worker会立即执行</li>\n<li>任务执行过程中，直接退出app，任务会被提前结束；如果下次再次进入应用，它会再次执行（如果网络连接正常的话)</li>\n<li>下载途中网络中断，导致下载终止；我们在代码里返回了Result.retry(),那么任务会在适当的时候再次执行（重新下载）</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"概览图\"><a href=\"#概览图\" class=\"headerlink\" title=\"概览图\"></a>概览图</h5><p><img src=\"/images/jetpack/workmanager.png\" alt=\"概览图\"></p>\n<h5 id=\"请求类别（单次任务-重复执行任务）\"><a href=\"#请求类别（单次任务-重复执行任务）\" class=\"headerlink\" title=\"请求类别（单次任务/重复执行任务）\"></a>请求类别（单次任务/重复执行任务）</h5><ol>\n<li><p>OneTimeWorkRequest</p>\n</li>\n<li><p>PeriodicWorkRequest <a href=\"https://developer.android.google.cn/reference/androidx/work/PeriodicWorkRequest.Builder\" target=\"_blank\" rel=\"noopener\">参考文档</a></p>\n</li>\n</ol>\n<h5 id=\"任务约束-Constraints-参考文档\"><a href=\"#任务约束-Constraints-参考文档\" class=\"headerlink\" title=\"任务约束 Constraints 参考文档\"></a>任务约束 Constraints <a href=\"https://developer.android.com/reference/androidx/work/Constraints\" target=\"_blank\" rel=\"noopener\">参考文档</a></h5><table>\n<thead>\n<tr>\n<th>方法名称</th>\n<th>设置说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>requiresBatteryNotLow</td>\n<td>需要当前电量充足</td>\n</tr>\n<tr>\n<td>requiresCharging</td>\n<td>正在充电</td>\n</tr>\n<tr>\n<td>requiresDeviceIdle</td>\n<td>设备空闲</td>\n</tr>\n<tr>\n<td>requiresStorageNotLow</td>\n<td>存储空间充足</td>\n</tr>\n<tr>\n<td>setRequiredNetworkType</td>\n<td>当前网络状态必须满足XX条件</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>网络状态</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NetworkType.CONNECTED</td>\n<td>有有效的网络连接</td>\n</tr>\n<tr>\n<td>NetworkType.METERED</td>\n<td>要计量网络连接</td>\n</tr>\n<tr>\n<td>NetworkType.NOT_ROAMING</td>\n<td>非漫游网络</td>\n</tr>\n<tr>\n<td>NetworkType.UNMETERED</td>\n<td>要非计量网络连接</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> constraints = Constraints.Builder()</span><br><span class=\"line\">   .setRequiredNetworkType(NetworkType.CONNECTED) <span class=\"comment\">// 有网络才执行</span></span><br><span class=\"line\">   .setRequiresDeviceIdle(<span class=\"literal\">true</span>) <span class=\"comment\">// 设备空闲</span></span><br><span class=\"line\">   .setRequiresCharging(<span class=\"literal\">true</span>) <span class=\"comment\">// 设备充电</span></span><br><span class=\"line\">   .build()</span><br></pre></td></tr></table></figure>\n<h5 id=\"取消任务\"><a href=\"#取消任务\" class=\"headerlink\" title=\"取消任务\"></a>取消任务</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以根据任务的requestId来取消</span></span><br><span class=\"line\">WorkManager.getInstance(appliction)</span><br><span class=\"line\">    .cancelByWorkId(workRequestId);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果我们对任务分了组（addTag），我们可以就可以同时取消一个组的所有任务</span></span><br><span class=\"line\"><span class=\"comment\">// 注意一个request是可以添加多个Tag，也就是可以同时属于不同的组，只要它在的任何一个组要被取消，就会被取消</span></span><br><span class=\"line\"> <span class=\"keyword\">val</span> workRequest = OneTimeWorkRequestBuilder&lt;ImageDownloadWorker&gt;()</span><br><span class=\"line\">    .addTag(<span class=\"string\">\"A GROUP\"</span>)</span><br><span class=\"line\">    .build()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取消操作</span></span><br><span class=\"line\">WorkManager.getInstance(app).cancelAllWorkByTag(<span class=\"string\">\"A GROUP\"</span>)</span><br></pre></td></tr></table></figure>\n<h5 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h5><p>WorkManager 为每个 WorkRequest 对象提供一个LiveData，LiveData持有一个WorkStatus对象，通过观察LiveData，我们可以确定任务的当前状态，并在任务完成后获取返回的任何值。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在构件请求的时候使用setInputData把参数传人</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> inputData = Data.Builder()</span><br><span class=\"line\">            .putString(<span class=\"string\">\"downloadUrl\"</span>, <span class=\"string\">\"https://www.xx.com/1.jpg\"</span>)</span><br><span class=\"line\">            .build()</span><br><span class=\"line\">WorkRequestBuilder&lt;XXXXXXWorker&gt;().setInputData(inputData)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在Worker中使用Result.success(data)作为返回值</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doWork</span><span class=\"params\">()</span></span>: Result &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取图片下载链接</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> imageUrl = inputData.getString(<span class=\"string\">\"downloadUrl\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> imageUrl?.let &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 下载图片方法，下载成功返回true，失败返回false</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> result = downloadImage(imageUrl)</span><br><span class=\"line\">        <span class=\"comment\">// 如果下载失败，返回Result.retry()重试</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">if</span>(result) Result.success(</span><br><span class=\"line\">            Data.Builder()</span><br><span class=\"line\">                .putString(<span class=\"string\">\"xxxx参数名称\"</span>, <span class=\"string\">\"xxxx参数的值\"</span>)</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">        ) <span class=\"keyword\">else</span> Result.retry()</span><br><span class=\"line\">        Result.success()</span><br><span class=\"line\">    &#125; ?: Result.failure()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在状态监听中可以获取传出的值</span></span><br><span class=\"line\">ImageDownloadWorker.execute(</span><br><span class=\"line\">    activity!!.application,</span><br><span class=\"line\">    <span class=\"string\">\"...一个图片URL...\"</span></span><br><span class=\"line\">).observe(<span class=\"keyword\">this</span>, Observer &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it != <span class=\"literal\">null</span> &amp;&amp; it.state == WorkInfo.State.SUCCEEDED) &#123;</span><br><span class=\"line\">        showToast(<span class=\"string\">\"图片下载成功\"</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 获取传出的参数</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> param =  it.outputData.getString(<span class=\"string\">\"xxxx参数名称\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"任务链\"><a href=\"#任务链\" class=\"headerlink\" title=\"任务链\"></a>任务链</h5><ol>\n<li><p>A-&gt;B-&gt;C</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WorkManager.getInstance(app)</span><br><span class=\"line\">    .beginWith(A)</span><br><span class=\"line\">    .then(B)</span><br><span class=\"line\">    .then(C)</span><br><span class=\"line\">    .enqueue(workRequest)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用WorkContinuation进行任务组合 ((A-&gt;B) &amp; (C-&gt;D)) -&gt; E</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A-&gt;B</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> worksOne = WorkManager.getInstance(app)</span><br><span class=\"line\">            .beginWith(A)</span><br><span class=\"line\">            .then(B)</span><br><span class=\"line\"><span class=\"comment\">// C-&gt;D</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> worksTwo = WorkManager.getInstance(app)</span><br><span class=\"line\">            .beginWith(C)</span><br><span class=\"line\">            .then(D)   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (worksOne &amp; worksTwo) -&gt; E   worksOne组和wokrsTwo组结束后才会执行E</span></span><br><span class=\"line\">WorkContinuation.combine(listOf(worksOne, worksTwo))</span><br><span class=\"line\">            .then(E)</span><br><span class=\"line\">            .enqueue()</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>详情参考源代码说明<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Combines multiple &#123;<span class=\"doctag\">@link</span> WorkContinuation&#125;s as prerequisites for a new WorkContinuation to</span></span><br><span class=\"line\"><span class=\"comment\">    * allow for complex chaining.  For example, to create a graph like this:</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * &lt;pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    *     A       C</span></span><br><span class=\"line\"><span class=\"comment\">    *     |       |</span></span><br><span class=\"line\"><span class=\"comment\">    *     B       D</span></span><br><span class=\"line\"><span class=\"comment\">    *     |       |</span></span><br><span class=\"line\"><span class=\"comment\">    *     +-------+</span></span><br><span class=\"line\"><span class=\"comment\">    *         |</span></span><br><span class=\"line\"><span class=\"comment\">    *         E    &lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * you would write the following:</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * &lt;pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    * &#123;<span class=\"doctag\">@code</span></span></span><br><span class=\"line\"><span class=\"comment\">    *  WorkContinuation left = workManager.beginWith(A).then(B);</span></span><br><span class=\"line\"><span class=\"comment\">    *  WorkContinuation right = workManager.beginWith(C).then(D);</span></span><br><span class=\"line\"><span class=\"comment\">    *  WorkContinuation final = WorkContinuation.combine(Arrays.asList(left, right)).then(E);</span></span><br><span class=\"line\"><span class=\"comment\">    *  final.enqueue();&#125;&lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> continuations One or more &#123;<span class=\"doctag\">@link</span> WorkContinuation&#125;s that are prerequisites for the</span></span><br><span class=\"line\"><span class=\"comment\">    *                      return value</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> A &#123;<span class=\"doctag\">@link</span> WorkContinuation&#125; that allows further chaining</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"meta\">@NonNull</span> <span class=\"function\">WorkContinuation <span class=\"title\">combine</span><span class=\"params\">(@NonNull List&lt;WorkContinuation&gt; continuations)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> continuations.get(<span class=\"number\">0</span>).combineInternal(continuations);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><div class=\"tip\">WorkManager不保证worksOne 和 worksTwo中的任务同时执行；只能保证同一个组和中的任务按顺序执行（如A-&gt;B，必须A完成才执行B）；而One和Two都结束后就进入到E</div></p>"},{"title":"mysql基础配置","date":"2018-08-13T03:44:30.000Z","_content":"\n#### MySQL  日常操作 (Linux) - 测试环境 Ubuntu 16.0.4 - 版本 mysql  Ver 14.14 Distrib 5.5.54\n\n1.查看 MySQL 版本 ，执行： mysql -V\n\n2.关闭 mysql，可用下列2种方法 \na. 执行： msyqladmin stop -u root -p 然后输入密码即可\nb. 执行 ：/etc/init.d/mysql stop\n\n3.启动 mysql 执行： /etc/init.d/mysql start\n\n4.重启 mysql 执行：/etc/init.d/mysql reload --好像没用了\n   或者 /etc/init.d/mysql restart (注意，重启要几秒时间)\n\n5.查看 mysql 监听的端口&地址\n执行：netstat   -nutlp|grep mysql\n\n（允许外网访问-所有ip）:监听了本机所有的IP\n`tcp         0          0.0.0.0:3306          0.0.0.0:*            LISTEN`\n\n（允许内网访问-所有ip）:仅监听本地端口，外网无法访问\n`tcp         0          127.0.0.1:3306          0.0.0.0:*          LISTEN`\n\n（允许外网访问-指定ip）:只允许指定的 IP 192.168.0.111 访问数据库\n`tcp         0          0.0.0.0:3306          192.168.0.111:*      LISTEN`\n\n6.修改mysql监听端口&地址---运行外网访问--远程访问数据库第一步\na.mysql 配置文件 /etc/mysql/my.cnf\t\nb.编辑此文件 vi /etc/mysql/my.cnf\n找到此行\nbind-address           =127.0.0.1\n修改为\nbind-address           =0.0.0.0\n或注释\n#bind-address          =127.0.0.1\n\n7.添加一个可以远程连接的账号\na.root身份登入： mysql -u root -p ，然后输入密码\nb.创建用户格式：grant 权限 on 数据库名称.表名称 to 用户名@'%' identified by '密码';\nc.立即刷新权限表：flush privileges\n\n例子：\na.添加|覆盖|修改zhangsan用户（可远程访问）,给予他所有数据库的所有权限,并设置其密码为\t\t\t\t123456789\ngrant all on \\*.\\* to zhangsan@'%' identified by '123456789';\n      \nb.常用权限 select,update,delete, ,create,drop,index,alter,grant,references特殊权限，一般不赋予(FILE、PROCESS、RELOAD和SHUTDOWN)\n\nc.移除权限：remove 权限 on 数据库名称.表名称 from 用户名称\n\n8.常用数据库管理工具 MySQL  Workbeach\n\n","source":"_posts/mysql-note-1.md","raw":"---\ntitle: mysql基础配置\ndate: 2018-08-13 11:44:30\ntags: mysql\ncategories: 数据库\n---\n\n#### MySQL  日常操作 (Linux) - 测试环境 Ubuntu 16.0.4 - 版本 mysql  Ver 14.14 Distrib 5.5.54\n\n1.查看 MySQL 版本 ，执行： mysql -V\n\n2.关闭 mysql，可用下列2种方法 \na. 执行： msyqladmin stop -u root -p 然后输入密码即可\nb. 执行 ：/etc/init.d/mysql stop\n\n3.启动 mysql 执行： /etc/init.d/mysql start\n\n4.重启 mysql 执行：/etc/init.d/mysql reload --好像没用了\n   或者 /etc/init.d/mysql restart (注意，重启要几秒时间)\n\n5.查看 mysql 监听的端口&地址\n执行：netstat   -nutlp|grep mysql\n\n（允许外网访问-所有ip）:监听了本机所有的IP\n`tcp         0          0.0.0.0:3306          0.0.0.0:*            LISTEN`\n\n（允许内网访问-所有ip）:仅监听本地端口，外网无法访问\n`tcp         0          127.0.0.1:3306          0.0.0.0:*          LISTEN`\n\n（允许外网访问-指定ip）:只允许指定的 IP 192.168.0.111 访问数据库\n`tcp         0          0.0.0.0:3306          192.168.0.111:*      LISTEN`\n\n6.修改mysql监听端口&地址---运行外网访问--远程访问数据库第一步\na.mysql 配置文件 /etc/mysql/my.cnf\t\nb.编辑此文件 vi /etc/mysql/my.cnf\n找到此行\nbind-address           =127.0.0.1\n修改为\nbind-address           =0.0.0.0\n或注释\n#bind-address          =127.0.0.1\n\n7.添加一个可以远程连接的账号\na.root身份登入： mysql -u root -p ，然后输入密码\nb.创建用户格式：grant 权限 on 数据库名称.表名称 to 用户名@'%' identified by '密码';\nc.立即刷新权限表：flush privileges\n\n例子：\na.添加|覆盖|修改zhangsan用户（可远程访问）,给予他所有数据库的所有权限,并设置其密码为\t\t\t\t123456789\ngrant all on \\*.\\* to zhangsan@'%' identified by '123456789';\n      \nb.常用权限 select,update,delete, ,create,drop,index,alter,grant,references特殊权限，一般不赋予(FILE、PROCESS、RELOAD和SHUTDOWN)\n\nc.移除权限：remove 权限 on 数据库名称.表名称 from 用户名称\n\n8.常用数据库管理工具 MySQL  Workbeach\n\n","slug":"mysql-note-1","published":1,"updated":"2019-07-12T03:05:59.140Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld8u001te8week6t58j9","content":"<h4 id=\"MySQL-日常操作-Linux-测试环境-Ubuntu-16-0-4-版本-mysql-Ver-14-14-Distrib-5-5-54\"><a href=\"#MySQL-日常操作-Linux-测试环境-Ubuntu-16-0-4-版本-mysql-Ver-14-14-Distrib-5-5-54\" class=\"headerlink\" title=\"MySQL  日常操作 (Linux) - 测试环境 Ubuntu 16.0.4 - 版本 mysql  Ver 14.14 Distrib 5.5.54\"></a>MySQL  日常操作 (Linux) - 测试环境 Ubuntu 16.0.4 - 版本 mysql  Ver 14.14 Distrib 5.5.54</h4><p>1.查看 MySQL 版本 ，执行： mysql -V</p>\n<p>2.关闭 mysql，可用下列2种方法<br>a. 执行： msyqladmin stop -u root -p 然后输入密码即可<br>b. 执行 ：/etc/init.d/mysql stop</p>\n<p>3.启动 mysql 执行： /etc/init.d/mysql start</p>\n<p>4.重启 mysql 执行：/etc/init.d/mysql reload –好像没用了<br>   或者 /etc/init.d/mysql restart (注意，重启要几秒时间)</p>\n<p>5.查看 mysql 监听的端口&amp;地址<br>执行：netstat   -nutlp|grep mysql</p>\n<p>（允许外网访问-所有ip）:监听了本机所有的IP<br><code>tcp         0          0.0.0.0:3306          0.0.0.0:*            LISTEN</code></p>\n<p>（允许内网访问-所有ip）:仅监听本地端口，外网无法访问<br><code>tcp         0          127.0.0.1:3306          0.0.0.0:*          LISTEN</code></p>\n<p>（允许外网访问-指定ip）:只允许指定的 IP 192.168.0.111 访问数据库<br><code>tcp         0          0.0.0.0:3306          192.168.0.111:*      LISTEN</code></p>\n<p>6.修改mysql监听端口&amp;地址—运行外网访问–远程访问数据库第一步<br>a.mysql 配置文件 /etc/mysql/my.cnf<br>b.编辑此文件 vi /etc/mysql/my.cnf<br>找到此行<br>bind-address           =127.0.0.1<br>修改为<br>bind-address           =0.0.0.0<br>或注释</p>\n<p>#bind-address          =127.0.0.1</p>\n<p>7.添加一个可以远程连接的账号<br>a.root身份登入： mysql -u root -p ，然后输入密码<br>b.创建用户格式：grant 权限 on 数据库名称.表名称 to 用户名@’%’ identified by ‘密码’;<br>c.立即刷新权限表：flush privileges</p>\n<p>例子：<br>a.添加|覆盖|修改zhangsan用户（可远程访问）,给予他所有数据库的所有权限,并设置其密码为                123456789<br>grant all on *.* to zhangsan@’%’ identified by ‘123456789’;</p>\n<p>b.常用权限 select,update,delete, ,create,drop,index,alter,grant,references特殊权限，一般不赋予(FILE、PROCESS、RELOAD和SHUTDOWN)</p>\n<p>c.移除权限：remove 权限 on 数据库名称.表名称 from 用户名称</p>\n<p>8.常用数据库管理工具 MySQL  Workbeach</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"MySQL-日常操作-Linux-测试环境-Ubuntu-16-0-4-版本-mysql-Ver-14-14-Distrib-5-5-54\"><a href=\"#MySQL-日常操作-Linux-测试环境-Ubuntu-16-0-4-版本-mysql-Ver-14-14-Distrib-5-5-54\" class=\"headerlink\" title=\"MySQL  日常操作 (Linux) - 测试环境 Ubuntu 16.0.4 - 版本 mysql  Ver 14.14 Distrib 5.5.54\"></a>MySQL  日常操作 (Linux) - 测试环境 Ubuntu 16.0.4 - 版本 mysql  Ver 14.14 Distrib 5.5.54</h4><p>1.查看 MySQL 版本 ，执行： mysql -V</p>\n<p>2.关闭 mysql，可用下列2种方法<br>a. 执行： msyqladmin stop -u root -p 然后输入密码即可<br>b. 执行 ：/etc/init.d/mysql stop</p>\n<p>3.启动 mysql 执行： /etc/init.d/mysql start</p>\n<p>4.重启 mysql 执行：/etc/init.d/mysql reload –好像没用了<br>   或者 /etc/init.d/mysql restart (注意，重启要几秒时间)</p>\n<p>5.查看 mysql 监听的端口&amp;地址<br>执行：netstat   -nutlp|grep mysql</p>\n<p>（允许外网访问-所有ip）:监听了本机所有的IP<br><code>tcp         0          0.0.0.0:3306          0.0.0.0:*            LISTEN</code></p>\n<p>（允许内网访问-所有ip）:仅监听本地端口，外网无法访问<br><code>tcp         0          127.0.0.1:3306          0.0.0.0:*          LISTEN</code></p>\n<p>（允许外网访问-指定ip）:只允许指定的 IP 192.168.0.111 访问数据库<br><code>tcp         0          0.0.0.0:3306          192.168.0.111:*      LISTEN</code></p>\n<p>6.修改mysql监听端口&amp;地址—运行外网访问–远程访问数据库第一步<br>a.mysql 配置文件 /etc/mysql/my.cnf<br>b.编辑此文件 vi /etc/mysql/my.cnf<br>找到此行<br>bind-address           =127.0.0.1<br>修改为<br>bind-address           =0.0.0.0<br>或注释</p>\n<p>#bind-address          =127.0.0.1</p>\n<p>7.添加一个可以远程连接的账号<br>a.root身份登入： mysql -u root -p ，然后输入密码<br>b.创建用户格式：grant 权限 on 数据库名称.表名称 to 用户名@’%’ identified by ‘密码’;<br>c.立即刷新权限表：flush privileges</p>\n<p>例子：<br>a.添加|覆盖|修改zhangsan用户（可远程访问）,给予他所有数据库的所有权限,并设置其密码为                123456789<br>grant all on *.* to zhangsan@’%’ identified by ‘123456789’;</p>\n<p>b.常用权限 select,update,delete, ,create,drop,index,alter,grant,references特殊权限，一般不赋予(FILE、PROCESS、RELOAD和SHUTDOWN)</p>\n<p>c.移除权限：remove 权限 on 数据库名称.表名称 from 用户名称</p>\n<p>8.常用数据库管理工具 MySQL  Workbeach</p>\n"},{"title":"MySQL 8","date":"2018-08-21T14:29:44.000Z","_content":"\n#### MySQL文档存储\nMySQL文档存储允许开发人员同时使用关系型数据表结构和不带表结构的JSON数据。为了实现这个功能MySQL提供了X Dev API, 使您能够以快速且自然的使用JSON文档, 从而将一个强大的焦点放在 CRUD 上。这个X协议具有高度可伸缩性, 并针对 CRUD 和 SQL API 操作进行了优化。【CRUD-创建，读取，更新，删除】\n\n##### 灵活\nMySQL 文档存储为用户提供了开发传统 SQL 关系应用程序和 NoSQL 无架构文档数据库应用程序的最大灵活性。这样消除了对单独的 NoSQL 文档数据库的需要。开发人员可以在同一数据库中混合和匹配关系数据和 JSON 文档以及相同的应用程序。例如, 可以在同一应用程序中查询两个数据模型, 结果可以是表、表格或 JSON 格式。\n![](/images/mysql/mysql_document_store_architecture.png)\n\n##### 高度可靠, 完全一致\nMySQL 文档存储为无架构的 JSON 文档提供多文档事务支持和完全 ACID 遵从性。随着 InnoDB 作为文档存储背后的存储引擎, 您可以获得与关系数据相同的数据保证和性能优势。这保证了用户获得数据的可靠性与完整的数据一致性。这也使得 MySQL 文档存储易于管理。\n\n##### 高可用性\nmysql 文档存储利用 mysql 组复制和 InnoDB 集群的所有优点来扩展应用程序并实现高可用性。文档在高可用性组的所有成员之间复制, 事务可以跨主机同步。任何一个主机都可以从另一台组件立刻接管事务, 如果失败, 几乎不需要多少响应时间。\n\n##### 在线热备份\n正如文档存储利用了组复制和 InnoDB 群集一样, 它也可以透明地与 MySQL 企业备份一起工作。用户可以对文档进行完整、增量和部分备份。所有文档数据都与备份完成时的时间点一致。用户还可以灵活地执行时间点恢复, 以使用 MySQL binlog 恢复到特定事务。\n\n##### 安全\nMySQL 和文档存储区是安全的。此外, MySQL 企业版的所有高级安全功能 (如透明数据加密 (TDE)、审核、高级身份验证和防火墙) 都有助于最大限度地提高安全性。\n\n##### 报告和分析\nMySQL 文档存储为您提供了执行 CRUD 操作的简单性以及 SQL 从 JSON 文档中提取数据的能力。有关SQL以及所有流行的报告和分析工具都可用。\n\n##### 使用简单\nMySQL 文档存储提供了支持多种语言支持的简单且流畅的 CRUD api, 方便开发不同语言的应用程序。\n\n##### 体系结构\nMySQL 文档存储体系结构由以下组件组成:\n\n* **Native JSON Document Storage** - MySQL provides a native JSON datatype is efficiently stored in binary with the ability to create virtual columns that can be indexed. JSON Documents are automatically validated.\n* **X Plugin** - The X Plugin enables MySQL to use the X Protocol and uses Connectors and the Shell to act as clients to the server.\n* **X Protocol** - The X Protocol is a new client protocol based on top of the Protobuf library, and works for both, CRUD and SQL operations.\n* **X DevAPI** - The X DevAPI is a new, modern, async developer API for CRUD and SQL operations on top of X Protocol. It introduces Collections as new Schema objects. Documents are stored in Collections and have their dedicated CRUD operation set.\n* **MySQL Shell** - The MySQL Shell is an interactive Javascript, Python, or SQL interface supporting development and administration for the MySQL Server. You can use the MySQL Shell to perform data queries and updates as well as various administration operations.\n* **MySQL Connectors** - The following MySQL Connectors support the X Protocol and enable you to use X DevAPI in your chosen language.\n    * MySQL Connector/Node.js\n    * MySQL Connector/PHP\n    * MySQL Connector/Python\n    * MySQL Connector/J\n    * MySQL Connector/NET\n    * MySQL Connector/C++","source":"_posts/mysql-note-2.md","raw":"---\ntitle: MySQL 8\ndate: 2018-08-21 22:29:44\ntags: mysql\ncategories: 数据库\n---\n\n#### MySQL文档存储\nMySQL文档存储允许开发人员同时使用关系型数据表结构和不带表结构的JSON数据。为了实现这个功能MySQL提供了X Dev API, 使您能够以快速且自然的使用JSON文档, 从而将一个强大的焦点放在 CRUD 上。这个X协议具有高度可伸缩性, 并针对 CRUD 和 SQL API 操作进行了优化。【CRUD-创建，读取，更新，删除】\n\n##### 灵活\nMySQL 文档存储为用户提供了开发传统 SQL 关系应用程序和 NoSQL 无架构文档数据库应用程序的最大灵活性。这样消除了对单独的 NoSQL 文档数据库的需要。开发人员可以在同一数据库中混合和匹配关系数据和 JSON 文档以及相同的应用程序。例如, 可以在同一应用程序中查询两个数据模型, 结果可以是表、表格或 JSON 格式。\n![](/images/mysql/mysql_document_store_architecture.png)\n\n##### 高度可靠, 完全一致\nMySQL 文档存储为无架构的 JSON 文档提供多文档事务支持和完全 ACID 遵从性。随着 InnoDB 作为文档存储背后的存储引擎, 您可以获得与关系数据相同的数据保证和性能优势。这保证了用户获得数据的可靠性与完整的数据一致性。这也使得 MySQL 文档存储易于管理。\n\n##### 高可用性\nmysql 文档存储利用 mysql 组复制和 InnoDB 集群的所有优点来扩展应用程序并实现高可用性。文档在高可用性组的所有成员之间复制, 事务可以跨主机同步。任何一个主机都可以从另一台组件立刻接管事务, 如果失败, 几乎不需要多少响应时间。\n\n##### 在线热备份\n正如文档存储利用了组复制和 InnoDB 群集一样, 它也可以透明地与 MySQL 企业备份一起工作。用户可以对文档进行完整、增量和部分备份。所有文档数据都与备份完成时的时间点一致。用户还可以灵活地执行时间点恢复, 以使用 MySQL binlog 恢复到特定事务。\n\n##### 安全\nMySQL 和文档存储区是安全的。此外, MySQL 企业版的所有高级安全功能 (如透明数据加密 (TDE)、审核、高级身份验证和防火墙) 都有助于最大限度地提高安全性。\n\n##### 报告和分析\nMySQL 文档存储为您提供了执行 CRUD 操作的简单性以及 SQL 从 JSON 文档中提取数据的能力。有关SQL以及所有流行的报告和分析工具都可用。\n\n##### 使用简单\nMySQL 文档存储提供了支持多种语言支持的简单且流畅的 CRUD api, 方便开发不同语言的应用程序。\n\n##### 体系结构\nMySQL 文档存储体系结构由以下组件组成:\n\n* **Native JSON Document Storage** - MySQL provides a native JSON datatype is efficiently stored in binary with the ability to create virtual columns that can be indexed. JSON Documents are automatically validated.\n* **X Plugin** - The X Plugin enables MySQL to use the X Protocol and uses Connectors and the Shell to act as clients to the server.\n* **X Protocol** - The X Protocol is a new client protocol based on top of the Protobuf library, and works for both, CRUD and SQL operations.\n* **X DevAPI** - The X DevAPI is a new, modern, async developer API for CRUD and SQL operations on top of X Protocol. It introduces Collections as new Schema objects. Documents are stored in Collections and have their dedicated CRUD operation set.\n* **MySQL Shell** - The MySQL Shell is an interactive Javascript, Python, or SQL interface supporting development and administration for the MySQL Server. You can use the MySQL Shell to perform data queries and updates as well as various administration operations.\n* **MySQL Connectors** - The following MySQL Connectors support the X Protocol and enable you to use X DevAPI in your chosen language.\n    * MySQL Connector/Node.js\n    * MySQL Connector/PHP\n    * MySQL Connector/Python\n    * MySQL Connector/J\n    * MySQL Connector/NET\n    * MySQL Connector/C++","slug":"mysql-note-2","published":1,"updated":"2019-07-12T03:05:56.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld8v001ve8wepilsejrj","content":"<h4 id=\"MySQL文档存储\"><a href=\"#MySQL文档存储\" class=\"headerlink\" title=\"MySQL文档存储\"></a>MySQL文档存储</h4><p>MySQL文档存储允许开发人员同时使用关系型数据表结构和不带表结构的JSON数据。为了实现这个功能MySQL提供了X Dev API, 使您能够以快速且自然的使用JSON文档, 从而将一个强大的焦点放在 CRUD 上。这个X协议具有高度可伸缩性, 并针对 CRUD 和 SQL API 操作进行了优化。【CRUD-创建，读取，更新，删除】</p>\n<h5 id=\"灵活\"><a href=\"#灵活\" class=\"headerlink\" title=\"灵活\"></a>灵活</h5><p>MySQL 文档存储为用户提供了开发传统 SQL 关系应用程序和 NoSQL 无架构文档数据库应用程序的最大灵活性。这样消除了对单独的 NoSQL 文档数据库的需要。开发人员可以在同一数据库中混合和匹配关系数据和 JSON 文档以及相同的应用程序。例如, 可以在同一应用程序中查询两个数据模型, 结果可以是表、表格或 JSON 格式。<br><img src=\"/images/mysql/mysql_document_store_architecture.png\" alt=\"\"></p>\n<h5 id=\"高度可靠-完全一致\"><a href=\"#高度可靠-完全一致\" class=\"headerlink\" title=\"高度可靠, 完全一致\"></a>高度可靠, 完全一致</h5><p>MySQL 文档存储为无架构的 JSON 文档提供多文档事务支持和完全 ACID 遵从性。随着 InnoDB 作为文档存储背后的存储引擎, 您可以获得与关系数据相同的数据保证和性能优势。这保证了用户获得数据的可靠性与完整的数据一致性。这也使得 MySQL 文档存储易于管理。</p>\n<h5 id=\"高可用性\"><a href=\"#高可用性\" class=\"headerlink\" title=\"高可用性\"></a>高可用性</h5><p>mysql 文档存储利用 mysql 组复制和 InnoDB 集群的所有优点来扩展应用程序并实现高可用性。文档在高可用性组的所有成员之间复制, 事务可以跨主机同步。任何一个主机都可以从另一台组件立刻接管事务, 如果失败, 几乎不需要多少响应时间。</p>\n<h5 id=\"在线热备份\"><a href=\"#在线热备份\" class=\"headerlink\" title=\"在线热备份\"></a>在线热备份</h5><p>正如文档存储利用了组复制和 InnoDB 群集一样, 它也可以透明地与 MySQL 企业备份一起工作。用户可以对文档进行完整、增量和部分备份。所有文档数据都与备份完成时的时间点一致。用户还可以灵活地执行时间点恢复, 以使用 MySQL binlog 恢复到特定事务。</p>\n<h5 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h5><p>MySQL 和文档存储区是安全的。此外, MySQL 企业版的所有高级安全功能 (如透明数据加密 (TDE)、审核、高级身份验证和防火墙) 都有助于最大限度地提高安全性。</p>\n<h5 id=\"报告和分析\"><a href=\"#报告和分析\" class=\"headerlink\" title=\"报告和分析\"></a>报告和分析</h5><p>MySQL 文档存储为您提供了执行 CRUD 操作的简单性以及 SQL 从 JSON 文档中提取数据的能力。有关SQL以及所有流行的报告和分析工具都可用。</p>\n<h5 id=\"使用简单\"><a href=\"#使用简单\" class=\"headerlink\" title=\"使用简单\"></a>使用简单</h5><p>MySQL 文档存储提供了支持多种语言支持的简单且流畅的 CRUD api, 方便开发不同语言的应用程序。</p>\n<h5 id=\"体系结构\"><a href=\"#体系结构\" class=\"headerlink\" title=\"体系结构\"></a>体系结构</h5><p>MySQL 文档存储体系结构由以下组件组成:</p>\n<ul>\n<li><strong>Native JSON Document Storage</strong> - MySQL provides a native JSON datatype is efficiently stored in binary with the ability to create virtual columns that can be indexed. JSON Documents are automatically validated.</li>\n<li><strong>X Plugin</strong> - The X Plugin enables MySQL to use the X Protocol and uses Connectors and the Shell to act as clients to the server.</li>\n<li><strong>X Protocol</strong> - The X Protocol is a new client protocol based on top of the Protobuf library, and works for both, CRUD and SQL operations.</li>\n<li><strong>X DevAPI</strong> - The X DevAPI is a new, modern, async developer API for CRUD and SQL operations on top of X Protocol. It introduces Collections as new Schema objects. Documents are stored in Collections and have their dedicated CRUD operation set.</li>\n<li><strong>MySQL Shell</strong> - The MySQL Shell is an interactive Javascript, Python, or SQL interface supporting development and administration for the MySQL Server. You can use the MySQL Shell to perform data queries and updates as well as various administration operations.</li>\n<li><strong>MySQL Connectors</strong> - The following MySQL Connectors support the X Protocol and enable you to use X DevAPI in your chosen language.<ul>\n<li>MySQL Connector/Node.js</li>\n<li>MySQL Connector/PHP</li>\n<li>MySQL Connector/Python</li>\n<li>MySQL Connector/J</li>\n<li>MySQL Connector/NET</li>\n<li>MySQL Connector/C++</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"MySQL文档存储\"><a href=\"#MySQL文档存储\" class=\"headerlink\" title=\"MySQL文档存储\"></a>MySQL文档存储</h4><p>MySQL文档存储允许开发人员同时使用关系型数据表结构和不带表结构的JSON数据。为了实现这个功能MySQL提供了X Dev API, 使您能够以快速且自然的使用JSON文档, 从而将一个强大的焦点放在 CRUD 上。这个X协议具有高度可伸缩性, 并针对 CRUD 和 SQL API 操作进行了优化。【CRUD-创建，读取，更新，删除】</p>\n<h5 id=\"灵活\"><a href=\"#灵活\" class=\"headerlink\" title=\"灵活\"></a>灵活</h5><p>MySQL 文档存储为用户提供了开发传统 SQL 关系应用程序和 NoSQL 无架构文档数据库应用程序的最大灵活性。这样消除了对单独的 NoSQL 文档数据库的需要。开发人员可以在同一数据库中混合和匹配关系数据和 JSON 文档以及相同的应用程序。例如, 可以在同一应用程序中查询两个数据模型, 结果可以是表、表格或 JSON 格式。<br><img src=\"/images/mysql/mysql_document_store_architecture.png\" alt=\"\"></p>\n<h5 id=\"高度可靠-完全一致\"><a href=\"#高度可靠-完全一致\" class=\"headerlink\" title=\"高度可靠, 完全一致\"></a>高度可靠, 完全一致</h5><p>MySQL 文档存储为无架构的 JSON 文档提供多文档事务支持和完全 ACID 遵从性。随着 InnoDB 作为文档存储背后的存储引擎, 您可以获得与关系数据相同的数据保证和性能优势。这保证了用户获得数据的可靠性与完整的数据一致性。这也使得 MySQL 文档存储易于管理。</p>\n<h5 id=\"高可用性\"><a href=\"#高可用性\" class=\"headerlink\" title=\"高可用性\"></a>高可用性</h5><p>mysql 文档存储利用 mysql 组复制和 InnoDB 集群的所有优点来扩展应用程序并实现高可用性。文档在高可用性组的所有成员之间复制, 事务可以跨主机同步。任何一个主机都可以从另一台组件立刻接管事务, 如果失败, 几乎不需要多少响应时间。</p>\n<h5 id=\"在线热备份\"><a href=\"#在线热备份\" class=\"headerlink\" title=\"在线热备份\"></a>在线热备份</h5><p>正如文档存储利用了组复制和 InnoDB 群集一样, 它也可以透明地与 MySQL 企业备份一起工作。用户可以对文档进行完整、增量和部分备份。所有文档数据都与备份完成时的时间点一致。用户还可以灵活地执行时间点恢复, 以使用 MySQL binlog 恢复到特定事务。</p>\n<h5 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h5><p>MySQL 和文档存储区是安全的。此外, MySQL 企业版的所有高级安全功能 (如透明数据加密 (TDE)、审核、高级身份验证和防火墙) 都有助于最大限度地提高安全性。</p>\n<h5 id=\"报告和分析\"><a href=\"#报告和分析\" class=\"headerlink\" title=\"报告和分析\"></a>报告和分析</h5><p>MySQL 文档存储为您提供了执行 CRUD 操作的简单性以及 SQL 从 JSON 文档中提取数据的能力。有关SQL以及所有流行的报告和分析工具都可用。</p>\n<h5 id=\"使用简单\"><a href=\"#使用简单\" class=\"headerlink\" title=\"使用简单\"></a>使用简单</h5><p>MySQL 文档存储提供了支持多种语言支持的简单且流畅的 CRUD api, 方便开发不同语言的应用程序。</p>\n<h5 id=\"体系结构\"><a href=\"#体系结构\" class=\"headerlink\" title=\"体系结构\"></a>体系结构</h5><p>MySQL 文档存储体系结构由以下组件组成:</p>\n<ul>\n<li><strong>Native JSON Document Storage</strong> - MySQL provides a native JSON datatype is efficiently stored in binary with the ability to create virtual columns that can be indexed. JSON Documents are automatically validated.</li>\n<li><strong>X Plugin</strong> - The X Plugin enables MySQL to use the X Protocol and uses Connectors and the Shell to act as clients to the server.</li>\n<li><strong>X Protocol</strong> - The X Protocol is a new client protocol based on top of the Protobuf library, and works for both, CRUD and SQL operations.</li>\n<li><strong>X DevAPI</strong> - The X DevAPI is a new, modern, async developer API for CRUD and SQL operations on top of X Protocol. It introduces Collections as new Schema objects. Documents are stored in Collections and have their dedicated CRUD operation set.</li>\n<li><strong>MySQL Shell</strong> - The MySQL Shell is an interactive Javascript, Python, or SQL interface supporting development and administration for the MySQL Server. You can use the MySQL Shell to perform data queries and updates as well as various administration operations.</li>\n<li><strong>MySQL Connectors</strong> - The following MySQL Connectors support the X Protocol and enable you to use X DevAPI in your chosen language.<ul>\n<li>MySQL Connector/Node.js</li>\n<li>MySQL Connector/PHP</li>\n<li>MySQL Connector/Python</li>\n<li>MySQL Connector/J</li>\n<li>MySQL Connector/NET</li>\n<li>MySQL Connector/C++</li>\n</ul>\n</li>\n</ul>\n"},{"title":"MySQL 8 Chapter 11 数据类型","date":"2018-11-13T03:10:49.000Z","_content":"\n### 11.2 数值类型\n\nMySQL支持所有的标准SQL数值数据类型。包括精确的类型（INTEGER，SMALLINT，DECIMAL 和 NUMERIC）,以及近似值（FLOAT，REAL和DOUBLE PRECISION）。关键词INT是INTEGER同义词，关键字DEC和FIXED是DECIMAL的同义词。MySQL将DOUBLE视为DOUBLE PRECISION（非标准扩展）的同义词。 除非启用REAL_AS_FLOAT SQL模式，否则MySQL还将REAL视为DOUBLE PRECISION（非标准变体）的同义词。\n<!--more-->\n\nBIT数据类型用于存储位值，并支持MyISAM，MEMORY，InnoDB和NDB表。 有关MySQL如何处理超出范围值到列和溢出的信息，请参见第11.2.6节“超出范围和溢出处理”。\n\n有关数字类型存储要求的信息，请参见第11.8节“数据类型存储要求”。\n\n用于计算数字操作数的结果的数据类型取决于操作数的类型和对它们执行的操作。 有关更多信息，请参见第12.6.1节“算术运算符”。\n\n#### 11.2.1整数类型（精确值） - INTEGER，INT，SMALLINT，TINYINT，MEDIUMINT，BIGINT\n\nMySQL支持SQL标准整数类型INTEGER（或INT）和SMALLINT。 作为标准的扩展，MySQL还支持整数类型TINYINT，MEDIUMINT和BIGINT。 下表显示了每种整数类型所需的存储和范围。\n\n| 类型      | 存储（Bytes） | 最小值（有符号） | 最大值（有符号） | 最小值（无符号） | 最大值（无符号） |\n|-----------|---------------|------------------|------------------|------------------|------------------|\n| TINYINT   | 1             | -128             | 127              | 0                | 255              |\n| SMALLINT  | 2             | -32768           | 32767            | 0                | 65535            |\n| MEDIUMINT | 3             | -8388608         | 8388607          | 0                | 16777215         |\n| INT       | 4             | -2147483648      | 2147483647       | 0                | 4294967295       |\n| BIGINT    | 5             | -263             | 263-1            | 0                | 264-1            |\n\n#### 11.2.2定点类型（精确值） - DECIMAL，NUMERIC\n\nDECIMAL和NUMERIC类型存储精确的数字数据值。 在保持精确精度很重要时使用这些类型，例如使用货币数据。 在MySQL中，NUMERIC实现为DECIMAL，因此以下有关DECIMAL的备注同样适用于NUMERIC。\nMySQL以二进制格式存储DECIMAL值。 请参见第12.23节“精确算术”。\n\n在DECIMAL列声明中，可以（通常是）指定精度和标度; 对于\n例：\n```SQL\nsalary DECIMAL(5,2)\n```\n在这个例子中，5是精度，2是刻度。 精度表示为值存储的有效位数，刻度表示小数点后可存储的位数。\n\n标准SQL要求DECIMAL(5,2)能够存储五位数和两位小数的任何值，因此可以存储在salary列中的值的范围是-999.99到999.99。\n\n在标准SQL中，语法DECIMAL（M）等同于DECIMAL（M，0）。 类似地，语法DECIMAL等同于DECIMAL（M，0），其中允许实现决定M的值.MySQL支持这两种DECIMAL语法的变体形式。 M的默认值为10。\n\n#### 11.2.3浮点类型（近似值） - FLOAT，DOUBLE\n\nFLOAT和DOUBLE类型表示近似数值数据值。 MySQL对于单精度值使用四个字节，对于双精度值使用八个字节。\n\n对于FLOAT，SQL标准允许在关键字FLOAT的括号中选择性地指定精度（但不是指数的范围）。 MySQL还支持此可选的精度规范，但精度值仅用于确定存储大小。 精度从0到23会产生一个4字节的单精度FLOAT列。 从24到53的精度产生8字节双精度DOUBLE列。\n\nMySQL允许非标准语法：FLOAT（M，D）或REAL（M，D）或DOUBLE PRECISION（M，D）。 这里，（M，D）表示可以存储的值总共最多为M位，其中D位可以在小数点之后。 例如，定义为FLOAT（7,4）的列在显示时将显示为-999.9999。 MySQL在存储值时执行舍入，因此如果将999.00009插入FLOAT（7,4）列，则近似结果为999.0001。\n\n由于浮点值是近似值而未存储为精确值，因此尝试在比较中将它们视为精确值可能会导致问题。 它们还受平台或实现依赖性的影响。 有关更多信息，请参见第B.5.4.8节“浮点值的问题”\n\n为了获得最大的可移植性，需要存储近似数值数据值的代码应使用FLOAT或DOUBLE PRECISION，而不指定精度或位数。\n\n#### 11.2.4比特值类型 - BIT\n\nBIT数据类型用于存储位值。 BIT（M）指代允许存储M位值。 M的范围为1到64。\n\n要指定位值，可以使用b'value'表示法。 value是使用零和1写的二进制值。 例如，b'111'和b'10000000'分别代表7和128。 请参见第9.1.5节“位值文字”。\n\n如果为BIT（M）列分配一个小于M位长的值，则该值将在左侧用零填充。 例如，将b'101'的值分配给BIT（6）列实际上与分配b'000101'相同。\n\n**NDB集群**。 给定NDB表中使用的所有BIT列的最大组合大小不得超过4096位。\n\n#### 11.2.5 数字类型属性\n\nMySQL支持扩展，可以选择在类型的base关键字后面的括号中指定整数数据类型的显示宽度。 例如，INT（4）指定显示宽度为四位的INT。 应用程序可以使用此可选显示宽度来显示宽度小于为列指定的宽度的整数值，方法是用空格填充它们。 （也就是说，此宽度存在于使用结果集返回的元数据中。是否使用它取决于应用程序。）\n\n\n显示宽度不会限制可以存储在列中的值的范围。 它也不会阻止比列显示宽度更宽的值正确显示。 例如，指定为SMALLINT（3）的列的通常SMALLINT范围为-32768到32767，超过三位数允许的范围之外的值将使用三位数以上的方式完整显示。\n\n与可选（非标准）属性ZEROFILL结合使用时，默认的空格填充将替换为零。 例如，对于声明为INT（4）ZEROFILL的列，将值5检索为0005。\n\n<div class=\"tip\">**注意**\n当表达式或UNION查询中涉及列时，将忽略ZEROFILL属性。如果将大于显示宽度的值存储在具有ZEROFILL属性的整数列中，则在MySQL为某些复杂连接生成临时表时可能会遇到问题。 在这些情况下，MySQL假定数据值符合列显示宽度。\n</div>\n\n所有整数类型都可以具有可选（非标准）属性UNSIGNED。 无符号类型可用于仅允许列中的非负数或当您需要更大的列的上限数字范围时。 例如，如果INT列为UNSIGNED，则列的范围大小相同，但其端点从-2147483648和2147483647更改为0和4294967295。\n\n浮点和定点类型也可以是UNSIGNED。 与整数类型一样，此属性可防止负值存储在列中。 与整数类型不同，列值的上限范围保持不变。\n\n如果为数字列指定ZEROFILL，MySQL会自动将UNSIGNED属性添加到列中。\n\n整数或浮点数据类型可以具有附加属性AUTO_INCREMENT。 将值NULL插入索引的AUTO_INCREMENT列时，该列将设置为下一个序列值。 通常，这是值+ 1，其中value是表中当前列的最大值。 （AUTO_INCREMENT序列以1开头。）\n\n将0存储到AUTO_INCREMENT列与存储NULL具有相同的效果，除非启用了NO_AUTO_VALUE_ON_ZERO SQL模式。\n\n插入NULL以生成AUTO_INCREMENT值需要将列声明为NOT NULL。 如果列声明为NULL，则插入NULL将存储NULL。 当您将任何其他值插入AUTO_INCREMENT列时，该列将设置为该值并重置序列，以便下一个自动生成的值从插入的值开始按顺序排列。\n\n在MySQL 8.0中，不支持AUTO_INCREMENT列使用负值。\n\n#### 11.2.6超出范围和溢出处理\n\n当MySQL将值存储在超出列数据类型允许范围的数值列中时，结果取决于当时生效的SQL模式：\n* 如果启用了严格的SQL模式，则MySQL会根据SQL标准拒绝带有错误的超出范围的值，并且插入失败。\n* 如果未启用限制模式，MySQL会将值剪辑到列数据类型范围的相应端点，并存储结果值。\n当超出范围的值分配给整数列时，MySQL会存储表示列数据类型范围的相应端点的值。\n当为浮点或定点列分配的值超出指定（或默认）精度和比例所隐含的范围时，MySQL会存储表示该范围的相应端点的值。\n假设表t1具有以下定义：\n```sql\nCREATE TABLE t1 (i1 TINYINT, i2 TINYINT UNSIGNED);\n```\n启用严格的SQL模式后，会发生超出范围的错误：\n```sql\nmysql> SET sql_mode = 'TRADITIONAL';\nmysql> INSERT INTO t1 (i1, i2) VALUES(256, 256);\nERROR 1264 (22003): Out of range value for column 'i1' at row 1 mysql> SELECT * FROM t1;\nEmpty set (0.00 sec)\n```\n\n如果未启用严格的SQL模式，则会发生带有警告的剪切：\n```sql\nmysql> SET sql_mode = '';\nmysql> INSERT INTO t1 (i1, i2) VALUES(256, 256);\nmysql> SHOW WARNINGS; \n+---------+------+---------------------------------------------+ \n| Level | Code | Message | \n+---------+------+---------------------------------------------+ \n| Warning | 1264 | Out of range value for column 'i1' at row 1 | \n| Warning | 1264 | Out of range value for column 'i2' at row 1 | \n+---------+------+---------------------------------------------+ \nmysql> SELECT * FROM t1;\n+------+------+\n| i1   | i2   |\n+------+------+\n| 127  | 255  |\n+------+------+\n```\n\n如果未启用严格SQL模式，则由于剪切而发生的列分配转换将报告为ALTER TABLE，LOAD DATA INFILE，UPDATE和多行INSERT语句的警告。 在严格模式下，这些语句失败，并且未插入或更改部分或全部值，具体取决于表是否为事务表和其他因素。 有关详细信息，请参见第5.1.11节“服务器SQL模式”。\n\n数值表达式求值过程中的溢出会导致错误。 例如，最大的带符号BIGINT值为9223372036854775807，因此以下表达式会产生错误：\n\n","source":"_posts/mysql-note-3.md","raw":"---\ntitle: MySQL 8 Chapter 11 数据类型\ndate: 2018-11-13 11:10:49\ntags: mysql\ncategories: 数据库\n---\n\n### 11.2 数值类型\n\nMySQL支持所有的标准SQL数值数据类型。包括精确的类型（INTEGER，SMALLINT，DECIMAL 和 NUMERIC）,以及近似值（FLOAT，REAL和DOUBLE PRECISION）。关键词INT是INTEGER同义词，关键字DEC和FIXED是DECIMAL的同义词。MySQL将DOUBLE视为DOUBLE PRECISION（非标准扩展）的同义词。 除非启用REAL_AS_FLOAT SQL模式，否则MySQL还将REAL视为DOUBLE PRECISION（非标准变体）的同义词。\n<!--more-->\n\nBIT数据类型用于存储位值，并支持MyISAM，MEMORY，InnoDB和NDB表。 有关MySQL如何处理超出范围值到列和溢出的信息，请参见第11.2.6节“超出范围和溢出处理”。\n\n有关数字类型存储要求的信息，请参见第11.8节“数据类型存储要求”。\n\n用于计算数字操作数的结果的数据类型取决于操作数的类型和对它们执行的操作。 有关更多信息，请参见第12.6.1节“算术运算符”。\n\n#### 11.2.1整数类型（精确值） - INTEGER，INT，SMALLINT，TINYINT，MEDIUMINT，BIGINT\n\nMySQL支持SQL标准整数类型INTEGER（或INT）和SMALLINT。 作为标准的扩展，MySQL还支持整数类型TINYINT，MEDIUMINT和BIGINT。 下表显示了每种整数类型所需的存储和范围。\n\n| 类型      | 存储（Bytes） | 最小值（有符号） | 最大值（有符号） | 最小值（无符号） | 最大值（无符号） |\n|-----------|---------------|------------------|------------------|------------------|------------------|\n| TINYINT   | 1             | -128             | 127              | 0                | 255              |\n| SMALLINT  | 2             | -32768           | 32767            | 0                | 65535            |\n| MEDIUMINT | 3             | -8388608         | 8388607          | 0                | 16777215         |\n| INT       | 4             | -2147483648      | 2147483647       | 0                | 4294967295       |\n| BIGINT    | 5             | -263             | 263-1            | 0                | 264-1            |\n\n#### 11.2.2定点类型（精确值） - DECIMAL，NUMERIC\n\nDECIMAL和NUMERIC类型存储精确的数字数据值。 在保持精确精度很重要时使用这些类型，例如使用货币数据。 在MySQL中，NUMERIC实现为DECIMAL，因此以下有关DECIMAL的备注同样适用于NUMERIC。\nMySQL以二进制格式存储DECIMAL值。 请参见第12.23节“精确算术”。\n\n在DECIMAL列声明中，可以（通常是）指定精度和标度; 对于\n例：\n```SQL\nsalary DECIMAL(5,2)\n```\n在这个例子中，5是精度，2是刻度。 精度表示为值存储的有效位数，刻度表示小数点后可存储的位数。\n\n标准SQL要求DECIMAL(5,2)能够存储五位数和两位小数的任何值，因此可以存储在salary列中的值的范围是-999.99到999.99。\n\n在标准SQL中，语法DECIMAL（M）等同于DECIMAL（M，0）。 类似地，语法DECIMAL等同于DECIMAL（M，0），其中允许实现决定M的值.MySQL支持这两种DECIMAL语法的变体形式。 M的默认值为10。\n\n#### 11.2.3浮点类型（近似值） - FLOAT，DOUBLE\n\nFLOAT和DOUBLE类型表示近似数值数据值。 MySQL对于单精度值使用四个字节，对于双精度值使用八个字节。\n\n对于FLOAT，SQL标准允许在关键字FLOAT的括号中选择性地指定精度（但不是指数的范围）。 MySQL还支持此可选的精度规范，但精度值仅用于确定存储大小。 精度从0到23会产生一个4字节的单精度FLOAT列。 从24到53的精度产生8字节双精度DOUBLE列。\n\nMySQL允许非标准语法：FLOAT（M，D）或REAL（M，D）或DOUBLE PRECISION（M，D）。 这里，（M，D）表示可以存储的值总共最多为M位，其中D位可以在小数点之后。 例如，定义为FLOAT（7,4）的列在显示时将显示为-999.9999。 MySQL在存储值时执行舍入，因此如果将999.00009插入FLOAT（7,4）列，则近似结果为999.0001。\n\n由于浮点值是近似值而未存储为精确值，因此尝试在比较中将它们视为精确值可能会导致问题。 它们还受平台或实现依赖性的影响。 有关更多信息，请参见第B.5.4.8节“浮点值的问题”\n\n为了获得最大的可移植性，需要存储近似数值数据值的代码应使用FLOAT或DOUBLE PRECISION，而不指定精度或位数。\n\n#### 11.2.4比特值类型 - BIT\n\nBIT数据类型用于存储位值。 BIT（M）指代允许存储M位值。 M的范围为1到64。\n\n要指定位值，可以使用b'value'表示法。 value是使用零和1写的二进制值。 例如，b'111'和b'10000000'分别代表7和128。 请参见第9.1.5节“位值文字”。\n\n如果为BIT（M）列分配一个小于M位长的值，则该值将在左侧用零填充。 例如，将b'101'的值分配给BIT（6）列实际上与分配b'000101'相同。\n\n**NDB集群**。 给定NDB表中使用的所有BIT列的最大组合大小不得超过4096位。\n\n#### 11.2.5 数字类型属性\n\nMySQL支持扩展，可以选择在类型的base关键字后面的括号中指定整数数据类型的显示宽度。 例如，INT（4）指定显示宽度为四位的INT。 应用程序可以使用此可选显示宽度来显示宽度小于为列指定的宽度的整数值，方法是用空格填充它们。 （也就是说，此宽度存在于使用结果集返回的元数据中。是否使用它取决于应用程序。）\n\n\n显示宽度不会限制可以存储在列中的值的范围。 它也不会阻止比列显示宽度更宽的值正确显示。 例如，指定为SMALLINT（3）的列的通常SMALLINT范围为-32768到32767，超过三位数允许的范围之外的值将使用三位数以上的方式完整显示。\n\n与可选（非标准）属性ZEROFILL结合使用时，默认的空格填充将替换为零。 例如，对于声明为INT（4）ZEROFILL的列，将值5检索为0005。\n\n<div class=\"tip\">**注意**\n当表达式或UNION查询中涉及列时，将忽略ZEROFILL属性。如果将大于显示宽度的值存储在具有ZEROFILL属性的整数列中，则在MySQL为某些复杂连接生成临时表时可能会遇到问题。 在这些情况下，MySQL假定数据值符合列显示宽度。\n</div>\n\n所有整数类型都可以具有可选（非标准）属性UNSIGNED。 无符号类型可用于仅允许列中的非负数或当您需要更大的列的上限数字范围时。 例如，如果INT列为UNSIGNED，则列的范围大小相同，但其端点从-2147483648和2147483647更改为0和4294967295。\n\n浮点和定点类型也可以是UNSIGNED。 与整数类型一样，此属性可防止负值存储在列中。 与整数类型不同，列值的上限范围保持不变。\n\n如果为数字列指定ZEROFILL，MySQL会自动将UNSIGNED属性添加到列中。\n\n整数或浮点数据类型可以具有附加属性AUTO_INCREMENT。 将值NULL插入索引的AUTO_INCREMENT列时，该列将设置为下一个序列值。 通常，这是值+ 1，其中value是表中当前列的最大值。 （AUTO_INCREMENT序列以1开头。）\n\n将0存储到AUTO_INCREMENT列与存储NULL具有相同的效果，除非启用了NO_AUTO_VALUE_ON_ZERO SQL模式。\n\n插入NULL以生成AUTO_INCREMENT值需要将列声明为NOT NULL。 如果列声明为NULL，则插入NULL将存储NULL。 当您将任何其他值插入AUTO_INCREMENT列时，该列将设置为该值并重置序列，以便下一个自动生成的值从插入的值开始按顺序排列。\n\n在MySQL 8.0中，不支持AUTO_INCREMENT列使用负值。\n\n#### 11.2.6超出范围和溢出处理\n\n当MySQL将值存储在超出列数据类型允许范围的数值列中时，结果取决于当时生效的SQL模式：\n* 如果启用了严格的SQL模式，则MySQL会根据SQL标准拒绝带有错误的超出范围的值，并且插入失败。\n* 如果未启用限制模式，MySQL会将值剪辑到列数据类型范围的相应端点，并存储结果值。\n当超出范围的值分配给整数列时，MySQL会存储表示列数据类型范围的相应端点的值。\n当为浮点或定点列分配的值超出指定（或默认）精度和比例所隐含的范围时，MySQL会存储表示该范围的相应端点的值。\n假设表t1具有以下定义：\n```sql\nCREATE TABLE t1 (i1 TINYINT, i2 TINYINT UNSIGNED);\n```\n启用严格的SQL模式后，会发生超出范围的错误：\n```sql\nmysql> SET sql_mode = 'TRADITIONAL';\nmysql> INSERT INTO t1 (i1, i2) VALUES(256, 256);\nERROR 1264 (22003): Out of range value for column 'i1' at row 1 mysql> SELECT * FROM t1;\nEmpty set (0.00 sec)\n```\n\n如果未启用严格的SQL模式，则会发生带有警告的剪切：\n```sql\nmysql> SET sql_mode = '';\nmysql> INSERT INTO t1 (i1, i2) VALUES(256, 256);\nmysql> SHOW WARNINGS; \n+---------+------+---------------------------------------------+ \n| Level | Code | Message | \n+---------+------+---------------------------------------------+ \n| Warning | 1264 | Out of range value for column 'i1' at row 1 | \n| Warning | 1264 | Out of range value for column 'i2' at row 1 | \n+---------+------+---------------------------------------------+ \nmysql> SELECT * FROM t1;\n+------+------+\n| i1   | i2   |\n+------+------+\n| 127  | 255  |\n+------+------+\n```\n\n如果未启用严格SQL模式，则由于剪切而发生的列分配转换将报告为ALTER TABLE，LOAD DATA INFILE，UPDATE和多行INSERT语句的警告。 在严格模式下，这些语句失败，并且未插入或更改部分或全部值，具体取决于表是否为事务表和其他因素。 有关详细信息，请参见第5.1.11节“服务器SQL模式”。\n\n数值表达式求值过程中的溢出会导致错误。 例如，最大的带符号BIGINT值为9223372036854775807，因此以下表达式会产生错误：\n\n","slug":"mysql-note-3","published":1,"updated":"2019-07-09T09:58:35.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld8x001ze8we02jxpqoi","content":"<h3 id=\"11-2-数值类型\"><a href=\"#11-2-数值类型\" class=\"headerlink\" title=\"11.2 数值类型\"></a>11.2 数值类型</h3><p>MySQL支持所有的标准SQL数值数据类型。包括精确的类型（INTEGER，SMALLINT，DECIMAL 和 NUMERIC）,以及近似值（FLOAT，REAL和DOUBLE PRECISION）。关键词INT是INTEGER同义词，关键字DEC和FIXED是DECIMAL的同义词。MySQL将DOUBLE视为DOUBLE PRECISION（非标准扩展）的同义词。 除非启用REAL_AS_FLOAT SQL模式，否则MySQL还将REAL视为DOUBLE PRECISION（非标准变体）的同义词。<br><a id=\"more\"></a></p>\n<p>BIT数据类型用于存储位值，并支持MyISAM，MEMORY，InnoDB和NDB表。 有关MySQL如何处理超出范围值到列和溢出的信息，请参见第11.2.6节“超出范围和溢出处理”。</p>\n<p>有关数字类型存储要求的信息，请参见第11.8节“数据类型存储要求”。</p>\n<p>用于计算数字操作数的结果的数据类型取决于操作数的类型和对它们执行的操作。 有关更多信息，请参见第12.6.1节“算术运算符”。</p>\n<h4 id=\"11-2-1整数类型（精确值）-INTEGER，INT，SMALLINT，TINYINT，MEDIUMINT，BIGINT\"><a href=\"#11-2-1整数类型（精确值）-INTEGER，INT，SMALLINT，TINYINT，MEDIUMINT，BIGINT\" class=\"headerlink\" title=\"11.2.1整数类型（精确值） - INTEGER，INT，SMALLINT，TINYINT，MEDIUMINT，BIGINT\"></a>11.2.1整数类型（精确值） - INTEGER，INT，SMALLINT，TINYINT，MEDIUMINT，BIGINT</h4><p>MySQL支持SQL标准整数类型INTEGER（或INT）和SMALLINT。 作为标准的扩展，MySQL还支持整数类型TINYINT，MEDIUMINT和BIGINT。 下表显示了每种整数类型所需的存储和范围。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>存储（Bytes）</th>\n<th>最小值（有符号）</th>\n<th>最大值（有符号）</th>\n<th>最小值（无符号）</th>\n<th>最大值（无符号）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TINYINT</td>\n<td>1</td>\n<td>-128</td>\n<td>127</td>\n<td>0</td>\n<td>255</td>\n</tr>\n<tr>\n<td>SMALLINT</td>\n<td>2</td>\n<td>-32768</td>\n<td>32767</td>\n<td>0</td>\n<td>65535</td>\n</tr>\n<tr>\n<td>MEDIUMINT</td>\n<td>3</td>\n<td>-8388608</td>\n<td>8388607</td>\n<td>0</td>\n<td>16777215</td>\n</tr>\n<tr>\n<td>INT</td>\n<td>4</td>\n<td>-2147483648</td>\n<td>2147483647</td>\n<td>0</td>\n<td>4294967295</td>\n</tr>\n<tr>\n<td>BIGINT</td>\n<td>5</td>\n<td>-263</td>\n<td>263-1</td>\n<td>0</td>\n<td>264-1</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"11-2-2定点类型（精确值）-DECIMAL，NUMERIC\"><a href=\"#11-2-2定点类型（精确值）-DECIMAL，NUMERIC\" class=\"headerlink\" title=\"11.2.2定点类型（精确值） - DECIMAL，NUMERIC\"></a>11.2.2定点类型（精确值） - DECIMAL，NUMERIC</h4><p>DECIMAL和NUMERIC类型存储精确的数字数据值。 在保持精确精度很重要时使用这些类型，例如使用货币数据。 在MySQL中，NUMERIC实现为DECIMAL，因此以下有关DECIMAL的备注同样适用于NUMERIC。<br>MySQL以二进制格式存储DECIMAL值。 请参见第12.23节“精确算术”。</p>\n<p>在DECIMAL列声明中，可以（通常是）指定精度和标度; 对于<br>例：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">salary DECIMAL(5,2)</span><br></pre></td></tr></table></figure></p>\n<p>在这个例子中，5是精度，2是刻度。 精度表示为值存储的有效位数，刻度表示小数点后可存储的位数。</p>\n<p>标准SQL要求DECIMAL(5,2)能够存储五位数和两位小数的任何值，因此可以存储在salary列中的值的范围是-999.99到999.99。</p>\n<p>在标准SQL中，语法DECIMAL（M）等同于DECIMAL（M，0）。 类似地，语法DECIMAL等同于DECIMAL（M，0），其中允许实现决定M的值.MySQL支持这两种DECIMAL语法的变体形式。 M的默认值为10。</p>\n<h4 id=\"11-2-3浮点类型（近似值）-FLOAT，DOUBLE\"><a href=\"#11-2-3浮点类型（近似值）-FLOAT，DOUBLE\" class=\"headerlink\" title=\"11.2.3浮点类型（近似值） - FLOAT，DOUBLE\"></a>11.2.3浮点类型（近似值） - FLOAT，DOUBLE</h4><p>FLOAT和DOUBLE类型表示近似数值数据值。 MySQL对于单精度值使用四个字节，对于双精度值使用八个字节。</p>\n<p>对于FLOAT，SQL标准允许在关键字FLOAT的括号中选择性地指定精度（但不是指数的范围）。 MySQL还支持此可选的精度规范，但精度值仅用于确定存储大小。 精度从0到23会产生一个4字节的单精度FLOAT列。 从24到53的精度产生8字节双精度DOUBLE列。</p>\n<p>MySQL允许非标准语法：FLOAT（M，D）或REAL（M，D）或DOUBLE PRECISION（M，D）。 这里，（M，D）表示可以存储的值总共最多为M位，其中D位可以在小数点之后。 例如，定义为FLOAT（7,4）的列在显示时将显示为-999.9999。 MySQL在存储值时执行舍入，因此如果将999.00009插入FLOAT（7,4）列，则近似结果为999.0001。</p>\n<p>由于浮点值是近似值而未存储为精确值，因此尝试在比较中将它们视为精确值可能会导致问题。 它们还受平台或实现依赖性的影响。 有关更多信息，请参见第B.5.4.8节“浮点值的问题”</p>\n<p>为了获得最大的可移植性，需要存储近似数值数据值的代码应使用FLOAT或DOUBLE PRECISION，而不指定精度或位数。</p>\n<h4 id=\"11-2-4比特值类型-BIT\"><a href=\"#11-2-4比特值类型-BIT\" class=\"headerlink\" title=\"11.2.4比特值类型 - BIT\"></a>11.2.4比特值类型 - BIT</h4><p>BIT数据类型用于存储位值。 BIT（M）指代允许存储M位值。 M的范围为1到64。</p>\n<p>要指定位值，可以使用b’value’表示法。 value是使用零和1写的二进制值。 例如，b’111’和b’10000000’分别代表7和128。 请参见第9.1.5节“位值文字”。</p>\n<p>如果为BIT（M）列分配一个小于M位长的值，则该值将在左侧用零填充。 例如，将b’101’的值分配给BIT（6）列实际上与分配b’000101’相同。</p>\n<p><strong>NDB集群</strong>。 给定NDB表中使用的所有BIT列的最大组合大小不得超过4096位。</p>\n<h4 id=\"11-2-5-数字类型属性\"><a href=\"#11-2-5-数字类型属性\" class=\"headerlink\" title=\"11.2.5 数字类型属性\"></a>11.2.5 数字类型属性</h4><p>MySQL支持扩展，可以选择在类型的base关键字后面的括号中指定整数数据类型的显示宽度。 例如，INT（4）指定显示宽度为四位的INT。 应用程序可以使用此可选显示宽度来显示宽度小于为列指定的宽度的整数值，方法是用空格填充它们。 （也就是说，此宽度存在于使用结果集返回的元数据中。是否使用它取决于应用程序。）</p>\n<p>显示宽度不会限制可以存储在列中的值的范围。 它也不会阻止比列显示宽度更宽的值正确显示。 例如，指定为SMALLINT（3）的列的通常SMALLINT范围为-32768到32767，超过三位数允许的范围之外的值将使用三位数以上的方式完整显示。</p>\n<p>与可选（非标准）属性ZEROFILL结合使用时，默认的空格填充将替换为零。 例如，对于声明为INT（4）ZEROFILL的列，将值5检索为0005。</p>\n<div class=\"tip\"><strong>注意</strong><br>当表达式或UNION查询中涉及列时，将忽略ZEROFILL属性。如果将大于显示宽度的值存储在具有ZEROFILL属性的整数列中，则在MySQL为某些复杂连接生成临时表时可能会遇到问题。 在这些情况下，MySQL假定数据值符合列显示宽度。<br></div>\n\n<p>所有整数类型都可以具有可选（非标准）属性UNSIGNED。 无符号类型可用于仅允许列中的非负数或当您需要更大的列的上限数字范围时。 例如，如果INT列为UNSIGNED，则列的范围大小相同，但其端点从-2147483648和2147483647更改为0和4294967295。</p>\n<p>浮点和定点类型也可以是UNSIGNED。 与整数类型一样，此属性可防止负值存储在列中。 与整数类型不同，列值的上限范围保持不变。</p>\n<p>如果为数字列指定ZEROFILL，MySQL会自动将UNSIGNED属性添加到列中。</p>\n<p>整数或浮点数据类型可以具有附加属性AUTO_INCREMENT。 将值NULL插入索引的AUTO_INCREMENT列时，该列将设置为下一个序列值。 通常，这是值+ 1，其中value是表中当前列的最大值。 （AUTO_INCREMENT序列以1开头。）</p>\n<p>将0存储到AUTO_INCREMENT列与存储NULL具有相同的效果，除非启用了NO_AUTO_VALUE_ON_ZERO SQL模式。</p>\n<p>插入NULL以生成AUTO_INCREMENT值需要将列声明为NOT NULL。 如果列声明为NULL，则插入NULL将存储NULL。 当您将任何其他值插入AUTO_INCREMENT列时，该列将设置为该值并重置序列，以便下一个自动生成的值从插入的值开始按顺序排列。</p>\n<p>在MySQL 8.0中，不支持AUTO_INCREMENT列使用负值。</p>\n<h4 id=\"11-2-6超出范围和溢出处理\"><a href=\"#11-2-6超出范围和溢出处理\" class=\"headerlink\" title=\"11.2.6超出范围和溢出处理\"></a>11.2.6超出范围和溢出处理</h4><p>当MySQL将值存储在超出列数据类型允许范围的数值列中时，结果取决于当时生效的SQL模式：</p>\n<ul>\n<li>如果启用了严格的SQL模式，则MySQL会根据SQL标准拒绝带有错误的超出范围的值，并且插入失败。</li>\n<li>如果未启用限制模式，MySQL会将值剪辑到列数据类型范围的相应端点，并存储结果值。<br>当超出范围的值分配给整数列时，MySQL会存储表示列数据类型范围的相应端点的值。<br>当为浮点或定点列分配的值超出指定（或默认）精度和比例所隐含的范围时，MySQL会存储表示该范围的相应端点的值。<br>假设表t1具有以下定义：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t1 (i1 TINYINT, i2 TINYINT <span class=\"keyword\">UNSIGNED</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>启用严格的SQL模式后，会发生超出范围的错误：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SET sql_mode = 'TRADITIONAL';</span><br><span class=\"line\">mysql&gt; INSERT INTO t1 (i1, i2) VALUES(256, 256);</span><br><span class=\"line\">ERROR 1264 (22003): Out of range value for column 'i1' at row 1 mysql&gt; SELECT * FROM t1;</span><br><span class=\"line\">Empty <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>\n<p>如果未启用严格的SQL模式，则会发生带有警告的剪切：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SET sql_mode = '';</span><br><span class=\"line\">mysql&gt; INSERT INTO t1 (i1, i2) VALUES(256, 256);</span><br><span class=\"line\">mysql&gt; SHOW WARNINGS; </span><br><span class=\"line\">+<span class=\"comment\">---------+------+---------------------------------------------+ </span></span><br><span class=\"line\">| Level | Code | Message | </span><br><span class=\"line\">+<span class=\"comment\">---------+------+---------------------------------------------+ </span></span><br><span class=\"line\">| Warning | 1264 | Out of range value for column 'i1' at row 1 | </span><br><span class=\"line\">| Warning | 1264 | Out of range value for column 'i2' at row 1 | </span><br><span class=\"line\">+<span class=\"comment\">---------+------+---------------------------------------------+ </span></span><br><span class=\"line\">mysql&gt; SELECT * FROM t1;</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| i1   | i2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| 127  | 255  |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br></pre></td></tr></table></figure></p>\n<p>如果未启用严格SQL模式，则由于剪切而发生的列分配转换将报告为ALTER TABLE，LOAD DATA INFILE，UPDATE和多行INSERT语句的警告。 在严格模式下，这些语句失败，并且未插入或更改部分或全部值，具体取决于表是否为事务表和其他因素。 有关详细信息，请参见第5.1.11节“服务器SQL模式”。</p>\n<p>数值表达式求值过程中的溢出会导致错误。 例如，最大的带符号BIGINT值为9223372036854775807，因此以下表达式会产生错误：</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"11-2-数值类型\"><a href=\"#11-2-数值类型\" class=\"headerlink\" title=\"11.2 数值类型\"></a>11.2 数值类型</h3><p>MySQL支持所有的标准SQL数值数据类型。包括精确的类型（INTEGER，SMALLINT，DECIMAL 和 NUMERIC）,以及近似值（FLOAT，REAL和DOUBLE PRECISION）。关键词INT是INTEGER同义词，关键字DEC和FIXED是DECIMAL的同义词。MySQL将DOUBLE视为DOUBLE PRECISION（非标准扩展）的同义词。 除非启用REAL_AS_FLOAT SQL模式，否则MySQL还将REAL视为DOUBLE PRECISION（非标准变体）的同义词。<br>","more":"</p>\n<p>BIT数据类型用于存储位值，并支持MyISAM，MEMORY，InnoDB和NDB表。 有关MySQL如何处理超出范围值到列和溢出的信息，请参见第11.2.6节“超出范围和溢出处理”。</p>\n<p>有关数字类型存储要求的信息，请参见第11.8节“数据类型存储要求”。</p>\n<p>用于计算数字操作数的结果的数据类型取决于操作数的类型和对它们执行的操作。 有关更多信息，请参见第12.6.1节“算术运算符”。</p>\n<h4 id=\"11-2-1整数类型（精确值）-INTEGER，INT，SMALLINT，TINYINT，MEDIUMINT，BIGINT\"><a href=\"#11-2-1整数类型（精确值）-INTEGER，INT，SMALLINT，TINYINT，MEDIUMINT，BIGINT\" class=\"headerlink\" title=\"11.2.1整数类型（精确值） - INTEGER，INT，SMALLINT，TINYINT，MEDIUMINT，BIGINT\"></a>11.2.1整数类型（精确值） - INTEGER，INT，SMALLINT，TINYINT，MEDIUMINT，BIGINT</h4><p>MySQL支持SQL标准整数类型INTEGER（或INT）和SMALLINT。 作为标准的扩展，MySQL还支持整数类型TINYINT，MEDIUMINT和BIGINT。 下表显示了每种整数类型所需的存储和范围。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>存储（Bytes）</th>\n<th>最小值（有符号）</th>\n<th>最大值（有符号）</th>\n<th>最小值（无符号）</th>\n<th>最大值（无符号）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TINYINT</td>\n<td>1</td>\n<td>-128</td>\n<td>127</td>\n<td>0</td>\n<td>255</td>\n</tr>\n<tr>\n<td>SMALLINT</td>\n<td>2</td>\n<td>-32768</td>\n<td>32767</td>\n<td>0</td>\n<td>65535</td>\n</tr>\n<tr>\n<td>MEDIUMINT</td>\n<td>3</td>\n<td>-8388608</td>\n<td>8388607</td>\n<td>0</td>\n<td>16777215</td>\n</tr>\n<tr>\n<td>INT</td>\n<td>4</td>\n<td>-2147483648</td>\n<td>2147483647</td>\n<td>0</td>\n<td>4294967295</td>\n</tr>\n<tr>\n<td>BIGINT</td>\n<td>5</td>\n<td>-263</td>\n<td>263-1</td>\n<td>0</td>\n<td>264-1</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"11-2-2定点类型（精确值）-DECIMAL，NUMERIC\"><a href=\"#11-2-2定点类型（精确值）-DECIMAL，NUMERIC\" class=\"headerlink\" title=\"11.2.2定点类型（精确值） - DECIMAL，NUMERIC\"></a>11.2.2定点类型（精确值） - DECIMAL，NUMERIC</h4><p>DECIMAL和NUMERIC类型存储精确的数字数据值。 在保持精确精度很重要时使用这些类型，例如使用货币数据。 在MySQL中，NUMERIC实现为DECIMAL，因此以下有关DECIMAL的备注同样适用于NUMERIC。<br>MySQL以二进制格式存储DECIMAL值。 请参见第12.23节“精确算术”。</p>\n<p>在DECIMAL列声明中，可以（通常是）指定精度和标度; 对于<br>例：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">salary DECIMAL(5,2)</span><br></pre></td></tr></table></figure></p>\n<p>在这个例子中，5是精度，2是刻度。 精度表示为值存储的有效位数，刻度表示小数点后可存储的位数。</p>\n<p>标准SQL要求DECIMAL(5,2)能够存储五位数和两位小数的任何值，因此可以存储在salary列中的值的范围是-999.99到999.99。</p>\n<p>在标准SQL中，语法DECIMAL（M）等同于DECIMAL（M，0）。 类似地，语法DECIMAL等同于DECIMAL（M，0），其中允许实现决定M的值.MySQL支持这两种DECIMAL语法的变体形式。 M的默认值为10。</p>\n<h4 id=\"11-2-3浮点类型（近似值）-FLOAT，DOUBLE\"><a href=\"#11-2-3浮点类型（近似值）-FLOAT，DOUBLE\" class=\"headerlink\" title=\"11.2.3浮点类型（近似值） - FLOAT，DOUBLE\"></a>11.2.3浮点类型（近似值） - FLOAT，DOUBLE</h4><p>FLOAT和DOUBLE类型表示近似数值数据值。 MySQL对于单精度值使用四个字节，对于双精度值使用八个字节。</p>\n<p>对于FLOAT，SQL标准允许在关键字FLOAT的括号中选择性地指定精度（但不是指数的范围）。 MySQL还支持此可选的精度规范，但精度值仅用于确定存储大小。 精度从0到23会产生一个4字节的单精度FLOAT列。 从24到53的精度产生8字节双精度DOUBLE列。</p>\n<p>MySQL允许非标准语法：FLOAT（M，D）或REAL（M，D）或DOUBLE PRECISION（M，D）。 这里，（M，D）表示可以存储的值总共最多为M位，其中D位可以在小数点之后。 例如，定义为FLOAT（7,4）的列在显示时将显示为-999.9999。 MySQL在存储值时执行舍入，因此如果将999.00009插入FLOAT（7,4）列，则近似结果为999.0001。</p>\n<p>由于浮点值是近似值而未存储为精确值，因此尝试在比较中将它们视为精确值可能会导致问题。 它们还受平台或实现依赖性的影响。 有关更多信息，请参见第B.5.4.8节“浮点值的问题”</p>\n<p>为了获得最大的可移植性，需要存储近似数值数据值的代码应使用FLOAT或DOUBLE PRECISION，而不指定精度或位数。</p>\n<h4 id=\"11-2-4比特值类型-BIT\"><a href=\"#11-2-4比特值类型-BIT\" class=\"headerlink\" title=\"11.2.4比特值类型 - BIT\"></a>11.2.4比特值类型 - BIT</h4><p>BIT数据类型用于存储位值。 BIT（M）指代允许存储M位值。 M的范围为1到64。</p>\n<p>要指定位值，可以使用b’value’表示法。 value是使用零和1写的二进制值。 例如，b’111’和b’10000000’分别代表7和128。 请参见第9.1.5节“位值文字”。</p>\n<p>如果为BIT（M）列分配一个小于M位长的值，则该值将在左侧用零填充。 例如，将b’101’的值分配给BIT（6）列实际上与分配b’000101’相同。</p>\n<p><strong>NDB集群</strong>。 给定NDB表中使用的所有BIT列的最大组合大小不得超过4096位。</p>\n<h4 id=\"11-2-5-数字类型属性\"><a href=\"#11-2-5-数字类型属性\" class=\"headerlink\" title=\"11.2.5 数字类型属性\"></a>11.2.5 数字类型属性</h4><p>MySQL支持扩展，可以选择在类型的base关键字后面的括号中指定整数数据类型的显示宽度。 例如，INT（4）指定显示宽度为四位的INT。 应用程序可以使用此可选显示宽度来显示宽度小于为列指定的宽度的整数值，方法是用空格填充它们。 （也就是说，此宽度存在于使用结果集返回的元数据中。是否使用它取决于应用程序。）</p>\n<p>显示宽度不会限制可以存储在列中的值的范围。 它也不会阻止比列显示宽度更宽的值正确显示。 例如，指定为SMALLINT（3）的列的通常SMALLINT范围为-32768到32767，超过三位数允许的范围之外的值将使用三位数以上的方式完整显示。</p>\n<p>与可选（非标准）属性ZEROFILL结合使用时，默认的空格填充将替换为零。 例如，对于声明为INT（4）ZEROFILL的列，将值5检索为0005。</p>\n<div class=\"tip\"><strong>注意</strong><br>当表达式或UNION查询中涉及列时，将忽略ZEROFILL属性。如果将大于显示宽度的值存储在具有ZEROFILL属性的整数列中，则在MySQL为某些复杂连接生成临时表时可能会遇到问题。 在这些情况下，MySQL假定数据值符合列显示宽度。<br></div>\n\n<p>所有整数类型都可以具有可选（非标准）属性UNSIGNED。 无符号类型可用于仅允许列中的非负数或当您需要更大的列的上限数字范围时。 例如，如果INT列为UNSIGNED，则列的范围大小相同，但其端点从-2147483648和2147483647更改为0和4294967295。</p>\n<p>浮点和定点类型也可以是UNSIGNED。 与整数类型一样，此属性可防止负值存储在列中。 与整数类型不同，列值的上限范围保持不变。</p>\n<p>如果为数字列指定ZEROFILL，MySQL会自动将UNSIGNED属性添加到列中。</p>\n<p>整数或浮点数据类型可以具有附加属性AUTO_INCREMENT。 将值NULL插入索引的AUTO_INCREMENT列时，该列将设置为下一个序列值。 通常，这是值+ 1，其中value是表中当前列的最大值。 （AUTO_INCREMENT序列以1开头。）</p>\n<p>将0存储到AUTO_INCREMENT列与存储NULL具有相同的效果，除非启用了NO_AUTO_VALUE_ON_ZERO SQL模式。</p>\n<p>插入NULL以生成AUTO_INCREMENT值需要将列声明为NOT NULL。 如果列声明为NULL，则插入NULL将存储NULL。 当您将任何其他值插入AUTO_INCREMENT列时，该列将设置为该值并重置序列，以便下一个自动生成的值从插入的值开始按顺序排列。</p>\n<p>在MySQL 8.0中，不支持AUTO_INCREMENT列使用负值。</p>\n<h4 id=\"11-2-6超出范围和溢出处理\"><a href=\"#11-2-6超出范围和溢出处理\" class=\"headerlink\" title=\"11.2.6超出范围和溢出处理\"></a>11.2.6超出范围和溢出处理</h4><p>当MySQL将值存储在超出列数据类型允许范围的数值列中时，结果取决于当时生效的SQL模式：</p>\n<ul>\n<li>如果启用了严格的SQL模式，则MySQL会根据SQL标准拒绝带有错误的超出范围的值，并且插入失败。</li>\n<li>如果未启用限制模式，MySQL会将值剪辑到列数据类型范围的相应端点，并存储结果值。<br>当超出范围的值分配给整数列时，MySQL会存储表示列数据类型范围的相应端点的值。<br>当为浮点或定点列分配的值超出指定（或默认）精度和比例所隐含的范围时，MySQL会存储表示该范围的相应端点的值。<br>假设表t1具有以下定义：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t1 (i1 TINYINT, i2 TINYINT <span class=\"keyword\">UNSIGNED</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>启用严格的SQL模式后，会发生超出范围的错误：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SET sql_mode = 'TRADITIONAL';</span><br><span class=\"line\">mysql&gt; INSERT INTO t1 (i1, i2) VALUES(256, 256);</span><br><span class=\"line\">ERROR 1264 (22003): Out of range value for column 'i1' at row 1 mysql&gt; SELECT * FROM t1;</span><br><span class=\"line\">Empty <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>\n<p>如果未启用严格的SQL模式，则会发生带有警告的剪切：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SET sql_mode = '';</span><br><span class=\"line\">mysql&gt; INSERT INTO t1 (i1, i2) VALUES(256, 256);</span><br><span class=\"line\">mysql&gt; SHOW WARNINGS; </span><br><span class=\"line\">+<span class=\"comment\">---------+------+---------------------------------------------+ </span></span><br><span class=\"line\">| Level | Code | Message | </span><br><span class=\"line\">+<span class=\"comment\">---------+------+---------------------------------------------+ </span></span><br><span class=\"line\">| Warning | 1264 | Out of range value for column 'i1' at row 1 | </span><br><span class=\"line\">| Warning | 1264 | Out of range value for column 'i2' at row 1 | </span><br><span class=\"line\">+<span class=\"comment\">---------+------+---------------------------------------------+ </span></span><br><span class=\"line\">mysql&gt; SELECT * FROM t1;</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| i1   | i2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| 127  | 255  |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br></pre></td></tr></table></figure></p>\n<p>如果未启用严格SQL模式，则由于剪切而发生的列分配转换将报告为ALTER TABLE，LOAD DATA INFILE，UPDATE和多行INSERT语句的警告。 在严格模式下，这些语句失败，并且未插入或更改部分或全部值，具体取决于表是否为事务表和其他因素。 有关详细信息，请参见第5.1.11节“服务器SQL模式”。</p>\n<p>数值表达式求值过程中的溢出会导致错误。 例如，最大的带符号BIGINT值为9223372036854775807，因此以下表达式会产生错误：</p>"},{"title":"MySQL Schema 优化","date":"2018-09-29T01:13:39.000Z","_content":"\n### 数据类型\n1. **更小通常更好** 尽量使用可以正确存储数据的最小数据类型。更小的数据类型通常更快，因为他们占用更少的磁盘、内存和CPU缓存，并且需要的CPU处理周期也更少（例如只需要存0-200，tinyint unsigned更好）\n2. **简单就好** 简单数据类型操作代价更低，（使用MySQL内建类型而不是用字符串来存储日期，使用整型存储IP而不是字符串）\n * inet_aton:将ip地址转换成数字型\n * inet_ntoa:将数字型转换成ip地址\n3. **避免使用NULL** 通常情况下最好指定列为NOT NULL,除非真的需要存储NULL值（NULL会让索引，索引统计和值比较变得更复杂，但是对于InnoDB使用了单独的bit存储NULL，对于稀疏的数据有很好的空间效率）\n4. 有符号与无符号使用相同的存储空间，并且具有相同的性能，因此可以更具实际情况选择合适的类型（范围不同）\n * tinyint unsigned 0-255\n * tinyint -128-127\n5. **DECIMAL** 可以使用BIGINT来代替，decimal需要额外的开销，代价较高\n6. **VARCHAR比CHAR更灵活**\n7. **BLOG,TEXT避免使用**\n8. **应该使用整数作为标识符而不是字符串**\n<!--more-->\n\n### Schema陷阱\n1. 太多的列\n2. 过多的关联\n3. 乱用枚举\n\n#### 范式\n范式是符合某一种级别的关系模式的集合。关系数据库中的关系必须满足一定的要求，满足不同程度要求的为不同范式。\n目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、Boyce-Codd范式（BCNF）、第四范式（4NF）和第五范式（5NF）。\n1. **第一范式（1NF）** \n在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。\n所谓第一范式（1NF）是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。如果出现重复的属性，就可能需要定义一个新的实体，新的实体由重复的属性构成，新实体与原实体之间为一对多关系。在第一范式（1NF）中表的每一行只包含一个实例的信息。\n简而言之，第一范式就是无重复的列。\n2. **第二范式（2NF）**\n数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖（部分函数依赖指的是存在组合关键字中的某些字段决定非关键字段的情况），也即所有非关键字段都完全依赖于任意一组候选关键字。\n\n### 范式化的优与劣\n1. 优势\n * 更新操作通常比反范式化快\n * 重复数据较少\n * 表更小，可以更好的放在内存中，执行操作快\n * 加快单表检索\n\n2. 劣势\n * 通常需要关联表，关联表的代价很昂贵，可能使得索引失效\n","source":"_posts/mysql-schema.md","raw":"---\ntitle: MySQL Schema 优化\ndate: 2018-09-29 09:13:39\ntags: mysql\ncategories: 数据库\n---\n\n### 数据类型\n1. **更小通常更好** 尽量使用可以正确存储数据的最小数据类型。更小的数据类型通常更快，因为他们占用更少的磁盘、内存和CPU缓存，并且需要的CPU处理周期也更少（例如只需要存0-200，tinyint unsigned更好）\n2. **简单就好** 简单数据类型操作代价更低，（使用MySQL内建类型而不是用字符串来存储日期，使用整型存储IP而不是字符串）\n * inet_aton:将ip地址转换成数字型\n * inet_ntoa:将数字型转换成ip地址\n3. **避免使用NULL** 通常情况下最好指定列为NOT NULL,除非真的需要存储NULL值（NULL会让索引，索引统计和值比较变得更复杂，但是对于InnoDB使用了单独的bit存储NULL，对于稀疏的数据有很好的空间效率）\n4. 有符号与无符号使用相同的存储空间，并且具有相同的性能，因此可以更具实际情况选择合适的类型（范围不同）\n * tinyint unsigned 0-255\n * tinyint -128-127\n5. **DECIMAL** 可以使用BIGINT来代替，decimal需要额外的开销，代价较高\n6. **VARCHAR比CHAR更灵活**\n7. **BLOG,TEXT避免使用**\n8. **应该使用整数作为标识符而不是字符串**\n<!--more-->\n\n### Schema陷阱\n1. 太多的列\n2. 过多的关联\n3. 乱用枚举\n\n#### 范式\n范式是符合某一种级别的关系模式的集合。关系数据库中的关系必须满足一定的要求，满足不同程度要求的为不同范式。\n目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、Boyce-Codd范式（BCNF）、第四范式（4NF）和第五范式（5NF）。\n1. **第一范式（1NF）** \n在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。\n所谓第一范式（1NF）是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。如果出现重复的属性，就可能需要定义一个新的实体，新的实体由重复的属性构成，新实体与原实体之间为一对多关系。在第一范式（1NF）中表的每一行只包含一个实例的信息。\n简而言之，第一范式就是无重复的列。\n2. **第二范式（2NF）**\n数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖（部分函数依赖指的是存在组合关键字中的某些字段决定非关键字段的情况），也即所有非关键字段都完全依赖于任意一组候选关键字。\n\n### 范式化的优与劣\n1. 优势\n * 更新操作通常比反范式化快\n * 重复数据较少\n * 表更小，可以更好的放在内存中，执行操作快\n * 加快单表检索\n\n2. 劣势\n * 通常需要关联表，关联表的代价很昂贵，可能使得索引失效\n","slug":"mysql-schema","published":1,"updated":"2019-07-09T10:01:16.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld8y0022e8webo8gvyq3","content":"<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><ol>\n<li><strong>更小通常更好</strong> 尽量使用可以正确存储数据的最小数据类型。更小的数据类型通常更快，因为他们占用更少的磁盘、内存和CPU缓存，并且需要的CPU处理周期也更少（例如只需要存0-200，tinyint unsigned更好）</li>\n<li><strong>简单就好</strong> 简单数据类型操作代价更低，（使用MySQL内建类型而不是用字符串来存储日期，使用整型存储IP而不是字符串）<ul>\n<li>inet_aton:将ip地址转换成数字型</li>\n<li>inet_ntoa:将数字型转换成ip地址</li>\n</ul>\n</li>\n<li><strong>避免使用NULL</strong> 通常情况下最好指定列为NOT NULL,除非真的需要存储NULL值（NULL会让索引，索引统计和值比较变得更复杂，但是对于InnoDB使用了单独的bit存储NULL，对于稀疏的数据有很好的空间效率）</li>\n<li>有符号与无符号使用相同的存储空间，并且具有相同的性能，因此可以更具实际情况选择合适的类型（范围不同）<ul>\n<li>tinyint unsigned 0-255</li>\n<li>tinyint -128-127</li>\n</ul>\n</li>\n<li><strong>DECIMAL</strong> 可以使用BIGINT来代替，decimal需要额外的开销，代价较高</li>\n<li><strong>VARCHAR比CHAR更灵活</strong></li>\n<li><strong>BLOG,TEXT避免使用</strong></li>\n<li><strong>应该使用整数作为标识符而不是字符串</strong><a id=\"more\"></a>\n</li>\n</ol>\n<h3 id=\"Schema陷阱\"><a href=\"#Schema陷阱\" class=\"headerlink\" title=\"Schema陷阱\"></a>Schema陷阱</h3><ol>\n<li>太多的列</li>\n<li>过多的关联</li>\n<li>乱用枚举</li>\n</ol>\n<h4 id=\"范式\"><a href=\"#范式\" class=\"headerlink\" title=\"范式\"></a>范式</h4><p>范式是符合某一种级别的关系模式的集合。关系数据库中的关系必须满足一定的要求，满足不同程度要求的为不同范式。<br>目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、Boyce-Codd范式（BCNF）、第四范式（4NF）和第五范式（5NF）。</p>\n<ol>\n<li><strong>第一范式（1NF）</strong><br>在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。<br>所谓第一范式（1NF）是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。如果出现重复的属性，就可能需要定义一个新的实体，新的实体由重复的属性构成，新实体与原实体之间为一对多关系。在第一范式（1NF）中表的每一行只包含一个实例的信息。<br>简而言之，第一范式就是无重复的列。</li>\n<li><strong>第二范式（2NF）</strong><br>数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖（部分函数依赖指的是存在组合关键字中的某些字段决定非关键字段的情况），也即所有非关键字段都完全依赖于任意一组候选关键字。</li>\n</ol>\n<h3 id=\"范式化的优与劣\"><a href=\"#范式化的优与劣\" class=\"headerlink\" title=\"范式化的优与劣\"></a>范式化的优与劣</h3><ol>\n<li><p>优势</p>\n<ul>\n<li>更新操作通常比反范式化快</li>\n<li>重复数据较少</li>\n<li>表更小，可以更好的放在内存中，执行操作快</li>\n<li>加快单表检索</li>\n</ul>\n</li>\n<li><p>劣势</p>\n<ul>\n<li>通常需要关联表，关联表的代价很昂贵，可能使得索引失效</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><ol>\n<li><strong>更小通常更好</strong> 尽量使用可以正确存储数据的最小数据类型。更小的数据类型通常更快，因为他们占用更少的磁盘、内存和CPU缓存，并且需要的CPU处理周期也更少（例如只需要存0-200，tinyint unsigned更好）</li>\n<li><strong>简单就好</strong> 简单数据类型操作代价更低，（使用MySQL内建类型而不是用字符串来存储日期，使用整型存储IP而不是字符串）<ul>\n<li>inet_aton:将ip地址转换成数字型</li>\n<li>inet_ntoa:将数字型转换成ip地址</li>\n</ul>\n</li>\n<li><strong>避免使用NULL</strong> 通常情况下最好指定列为NOT NULL,除非真的需要存储NULL值（NULL会让索引，索引统计和值比较变得更复杂，但是对于InnoDB使用了单独的bit存储NULL，对于稀疏的数据有很好的空间效率）</li>\n<li>有符号与无符号使用相同的存储空间，并且具有相同的性能，因此可以更具实际情况选择合适的类型（范围不同）<ul>\n<li>tinyint unsigned 0-255</li>\n<li>tinyint -128-127</li>\n</ul>\n</li>\n<li><strong>DECIMAL</strong> 可以使用BIGINT来代替，decimal需要额外的开销，代价较高</li>\n<li><strong>VARCHAR比CHAR更灵活</strong></li>\n<li><strong>BLOG,TEXT避免使用</strong></li>\n<li><strong>应该使用整数作为标识符而不是字符串</strong>","more":"</li>\n</ol>\n<h3 id=\"Schema陷阱\"><a href=\"#Schema陷阱\" class=\"headerlink\" title=\"Schema陷阱\"></a>Schema陷阱</h3><ol>\n<li>太多的列</li>\n<li>过多的关联</li>\n<li>乱用枚举</li>\n</ol>\n<h4 id=\"范式\"><a href=\"#范式\" class=\"headerlink\" title=\"范式\"></a>范式</h4><p>范式是符合某一种级别的关系模式的集合。关系数据库中的关系必须满足一定的要求，满足不同程度要求的为不同范式。<br>目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、Boyce-Codd范式（BCNF）、第四范式（4NF）和第五范式（5NF）。</p>\n<ol>\n<li><strong>第一范式（1NF）</strong><br>在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。<br>所谓第一范式（1NF）是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。如果出现重复的属性，就可能需要定义一个新的实体，新的实体由重复的属性构成，新实体与原实体之间为一对多关系。在第一范式（1NF）中表的每一行只包含一个实例的信息。<br>简而言之，第一范式就是无重复的列。</li>\n<li><strong>第二范式（2NF）</strong><br>数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖（部分函数依赖指的是存在组合关键字中的某些字段决定非关键字段的情况），也即所有非关键字段都完全依赖于任意一组候选关键字。</li>\n</ol>\n<h3 id=\"范式化的优与劣\"><a href=\"#范式化的优与劣\" class=\"headerlink\" title=\"范式化的优与劣\"></a>范式化的优与劣</h3><ol>\n<li><p>优势</p>\n<ul>\n<li>更新操作通常比反范式化快</li>\n<li>重复数据较少</li>\n<li>表更小，可以更好的放在内存中，执行操作快</li>\n<li>加快单表检索</li>\n</ul>\n</li>\n<li><p>劣势</p>\n<ul>\n<li>通常需要关联表，关联表的代价很昂贵，可能使得索引失效</li>\n</ul>\n</li>\n</ol>"},{"title":"MySQL主从同步","date":"2018-09-28T07:54:03.000Z","_content":"\n#### 主从同步\n\n一个主数据库（Master），多个从数据库(Slave)。主数据库数据变更同步到下面所有的从服务器。\n<!--more-->\n\n#### Master配置--配置文件\n1. 开启二进制日志文件(修改/etc/mysql/mysql.conf.d/mysqld.cnf)\n2. 给数据库分配一个唯一id\n3. 修改完成重启数据库\n\n```conf\n[mysqld]\nlog-bin=mysql-bin\nserver-id=1\n```\n\n#### Master配置--创建一个具有slave权限的远程账号\n```sql\nGRANT REPLICATION SLAVE ON *.* TO '账号'@'IP地址'\n```\n\n#### Master配置--查看Master状态\n**注意：File和Position要用于Slave配置**\n\n```sql\nshow master status;\n```\n![效果图](/images/mysql/mysql_master_status.png)\n\n#### Slave配置--配置文件\n1. 给数据库分配一个唯一id\n2. 修改完成重启数据库\n```conf\n[mysqld]\nserver-id=2\n```\n\n#### Slave配置--设置同步对象（Master）参数\n```sql\nCHANGE MASTER TO\n    MASTER_HOST='主数据库地址，一般为一个ip地址',\n    MASTER_USER='Master的链接账号，之前创建好的',\n    MASTER_PASSWORD='账号对应的密码',\n    MASTER_LOG_FILE='recorded_log_file_name', // 这个就是上面Master查询到的File字段\n    MASTER_LOG_POS=recorded_log_position; // 这个就是上面Master查询到的Position\n```\n\n#### Slave配置--开启同步\n```sql\n// 1. 开启\nstart slave;\n// 2. 关闭\nstop slave;\n```\n\n#### Slave配置--查看同步状态\n```sql\nshow slave status;\n```\n\n<div class=\"tip\">参考文档： https://dev.mysql.com/doc/refman/5.7/en/replication-howto-additionalslaves.html\n</div>\n","source":"_posts/mysql-slave.md","raw":"---\ntitle: MySQL主从同步\ndate: 2018-09-28 15:54:03\ntags: mysql\ncategories: 数据库\n---\n\n#### 主从同步\n\n一个主数据库（Master），多个从数据库(Slave)。主数据库数据变更同步到下面所有的从服务器。\n<!--more-->\n\n#### Master配置--配置文件\n1. 开启二进制日志文件(修改/etc/mysql/mysql.conf.d/mysqld.cnf)\n2. 给数据库分配一个唯一id\n3. 修改完成重启数据库\n\n```conf\n[mysqld]\nlog-bin=mysql-bin\nserver-id=1\n```\n\n#### Master配置--创建一个具有slave权限的远程账号\n```sql\nGRANT REPLICATION SLAVE ON *.* TO '账号'@'IP地址'\n```\n\n#### Master配置--查看Master状态\n**注意：File和Position要用于Slave配置**\n\n```sql\nshow master status;\n```\n![效果图](/images/mysql/mysql_master_status.png)\n\n#### Slave配置--配置文件\n1. 给数据库分配一个唯一id\n2. 修改完成重启数据库\n```conf\n[mysqld]\nserver-id=2\n```\n\n#### Slave配置--设置同步对象（Master）参数\n```sql\nCHANGE MASTER TO\n    MASTER_HOST='主数据库地址，一般为一个ip地址',\n    MASTER_USER='Master的链接账号，之前创建好的',\n    MASTER_PASSWORD='账号对应的密码',\n    MASTER_LOG_FILE='recorded_log_file_name', // 这个就是上面Master查询到的File字段\n    MASTER_LOG_POS=recorded_log_position; // 这个就是上面Master查询到的Position\n```\n\n#### Slave配置--开启同步\n```sql\n// 1. 开启\nstart slave;\n// 2. 关闭\nstop slave;\n```\n\n#### Slave配置--查看同步状态\n```sql\nshow slave status;\n```\n\n<div class=\"tip\">参考文档： https://dev.mysql.com/doc/refman/5.7/en/replication-howto-additionalslaves.html\n</div>\n","slug":"mysql-slave","published":1,"updated":"2019-07-09T10:01:39.150Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld8z0023e8we5imrpf3y","content":"<h4 id=\"主从同步\"><a href=\"#主从同步\" class=\"headerlink\" title=\"主从同步\"></a>主从同步</h4><p>一个主数据库（Master），多个从数据库(Slave)。主数据库数据变更同步到下面所有的从服务器。<br><a id=\"more\"></a></p>\n<h4 id=\"Master配置–配置文件\"><a href=\"#Master配置–配置文件\" class=\"headerlink\" title=\"Master配置–配置文件\"></a>Master配置–配置文件</h4><ol>\n<li>开启二进制日志文件(修改/etc/mysql/mysql.conf.d/mysqld.cnf)</li>\n<li>给数据库分配一个唯一id</li>\n<li>修改完成重启数据库</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\">server-id=1</span><br></pre></td></tr></table></figure>\n<h4 id=\"Master配置–创建一个具有slave权限的远程账号\"><a href=\"#Master配置–创建一个具有slave权限的远程账号\" class=\"headerlink\" title=\"Master配置–创建一个具有slave权限的远程账号\"></a>Master配置–创建一个具有slave权限的远程账号</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">REPLICATION</span> <span class=\"keyword\">SLAVE</span> <span class=\"keyword\">ON</span> *.* <span class=\"keyword\">TO</span> <span class=\"string\">'账号'</span>@<span class=\"string\">'IP地址'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Master配置–查看Master状态\"><a href=\"#Master配置–查看Master状态\" class=\"headerlink\" title=\"Master配置–查看Master状态\"></a>Master配置–查看Master状态</h4><p><strong>注意：File和Position要用于Slave配置</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">master</span> <span class=\"keyword\">status</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mysql/mysql_master_status.png\" alt=\"效果图\"></p>\n<h4 id=\"Slave配置–配置文件\"><a href=\"#Slave配置–配置文件\" class=\"headerlink\" title=\"Slave配置–配置文件\"></a>Slave配置–配置文件</h4><ol>\n<li>给数据库分配一个唯一id</li>\n<li>修改完成重启数据库<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">server-id=2</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"Slave配置–设置同步对象（Master）参数\"><a href=\"#Slave配置–设置同步对象（Master）参数\" class=\"headerlink\" title=\"Slave配置–设置同步对象（Master）参数\"></a>Slave配置–设置同步对象（Master）参数</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CHANGE</span> <span class=\"keyword\">MASTER</span> <span class=\"keyword\">TO</span></span><br><span class=\"line\">    MASTER_HOST=<span class=\"string\">'主数据库地址，一般为一个ip地址'</span>,</span><br><span class=\"line\">    MASTER_USER=<span class=\"string\">'Master的链接账号，之前创建好的'</span>,</span><br><span class=\"line\">    MASTER_PASSWORD=<span class=\"string\">'账号对应的密码'</span>,</span><br><span class=\"line\">    MASTER_LOG_FILE=<span class=\"string\">'recorded_log_file_name'</span>, // 这个就是上面<span class=\"keyword\">Master</span>查询到的<span class=\"keyword\">File</span>字段</span><br><span class=\"line\">    MASTER_LOG_POS=recorded_log_position; // 这个就是上面Master查询到的Position</span><br></pre></td></tr></table></figure>\n<h4 id=\"Slave配置–开启同步\"><a href=\"#Slave配置–开启同步\" class=\"headerlink\" title=\"Slave配置–开启同步\"></a>Slave配置–开启同步</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 开启</span><br><span class=\"line\"><span class=\"keyword\">start</span> <span class=\"keyword\">slave</span>;</span><br><span class=\"line\">// 2. 关闭</span><br><span class=\"line\"><span class=\"keyword\">stop</span> <span class=\"keyword\">slave</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Slave配置–查看同步状态\"><a href=\"#Slave配置–查看同步状态\" class=\"headerlink\" title=\"Slave配置–查看同步状态\"></a>Slave配置–查看同步状态</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">slave</span> <span class=\"keyword\">status</span>;</span><br></pre></td></tr></table></figure>\n<div class=\"tip\">参考文档： <a href=\"https://dev.mysql.com/doc/refman/5.7/en/replication-howto-additionalslaves.html\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/doc/refman/5.7/en/replication-howto-additionalslaves.html</a><br></div>\n","site":{"data":{}},"excerpt":"<h4 id=\"主从同步\"><a href=\"#主从同步\" class=\"headerlink\" title=\"主从同步\"></a>主从同步</h4><p>一个主数据库（Master），多个从数据库(Slave)。主数据库数据变更同步到下面所有的从服务器。<br>","more":"</p>\n<h4 id=\"Master配置–配置文件\"><a href=\"#Master配置–配置文件\" class=\"headerlink\" title=\"Master配置–配置文件\"></a>Master配置–配置文件</h4><ol>\n<li>开启二进制日志文件(修改/etc/mysql/mysql.conf.d/mysqld.cnf)</li>\n<li>给数据库分配一个唯一id</li>\n<li>修改完成重启数据库</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\">server-id=1</span><br></pre></td></tr></table></figure>\n<h4 id=\"Master配置–创建一个具有slave权限的远程账号\"><a href=\"#Master配置–创建一个具有slave权限的远程账号\" class=\"headerlink\" title=\"Master配置–创建一个具有slave权限的远程账号\"></a>Master配置–创建一个具有slave权限的远程账号</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">REPLICATION</span> <span class=\"keyword\">SLAVE</span> <span class=\"keyword\">ON</span> *.* <span class=\"keyword\">TO</span> <span class=\"string\">'账号'</span>@<span class=\"string\">'IP地址'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Master配置–查看Master状态\"><a href=\"#Master配置–查看Master状态\" class=\"headerlink\" title=\"Master配置–查看Master状态\"></a>Master配置–查看Master状态</h4><p><strong>注意：File和Position要用于Slave配置</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">master</span> <span class=\"keyword\">status</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/mysql/mysql_master_status.png\" alt=\"效果图\"></p>\n<h4 id=\"Slave配置–配置文件\"><a href=\"#Slave配置–配置文件\" class=\"headerlink\" title=\"Slave配置–配置文件\"></a>Slave配置–配置文件</h4><ol>\n<li>给数据库分配一个唯一id</li>\n<li>修改完成重启数据库<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">server-id=2</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"Slave配置–设置同步对象（Master）参数\"><a href=\"#Slave配置–设置同步对象（Master）参数\" class=\"headerlink\" title=\"Slave配置–设置同步对象（Master）参数\"></a>Slave配置–设置同步对象（Master）参数</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CHANGE</span> <span class=\"keyword\">MASTER</span> <span class=\"keyword\">TO</span></span><br><span class=\"line\">    MASTER_HOST=<span class=\"string\">'主数据库地址，一般为一个ip地址'</span>,</span><br><span class=\"line\">    MASTER_USER=<span class=\"string\">'Master的链接账号，之前创建好的'</span>,</span><br><span class=\"line\">    MASTER_PASSWORD=<span class=\"string\">'账号对应的密码'</span>,</span><br><span class=\"line\">    MASTER_LOG_FILE=<span class=\"string\">'recorded_log_file_name'</span>, // 这个就是上面<span class=\"keyword\">Master</span>查询到的<span class=\"keyword\">File</span>字段</span><br><span class=\"line\">    MASTER_LOG_POS=recorded_log_position; // 这个就是上面Master查询到的Position</span><br></pre></td></tr></table></figure>\n<h4 id=\"Slave配置–开启同步\"><a href=\"#Slave配置–开启同步\" class=\"headerlink\" title=\"Slave配置–开启同步\"></a>Slave配置–开启同步</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 开启</span><br><span class=\"line\"><span class=\"keyword\">start</span> <span class=\"keyword\">slave</span>;</span><br><span class=\"line\">// 2. 关闭</span><br><span class=\"line\"><span class=\"keyword\">stop</span> <span class=\"keyword\">slave</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Slave配置–查看同步状态\"><a href=\"#Slave配置–查看同步状态\" class=\"headerlink\" title=\"Slave配置–查看同步状态\"></a>Slave配置–查看同步状态</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">slave</span> <span class=\"keyword\">status</span>;</span><br></pre></td></tr></table></figure>\n<div class=\"tip\">参考文档： <a href=\"https://dev.mysql.com/doc/refman/5.7/en/replication-howto-additionalslaves.html\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/doc/refman/5.7/en/replication-howto-additionalslaves.html</a><br></div>"},{"title":"angular component note-3","date":"2018-07-11T01:26:34.000Z","_content":"\n##### 组件递归\n当我们在组件的模版中写了符合组件本身选择器的元素时，组件就会出现递归\n```typescript\n@Component({\n    selector: 'app-ul',\n    template: `\n    <ul>\n        <li>\n            节点标题\n            <app-ul></app-ul>\n        </li>\n    </ul>\n    `\n})\n```\n我们观察上面组件的元数据，其中模版出现了app-department-ul节点，这个符合组件本身的选择器，这里出现了递归了，如果运行代码，我们会发现浏览器很多嵌套的输出（出现无限递归，angular自带的模版解析器会终止这种行为，大部分浏览器也会终止递归调用，都设置有最大嵌套数量）\n![效果图](/images/ng-note-component/app-ul.png)\n![效果图](/images/ng-note-component/app-ul-error.png)\n\n##### 设计递归数据结构-节点\n\n```typescript\n/**\n * 一个节点\n */\nexport interface Node {\n    // 节点数据\n    data: any;\n    // 子级节点（多个）\n    childNodes: Node[];\n}\n```\n\n##### 把节点作为组件的数据绑定\n```typescript\nimport { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-ul',\n    template: `\n    <ul>\n        <li>\n            {{node.data | json}}\n            <app-ul *ngFor=\"let item of node.childNodes\" [node]=\"item\"></app-ul>\n        </li>\n    </ul>\n    `\n})\nexport class AppUlComponent {\n\n    @Input() node: Node;\n}\n```\n在app.component.ts中定义一个根结点，然后使用`<app-ul></app-ul>`;\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n    rootNode = {\n        data: { title: '根节点' },\n        childNodes: [\n            {\n                data: { title: '一级节点-1' },\n                childNodes: [\n                    {\n                        data: { title: '二级节点-1-1' },\n                        childNodes: []\n                    }\n                ]\n            },\n            {\n                data: { title: '一级节点-2' },\n                childNodes: [\n                    {\n                        data: { title: '二级节点-2-1' },\n                        childNodes: []\n                    },\n                    {\n                        data: { title: '二级节点-2-2' },\n                        childNodes: [\n                            {\n                                data: { title: '三级节点-2-2-1' },\n                                childNodes: []\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    };\n}\n```\n```html\n<!--app.component.html-->\n<app-ul [node]=\"rootNode\"></app-ul>\n```\n![效果图](/images/ng-note-component/app-ul-res.png)\n\n##### 事件传递\n上面的组件只能显示一个列表，通常情况我们都需要一些其它的操作，比如删除添加修改，这个时候需要让组件可以触发事件如点击\n```typescript\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'app-ul',\n    template: `\n    <ul>\n        <li>\n            <div (click)=\"sendClickEvent(node)\">{{node.data | json}}</div>\n            <app-ul *ngFor=\"let item of node.childNodes\" [node]=\"item\" (clickEvent)=\"sendClickEvent($event)\"></app-ul>\n        </li>\n    </ul>\n    `\n})\nexport class AppUlComponent {\n\n    @Input() node: Node;\n\n    @Output() clickEvent = new EventEmitter(false);\n\n    /**\n     * 发射触发事件的节点\n     * @param node 触发点击事件的节点\n     */\n    sendClickEvent(node: Node) {\n        this.clickEvent.emit(node);\n    }\n}\n```\n上面代码我们给组件暴露了一个发射事件的属性clickEvent,每次节点的内容被点击的时候就会通过`this.clickEvent.emit(node)`发射事件数据。而为了然递归的组件也可以发送，我们通过他的上级代理发送,上级通过和子节点的clickEvent绑定，发送子节点传递过来的`$event`代理发送数据，如下：\n```html\n<!-- 这里的node是当前节点自己的node，每次div被点击的时候发射出去 -->\n<div ... (click)=\"sendClickEvent(node)\"></div>\n<!-- 这里的$event是当子节点自己传过来的数据，每次子节点被点击的时候会传过来，然后被当前节点代理发送出去 -->\n<app-ul ... (clickEvent)=\"sendClickEvent($event)\"></app-ul>\n```\n下面是在app.component.ts中使用代码\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n    rootNode = {\n        data: { title: '根节点' },\n        childNodes: [\n            {\n                data: { title: '一级节点-1' },\n                childNodes: [\n                    {\n                        data: { title: '二级节点-1-1' },\n                        childNodes: []\n                    }\n                ]\n            },\n            {\n                data: { title: '一级节点-2' },\n                childNodes: [\n                    {\n                        data: { title: '二级节点-2-1' },\n                        childNodes: []\n                    },\n                    {\n                        data: { title: '二级节点-2-2' },\n                        childNodes: [\n                            {\n                                data: { title: '三级节点-2-2-1' },\n                                childNodes: []\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    };\n\n    // 被点击的节点\n    activeNode: Node;\n}\n```\n```html\n<!--app.component.html-->\n<app-ul [node]=\"rootNode\" (clickEvent)=\"activeNode = $event\"></app-ul>\n<pre>{{activeNode | json}}</pre>\n```\n![效果图](/images/ng-note-component/app-ul.gif)\n\n<div class=\"tip\">\n1. 使用递归组件要注意何时终止递归（不要出现死循环）\n2. 递归可以传递事件，但是我们要阻止冒泡，避免传递的事件无限膨胀（越来越多）\n代码下载\n<a href=\"/codes/component-simple-3.zip\">component-simple-3.zip</a>\n</div>\n","source":"_posts/ng-note-component-3.md","raw":"---\ntitle: angular component note-3\ndate: 2018-07-11 09:26:34\ntags: Angular\ncategories: Web开发\n---\n\n##### 组件递归\n当我们在组件的模版中写了符合组件本身选择器的元素时，组件就会出现递归\n```typescript\n@Component({\n    selector: 'app-ul',\n    template: `\n    <ul>\n        <li>\n            节点标题\n            <app-ul></app-ul>\n        </li>\n    </ul>\n    `\n})\n```\n我们观察上面组件的元数据，其中模版出现了app-department-ul节点，这个符合组件本身的选择器，这里出现了递归了，如果运行代码，我们会发现浏览器很多嵌套的输出（出现无限递归，angular自带的模版解析器会终止这种行为，大部分浏览器也会终止递归调用，都设置有最大嵌套数量）\n![效果图](/images/ng-note-component/app-ul.png)\n![效果图](/images/ng-note-component/app-ul-error.png)\n\n##### 设计递归数据结构-节点\n\n```typescript\n/**\n * 一个节点\n */\nexport interface Node {\n    // 节点数据\n    data: any;\n    // 子级节点（多个）\n    childNodes: Node[];\n}\n```\n\n##### 把节点作为组件的数据绑定\n```typescript\nimport { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-ul',\n    template: `\n    <ul>\n        <li>\n            {{node.data | json}}\n            <app-ul *ngFor=\"let item of node.childNodes\" [node]=\"item\"></app-ul>\n        </li>\n    </ul>\n    `\n})\nexport class AppUlComponent {\n\n    @Input() node: Node;\n}\n```\n在app.component.ts中定义一个根结点，然后使用`<app-ul></app-ul>`;\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n    rootNode = {\n        data: { title: '根节点' },\n        childNodes: [\n            {\n                data: { title: '一级节点-1' },\n                childNodes: [\n                    {\n                        data: { title: '二级节点-1-1' },\n                        childNodes: []\n                    }\n                ]\n            },\n            {\n                data: { title: '一级节点-2' },\n                childNodes: [\n                    {\n                        data: { title: '二级节点-2-1' },\n                        childNodes: []\n                    },\n                    {\n                        data: { title: '二级节点-2-2' },\n                        childNodes: [\n                            {\n                                data: { title: '三级节点-2-2-1' },\n                                childNodes: []\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    };\n}\n```\n```html\n<!--app.component.html-->\n<app-ul [node]=\"rootNode\"></app-ul>\n```\n![效果图](/images/ng-note-component/app-ul-res.png)\n\n##### 事件传递\n上面的组件只能显示一个列表，通常情况我们都需要一些其它的操作，比如删除添加修改，这个时候需要让组件可以触发事件如点击\n```typescript\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'app-ul',\n    template: `\n    <ul>\n        <li>\n            <div (click)=\"sendClickEvent(node)\">{{node.data | json}}</div>\n            <app-ul *ngFor=\"let item of node.childNodes\" [node]=\"item\" (clickEvent)=\"sendClickEvent($event)\"></app-ul>\n        </li>\n    </ul>\n    `\n})\nexport class AppUlComponent {\n\n    @Input() node: Node;\n\n    @Output() clickEvent = new EventEmitter(false);\n\n    /**\n     * 发射触发事件的节点\n     * @param node 触发点击事件的节点\n     */\n    sendClickEvent(node: Node) {\n        this.clickEvent.emit(node);\n    }\n}\n```\n上面代码我们给组件暴露了一个发射事件的属性clickEvent,每次节点的内容被点击的时候就会通过`this.clickEvent.emit(node)`发射事件数据。而为了然递归的组件也可以发送，我们通过他的上级代理发送,上级通过和子节点的clickEvent绑定，发送子节点传递过来的`$event`代理发送数据，如下：\n```html\n<!-- 这里的node是当前节点自己的node，每次div被点击的时候发射出去 -->\n<div ... (click)=\"sendClickEvent(node)\"></div>\n<!-- 这里的$event是当子节点自己传过来的数据，每次子节点被点击的时候会传过来，然后被当前节点代理发送出去 -->\n<app-ul ... (clickEvent)=\"sendClickEvent($event)\"></app-ul>\n```\n下面是在app.component.ts中使用代码\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n    rootNode = {\n        data: { title: '根节点' },\n        childNodes: [\n            {\n                data: { title: '一级节点-1' },\n                childNodes: [\n                    {\n                        data: { title: '二级节点-1-1' },\n                        childNodes: []\n                    }\n                ]\n            },\n            {\n                data: { title: '一级节点-2' },\n                childNodes: [\n                    {\n                        data: { title: '二级节点-2-1' },\n                        childNodes: []\n                    },\n                    {\n                        data: { title: '二级节点-2-2' },\n                        childNodes: [\n                            {\n                                data: { title: '三级节点-2-2-1' },\n                                childNodes: []\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    };\n\n    // 被点击的节点\n    activeNode: Node;\n}\n```\n```html\n<!--app.component.html-->\n<app-ul [node]=\"rootNode\" (clickEvent)=\"activeNode = $event\"></app-ul>\n<pre>{{activeNode | json}}</pre>\n```\n![效果图](/images/ng-note-component/app-ul.gif)\n\n<div class=\"tip\">\n1. 使用递归组件要注意何时终止递归（不要出现死循环）\n2. 递归可以传递事件，但是我们要阻止冒泡，避免传递的事件无限膨胀（越来越多）\n代码下载\n<a href=\"/codes/component-simple-3.zip\">component-simple-3.zip</a>\n</div>\n","slug":"ng-note-component-3","published":1,"updated":"2019-07-12T03:05:22.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld910027e8wezk6ginse","content":"<h5 id=\"组件递归\"><a href=\"#组件递归\" class=\"headerlink\" title=\"组件递归\"></a>组件递归</h5><p>当我们在组件的模版中写了符合组件本身选择器的元素时，组件就会出现递归<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-ul'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            节点标题</span></span><br><span class=\"line\"><span class=\"string\">            &lt;app-ul&gt;&lt;/app-ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>我们观察上面组件的元数据，其中模版出现了app-department-ul节点，这个符合组件本身的选择器，这里出现了递归了，如果运行代码，我们会发现浏览器很多嵌套的输出（出现无限递归，angular自带的模版解析器会终止这种行为，大部分浏览器也会终止递归调用，都设置有最大嵌套数量）<br><img src=\"/images/ng-note-component/app-ul.png\" alt=\"效果图\"><br><img src=\"/images/ng-note-component/app-ul-error.png\" alt=\"效果图\"></p>\n<h5 id=\"设计递归数据结构-节点\"><a href=\"#设计递归数据结构-节点\" class=\"headerlink\" title=\"设计递归数据结构-节点\"></a>设计递归数据结构-节点</h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 一个节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Node &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 节点数据</span></span><br><span class=\"line\">    data: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 子级节点（多个）</span></span><br><span class=\"line\">    childNodes: Node[];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"把节点作为组件的数据绑定\"><a href=\"#把节点作为组件的数据绑定\" class=\"headerlink\" title=\"把节点作为组件的数据绑定\"></a>把节点作为组件的数据绑定</h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-ul'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &#123;&#123;node.data | json&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;app-ul *ngFor=\"let item of node.childNodes\" [node]=\"item\"&gt;&lt;/app-ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppUlComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Input</span>() node: Node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在app.component.ts中定义一个根结点，然后使用<code>&lt;app-ul&gt;&lt;/app-ul&gt;</code>;<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    rootNode = &#123;</span><br><span class=\"line\">        data: &#123; title: <span class=\"string\">'根节点'</span> &#125;,</span><br><span class=\"line\">        childNodes: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                data: &#123; title: <span class=\"string\">'一级节点-1'</span> &#125;,</span><br><span class=\"line\">                childNodes: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        data: &#123; title: <span class=\"string\">'二级节点-1-1'</span> &#125;,</span><br><span class=\"line\">                        childNodes: []</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                data: &#123; title: <span class=\"string\">'一级节点-2'</span> &#125;,</span><br><span class=\"line\">                childNodes: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        data: &#123; title: <span class=\"string\">'二级节点-2-1'</span> &#125;,</span><br><span class=\"line\">                        childNodes: []</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        data: &#123; title: <span class=\"string\">'二级节点-2-2'</span> &#125;,</span><br><span class=\"line\">                        childNodes: [</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                data: &#123; title: <span class=\"string\">'三级节点-2-2-1'</span> &#125;,</span><br><span class=\"line\">                                childNodes: []</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--app.component.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-ul</span> [<span class=\"attr\">node</span>]=<span class=\"string\">\"rootNode\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ng-note-component/app-ul-res.png\" alt=\"效果图\"></p>\n<h5 id=\"事件传递\"><a href=\"#事件传递\" class=\"headerlink\" title=\"事件传递\"></a>事件传递</h5><p>上面的组件只能显示一个列表，通常情况我们都需要一些其它的操作，比如删除添加修改，这个时候需要让组件可以触发事件如点击<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, Input, Output, EventEmitter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-ul'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;div (click)=\"sendClickEvent(node)\"&gt;&#123;&#123;node.data | json&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;app-ul *ngFor=\"let item of node.childNodes\" [node]=\"item\" (clickEvent)=\"sendClickEvent($event)\"&gt;&lt;/app-ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppUlComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Input</span>() node: Node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Output</span>() clickEvent = <span class=\"keyword\">new</span> EventEmitter(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发射触发事件的节点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param node 触发点击事件的节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    sendClickEvent(node: Node) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.clickEvent.emit(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码我们给组件暴露了一个发射事件的属性clickEvent,每次节点的内容被点击的时候就会通过<code>this.clickEvent.emit(node)</code>发射事件数据。而为了然递归的组件也可以发送，我们通过他的上级代理发送,上级通过和子节点的clickEvent绑定，发送子节点传递过来的<code>$event</code>代理发送数据，如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 这里的node是当前节点自己的node，每次div被点击的时候发射出去 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">...</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"sendClickEvent(node)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这里的$event是当子节点自己传过来的数据，每次子节点被点击的时候会传过来，然后被当前节点代理发送出去 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-ul</span> <span class=\"attr\">...</span> (<span class=\"attr\">clickEvent</span>)=<span class=\"string\">\"sendClickEvent($event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>下面是在app.component.ts中使用代码<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    rootNode = &#123;</span><br><span class=\"line\">        data: &#123; title: <span class=\"string\">'根节点'</span> &#125;,</span><br><span class=\"line\">        childNodes: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                data: &#123; title: <span class=\"string\">'一级节点-1'</span> &#125;,</span><br><span class=\"line\">                childNodes: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        data: &#123; title: <span class=\"string\">'二级节点-1-1'</span> &#125;,</span><br><span class=\"line\">                        childNodes: []</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                data: &#123; title: <span class=\"string\">'一级节点-2'</span> &#125;,</span><br><span class=\"line\">                childNodes: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        data: &#123; title: <span class=\"string\">'二级节点-2-1'</span> &#125;,</span><br><span class=\"line\">                        childNodes: []</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        data: &#123; title: <span class=\"string\">'二级节点-2-2'</span> &#125;,</span><br><span class=\"line\">                        childNodes: [</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                data: &#123; title: <span class=\"string\">'三级节点-2-2-1'</span> &#125;,</span><br><span class=\"line\">                                childNodes: []</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 被点击的节点</span></span><br><span class=\"line\">    activeNode: Node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--app.component.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-ul</span> [<span class=\"attr\">node</span>]=<span class=\"string\">\"rootNode\"</span> (<span class=\"attr\">clickEvent</span>)=<span class=\"string\">\"activeNode = $event\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123;activeNode | json&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ng-note-component/app-ul.gif\" alt=\"效果图\"></p>\n<div class=\"tip\"><br>1. 使用递归组件要注意何时终止递归（不要出现死循环）<br>2. 递归可以传递事件，但是我们要阻止冒泡，避免传递的事件无限膨胀（越来越多）<br>代码下载<br><a href=\"/codes/component-simple-3.zip\">component-simple-3.zip</a><br></div>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"组件递归\"><a href=\"#组件递归\" class=\"headerlink\" title=\"组件递归\"></a>组件递归</h5><p>当我们在组件的模版中写了符合组件本身选择器的元素时，组件就会出现递归<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-ul'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            节点标题</span></span><br><span class=\"line\"><span class=\"string\">            &lt;app-ul&gt;&lt;/app-ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>我们观察上面组件的元数据，其中模版出现了app-department-ul节点，这个符合组件本身的选择器，这里出现了递归了，如果运行代码，我们会发现浏览器很多嵌套的输出（出现无限递归，angular自带的模版解析器会终止这种行为，大部分浏览器也会终止递归调用，都设置有最大嵌套数量）<br><img src=\"/images/ng-note-component/app-ul.png\" alt=\"效果图\"><br><img src=\"/images/ng-note-component/app-ul-error.png\" alt=\"效果图\"></p>\n<h5 id=\"设计递归数据结构-节点\"><a href=\"#设计递归数据结构-节点\" class=\"headerlink\" title=\"设计递归数据结构-节点\"></a>设计递归数据结构-节点</h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 一个节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Node &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 节点数据</span></span><br><span class=\"line\">    data: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 子级节点（多个）</span></span><br><span class=\"line\">    childNodes: Node[];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"把节点作为组件的数据绑定\"><a href=\"#把节点作为组件的数据绑定\" class=\"headerlink\" title=\"把节点作为组件的数据绑定\"></a>把节点作为组件的数据绑定</h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-ul'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &#123;&#123;node.data | json&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;app-ul *ngFor=\"let item of node.childNodes\" [node]=\"item\"&gt;&lt;/app-ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppUlComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Input</span>() node: Node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在app.component.ts中定义一个根结点，然后使用<code>&lt;app-ul&gt;&lt;/app-ul&gt;</code>;<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    rootNode = &#123;</span><br><span class=\"line\">        data: &#123; title: <span class=\"string\">'根节点'</span> &#125;,</span><br><span class=\"line\">        childNodes: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                data: &#123; title: <span class=\"string\">'一级节点-1'</span> &#125;,</span><br><span class=\"line\">                childNodes: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        data: &#123; title: <span class=\"string\">'二级节点-1-1'</span> &#125;,</span><br><span class=\"line\">                        childNodes: []</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                data: &#123; title: <span class=\"string\">'一级节点-2'</span> &#125;,</span><br><span class=\"line\">                childNodes: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        data: &#123; title: <span class=\"string\">'二级节点-2-1'</span> &#125;,</span><br><span class=\"line\">                        childNodes: []</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        data: &#123; title: <span class=\"string\">'二级节点-2-2'</span> &#125;,</span><br><span class=\"line\">                        childNodes: [</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                data: &#123; title: <span class=\"string\">'三级节点-2-2-1'</span> &#125;,</span><br><span class=\"line\">                                childNodes: []</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--app.component.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-ul</span> [<span class=\"attr\">node</span>]=<span class=\"string\">\"rootNode\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ng-note-component/app-ul-res.png\" alt=\"效果图\"></p>\n<h5 id=\"事件传递\"><a href=\"#事件传递\" class=\"headerlink\" title=\"事件传递\"></a>事件传递</h5><p>上面的组件只能显示一个列表，通常情况我们都需要一些其它的操作，比如删除添加修改，这个时候需要让组件可以触发事件如点击<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, Input, Output, EventEmitter &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-ul'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;li&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;div (click)=\"sendClickEvent(node)\"&gt;&#123;&#123;node.data | json&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;app-ul *ngFor=\"let item of node.childNodes\" [node]=\"item\" (clickEvent)=\"sendClickEvent($event)\"&gt;&lt;/app-ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppUlComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Input</span>() node: Node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Output</span>() clickEvent = <span class=\"keyword\">new</span> EventEmitter(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发射触发事件的节点</span></span><br><span class=\"line\"><span class=\"comment\">     * @param node 触发点击事件的节点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    sendClickEvent(node: Node) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.clickEvent.emit(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码我们给组件暴露了一个发射事件的属性clickEvent,每次节点的内容被点击的时候就会通过<code>this.clickEvent.emit(node)</code>发射事件数据。而为了然递归的组件也可以发送，我们通过他的上级代理发送,上级通过和子节点的clickEvent绑定，发送子节点传递过来的<code>$event</code>代理发送数据，如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 这里的node是当前节点自己的node，每次div被点击的时候发射出去 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">...</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"sendClickEvent(node)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这里的$event是当子节点自己传过来的数据，每次子节点被点击的时候会传过来，然后被当前节点代理发送出去 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-ul</span> <span class=\"attr\">...</span> (<span class=\"attr\">clickEvent</span>)=<span class=\"string\">\"sendClickEvent($event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>下面是在app.component.ts中使用代码<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    rootNode = &#123;</span><br><span class=\"line\">        data: &#123; title: <span class=\"string\">'根节点'</span> &#125;,</span><br><span class=\"line\">        childNodes: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                data: &#123; title: <span class=\"string\">'一级节点-1'</span> &#125;,</span><br><span class=\"line\">                childNodes: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        data: &#123; title: <span class=\"string\">'二级节点-1-1'</span> &#125;,</span><br><span class=\"line\">                        childNodes: []</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                data: &#123; title: <span class=\"string\">'一级节点-2'</span> &#125;,</span><br><span class=\"line\">                childNodes: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        data: &#123; title: <span class=\"string\">'二级节点-2-1'</span> &#125;,</span><br><span class=\"line\">                        childNodes: []</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        data: &#123; title: <span class=\"string\">'二级节点-2-2'</span> &#125;,</span><br><span class=\"line\">                        childNodes: [</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                data: &#123; title: <span class=\"string\">'三级节点-2-2-1'</span> &#125;,</span><br><span class=\"line\">                                childNodes: []</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 被点击的节点</span></span><br><span class=\"line\">    activeNode: Node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--app.component.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-ul</span> [<span class=\"attr\">node</span>]=<span class=\"string\">\"rootNode\"</span> (<span class=\"attr\">clickEvent</span>)=<span class=\"string\">\"activeNode = $event\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123;activeNode | json&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ng-note-component/app-ul.gif\" alt=\"效果图\"></p>\n<div class=\"tip\"><br>1. 使用递归组件要注意何时终止递归（不要出现死循环）<br>2. 递归可以传递事件，但是我们要阻止冒泡，避免传递的事件无限膨胀（越来越多）<br>代码下载<br><a href=\"/codes/component-simple-3.zip\">component-simple-3.zip</a><br></div>\n"},{"title":"JetPack-Room预览","date":"2019-06-29T03:37:36.000Z","_content":"\nRoom是一个数据持久化的库,它使您可以更轻松地在应用程序中使用SQLiteDatabase对象，减少样板代码的数量并在编译时验证SQL查询。Room在SQLite上提供了一个抽象层，提供了更强大的数据库访问，同时充分使用了SQLite能力。Room可帮助运行应用程序的设备上创建应用程序数据的缓存。此缓存对于应用程序是唯一的，允许用户在应用程序中查看数据的副本，无论用户是否连接到了网络。\n<!-- more -->\n\n##### 相关参考\n* [IBM Developer](https://www.ibm.com/developerworks/cn/opensource/os-cn-sqlite/index.html)\n* [使用SQLite保存数据](https://developer.android.google.cn/training/data-storage/sqlite?hl=en)\n* [使用Room保存数据到本地数据库](https://developer.android.google.cn/training/data-storage/room)\n\n##### SQLite\nSQLite 是一个软件库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。SQLite 是在世界上最广泛部署的 SQL 数据库引擎。SQLite 源代码不受版权限制。就像其他数据库，SQLite 引擎不是一个独立的进程，可以按应用程序需求进行静态或动态连接。SQLite 直接访问其存储文件。\n\n##### Android中的SQLite使用\n\nAndroid 在运行时（run-time）集成了 SQLite，所以每个 Android 应用程序都可以使用 SQLite 数据库。对于熟悉 SQL 的开发人员来时，在 Android 开发中使用 SQLite 相当简单。但是，由于 JDBC 会消耗太多的系统资源，所以 JDBC 对于手机这种内存受限设备来说并不合适。因此，Android 提供了一些新的 API 来使用 SQLite 数据库;\n\n* 数据库存储在 data/< 项目文件夹 >/databases/ 下。\n![文件预览](/images/jetpack/android-sqlite.png)\n\n\n##### 例子，把接口数据缓存到SQLite中\n```Kotlin\npackage com.example.androidx_example.until\n\nimport android.content.Context\nimport android.database.sqlite.SQLiteDatabase\n\nobject SQLiteUntil {\n\n    // 数据的名称，这个名称会作为数据存储文件的名称\n    private const val DATABASE_NAME = \"www-cool1024-com.db\"\n    // 数据库实例\n    private lateinit var db: SQLiteDatabase\n\n    /**\n     * 开启数据库连接\n     */\n    fun openDB(context: Context) {\n        if (!this::db.isInitialized || !db.isOpen) {\n            db = context.openOrCreateDatabase(\n                DATABASE_NAME,\n                Context.MODE_PRIVATE,\n                null\n            )\n        }\n    }\n\n    /**\n     * 关闭数据库连接\n     */\n    fun closeDB() {\n        if (this::db.isInitialized) {\n            db.close()\n        }\n    }\n\n    /**\n     * 创建API数据保存表\n     */\n    fun createApiDataTable() {\n        db.execSQL(\n            \"\"\"\n            create table if not exists api_data(\n                id integer primary key autoincrement,\n                api_name text,\n                api_param_hash text,\n                api_data text,\n                save_time integer,\n                lost_time integer\n            )\"\"\".trimIndent()\n        )\n    }\n\n    /**\n     * 保存api数据到api_table中\n     * @param apiName 接口的名称\n     * @param hasCode 参数的hash码\n     * @param dataStr 接口返回数据\n     * @param effectiveTimeMillis 数据有效时间，毫秒\n     */\n    fun saveApiData(apiName: String, hasCode: Int, dataStr: String, effectiveTimeMillis: Long) {\n        val nowMillis = System.currentTimeMillis()\n        db.execSQL(\n            \"insert into api_data(api_name,api_param_hash,api_data,save_time,lost_time) values (?,?,?,?,?)\",\n            arrayOf(apiName, hasCode, dataStr, nowMillis, nowMillis + effectiveTimeMillis)\n        )\n    }\n\n\n    /**\n     * 获取保存的api数据\n     * @param apiName 接口名称\n     * @param hasCode 参数的hash码\n     * @return 查询结果字符串，如果没有那么得到一个空String()\n     */\n    fun getSaveApiData(apiName: String, hasCode: Int): String {\n        val nowMillis = System.currentTimeMillis()\n        val cursor = db.rawQuery(\n            \"select api_data from api_data where api_name = ? and api_param_hash = ? and lost_time > ? order by id desc limit 1\",\n            arrayOf(apiName, hasCode.toString(), nowMillis.toString())\n        )\n        return (if (cursor.moveToNext()) {\n            cursor.getString(cursor.getColumnIndex(\"api_data\"))\n        } else String()).also { cursor.close() }\n    }\n}\n```\n1. 使用context中的`openOrCreateDatabase`可以创建一个数据库连接对象\n2. 使用`execSQL`执行创建表的语句\n3. 使用`execSQL`执行插入语句\n4. 使用`rawQuery`执行查询\n5. apiName为调用的接口名称，hashCode为接口参数的hash后的值（可能会出现碰撞～，这个需要优化），我们使用接口名称+接口参数来确定一条缓存记录，lost_time用于设置缓存失效的时间（根据具体情况设置）\n\n##### 使用辅助工具 SQLiteOpenHelper\n\nSQLiteOpenHelper是用于管理数据库创建和版本管理的帮助程序类。您可以创建一个子类实现onCreate(SQLiteDatabase)，onUpgrade(SQLiteDatabase, int, int)并且可以以根据具体需要实现onOpen(SQLiteDatabase)，如果数据库存在，则该类负责打开数据库，如果不存在则创建数据库，并根据需要进行更新。使用事务确保了数据库始终处于合理状态。\n\n```Kotlin\nclass AppSQLiteHelp(context: Context) :\n    SQLiteOpenHelper(context, SQLiteUntil.DATABASE_NAME, null, SQLiteUntil.DATABASE_VERSION) {\n\n    override fun onCreate(db: SQLiteDatabase) {\n        db.execSQL(\n            \"\"\"\n            create table if not exists api_data(\n                id integer primary key autoincrement,\n                api_name text,\n                api_param_hash text,\n                api_data text,\n                save_time integer,\n                lost_time integer\n            )\"\"\".trimIndent()\n        )\n    }\n\n    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {\n        db.execSQL(\"drop table if exists api_data\")\n        onCreate(db)\n    }\n\n    companion object {\n\n        private val db: AppSQLiteHelp by lazy {\n            AppSQLiteHelp(App.instance)\n        }\n\n        /**\n         * 保存api数据到api_table中\n         * @param apiName 接口的名称\n         * @param hasCode 参数的hash码\n         * @param dataStr 接口返回数据\n         * @param effectiveTimeMillis 数据有效时间，毫秒\n         */\n        fun saveApiData(apiName: String, hasCode: Int, dataStr: String, effectiveTimeMillis: Long) {\n            val nowMillis = System.currentTimeMillis()\n            val values = ContentValues().apply {\n                put(\"api_name\", apiName)\n                put(\"api_param_hash\", hasCode)\n                put(\"api_data\", dataStr)\n                put(\"save_time\", nowMillis)\n                put(\"lost_time\", nowMillis + effectiveTimeMillis)\n            }\n            db.writableDatabase.insert(\"api_data\", null, values)\n        }\n\n        /**\n         * 获取保存的api数据\n         * @param apiName 接口名称\n         * @param hasCode 参数的hash码\n         * @return 查询结果字符串，如果没有那么得到一个空String()\n         */\n        fun getSaveApiData(apiName: String, hasCode: Int): String {\n            val nowMillis = System.currentTimeMillis()\n            val cursor = db.readableDatabase.query(\n                \"api_data\",\n                arrayOf(\"api_data\"),\n                \"api_name = ? and api_param_hash = ? and lost_time > ?\",\n                arrayOf(apiName, hasCode.toString(), nowMillis.toString()),\n                null, // 参考SQL--Group\n                null, // 参考SQL--Having\n                \"id desc\", // 参考SQL--Order By\n                \"1\" // 参考SQL--Limit 限制查询结果数目\n            )\n            return cursor?.let {\n                val dataStr = if (it.moveToNext()) it.getString(cursor.getColumnIndex(\"api_data\"))\n                else String()\n                return dataStr.also { cursor.close() }\n            } ?: String()\n        }\n    }\n}\n```\n\n##### Room\n\n* [7-steps-to-room](https://medium.com/androiddevelopers/7-steps-to-room-27a5fe5f99b2)\n\nRoom是一个数据持久化的库,它使您可以更轻松地在应用程序中使用SQLiteDatabase对象，减少样板代码的数量并在编译时验证SQL查询。Room在SQLite上提供了一个抽象层，提供了更强大的数据库访问，同时充分使用了SQLite能力。Room可帮助运行应用程序的设备上创建应用程序数据的缓存。此缓存对于应用程序是唯一的，允许用户在应用程序中查看数据的副本，无论用户是否连接到了网络。\n\n0. 直接使用SQLite弊端--->Room的优势\n * 必须写大量的**样版代码**  --->  减少样板代码\n * 没有直接的**对象映射**    --->  编译时校验查询，生成对应的关系对象\n * 很难实现**数据库迁移**    --->  轻松实现迁移\n * 很难测试                --->  高度的可测试性\n * 不小心在**主线程**上执行长时间的数据库操作 --->  保持数据库远离主线程\n\n1. 在app/build.gradle中配置,此处为kotlin的导入，详情请查看[更多参考地址](https://developer.android.google.cn/jetpack/androidx/releases/room/)\n```Gradle\ndef room_version = '2.1.0'\nimplementation \"androidx.room:room-runtime:$room_version\"\nimplementation \"androidx.room:room-ktx:$room_version\"\nkapt \"android.arch.persistence.room:compiler:$room_version\"\n\n```\n\n2. Entity(实列)\n```Kotlin\n...\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"api_data\")\ndata class ApiSaveData(\n\n    // @ColumnInfo(name = \"id\")\n    @PrimaryKey\n    var id: Int? = null,\n\n    @ColumnInfo(name = \"api_name\")\n    val apiName: String?,\n\n    @ColumnInfo(name = \"api_param_hash\")\n    val paramHash: Int?,\n\n    @ColumnInfo(name = \"api_data\")\n    val apiData: String?,\n\n    @ColumnInfo(name = \"save_time\")\n    val saveTime: Long?,\n\n    @ColumnInfo(name = \"lost_time\")\n    val lostTime: Long?\n)\n```\n3. Dao(数据访问对象)\n```Kotlin\n...\n\nimport androidx.room.Dao\nimport androidx.room.Query\nimport com.example.androidx_example.entity.ApiSaveData\n\n@Dao\ninterface ApiSaveDataDao : BaseDao<ApiSaveData> {\n    @Query(\"select api_data from  api_data where api_name = :apiName and api_param_hash = :hashCode and lost_time > :currentTime\")\n    fun findSaveData(apiName: String, hashCode: Int, currentTime: Long = System.currentTimeMillis()): String?\n}\n\n/**\n * BaseDao 声明了一些常用的方法，避免重复写样板代码\n */\ninterface BaseDao<T> {\n\n    /**\n     * Insert an object in the database.\n     *\n     * @param obj the object to be inserted.\n     */\n    @Insert\n    fun insert(obj: T)\n\n    /**\n     * Insert an array of objects in the database.\n     *\n     * @param obj the objects to be inserted.\n     */\n    @Insert\n    fun insert(vararg obj: T)\n\n    /**\n     * Update an object from the database.\n     *\n     * @param obj the object to be updated\n     */\n    @Update\n    fun update(obj: T)\n\n    /**\n     * Delete an object from the database\n     *\n     * @param obj the object to be deleted\n     */\n    @Delete\n    fun delete(obj: T)\n\n}\n```\n\n4. 数据库对象\n```Kotlin\n...\n\nimport androidx.room.Database\nimport androidx.room.RoomDatabase\nimport com.example.androidx_example.entity.ApiSaveData\n\n@Database(entities = [ApiSaveData::class], version = 1, exportSchema = false)\nabstract class AppDatabase : RoomDatabase() {\n    abstract fun apiSaveDataDao(): ApiSaveDataDao\n}\n```\n\n5. 单例模式，获取数据库对象\n```Kotlin\n...\n\nimport androidx.room.Room\nimport com.example.androidx_example.App\nimport com.example.androidx_example.dao.AppDatabase\n\nobject RoomUntil {\n\n    lateinit var db: AppDatabase\n        private set\n\n    fun initDB() {\n        if (!this::db.isInitialized) {\n            db = Room.databaseBuilder(\n                App.instance,\n                AppDatabase::class.java, SQLiteUntil.DATABASE_NAME\n            ).build()\n        }\n    }\n}\n```\n\n6. 使用\n```Kotlin\nRoomUntil.initDB()\n\n// 查询指定接口的缓存数据\nval saveDataStr = RoomUntil.db.apiSaveDataDao()\n    .findSaveData(\"接口名称\", 432143242134809)\n\n// 保存缓存数据--这里的insert来自BaseDao\n RoomUntil.db.apiSaveDataDao()\n    .insert(\n        ApiSaveData(\n            apiName = apiName,\n            paramHash = params.hashCode(),\n            apiData = it.getStringData(),\n            saveTime = currentTime,\n            lostTime = currentTime + (1000 * 60 * 60)\n        )\n    )\n```","source":"_posts/jetpack-room.md","raw":"---\ntitle: JetPack-Room预览\ndate: 2019-06-29 11:37:36\ntags: [\"android\",\"jetpack\"]\ncategories: Android开发\n---\n\nRoom是一个数据持久化的库,它使您可以更轻松地在应用程序中使用SQLiteDatabase对象，减少样板代码的数量并在编译时验证SQL查询。Room在SQLite上提供了一个抽象层，提供了更强大的数据库访问，同时充分使用了SQLite能力。Room可帮助运行应用程序的设备上创建应用程序数据的缓存。此缓存对于应用程序是唯一的，允许用户在应用程序中查看数据的副本，无论用户是否连接到了网络。\n<!-- more -->\n\n##### 相关参考\n* [IBM Developer](https://www.ibm.com/developerworks/cn/opensource/os-cn-sqlite/index.html)\n* [使用SQLite保存数据](https://developer.android.google.cn/training/data-storage/sqlite?hl=en)\n* [使用Room保存数据到本地数据库](https://developer.android.google.cn/training/data-storage/room)\n\n##### SQLite\nSQLite 是一个软件库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。SQLite 是在世界上最广泛部署的 SQL 数据库引擎。SQLite 源代码不受版权限制。就像其他数据库，SQLite 引擎不是一个独立的进程，可以按应用程序需求进行静态或动态连接。SQLite 直接访问其存储文件。\n\n##### Android中的SQLite使用\n\nAndroid 在运行时（run-time）集成了 SQLite，所以每个 Android 应用程序都可以使用 SQLite 数据库。对于熟悉 SQL 的开发人员来时，在 Android 开发中使用 SQLite 相当简单。但是，由于 JDBC 会消耗太多的系统资源，所以 JDBC 对于手机这种内存受限设备来说并不合适。因此，Android 提供了一些新的 API 来使用 SQLite 数据库;\n\n* 数据库存储在 data/< 项目文件夹 >/databases/ 下。\n![文件预览](/images/jetpack/android-sqlite.png)\n\n\n##### 例子，把接口数据缓存到SQLite中\n```Kotlin\npackage com.example.androidx_example.until\n\nimport android.content.Context\nimport android.database.sqlite.SQLiteDatabase\n\nobject SQLiteUntil {\n\n    // 数据的名称，这个名称会作为数据存储文件的名称\n    private const val DATABASE_NAME = \"www-cool1024-com.db\"\n    // 数据库实例\n    private lateinit var db: SQLiteDatabase\n\n    /**\n     * 开启数据库连接\n     */\n    fun openDB(context: Context) {\n        if (!this::db.isInitialized || !db.isOpen) {\n            db = context.openOrCreateDatabase(\n                DATABASE_NAME,\n                Context.MODE_PRIVATE,\n                null\n            )\n        }\n    }\n\n    /**\n     * 关闭数据库连接\n     */\n    fun closeDB() {\n        if (this::db.isInitialized) {\n            db.close()\n        }\n    }\n\n    /**\n     * 创建API数据保存表\n     */\n    fun createApiDataTable() {\n        db.execSQL(\n            \"\"\"\n            create table if not exists api_data(\n                id integer primary key autoincrement,\n                api_name text,\n                api_param_hash text,\n                api_data text,\n                save_time integer,\n                lost_time integer\n            )\"\"\".trimIndent()\n        )\n    }\n\n    /**\n     * 保存api数据到api_table中\n     * @param apiName 接口的名称\n     * @param hasCode 参数的hash码\n     * @param dataStr 接口返回数据\n     * @param effectiveTimeMillis 数据有效时间，毫秒\n     */\n    fun saveApiData(apiName: String, hasCode: Int, dataStr: String, effectiveTimeMillis: Long) {\n        val nowMillis = System.currentTimeMillis()\n        db.execSQL(\n            \"insert into api_data(api_name,api_param_hash,api_data,save_time,lost_time) values (?,?,?,?,?)\",\n            arrayOf(apiName, hasCode, dataStr, nowMillis, nowMillis + effectiveTimeMillis)\n        )\n    }\n\n\n    /**\n     * 获取保存的api数据\n     * @param apiName 接口名称\n     * @param hasCode 参数的hash码\n     * @return 查询结果字符串，如果没有那么得到一个空String()\n     */\n    fun getSaveApiData(apiName: String, hasCode: Int): String {\n        val nowMillis = System.currentTimeMillis()\n        val cursor = db.rawQuery(\n            \"select api_data from api_data where api_name = ? and api_param_hash = ? and lost_time > ? order by id desc limit 1\",\n            arrayOf(apiName, hasCode.toString(), nowMillis.toString())\n        )\n        return (if (cursor.moveToNext()) {\n            cursor.getString(cursor.getColumnIndex(\"api_data\"))\n        } else String()).also { cursor.close() }\n    }\n}\n```\n1. 使用context中的`openOrCreateDatabase`可以创建一个数据库连接对象\n2. 使用`execSQL`执行创建表的语句\n3. 使用`execSQL`执行插入语句\n4. 使用`rawQuery`执行查询\n5. apiName为调用的接口名称，hashCode为接口参数的hash后的值（可能会出现碰撞～，这个需要优化），我们使用接口名称+接口参数来确定一条缓存记录，lost_time用于设置缓存失效的时间（根据具体情况设置）\n\n##### 使用辅助工具 SQLiteOpenHelper\n\nSQLiteOpenHelper是用于管理数据库创建和版本管理的帮助程序类。您可以创建一个子类实现onCreate(SQLiteDatabase)，onUpgrade(SQLiteDatabase, int, int)并且可以以根据具体需要实现onOpen(SQLiteDatabase)，如果数据库存在，则该类负责打开数据库，如果不存在则创建数据库，并根据需要进行更新。使用事务确保了数据库始终处于合理状态。\n\n```Kotlin\nclass AppSQLiteHelp(context: Context) :\n    SQLiteOpenHelper(context, SQLiteUntil.DATABASE_NAME, null, SQLiteUntil.DATABASE_VERSION) {\n\n    override fun onCreate(db: SQLiteDatabase) {\n        db.execSQL(\n            \"\"\"\n            create table if not exists api_data(\n                id integer primary key autoincrement,\n                api_name text,\n                api_param_hash text,\n                api_data text,\n                save_time integer,\n                lost_time integer\n            )\"\"\".trimIndent()\n        )\n    }\n\n    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {\n        db.execSQL(\"drop table if exists api_data\")\n        onCreate(db)\n    }\n\n    companion object {\n\n        private val db: AppSQLiteHelp by lazy {\n            AppSQLiteHelp(App.instance)\n        }\n\n        /**\n         * 保存api数据到api_table中\n         * @param apiName 接口的名称\n         * @param hasCode 参数的hash码\n         * @param dataStr 接口返回数据\n         * @param effectiveTimeMillis 数据有效时间，毫秒\n         */\n        fun saveApiData(apiName: String, hasCode: Int, dataStr: String, effectiveTimeMillis: Long) {\n            val nowMillis = System.currentTimeMillis()\n            val values = ContentValues().apply {\n                put(\"api_name\", apiName)\n                put(\"api_param_hash\", hasCode)\n                put(\"api_data\", dataStr)\n                put(\"save_time\", nowMillis)\n                put(\"lost_time\", nowMillis + effectiveTimeMillis)\n            }\n            db.writableDatabase.insert(\"api_data\", null, values)\n        }\n\n        /**\n         * 获取保存的api数据\n         * @param apiName 接口名称\n         * @param hasCode 参数的hash码\n         * @return 查询结果字符串，如果没有那么得到一个空String()\n         */\n        fun getSaveApiData(apiName: String, hasCode: Int): String {\n            val nowMillis = System.currentTimeMillis()\n            val cursor = db.readableDatabase.query(\n                \"api_data\",\n                arrayOf(\"api_data\"),\n                \"api_name = ? and api_param_hash = ? and lost_time > ?\",\n                arrayOf(apiName, hasCode.toString(), nowMillis.toString()),\n                null, // 参考SQL--Group\n                null, // 参考SQL--Having\n                \"id desc\", // 参考SQL--Order By\n                \"1\" // 参考SQL--Limit 限制查询结果数目\n            )\n            return cursor?.let {\n                val dataStr = if (it.moveToNext()) it.getString(cursor.getColumnIndex(\"api_data\"))\n                else String()\n                return dataStr.also { cursor.close() }\n            } ?: String()\n        }\n    }\n}\n```\n\n##### Room\n\n* [7-steps-to-room](https://medium.com/androiddevelopers/7-steps-to-room-27a5fe5f99b2)\n\nRoom是一个数据持久化的库,它使您可以更轻松地在应用程序中使用SQLiteDatabase对象，减少样板代码的数量并在编译时验证SQL查询。Room在SQLite上提供了一个抽象层，提供了更强大的数据库访问，同时充分使用了SQLite能力。Room可帮助运行应用程序的设备上创建应用程序数据的缓存。此缓存对于应用程序是唯一的，允许用户在应用程序中查看数据的副本，无论用户是否连接到了网络。\n\n0. 直接使用SQLite弊端--->Room的优势\n * 必须写大量的**样版代码**  --->  减少样板代码\n * 没有直接的**对象映射**    --->  编译时校验查询，生成对应的关系对象\n * 很难实现**数据库迁移**    --->  轻松实现迁移\n * 很难测试                --->  高度的可测试性\n * 不小心在**主线程**上执行长时间的数据库操作 --->  保持数据库远离主线程\n\n1. 在app/build.gradle中配置,此处为kotlin的导入，详情请查看[更多参考地址](https://developer.android.google.cn/jetpack/androidx/releases/room/)\n```Gradle\ndef room_version = '2.1.0'\nimplementation \"androidx.room:room-runtime:$room_version\"\nimplementation \"androidx.room:room-ktx:$room_version\"\nkapt \"android.arch.persistence.room:compiler:$room_version\"\n\n```\n\n2. Entity(实列)\n```Kotlin\n...\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"api_data\")\ndata class ApiSaveData(\n\n    // @ColumnInfo(name = \"id\")\n    @PrimaryKey\n    var id: Int? = null,\n\n    @ColumnInfo(name = \"api_name\")\n    val apiName: String?,\n\n    @ColumnInfo(name = \"api_param_hash\")\n    val paramHash: Int?,\n\n    @ColumnInfo(name = \"api_data\")\n    val apiData: String?,\n\n    @ColumnInfo(name = \"save_time\")\n    val saveTime: Long?,\n\n    @ColumnInfo(name = \"lost_time\")\n    val lostTime: Long?\n)\n```\n3. Dao(数据访问对象)\n```Kotlin\n...\n\nimport androidx.room.Dao\nimport androidx.room.Query\nimport com.example.androidx_example.entity.ApiSaveData\n\n@Dao\ninterface ApiSaveDataDao : BaseDao<ApiSaveData> {\n    @Query(\"select api_data from  api_data where api_name = :apiName and api_param_hash = :hashCode and lost_time > :currentTime\")\n    fun findSaveData(apiName: String, hashCode: Int, currentTime: Long = System.currentTimeMillis()): String?\n}\n\n/**\n * BaseDao 声明了一些常用的方法，避免重复写样板代码\n */\ninterface BaseDao<T> {\n\n    /**\n     * Insert an object in the database.\n     *\n     * @param obj the object to be inserted.\n     */\n    @Insert\n    fun insert(obj: T)\n\n    /**\n     * Insert an array of objects in the database.\n     *\n     * @param obj the objects to be inserted.\n     */\n    @Insert\n    fun insert(vararg obj: T)\n\n    /**\n     * Update an object from the database.\n     *\n     * @param obj the object to be updated\n     */\n    @Update\n    fun update(obj: T)\n\n    /**\n     * Delete an object from the database\n     *\n     * @param obj the object to be deleted\n     */\n    @Delete\n    fun delete(obj: T)\n\n}\n```\n\n4. 数据库对象\n```Kotlin\n...\n\nimport androidx.room.Database\nimport androidx.room.RoomDatabase\nimport com.example.androidx_example.entity.ApiSaveData\n\n@Database(entities = [ApiSaveData::class], version = 1, exportSchema = false)\nabstract class AppDatabase : RoomDatabase() {\n    abstract fun apiSaveDataDao(): ApiSaveDataDao\n}\n```\n\n5. 单例模式，获取数据库对象\n```Kotlin\n...\n\nimport androidx.room.Room\nimport com.example.androidx_example.App\nimport com.example.androidx_example.dao.AppDatabase\n\nobject RoomUntil {\n\n    lateinit var db: AppDatabase\n        private set\n\n    fun initDB() {\n        if (!this::db.isInitialized) {\n            db = Room.databaseBuilder(\n                App.instance,\n                AppDatabase::class.java, SQLiteUntil.DATABASE_NAME\n            ).build()\n        }\n    }\n}\n```\n\n6. 使用\n```Kotlin\nRoomUntil.initDB()\n\n// 查询指定接口的缓存数据\nval saveDataStr = RoomUntil.db.apiSaveDataDao()\n    .findSaveData(\"接口名称\", 432143242134809)\n\n// 保存缓存数据--这里的insert来自BaseDao\n RoomUntil.db.apiSaveDataDao()\n    .insert(\n        ApiSaveData(\n            apiName = apiName,\n            paramHash = params.hashCode(),\n            apiData = it.getStringData(),\n            saveTime = currentTime,\n            lostTime = currentTime + (1000 * 60 * 60)\n        )\n    )\n```","slug":"jetpack-room","published":1,"updated":"2019-07-09T04:53:07.821Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld920028e8weopj9zq68","content":"<p>Room是一个数据持久化的库,它使您可以更轻松地在应用程序中使用SQLiteDatabase对象，减少样板代码的数量并在编译时验证SQL查询。Room在SQLite上提供了一个抽象层，提供了更强大的数据库访问，同时充分使用了SQLite能力。Room可帮助运行应用程序的设备上创建应用程序数据的缓存。此缓存对于应用程序是唯一的，允许用户在应用程序中查看数据的副本，无论用户是否连接到了网络。<br><a id=\"more\"></a></p>\n<h5 id=\"相关参考\"><a href=\"#相关参考\" class=\"headerlink\" title=\"相关参考\"></a>相关参考</h5><ul>\n<li><a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-sqlite/index.html\" target=\"_blank\" rel=\"noopener\">IBM Developer</a></li>\n<li><a href=\"https://developer.android.google.cn/training/data-storage/sqlite?hl=en\" target=\"_blank\" rel=\"noopener\">使用SQLite保存数据</a></li>\n<li><a href=\"https://developer.android.google.cn/training/data-storage/room\" target=\"_blank\" rel=\"noopener\">使用Room保存数据到本地数据库</a></li>\n</ul>\n<h5 id=\"SQLite\"><a href=\"#SQLite\" class=\"headerlink\" title=\"SQLite\"></a>SQLite</h5><p>SQLite 是一个软件库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。SQLite 是在世界上最广泛部署的 SQL 数据库引擎。SQLite 源代码不受版权限制。就像其他数据库，SQLite 引擎不是一个独立的进程，可以按应用程序需求进行静态或动态连接。SQLite 直接访问其存储文件。</p>\n<h5 id=\"Android中的SQLite使用\"><a href=\"#Android中的SQLite使用\" class=\"headerlink\" title=\"Android中的SQLite使用\"></a>Android中的SQLite使用</h5><p>Android 在运行时（run-time）集成了 SQLite，所以每个 Android 应用程序都可以使用 SQLite 数据库。对于熟悉 SQL 的开发人员来时，在 Android 开发中使用 SQLite 相当简单。但是，由于 JDBC 会消耗太多的系统资源，所以 JDBC 对于手机这种内存受限设备来说并不合适。因此，Android 提供了一些新的 API 来使用 SQLite 数据库;</p>\n<ul>\n<li>数据库存储在 data/&lt; 项目文件夹 &gt;/databases/ 下。<br><img src=\"/images/jetpack/android-sqlite.png\" alt=\"文件预览\"></li>\n</ul>\n<h5 id=\"例子，把接口数据缓存到SQLite中\"><a href=\"#例子，把接口数据缓存到SQLite中\" class=\"headerlink\" title=\"例子，把接口数据缓存到SQLite中\"></a>例子，把接口数据缓存到SQLite中</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.androidx_example.until</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.database.sqlite.SQLiteDatabase</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> SQLiteUntil &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数据的名称，这个名称会作为数据存储文件的名称</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> const <span class=\"keyword\">val</span> DATABASE_NAME = <span class=\"string\">\"www-cool1024-com.db\"</span></span><br><span class=\"line\">    <span class=\"comment\">// 数据库实例</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> db: SQLiteDatabase</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 开启数据库连接</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">openDB</span><span class=\"params\">(context: <span class=\"type\">Context</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>::db.isInitialized || !db.isOpen) &#123;</span><br><span class=\"line\">            db = context.openOrCreateDatabase(</span><br><span class=\"line\">                DATABASE_NAME,</span><br><span class=\"line\">                Context.MODE_PRIVATE,</span><br><span class=\"line\">                <span class=\"literal\">null</span></span><br><span class=\"line\">            )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 关闭数据库连接</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">closeDB</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>::db.isInitialized) &#123;</span><br><span class=\"line\">            db.close()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建API数据保存表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createApiDataTable</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        db.execSQL(</span><br><span class=\"line\">            <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">            create table if not exists api_data(</span></span><br><span class=\"line\"><span class=\"string\">                id integer primary key autoincrement,</span></span><br><span class=\"line\"><span class=\"string\">                api_name text,</span></span><br><span class=\"line\"><span class=\"string\">                api_param_hash text,</span></span><br><span class=\"line\"><span class=\"string\">                api_data text,</span></span><br><span class=\"line\"><span class=\"string\">                save_time integer,</span></span><br><span class=\"line\"><span class=\"string\">                lost_time integer</span></span><br><span class=\"line\"><span class=\"string\">            )\"\"\"</span>.trimIndent()</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 保存api数据到api_table中</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> apiName 接口的名称</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> hasCode 参数的hash码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dataStr 接口返回数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> effectiveTimeMillis 数据有效时间，毫秒</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">saveApiData</span><span class=\"params\">(apiName: <span class=\"type\">String</span>, hasCode: <span class=\"type\">Int</span>, dataStr: <span class=\"type\">String</span>, effectiveTimeMillis: <span class=\"type\">Long</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> nowMillis = System.currentTimeMillis()</span><br><span class=\"line\">        db.execSQL(</span><br><span class=\"line\">            <span class=\"string\">\"insert into api_data(api_name,api_param_hash,api_data,save_time,lost_time) values (?,?,?,?,?)\"</span>,</span><br><span class=\"line\">            arrayOf(apiName, hasCode, dataStr, nowMillis, nowMillis + effectiveTimeMillis)</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取保存的api数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> apiName 接口名称</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> hasCode 参数的hash码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 查询结果字符串，如果没有那么得到一个空String()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getSaveApiData</span><span class=\"params\">(apiName: <span class=\"type\">String</span>, hasCode: <span class=\"type\">Int</span>)</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> nowMillis = System.currentTimeMillis()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> cursor = db.rawQuery(</span><br><span class=\"line\">            <span class=\"string\">\"select api_data from api_data where api_name = ? and api_param_hash = ? and lost_time &gt; ? order by id desc limit 1\"</span>,</span><br><span class=\"line\">            arrayOf(apiName, hasCode.toString(), nowMillis.toString())</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">if</span> (cursor.moveToNext()) &#123;</span><br><span class=\"line\">            cursor.getString(cursor.getColumnIndex(<span class=\"string\">\"api_data\"</span>))</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> String()).also &#123; cursor.close() &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>使用context中的<code>openOrCreateDatabase</code>可以创建一个数据库连接对象</li>\n<li>使用<code>execSQL</code>执行创建表的语句</li>\n<li>使用<code>execSQL</code>执行插入语句</li>\n<li>使用<code>rawQuery</code>执行查询</li>\n<li>apiName为调用的接口名称，hashCode为接口参数的hash后的值（可能会出现碰撞～，这个需要优化），我们使用接口名称+接口参数来确定一条缓存记录，lost_time用于设置缓存失效的时间（根据具体情况设置）</li>\n</ol>\n<h5 id=\"使用辅助工具-SQLiteOpenHelper\"><a href=\"#使用辅助工具-SQLiteOpenHelper\" class=\"headerlink\" title=\"使用辅助工具 SQLiteOpenHelper\"></a>使用辅助工具 SQLiteOpenHelper</h5><p>SQLiteOpenHelper是用于管理数据库创建和版本管理的帮助程序类。您可以创建一个子类实现onCreate(SQLiteDatabase)，onUpgrade(SQLiteDatabase, int, int)并且可以以根据具体需要实现onOpen(SQLiteDatabase)，如果数据库存在，则该类负责打开数据库，如果不存在则创建数据库，并根据需要进行更新。使用事务确保了数据库始终处于合理状态。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppSQLiteHelp</span></span>(context: Context) :</span><br><span class=\"line\">    SQLiteOpenHelper(context, SQLiteUntil.DATABASE_NAME, <span class=\"literal\">null</span>, SQLiteUntil.DATABASE_VERSION) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(db: <span class=\"type\">SQLiteDatabase</span>)</span></span> &#123;</span><br><span class=\"line\">        db.execSQL(</span><br><span class=\"line\">            <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">            create table if not exists api_data(</span></span><br><span class=\"line\"><span class=\"string\">                id integer primary key autoincrement,</span></span><br><span class=\"line\"><span class=\"string\">                api_name text,</span></span><br><span class=\"line\"><span class=\"string\">                api_param_hash text,</span></span><br><span class=\"line\"><span class=\"string\">                api_data text,</span></span><br><span class=\"line\"><span class=\"string\">                save_time integer,</span></span><br><span class=\"line\"><span class=\"string\">                lost_time integer</span></span><br><span class=\"line\"><span class=\"string\">            )\"\"\"</span>.trimIndent()</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(db: <span class=\"type\">SQLiteDatabase</span>, oldVersion: <span class=\"type\">Int</span>, newVersion: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">\"drop table if exists api_data\"</span>)</span><br><span class=\"line\">        onCreate(db)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> db: AppSQLiteHelp <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">            AppSQLiteHelp(App.instance)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 保存api数据到api_table中</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> apiName 接口的名称</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> hasCode 参数的hash码</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> dataStr 接口返回数据</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> effectiveTimeMillis 数据有效时间，毫秒</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">saveApiData</span><span class=\"params\">(apiName: <span class=\"type\">String</span>, hasCode: <span class=\"type\">Int</span>, dataStr: <span class=\"type\">String</span>, effectiveTimeMillis: <span class=\"type\">Long</span>)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> nowMillis = System.currentTimeMillis()</span><br><span class=\"line\">            <span class=\"keyword\">val</span> values = ContentValues().apply &#123;</span><br><span class=\"line\">                put(<span class=\"string\">\"api_name\"</span>, apiName)</span><br><span class=\"line\">                put(<span class=\"string\">\"api_param_hash\"</span>, hasCode)</span><br><span class=\"line\">                put(<span class=\"string\">\"api_data\"</span>, dataStr)</span><br><span class=\"line\">                put(<span class=\"string\">\"save_time\"</span>, nowMillis)</span><br><span class=\"line\">                put(<span class=\"string\">\"lost_time\"</span>, nowMillis + effectiveTimeMillis)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            db.writableDatabase.insert(<span class=\"string\">\"api_data\"</span>, <span class=\"literal\">null</span>, values)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 获取保存的api数据</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> apiName 接口名称</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> hasCode 参数的hash码</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span> 查询结果字符串，如果没有那么得到一个空String()</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getSaveApiData</span><span class=\"params\">(apiName: <span class=\"type\">String</span>, hasCode: <span class=\"type\">Int</span>)</span></span>: String &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> nowMillis = System.currentTimeMillis()</span><br><span class=\"line\">            <span class=\"keyword\">val</span> cursor = db.readableDatabase.query(</span><br><span class=\"line\">                <span class=\"string\">\"api_data\"</span>,</span><br><span class=\"line\">                arrayOf(<span class=\"string\">\"api_data\"</span>),</span><br><span class=\"line\">                <span class=\"string\">\"api_name = ? and api_param_hash = ? and lost_time &gt; ?\"</span>,</span><br><span class=\"line\">                arrayOf(apiName, hasCode.toString(), nowMillis.toString()),</span><br><span class=\"line\">                <span class=\"literal\">null</span>, <span class=\"comment\">// 参考SQL--Group</span></span><br><span class=\"line\">                <span class=\"literal\">null</span>, <span class=\"comment\">// 参考SQL--Having</span></span><br><span class=\"line\">                <span class=\"string\">\"id desc\"</span>, <span class=\"comment\">// 参考SQL--Order By</span></span><br><span class=\"line\">                <span class=\"string\">\"1\"</span> <span class=\"comment\">// 参考SQL--Limit 限制查询结果数目</span></span><br><span class=\"line\">            )</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cursor?.let &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> dataStr = <span class=\"keyword\">if</span> (it.moveToNext()) it.getString(cursor.getColumnIndex(<span class=\"string\">\"api_data\"</span>))</span><br><span class=\"line\">                <span class=\"keyword\">else</span> String()</span><br><span class=\"line\">                <span class=\"keyword\">return</span> dataStr.also &#123; cursor.close() &#125;</span><br><span class=\"line\">            &#125; ?: String()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Room\"><a href=\"#Room\" class=\"headerlink\" title=\"Room\"></a>Room</h5><ul>\n<li><a href=\"https://medium.com/androiddevelopers/7-steps-to-room-27a5fe5f99b2\" target=\"_blank\" rel=\"noopener\">7-steps-to-room</a></li>\n</ul>\n<p>Room是一个数据持久化的库,它使您可以更轻松地在应用程序中使用SQLiteDatabase对象，减少样板代码的数量并在编译时验证SQL查询。Room在SQLite上提供了一个抽象层，提供了更强大的数据库访问，同时充分使用了SQLite能力。Room可帮助运行应用程序的设备上创建应用程序数据的缓存。此缓存对于应用程序是唯一的，允许用户在应用程序中查看数据的副本，无论用户是否连接到了网络。</p>\n<ol start=\"0\">\n<li><p>直接使用SQLite弊端—&gt;Room的优势</p>\n<ul>\n<li>必须写大量的<strong>样版代码</strong>  —&gt;  减少样板代码</li>\n<li>没有直接的<strong>对象映射</strong>    —&gt;  编译时校验查询，生成对应的关系对象</li>\n<li>很难实现<strong>数据库迁移</strong>    —&gt;  轻松实现迁移</li>\n<li>很难测试                —&gt;  高度的可测试性</li>\n<li>不小心在<strong>主线程</strong>上执行长时间的数据库操作 —&gt;  保持数据库远离主线程</li>\n</ul>\n</li>\n<li><p>在app/build.gradle中配置,此处为kotlin的导入，详情请查看<a href=\"https://developer.android.google.cn/jetpack/androidx/releases/room/\" target=\"_blank\" rel=\"noopener\">更多参考地址</a></p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> room_version = <span class=\"string\">'2.1.0'</span></span><br><span class=\"line\">implementation <span class=\"string\">\"androidx.room:room-runtime:$room_version\"</span></span><br><span class=\"line\">implementation <span class=\"string\">\"androidx.room:room-ktx:$room_version\"</span></span><br><span class=\"line\">kapt <span class=\"string\">\"android.arch.persistence.room:compiler:$room_version\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Entity(实列)</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.room.ColumnInfo</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.room.Entity</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.room.PrimaryKey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity(tableName = <span class=\"meta-string\">\"api_data\"</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApiSaveData</span></span>(</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// @ColumnInfo(name = \"id\")</span></span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> id: <span class=\"built_in\">Int</span>? = <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = <span class=\"meta-string\">\"api_name\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> apiName: String?,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = <span class=\"meta-string\">\"api_param_hash\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> paramHash: <span class=\"built_in\">Int</span>?,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = <span class=\"meta-string\">\"api_data\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> apiData: String?,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = <span class=\"meta-string\">\"save_time\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> saveTime: <span class=\"built_in\">Long</span>?,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = <span class=\"meta-string\">\"lost_time\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> lostTime: <span class=\"built_in\">Long</span>?</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Dao(数据访问对象)</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.room.Dao</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.room.Query</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.androidx_example.entity.ApiSaveData</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ApiSaveDataDao</span> : <span class=\"type\">BaseDao</span>&lt;<span class=\"type\">ApiSaveData</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(<span class=\"meta-string\">\"select api_data from  api_data where api_name = :apiName and api_param_hash = :hashCode and lost_time &gt; :currentTime\"</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">findSaveData</span><span class=\"params\">(apiName: <span class=\"type\">String</span>, hashCode: <span class=\"type\">Int</span>, currentTime: <span class=\"type\">Long</span> = System.currentTimeMillis()</span></span>): String?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * BaseDao 声明了一些常用的方法，避免重复写样板代码</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BaseDao</span>&lt;<span class=\"type\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Insert an object in the database.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> obj the object to be inserted.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Insert</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">insert</span><span class=\"params\">(obj: <span class=\"type\">T</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Insert an array of objects in the database.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> obj the objects to be inserted.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Insert</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">vararg</span> obj: <span class=\"type\">T</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Update an object from the database.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> obj the object to be updated</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Update</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">update</span><span class=\"params\">(obj: <span class=\"type\">T</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Delete an object from the database</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> obj the object to be deleted</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Delete</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">delete</span><span class=\"params\">(obj: <span class=\"type\">T</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数据库对象</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.room.Database</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.room.RoomDatabase</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.androidx_example.entity.ApiSaveData</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Database(entities = [ApiSaveData::class], version = 1, exportSchema = false)</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppDatabase</span> : <span class=\"type\">RoomDatabase</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">apiSaveDataDao</span><span class=\"params\">()</span></span>: ApiSaveDataDao</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>单例模式，获取数据库对象</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.room.Room</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.androidx_example.App</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.androidx_example.dao.AppDatabase</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> RoomUntil &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> db: AppDatabase</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">set</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initDB</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>::db.isInitialized) &#123;</span><br><span class=\"line\">            db = Room.databaseBuilder(</span><br><span class=\"line\">                App.instance,</span><br><span class=\"line\">                AppDatabase::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>, <span class=\"type\">SQLiteUntil.DATABASE_NAME</span></span></span><br><span class=\"line\">            ).build()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RoomUntil.initDB()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询指定接口的缓存数据</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> saveDataStr = RoomUntil.db.apiSaveDataDao()</span><br><span class=\"line\">    .findSaveData(<span class=\"string\">\"接口名称\"</span>, <span class=\"number\">432143242134809</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 保存缓存数据--这里的insert来自BaseDao</span></span><br><span class=\"line\"> RoomUntil.db.apiSaveDataDao()</span><br><span class=\"line\">    .insert(</span><br><span class=\"line\">        ApiSaveData(</span><br><span class=\"line\">            apiName = apiName,</span><br><span class=\"line\">            paramHash = params.hashCode(),</span><br><span class=\"line\">            apiData = it.getStringData(),</span><br><span class=\"line\">            saveTime = currentTime,</span><br><span class=\"line\">            lostTime = currentTime + (<span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Room是一个数据持久化的库,它使您可以更轻松地在应用程序中使用SQLiteDatabase对象，减少样板代码的数量并在编译时验证SQL查询。Room在SQLite上提供了一个抽象层，提供了更强大的数据库访问，同时充分使用了SQLite能力。Room可帮助运行应用程序的设备上创建应用程序数据的缓存。此缓存对于应用程序是唯一的，允许用户在应用程序中查看数据的副本，无论用户是否连接到了网络。<br>","more":"</p>\n<h5 id=\"相关参考\"><a href=\"#相关参考\" class=\"headerlink\" title=\"相关参考\"></a>相关参考</h5><ul>\n<li><a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-sqlite/index.html\" target=\"_blank\" rel=\"noopener\">IBM Developer</a></li>\n<li><a href=\"https://developer.android.google.cn/training/data-storage/sqlite?hl=en\" target=\"_blank\" rel=\"noopener\">使用SQLite保存数据</a></li>\n<li><a href=\"https://developer.android.google.cn/training/data-storage/room\" target=\"_blank\" rel=\"noopener\">使用Room保存数据到本地数据库</a></li>\n</ul>\n<h5 id=\"SQLite\"><a href=\"#SQLite\" class=\"headerlink\" title=\"SQLite\"></a>SQLite</h5><p>SQLite 是一个软件库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。SQLite 是在世界上最广泛部署的 SQL 数据库引擎。SQLite 源代码不受版权限制。就像其他数据库，SQLite 引擎不是一个独立的进程，可以按应用程序需求进行静态或动态连接。SQLite 直接访问其存储文件。</p>\n<h5 id=\"Android中的SQLite使用\"><a href=\"#Android中的SQLite使用\" class=\"headerlink\" title=\"Android中的SQLite使用\"></a>Android中的SQLite使用</h5><p>Android 在运行时（run-time）集成了 SQLite，所以每个 Android 应用程序都可以使用 SQLite 数据库。对于熟悉 SQL 的开发人员来时，在 Android 开发中使用 SQLite 相当简单。但是，由于 JDBC 会消耗太多的系统资源，所以 JDBC 对于手机这种内存受限设备来说并不合适。因此，Android 提供了一些新的 API 来使用 SQLite 数据库;</p>\n<ul>\n<li>数据库存储在 data/&lt; 项目文件夹 &gt;/databases/ 下。<br><img src=\"/images/jetpack/android-sqlite.png\" alt=\"文件预览\"></li>\n</ul>\n<h5 id=\"例子，把接口数据缓存到SQLite中\"><a href=\"#例子，把接口数据缓存到SQLite中\" class=\"headerlink\" title=\"例子，把接口数据缓存到SQLite中\"></a>例子，把接口数据缓存到SQLite中</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.androidx_example.until</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.database.sqlite.SQLiteDatabase</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> SQLiteUntil &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数据的名称，这个名称会作为数据存储文件的名称</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> const <span class=\"keyword\">val</span> DATABASE_NAME = <span class=\"string\">\"www-cool1024-com.db\"</span></span><br><span class=\"line\">    <span class=\"comment\">// 数据库实例</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> db: SQLiteDatabase</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 开启数据库连接</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">openDB</span><span class=\"params\">(context: <span class=\"type\">Context</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>::db.isInitialized || !db.isOpen) &#123;</span><br><span class=\"line\">            db = context.openOrCreateDatabase(</span><br><span class=\"line\">                DATABASE_NAME,</span><br><span class=\"line\">                Context.MODE_PRIVATE,</span><br><span class=\"line\">                <span class=\"literal\">null</span></span><br><span class=\"line\">            )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 关闭数据库连接</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">closeDB</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>::db.isInitialized) &#123;</span><br><span class=\"line\">            db.close()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建API数据保存表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createApiDataTable</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        db.execSQL(</span><br><span class=\"line\">            <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">            create table if not exists api_data(</span></span><br><span class=\"line\"><span class=\"string\">                id integer primary key autoincrement,</span></span><br><span class=\"line\"><span class=\"string\">                api_name text,</span></span><br><span class=\"line\"><span class=\"string\">                api_param_hash text,</span></span><br><span class=\"line\"><span class=\"string\">                api_data text,</span></span><br><span class=\"line\"><span class=\"string\">                save_time integer,</span></span><br><span class=\"line\"><span class=\"string\">                lost_time integer</span></span><br><span class=\"line\"><span class=\"string\">            )\"\"\"</span>.trimIndent()</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 保存api数据到api_table中</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> apiName 接口的名称</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> hasCode 参数的hash码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dataStr 接口返回数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> effectiveTimeMillis 数据有效时间，毫秒</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">saveApiData</span><span class=\"params\">(apiName: <span class=\"type\">String</span>, hasCode: <span class=\"type\">Int</span>, dataStr: <span class=\"type\">String</span>, effectiveTimeMillis: <span class=\"type\">Long</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> nowMillis = System.currentTimeMillis()</span><br><span class=\"line\">        db.execSQL(</span><br><span class=\"line\">            <span class=\"string\">\"insert into api_data(api_name,api_param_hash,api_data,save_time,lost_time) values (?,?,?,?,?)\"</span>,</span><br><span class=\"line\">            arrayOf(apiName, hasCode, dataStr, nowMillis, nowMillis + effectiveTimeMillis)</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取保存的api数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> apiName 接口名称</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> hasCode 参数的hash码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 查询结果字符串，如果没有那么得到一个空String()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getSaveApiData</span><span class=\"params\">(apiName: <span class=\"type\">String</span>, hasCode: <span class=\"type\">Int</span>)</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> nowMillis = System.currentTimeMillis()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> cursor = db.rawQuery(</span><br><span class=\"line\">            <span class=\"string\">\"select api_data from api_data where api_name = ? and api_param_hash = ? and lost_time &gt; ? order by id desc limit 1\"</span>,</span><br><span class=\"line\">            arrayOf(apiName, hasCode.toString(), nowMillis.toString())</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">if</span> (cursor.moveToNext()) &#123;</span><br><span class=\"line\">            cursor.getString(cursor.getColumnIndex(<span class=\"string\">\"api_data\"</span>))</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> String()).also &#123; cursor.close() &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>使用context中的<code>openOrCreateDatabase</code>可以创建一个数据库连接对象</li>\n<li>使用<code>execSQL</code>执行创建表的语句</li>\n<li>使用<code>execSQL</code>执行插入语句</li>\n<li>使用<code>rawQuery</code>执行查询</li>\n<li>apiName为调用的接口名称，hashCode为接口参数的hash后的值（可能会出现碰撞～，这个需要优化），我们使用接口名称+接口参数来确定一条缓存记录，lost_time用于设置缓存失效的时间（根据具体情况设置）</li>\n</ol>\n<h5 id=\"使用辅助工具-SQLiteOpenHelper\"><a href=\"#使用辅助工具-SQLiteOpenHelper\" class=\"headerlink\" title=\"使用辅助工具 SQLiteOpenHelper\"></a>使用辅助工具 SQLiteOpenHelper</h5><p>SQLiteOpenHelper是用于管理数据库创建和版本管理的帮助程序类。您可以创建一个子类实现onCreate(SQLiteDatabase)，onUpgrade(SQLiteDatabase, int, int)并且可以以根据具体需要实现onOpen(SQLiteDatabase)，如果数据库存在，则该类负责打开数据库，如果不存在则创建数据库，并根据需要进行更新。使用事务确保了数据库始终处于合理状态。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppSQLiteHelp</span></span>(context: Context) :</span><br><span class=\"line\">    SQLiteOpenHelper(context, SQLiteUntil.DATABASE_NAME, <span class=\"literal\">null</span>, SQLiteUntil.DATABASE_VERSION) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(db: <span class=\"type\">SQLiteDatabase</span>)</span></span> &#123;</span><br><span class=\"line\">        db.execSQL(</span><br><span class=\"line\">            <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">            create table if not exists api_data(</span></span><br><span class=\"line\"><span class=\"string\">                id integer primary key autoincrement,</span></span><br><span class=\"line\"><span class=\"string\">                api_name text,</span></span><br><span class=\"line\"><span class=\"string\">                api_param_hash text,</span></span><br><span class=\"line\"><span class=\"string\">                api_data text,</span></span><br><span class=\"line\"><span class=\"string\">                save_time integer,</span></span><br><span class=\"line\"><span class=\"string\">                lost_time integer</span></span><br><span class=\"line\"><span class=\"string\">            )\"\"\"</span>.trimIndent()</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(db: <span class=\"type\">SQLiteDatabase</span>, oldVersion: <span class=\"type\">Int</span>, newVersion: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">        db.execSQL(<span class=\"string\">\"drop table if exists api_data\"</span>)</span><br><span class=\"line\">        onCreate(db)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> db: AppSQLiteHelp <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">            AppSQLiteHelp(App.instance)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 保存api数据到api_table中</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> apiName 接口的名称</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> hasCode 参数的hash码</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> dataStr 接口返回数据</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> effectiveTimeMillis 数据有效时间，毫秒</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">saveApiData</span><span class=\"params\">(apiName: <span class=\"type\">String</span>, hasCode: <span class=\"type\">Int</span>, dataStr: <span class=\"type\">String</span>, effectiveTimeMillis: <span class=\"type\">Long</span>)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> nowMillis = System.currentTimeMillis()</span><br><span class=\"line\">            <span class=\"keyword\">val</span> values = ContentValues().apply &#123;</span><br><span class=\"line\">                put(<span class=\"string\">\"api_name\"</span>, apiName)</span><br><span class=\"line\">                put(<span class=\"string\">\"api_param_hash\"</span>, hasCode)</span><br><span class=\"line\">                put(<span class=\"string\">\"api_data\"</span>, dataStr)</span><br><span class=\"line\">                put(<span class=\"string\">\"save_time\"</span>, nowMillis)</span><br><span class=\"line\">                put(<span class=\"string\">\"lost_time\"</span>, nowMillis + effectiveTimeMillis)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            db.writableDatabase.insert(<span class=\"string\">\"api_data\"</span>, <span class=\"literal\">null</span>, values)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 获取保存的api数据</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> apiName 接口名称</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> hasCode 参数的hash码</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span> 查询结果字符串，如果没有那么得到一个空String()</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getSaveApiData</span><span class=\"params\">(apiName: <span class=\"type\">String</span>, hasCode: <span class=\"type\">Int</span>)</span></span>: String &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> nowMillis = System.currentTimeMillis()</span><br><span class=\"line\">            <span class=\"keyword\">val</span> cursor = db.readableDatabase.query(</span><br><span class=\"line\">                <span class=\"string\">\"api_data\"</span>,</span><br><span class=\"line\">                arrayOf(<span class=\"string\">\"api_data\"</span>),</span><br><span class=\"line\">                <span class=\"string\">\"api_name = ? and api_param_hash = ? and lost_time &gt; ?\"</span>,</span><br><span class=\"line\">                arrayOf(apiName, hasCode.toString(), nowMillis.toString()),</span><br><span class=\"line\">                <span class=\"literal\">null</span>, <span class=\"comment\">// 参考SQL--Group</span></span><br><span class=\"line\">                <span class=\"literal\">null</span>, <span class=\"comment\">// 参考SQL--Having</span></span><br><span class=\"line\">                <span class=\"string\">\"id desc\"</span>, <span class=\"comment\">// 参考SQL--Order By</span></span><br><span class=\"line\">                <span class=\"string\">\"1\"</span> <span class=\"comment\">// 参考SQL--Limit 限制查询结果数目</span></span><br><span class=\"line\">            )</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cursor?.let &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> dataStr = <span class=\"keyword\">if</span> (it.moveToNext()) it.getString(cursor.getColumnIndex(<span class=\"string\">\"api_data\"</span>))</span><br><span class=\"line\">                <span class=\"keyword\">else</span> String()</span><br><span class=\"line\">                <span class=\"keyword\">return</span> dataStr.also &#123; cursor.close() &#125;</span><br><span class=\"line\">            &#125; ?: String()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Room\"><a href=\"#Room\" class=\"headerlink\" title=\"Room\"></a>Room</h5><ul>\n<li><a href=\"https://medium.com/androiddevelopers/7-steps-to-room-27a5fe5f99b2\" target=\"_blank\" rel=\"noopener\">7-steps-to-room</a></li>\n</ul>\n<p>Room是一个数据持久化的库,它使您可以更轻松地在应用程序中使用SQLiteDatabase对象，减少样板代码的数量并在编译时验证SQL查询。Room在SQLite上提供了一个抽象层，提供了更强大的数据库访问，同时充分使用了SQLite能力。Room可帮助运行应用程序的设备上创建应用程序数据的缓存。此缓存对于应用程序是唯一的，允许用户在应用程序中查看数据的副本，无论用户是否连接到了网络。</p>\n<ol start=\"0\">\n<li><p>直接使用SQLite弊端—&gt;Room的优势</p>\n<ul>\n<li>必须写大量的<strong>样版代码</strong>  —&gt;  减少样板代码</li>\n<li>没有直接的<strong>对象映射</strong>    —&gt;  编译时校验查询，生成对应的关系对象</li>\n<li>很难实现<strong>数据库迁移</strong>    —&gt;  轻松实现迁移</li>\n<li>很难测试                —&gt;  高度的可测试性</li>\n<li>不小心在<strong>主线程</strong>上执行长时间的数据库操作 —&gt;  保持数据库远离主线程</li>\n</ul>\n</li>\n<li><p>在app/build.gradle中配置,此处为kotlin的导入，详情请查看<a href=\"https://developer.android.google.cn/jetpack/androidx/releases/room/\" target=\"_blank\" rel=\"noopener\">更多参考地址</a></p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> room_version = <span class=\"string\">'2.1.0'</span></span><br><span class=\"line\">implementation <span class=\"string\">\"androidx.room:room-runtime:$room_version\"</span></span><br><span class=\"line\">implementation <span class=\"string\">\"androidx.room:room-ktx:$room_version\"</span></span><br><span class=\"line\">kapt <span class=\"string\">\"android.arch.persistence.room:compiler:$room_version\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Entity(实列)</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.room.ColumnInfo</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.room.Entity</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.room.PrimaryKey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity(tableName = <span class=\"meta-string\">\"api_data\"</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApiSaveData</span></span>(</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// @ColumnInfo(name = \"id\")</span></span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> id: <span class=\"built_in\">Int</span>? = <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = <span class=\"meta-string\">\"api_name\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> apiName: String?,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = <span class=\"meta-string\">\"api_param_hash\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> paramHash: <span class=\"built_in\">Int</span>?,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = <span class=\"meta-string\">\"api_data\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> apiData: String?,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = <span class=\"meta-string\">\"save_time\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> saveTime: <span class=\"built_in\">Long</span>?,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = <span class=\"meta-string\">\"lost_time\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> lostTime: <span class=\"built_in\">Long</span>?</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Dao(数据访问对象)</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.room.Dao</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.room.Query</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.androidx_example.entity.ApiSaveData</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ApiSaveDataDao</span> : <span class=\"type\">BaseDao</span>&lt;<span class=\"type\">ApiSaveData</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(<span class=\"meta-string\">\"select api_data from  api_data where api_name = :apiName and api_param_hash = :hashCode and lost_time &gt; :currentTime\"</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">findSaveData</span><span class=\"params\">(apiName: <span class=\"type\">String</span>, hashCode: <span class=\"type\">Int</span>, currentTime: <span class=\"type\">Long</span> = System.currentTimeMillis()</span></span>): String?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * BaseDao 声明了一些常用的方法，避免重复写样板代码</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BaseDao</span>&lt;<span class=\"type\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Insert an object in the database.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> obj the object to be inserted.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Insert</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">insert</span><span class=\"params\">(obj: <span class=\"type\">T</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Insert an array of objects in the database.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> obj the objects to be inserted.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Insert</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">vararg</span> obj: <span class=\"type\">T</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Update an object from the database.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> obj the object to be updated</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Update</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">update</span><span class=\"params\">(obj: <span class=\"type\">T</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Delete an object from the database</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> obj the object to be deleted</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Delete</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">delete</span><span class=\"params\">(obj: <span class=\"type\">T</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数据库对象</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.room.Database</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.room.RoomDatabase</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.androidx_example.entity.ApiSaveData</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Database(entities = [ApiSaveData::class], version = 1, exportSchema = false)</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppDatabase</span> : <span class=\"type\">RoomDatabase</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">apiSaveDataDao</span><span class=\"params\">()</span></span>: ApiSaveDataDao</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>单例模式，获取数据库对象</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.room.Room</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.androidx_example.App</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.androidx_example.dao.AppDatabase</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> RoomUntil &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> db: AppDatabase</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">set</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initDB</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>::db.isInitialized) &#123;</span><br><span class=\"line\">            db = Room.databaseBuilder(</span><br><span class=\"line\">                App.instance,</span><br><span class=\"line\">                AppDatabase::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>, <span class=\"type\">SQLiteUntil.DATABASE_NAME</span></span></span><br><span class=\"line\">            ).build()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RoomUntil.initDB()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询指定接口的缓存数据</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> saveDataStr = RoomUntil.db.apiSaveDataDao()</span><br><span class=\"line\">    .findSaveData(<span class=\"string\">\"接口名称\"</span>, <span class=\"number\">432143242134809</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 保存缓存数据--这里的insert来自BaseDao</span></span><br><span class=\"line\"> RoomUntil.db.apiSaveDataDao()</span><br><span class=\"line\">    .insert(</span><br><span class=\"line\">        ApiSaveData(</span><br><span class=\"line\">            apiName = apiName,</span><br><span class=\"line\">            paramHash = params.hashCode(),</span><br><span class=\"line\">            apiData = it.getStringData(),</span><br><span class=\"line\">            saveTime = currentTime,</span><br><span class=\"line\">            lostTime = currentTime + (<span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":"Android导航组件之TabLayout","date":"2019-06-05T03:27:36.000Z","_content":"\n选项卡组织并允许在相关且处于相同层次结构的内容组之间进行导航。每个选项卡应包含与集合中其他选项卡不同的内容。例如，标签可以呈现新闻的不同部分，不同类型的音乐或不同的文档主题。\n<!--more-->\n\n## TabLayout——使用TabLayout与ViewPager进行页面切换\n\n### 参考文档链接\n* [Android TabLaout文档](https://developer.android.google.cn/reference/com/google/android/material/tabs/TabLayout?hl=en)\n* [stackoverflow关于indicator(指示符，～～～下划线～～～)尺寸问题讨论](https://stackoverflow.com/questions/40480675/android-tab-layout-wrap-tab-indicator-width-with-respect-to-tab-title)\n\n### 说明\n使用TabLayout+ViewPager进行了两个页面之间的切换；怎么没有用到导航组件呢（[不是标题党,官方文档也放在导航里面）](https://developer.android.google.cn/guide/navigation/navigation-swipe-view?hl=en),好像没有必要。。\n\n![效果图](/images/jetpack/tab-navigation.png)\n\n### 代码参考\n\n在PlayerFragment中进行Tab切换（DetailFragment,CommentFragment）\n\n1. 在PlayerFragment对应的布局文件中引入TabLayout和ViewPager\n```xml\n<!-- 标准的做法 -->\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\n        tools:context=\".fragments.player.PlayerFragment\">\n\n    <!-- 其它布局代码省略 -->\n    <androidx.viewpager.widget.ViewPager\n            android:id=\"@+id/view_pager\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"1\">\n\n        <com.google.android.material.tabs.TabLayout\n                android:id=\"@+id/tab_layout\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"@dimen/tab_height\"\n                app:tabIndicatorFullWidth=\"false\"\n                app:tabMaxWidth=\"0dp\"\n                app:tabGravity=\"fill\"\n                app:tabMode=\"fixed\"\n                app:tabTextColor=\"@color/primary_hover_color\"/>\n\n    </androidx.viewpager.widget.ViewPager>\n</LinearLayout>\n\n<!-- 下面的代码为其它例子 -->\n<!-- 下面的代码为其它例子 -->\n<!-- 下面的代码为其它例子 -->\n<!-- 下面的代码为其它例子 -->\n<!-- 需要使用自定义阴影@drawable/shadow_bottom适当调整了布局 -->\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\n        tools:context=\".fragments.player.PlayerFragment\">\n\n    <!-- 其它布局代码省略 -->\n\n    <RelativeLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"1\">\n\n        <androidx.viewpager.widget.ViewPager\n                android:id=\"@+id/view_pager\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"/>\n\n        <com.google.android.material.tabs.TabLayout\n                android:id=\"@+id/tab_layout\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"@dimen/tab_height\"\n                android:background=\"@drawable/shadow_bottom\"\n                app:tabIndicatorFullWidth=\"false\"\n                app:tabMaxWidth=\"0dp\"\n                app:tabGravity=\"fill\"\n                app:tabMode=\"fixed\"\n                app:tabTextColor=\"@color/primary_hover_color\"/>\n\n    </RelativeLayout>\n\n</LinearLayout>\n```\n\n2. 几个使用的TabLayout属性介绍\n    * `app:tabIndicatorFullWidth=\"false\"` 指示符要不要布满TabItem,默认是true,设置为false后将会和TabItem的内部视图大小一致，如果没有设置自定义视图，那么就是和文字等宽\n    * `app:tabMaxWidth=\"0dp\"` 等待\b完善\n    * `app:tabGravity=\"fill\"` 单个tabite的受到的约束，fill为铺满，那么tabitem会按比例分配可用空间\n    * `app:tabMode=\"fixed\"` 整个tablayout的布局模式，fixed为固定在容器内部无法滑动，tabitem越多就会被挤压\n    * `app:tabTextColor=\"@color/primary_hover_color\"`e 设置每个tabitem的文字颜色（自定义视图后这个也没什意义了），我们可以使用ColorStateList对不同状态下的文字设置颜色，如果这么使用那么就不应该再使用` app:tabSelectedTextColor`这个属性了\n\n3. tabTextColor颜色文件（@color/primary_hover_color）参考\n```xml\n<!-- color/primary_hover_color.xml -->\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- 只有tabitem没有被按压，被选中的时候字体颜色是默认的文字颜色colorText，其它都为高亮colorPrimary -->\n    <item android:state_pressed=\"false\"\n          android:state_selected=\"false\"\n          android:color=\"@color/colorText\"/>\n    <item android:state_pressed=\"true\"\n          android:state_selected=\"false\"\n          android:color=\"@color/colorPrimary\"/>\n    <item android:state_pressed=\"false\"\n          android:state_selected=\"true\"\n          android:color=\"@color/colorPrimary\"/>\n    <item android:state_pressed=\"true\"\n          android:state_selected=\"true\"\n          android:color=\"@color/colorPrimary\"/>\n</selector>\n```\n\n4. 将TabLayout与ViewPager关联起来\n```kotlin\npackage com.example.androidx_example.fragments.player\n\nimport android.os.Bundle\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport com.example.androidx_example.R\nimport kotlinx.android.synthetic.main.fragment_player.*\n\nclass PlayerFragment : Fragment() {\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.fragment_player, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        initTabs()\n    }\n\n    private fun initTabs() {\n        // 使用setupWithViewPager进行关联\n        tab_layout.setupWithViewPager(view_pager)\n    }\n}\n\n```\n\n5. 为ViewPager编写一个FragmentStatePagerAdapter\n```kotlin\npackage com.example.androidx_example.fragments.player\n\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.FragmentManager\nimport androidx.fragment.app.FragmentStatePagerAdapter\n\nclass TabPagerAdapter(fm: FragmentManager) : FragmentStatePagerAdapter(fm, BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT) {\n\n    private val tabTitles = listOf(\"简介\", \"评论\")\n\n    override fun getCount(): Int = tabTitles.size\n\n    override fun getPageTitle(position: Int): CharSequence? = tabTitles[position]\n\n    override fun getItem(position: Int): Fragment {\n        return when (position) {\n            // 第一页面显示DetailFragment\n            0 -> DetailFragment()\n            // 第二个页面显示CommentFragment\n            else -> CommentFragment()\n        }\n    }\n}\n```\n\n6. 修改之前PlayerFragment中的initTab方法，加入设置ViewPage适配器的代码\n```kotlin\nprivate fun initTabs() {\n        val pagerAdapter = TabPagerAdapter(childFragmentManager)\n        view_pager.adapter = pagerAdapter\n        tab_layout.setupWithViewPager(view_pager)\n}\n```\n7. 自定义tabitem中的内容（customView）\n```kotlin\nprivate fun initTabs() {\n    val pagerAdapter = TabPagerAdapter(childFragmentManager)\n    view_pager.adapter = pagerAdapter\n    tab_layout.apply {\n        setupWithViewPager(view_pager)\n\n        // 再setupWithViewPager之后，给每一个tabitem设置customView\n        val colorStates = ResourcesCompat.getColorStateList(context.resources, R.color.primary_hover_color, null)\n        for (i in 0 until tabCount) {\n            val text = TextView(context)\n            val layoutParams =\n                ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT)\n            text.layoutParams = layoutParams\n            text.text = pagerAdapter.getPageTitle(i)\n            text.setTextColor(colorStates)\n            getTabAt(i)?.customView = text\n        }\n    }\n}\n```\n","source":"_posts/navigation-tablayout.md","raw":"---\ntitle: Android导航组件之TabLayout\ndate: 2019-06-05 11:27:36\ntags: ['android','tablayout']\ncategories: Android开发\n---\n\n选项卡组织并允许在相关且处于相同层次结构的内容组之间进行导航。每个选项卡应包含与集合中其他选项卡不同的内容。例如，标签可以呈现新闻的不同部分，不同类型的音乐或不同的文档主题。\n<!--more-->\n\n## TabLayout——使用TabLayout与ViewPager进行页面切换\n\n### 参考文档链接\n* [Android TabLaout文档](https://developer.android.google.cn/reference/com/google/android/material/tabs/TabLayout?hl=en)\n* [stackoverflow关于indicator(指示符，～～～下划线～～～)尺寸问题讨论](https://stackoverflow.com/questions/40480675/android-tab-layout-wrap-tab-indicator-width-with-respect-to-tab-title)\n\n### 说明\n使用TabLayout+ViewPager进行了两个页面之间的切换；怎么没有用到导航组件呢（[不是标题党,官方文档也放在导航里面）](https://developer.android.google.cn/guide/navigation/navigation-swipe-view?hl=en),好像没有必要。。\n\n![效果图](/images/jetpack/tab-navigation.png)\n\n### 代码参考\n\n在PlayerFragment中进行Tab切换（DetailFragment,CommentFragment）\n\n1. 在PlayerFragment对应的布局文件中引入TabLayout和ViewPager\n```xml\n<!-- 标准的做法 -->\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\n        tools:context=\".fragments.player.PlayerFragment\">\n\n    <!-- 其它布局代码省略 -->\n    <androidx.viewpager.widget.ViewPager\n            android:id=\"@+id/view_pager\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"1\">\n\n        <com.google.android.material.tabs.TabLayout\n                android:id=\"@+id/tab_layout\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"@dimen/tab_height\"\n                app:tabIndicatorFullWidth=\"false\"\n                app:tabMaxWidth=\"0dp\"\n                app:tabGravity=\"fill\"\n                app:tabMode=\"fixed\"\n                app:tabTextColor=\"@color/primary_hover_color\"/>\n\n    </androidx.viewpager.widget.ViewPager>\n</LinearLayout>\n\n<!-- 下面的代码为其它例子 -->\n<!-- 下面的代码为其它例子 -->\n<!-- 下面的代码为其它例子 -->\n<!-- 下面的代码为其它例子 -->\n<!-- 需要使用自定义阴影@drawable/shadow_bottom适当调整了布局 -->\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\n        tools:context=\".fragments.player.PlayerFragment\">\n\n    <!-- 其它布局代码省略 -->\n\n    <RelativeLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"1\">\n\n        <androidx.viewpager.widget.ViewPager\n                android:id=\"@+id/view_pager\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"/>\n\n        <com.google.android.material.tabs.TabLayout\n                android:id=\"@+id/tab_layout\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"@dimen/tab_height\"\n                android:background=\"@drawable/shadow_bottom\"\n                app:tabIndicatorFullWidth=\"false\"\n                app:tabMaxWidth=\"0dp\"\n                app:tabGravity=\"fill\"\n                app:tabMode=\"fixed\"\n                app:tabTextColor=\"@color/primary_hover_color\"/>\n\n    </RelativeLayout>\n\n</LinearLayout>\n```\n\n2. 几个使用的TabLayout属性介绍\n    * `app:tabIndicatorFullWidth=\"false\"` 指示符要不要布满TabItem,默认是true,设置为false后将会和TabItem的内部视图大小一致，如果没有设置自定义视图，那么就是和文字等宽\n    * `app:tabMaxWidth=\"0dp\"` 等待\b完善\n    * `app:tabGravity=\"fill\"` 单个tabite的受到的约束，fill为铺满，那么tabitem会按比例分配可用空间\n    * `app:tabMode=\"fixed\"` 整个tablayout的布局模式，fixed为固定在容器内部无法滑动，tabitem越多就会被挤压\n    * `app:tabTextColor=\"@color/primary_hover_color\"`e 设置每个tabitem的文字颜色（自定义视图后这个也没什意义了），我们可以使用ColorStateList对不同状态下的文字设置颜色，如果这么使用那么就不应该再使用` app:tabSelectedTextColor`这个属性了\n\n3. tabTextColor颜色文件（@color/primary_hover_color）参考\n```xml\n<!-- color/primary_hover_color.xml -->\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- 只有tabitem没有被按压，被选中的时候字体颜色是默认的文字颜色colorText，其它都为高亮colorPrimary -->\n    <item android:state_pressed=\"false\"\n          android:state_selected=\"false\"\n          android:color=\"@color/colorText\"/>\n    <item android:state_pressed=\"true\"\n          android:state_selected=\"false\"\n          android:color=\"@color/colorPrimary\"/>\n    <item android:state_pressed=\"false\"\n          android:state_selected=\"true\"\n          android:color=\"@color/colorPrimary\"/>\n    <item android:state_pressed=\"true\"\n          android:state_selected=\"true\"\n          android:color=\"@color/colorPrimary\"/>\n</selector>\n```\n\n4. 将TabLayout与ViewPager关联起来\n```kotlin\npackage com.example.androidx_example.fragments.player\n\nimport android.os.Bundle\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport com.example.androidx_example.R\nimport kotlinx.android.synthetic.main.fragment_player.*\n\nclass PlayerFragment : Fragment() {\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.fragment_player, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        initTabs()\n    }\n\n    private fun initTabs() {\n        // 使用setupWithViewPager进行关联\n        tab_layout.setupWithViewPager(view_pager)\n    }\n}\n\n```\n\n5. 为ViewPager编写一个FragmentStatePagerAdapter\n```kotlin\npackage com.example.androidx_example.fragments.player\n\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.FragmentManager\nimport androidx.fragment.app.FragmentStatePagerAdapter\n\nclass TabPagerAdapter(fm: FragmentManager) : FragmentStatePagerAdapter(fm, BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT) {\n\n    private val tabTitles = listOf(\"简介\", \"评论\")\n\n    override fun getCount(): Int = tabTitles.size\n\n    override fun getPageTitle(position: Int): CharSequence? = tabTitles[position]\n\n    override fun getItem(position: Int): Fragment {\n        return when (position) {\n            // 第一页面显示DetailFragment\n            0 -> DetailFragment()\n            // 第二个页面显示CommentFragment\n            else -> CommentFragment()\n        }\n    }\n}\n```\n\n6. 修改之前PlayerFragment中的initTab方法，加入设置ViewPage适配器的代码\n```kotlin\nprivate fun initTabs() {\n        val pagerAdapter = TabPagerAdapter(childFragmentManager)\n        view_pager.adapter = pagerAdapter\n        tab_layout.setupWithViewPager(view_pager)\n}\n```\n7. 自定义tabitem中的内容（customView）\n```kotlin\nprivate fun initTabs() {\n    val pagerAdapter = TabPagerAdapter(childFragmentManager)\n    view_pager.adapter = pagerAdapter\n    tab_layout.apply {\n        setupWithViewPager(view_pager)\n\n        // 再setupWithViewPager之后，给每一个tabitem设置customView\n        val colorStates = ResourcesCompat.getColorStateList(context.resources, R.color.primary_hover_color, null)\n        for (i in 0 until tabCount) {\n            val text = TextView(context)\n            val layoutParams =\n                ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT)\n            text.layoutParams = layoutParams\n            text.text = pagerAdapter.getPageTitle(i)\n            text.setTextColor(colorStates)\n            getTabAt(i)?.customView = text\n        }\n    }\n}\n```\n","slug":"navigation-tablayout","published":1,"updated":"2019-07-09T05:08:37.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld94002ce8weqzsf9exw","content":"<p>选项卡组织并允许在相关且处于相同层次结构的内容组之间进行导航。每个选项卡应包含与集合中其他选项卡不同的内容。例如，标签可以呈现新闻的不同部分，不同类型的音乐或不同的文档主题。<br><a id=\"more\"></a></p>\n<h2 id=\"TabLayout——使用TabLayout与ViewPager进行页面切换\"><a href=\"#TabLayout——使用TabLayout与ViewPager进行页面切换\" class=\"headerlink\" title=\"TabLayout——使用TabLayout与ViewPager进行页面切换\"></a>TabLayout——使用TabLayout与ViewPager进行页面切换</h2><h3 id=\"参考文档链接\"><a href=\"#参考文档链接\" class=\"headerlink\" title=\"参考文档链接\"></a>参考文档链接</h3><ul>\n<li><a href=\"https://developer.android.google.cn/reference/com/google/android/material/tabs/TabLayout?hl=en\" target=\"_blank\" rel=\"noopener\">Android TabLaout文档</a></li>\n<li><a href=\"https://stackoverflow.com/questions/40480675/android-tab-layout-wrap-tab-indicator-width-with-respect-to-tab-title\" target=\"_blank\" rel=\"noopener\">stackoverflow关于indicator(指示符，～～～下划线～～～)尺寸问题讨论</a></li>\n</ul>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>使用TabLayout+ViewPager进行了两个页面之间的切换；怎么没有用到导航组件呢（<a href=\"https://developer.android.google.cn/guide/navigation/navigation-swipe-view?hl=en\" target=\"_blank\" rel=\"noopener\">不是标题党,官方文档也放在导航里面）</a>,好像没有必要。。</p>\n<p><img src=\"/images/jetpack/tab-navigation.png\" alt=\"效果图\"></p>\n<h3 id=\"代码参考\"><a href=\"#代码参考\" class=\"headerlink\" title=\"代码参考\"></a>代码参考</h3><p>在PlayerFragment中进行Tab切换（DetailFragment,CommentFragment）</p>\n<ol>\n<li><p>在PlayerFragment对应的布局文件中引入TabLayout和ViewPager</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 标准的做法 --&gt;</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span> <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:context</span>=<span class=\"string\">\".fragments.player.PlayerFragment\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 其它布局代码省略 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">androidx.viewpager.widget.ViewPager</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/view_pager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.tabs.TabLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tab_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"@dimen/tab_height\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabIndicatorFullWidth</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabMaxWidth</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabGravity</span>=<span class=\"string\">\"fill\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabMode</span>=<span class=\"string\">\"fixed\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabTextColor</span>=<span class=\"string\">\"@color/primary_hover_color\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">androidx.viewpager.widget.ViewPager</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 下面的代码为其它例子 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 下面的代码为其它例子 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 下面的代码为其它例子 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 下面的代码为其它例子 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 需要使用自定义阴影@drawable/shadow_bottom适当调整了布局 --&gt;</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span> <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:context</span>=<span class=\"string\">\".fragments.player.PlayerFragment\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 其它布局代码省略 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">androidx.viewpager.widget.ViewPager</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/view_pager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.tabs.TabLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tab_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"@dimen/tab_height\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"@drawable/shadow_bottom\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabIndicatorFullWidth</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabMaxWidth</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabGravity</span>=<span class=\"string\">\"fill\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabMode</span>=<span class=\"string\">\"fixed\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabTextColor</span>=<span class=\"string\">\"@color/primary_hover_color\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>几个使用的TabLayout属性介绍</p>\n<ul>\n<li><code>app:tabIndicatorFullWidth=&quot;false&quot;</code> 指示符要不要布满TabItem,默认是true,设置为false后将会和TabItem的内部视图大小一致，如果没有设置自定义视图，那么就是和文字等宽</li>\n<li><code>app:tabMaxWidth=&quot;0dp&quot;</code> 等待\b完善</li>\n<li><code>app:tabGravity=&quot;fill&quot;</code> 单个tabite的受到的约束，fill为铺满，那么tabitem会按比例分配可用空间</li>\n<li><code>app:tabMode=&quot;fixed&quot;</code> 整个tablayout的布局模式，fixed为固定在容器内部无法滑动，tabitem越多就会被挤压</li>\n<li><code>app:tabTextColor=&quot;@color/primary_hover_color&quot;</code>e 设置每个tabitem的文字颜色（自定义视图后这个也没什意义了），我们可以使用ColorStateList对不同状态下的文字设置颜色，如果这么使用那么就不应该再使用<code>app:tabSelectedTextColor</code>这个属性了</li>\n</ul>\n</li>\n<li><p>tabTextColor颜色文件（@color/primary_hover_color）参考</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- color/primary_hover_color.xml --&gt;</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">selector</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 只有tabitem没有被按压，被选中的时候字体颜色是默认的文字颜色colorText，其它都为高亮colorPrimary --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_pressed</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:state_selected</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/colorText\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_pressed</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:state_selected</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/colorPrimary\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_pressed</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:state_selected</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/colorPrimary\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_pressed</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:state_selected</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/colorPrimary\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将TabLayout与ViewPager关联起来</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.androidx_example.fragments.player</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.fragment.app.Fragment</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.androidx_example.R</span><br><span class=\"line\"><span class=\"keyword\">import</span> kotlinx.android.synthetic.main.fragment_player.*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlayerFragment</span> : <span class=\"type\">Fragment</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        inflater: <span class=\"type\">LayoutInflater</span>, container: <span class=\"type\">ViewGroup</span>?,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        savedInstanceState: <span class=\"type\">Bundle</span>?</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_player, container, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        initTabs()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initTabs</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用setupWithViewPager进行关联</span></span><br><span class=\"line\">        tab_layout.setupWithViewPager(view_pager)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为ViewPager编写一个FragmentStatePagerAdapter</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.androidx_example.fragments.player</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.fragment.app.Fragment</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.fragment.app.FragmentManager</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.fragment.app.FragmentStatePagerAdapter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TabPagerAdapter</span></span>(fm: FragmentManager) : FragmentStatePagerAdapter(fm, BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> tabTitles = listOf(<span class=\"string\">\"简介\"</span>, <span class=\"string\">\"评论\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getCount</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> = tabTitles.size</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getPageTitle</span><span class=\"params\">(position: <span class=\"type\">Int</span>)</span></span>: CharSequence? = tabTitles[position]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getItem</span><span class=\"params\">(position: <span class=\"type\">Int</span>)</span></span>: Fragment &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">when</span> (position) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 第一页面显示DetailFragment</span></span><br><span class=\"line\">            <span class=\"number\">0</span> -&gt; DetailFragment()</span><br><span class=\"line\">            <span class=\"comment\">// 第二个页面显示CommentFragment</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; CommentFragment()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改之前PlayerFragment中的initTab方法，加入设置ViewPage适配器的代码</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initTabs</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> pagerAdapter = TabPagerAdapter(childFragmentManager)</span><br><span class=\"line\">        view_pager.adapter = pagerAdapter</span><br><span class=\"line\">        tab_layout.setupWithViewPager(view_pager)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义tabitem中的内容（customView）</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initTabs</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> pagerAdapter = TabPagerAdapter(childFragmentManager)</span><br><span class=\"line\">    view_pager.adapter = pagerAdapter</span><br><span class=\"line\">    tab_layout.apply &#123;</span><br><span class=\"line\">        setupWithViewPager(view_pager)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 再setupWithViewPager之后，给每一个tabitem设置customView</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> colorStates = ResourcesCompat.getColorStateList(context.resources, R.color.primary_hover_color, <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until tabCount) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> text = TextView(context)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> layoutParams =</span><br><span class=\"line\">                ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT)</span><br><span class=\"line\">            text.layoutParams = layoutParams</span><br><span class=\"line\">            text.text = pagerAdapter.getPageTitle(i)</span><br><span class=\"line\">            text.setTextColor(colorStates)</span><br><span class=\"line\">            getTabAt(i)?.customView = text</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>选项卡组织并允许在相关且处于相同层次结构的内容组之间进行导航。每个选项卡应包含与集合中其他选项卡不同的内容。例如，标签可以呈现新闻的不同部分，不同类型的音乐或不同的文档主题。<br>","more":"</p>\n<h2 id=\"TabLayout——使用TabLayout与ViewPager进行页面切换\"><a href=\"#TabLayout——使用TabLayout与ViewPager进行页面切换\" class=\"headerlink\" title=\"TabLayout——使用TabLayout与ViewPager进行页面切换\"></a>TabLayout——使用TabLayout与ViewPager进行页面切换</h2><h3 id=\"参考文档链接\"><a href=\"#参考文档链接\" class=\"headerlink\" title=\"参考文档链接\"></a>参考文档链接</h3><ul>\n<li><a href=\"https://developer.android.google.cn/reference/com/google/android/material/tabs/TabLayout?hl=en\" target=\"_blank\" rel=\"noopener\">Android TabLaout文档</a></li>\n<li><a href=\"https://stackoverflow.com/questions/40480675/android-tab-layout-wrap-tab-indicator-width-with-respect-to-tab-title\" target=\"_blank\" rel=\"noopener\">stackoverflow关于indicator(指示符，～～～下划线～～～)尺寸问题讨论</a></li>\n</ul>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>使用TabLayout+ViewPager进行了两个页面之间的切换；怎么没有用到导航组件呢（<a href=\"https://developer.android.google.cn/guide/navigation/navigation-swipe-view?hl=en\" target=\"_blank\" rel=\"noopener\">不是标题党,官方文档也放在导航里面）</a>,好像没有必要。。</p>\n<p><img src=\"/images/jetpack/tab-navigation.png\" alt=\"效果图\"></p>\n<h3 id=\"代码参考\"><a href=\"#代码参考\" class=\"headerlink\" title=\"代码参考\"></a>代码参考</h3><p>在PlayerFragment中进行Tab切换（DetailFragment,CommentFragment）</p>\n<ol>\n<li><p>在PlayerFragment对应的布局文件中引入TabLayout和ViewPager</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 标准的做法 --&gt;</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span> <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:context</span>=<span class=\"string\">\".fragments.player.PlayerFragment\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 其它布局代码省略 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">androidx.viewpager.widget.ViewPager</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/view_pager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.tabs.TabLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tab_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"@dimen/tab_height\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabIndicatorFullWidth</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabMaxWidth</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabGravity</span>=<span class=\"string\">\"fill\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabMode</span>=<span class=\"string\">\"fixed\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabTextColor</span>=<span class=\"string\">\"@color/primary_hover_color\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">androidx.viewpager.widget.ViewPager</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 下面的代码为其它例子 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 下面的代码为其它例子 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 下面的代码为其它例子 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 下面的代码为其它例子 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 需要使用自定义阴影@drawable/shadow_bottom适当调整了布局 --&gt;</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span> <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:context</span>=<span class=\"string\">\".fragments.player.PlayerFragment\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 其它布局代码省略 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">androidx.viewpager.widget.ViewPager</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/view_pager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">com.google.android.material.tabs.TabLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/tab_layout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"@dimen/tab_height\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"@drawable/shadow_bottom\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabIndicatorFullWidth</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabMaxWidth</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabGravity</span>=<span class=\"string\">\"fill\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabMode</span>=<span class=\"string\">\"fixed\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">app:tabTextColor</span>=<span class=\"string\">\"@color/primary_hover_color\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>几个使用的TabLayout属性介绍</p>\n<ul>\n<li><code>app:tabIndicatorFullWidth=&quot;false&quot;</code> 指示符要不要布满TabItem,默认是true,设置为false后将会和TabItem的内部视图大小一致，如果没有设置自定义视图，那么就是和文字等宽</li>\n<li><code>app:tabMaxWidth=&quot;0dp&quot;</code> 等待\b完善</li>\n<li><code>app:tabGravity=&quot;fill&quot;</code> 单个tabite的受到的约束，fill为铺满，那么tabitem会按比例分配可用空间</li>\n<li><code>app:tabMode=&quot;fixed&quot;</code> 整个tablayout的布局模式，fixed为固定在容器内部无法滑动，tabitem越多就会被挤压</li>\n<li><code>app:tabTextColor=&quot;@color/primary_hover_color&quot;</code>e 设置每个tabitem的文字颜色（自定义视图后这个也没什意义了），我们可以使用ColorStateList对不同状态下的文字设置颜色，如果这么使用那么就不应该再使用<code>app:tabSelectedTextColor</code>这个属性了</li>\n</ul>\n</li>\n<li><p>tabTextColor颜色文件（@color/primary_hover_color）参考</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- color/primary_hover_color.xml --&gt;</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">selector</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 只有tabitem没有被按压，被选中的时候字体颜色是默认的文字颜色colorText，其它都为高亮colorPrimary --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_pressed</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:state_selected</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/colorText\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_pressed</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:state_selected</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/colorPrimary\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_pressed</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:state_selected</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/colorPrimary\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_pressed</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:state_selected</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/colorPrimary\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将TabLayout与ViewPager关联起来</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.androidx_example.fragments.player</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.fragment.app.Fragment</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.androidx_example.R</span><br><span class=\"line\"><span class=\"keyword\">import</span> kotlinx.android.synthetic.main.fragment_player.*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlayerFragment</span> : <span class=\"type\">Fragment</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        inflater: <span class=\"type\">LayoutInflater</span>, container: <span class=\"type\">ViewGroup</span>?,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        savedInstanceState: <span class=\"type\">Bundle</span>?</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span></span>: View? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_player, container, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        initTabs()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initTabs</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用setupWithViewPager进行关联</span></span><br><span class=\"line\">        tab_layout.setupWithViewPager(view_pager)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为ViewPager编写一个FragmentStatePagerAdapter</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.androidx_example.fragments.player</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.fragment.app.Fragment</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.fragment.app.FragmentManager</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.fragment.app.FragmentStatePagerAdapter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TabPagerAdapter</span></span>(fm: FragmentManager) : FragmentStatePagerAdapter(fm, BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> tabTitles = listOf(<span class=\"string\">\"简介\"</span>, <span class=\"string\">\"评论\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getCount</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> = tabTitles.size</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getPageTitle</span><span class=\"params\">(position: <span class=\"type\">Int</span>)</span></span>: CharSequence? = tabTitles[position]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getItem</span><span class=\"params\">(position: <span class=\"type\">Int</span>)</span></span>: Fragment &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">when</span> (position) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 第一页面显示DetailFragment</span></span><br><span class=\"line\">            <span class=\"number\">0</span> -&gt; DetailFragment()</span><br><span class=\"line\">            <span class=\"comment\">// 第二个页面显示CommentFragment</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; CommentFragment()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改之前PlayerFragment中的initTab方法，加入设置ViewPage适配器的代码</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initTabs</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> pagerAdapter = TabPagerAdapter(childFragmentManager)</span><br><span class=\"line\">        view_pager.adapter = pagerAdapter</span><br><span class=\"line\">        tab_layout.setupWithViewPager(view_pager)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义tabitem中的内容（customView）</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initTabs</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> pagerAdapter = TabPagerAdapter(childFragmentManager)</span><br><span class=\"line\">    view_pager.adapter = pagerAdapter</span><br><span class=\"line\">    tab_layout.apply &#123;</span><br><span class=\"line\">        setupWithViewPager(view_pager)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 再setupWithViewPager之后，给每一个tabitem设置customView</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> colorStates = ResourcesCompat.getColorStateList(context.resources, R.color.primary_hover_color, <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until tabCount) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> text = TextView(context)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> layoutParams =</span><br><span class=\"line\">                ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT)</span><br><span class=\"line\">            text.layoutParams = layoutParams</span><br><span class=\"line\">            text.text = pagerAdapter.getPageTitle(i)</span><br><span class=\"line\">            text.setTextColor(colorStates)</span><br><span class=\"line\">            getTabAt(i)?.customView = text</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"angular component note 4","date":"2018-07-13T09:11:00.000Z","_content":"#### 获取模版上的组件实例\n通常，在一个页面组件的模版中有使用了很多组件，我们只需要通过组件暴露的事件和属性来改变或监视它们。但是偶尔我们也或少会遇到需要直接操作这个组件的实例情况（调用组件内部的方法，获取dom节点）\n\n#### 原生做法\n在传统的html页面中我们可以通过使用`getElementBy[XXXX]`这类方法来获取页面上的元素节点\n```html\n<div id=\"dom\"></div>\n<script>\n    document.getElementById('dom');\n</script>\n```\n\n#### 使用@ViewChild\n```html\n<div #dom></div>\n```\n我们使用模版语法`#变量名`让dom变量和div绑定了（#dom类似id=\"dom\"）\n```typescript\nimport { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements AfterViewInit {\n\n    @ViewChild('dom') divElementRef: ElementRef;\n\n    ngAfterViewInit() {\n        // 我们可以从控制台看到这个div节点\n        console.log(this.divElementRef.nativeElement);\n    }\n}\n```\n1.使用ViewChild装饰器修饰一个变量，装饰器内部提供一个从模版中获取组件的参照（这里使用了一个字符串‘dom’,代表从模版中找到被临时变量dom依附的组件）\n2.只有在模版被成功渲染到页面的时候才能获取到这个div（视图加载完成）\n3.得益于es6的set,get,我们不一定要在视图加载成功时获取这个节点，我们可以在`divElementRef`被设置的时候获取它\n```typescript\nimport { Component, ViewChild, ElementRef } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n    @ViewChild('dom')\n    set divElementRef(elementRef: ElementRef) {\n        console.log(elementRef.nativeElement);\n    }\n\n}\n```\n\n#### 获取模版中的子组件\n我们写了一个简单的子组件\n```typescript\nimport { Component, ViewChild, ElementRef } from '@angular/core';\n\n@Component({\n    selector: 'app-child',\n    template: '<div>{{title}}</div>',\n})\nexport class ChildComponent {\n    title: string;\n}\n\n```\n在app.compontent.html使用这个组件\n```html\n<!--app.component.html-->\n<app-child></app-child>\n```\n在app.component.ts获取这个子组件的实例\n```typescript\nimport { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ChildComponent } from './child.component';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n    @ViewChild(ChildComponent)\n    set divElementRef(child: ChildComponent) {\n        child.title = '我要给你设置标题';\n    }\n\n}\n```\n和上面获取`div`的方式有些不同,我们直接使用了`ChildComponent`指定我们要获取的是ChildComponent组件。当然我们依然可以使用获取`div`的方式捕获这个组件，代码如下\n```html\n<!--app.component.html-->\n<app-child #dom></app-child>\n```\n```typescript\nimport { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ChildComponent } from './child.component';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n    @ViewChild('dom')\n    set divElementRef(child: ChildComponent) {\n        child.title = '我要给你设置标题';\n    }\n\n}\n```\n\n#### @ViewChildren获取多个组件\n上面的例子是特别的，因为模版中只有一个这个组件。但是在很多情况下我们可能会使用大量的相同组件，这时候我们如果想批量操作这些组件，就需要使用`@ViewChildren`了。\n修改子组件，把title变为可绑定的属性\n```typescript\nimport { Component, ViewChild, ElementRef, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-child',\n    template: '<div>{{title}}</div>',\n})\nexport class ChildComponent {\n    @Input() title: string;\n}\n```\n使用`ngFor`批量输出子组件\n```html\n<app-child *ngFor=\"let title of childrenTitle\" [title]=\"title\"></app-child>\n```\n```typescript\nimport { Component, ViewChildren, QueryList } from '@angular/core';\nimport { ChildComponent } from './child.component';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n    childrenTitle: string[];\n\n    @ViewChildren(ChildComponent)\n    set children(queryList: QueryList<ChildComponent>) {\n        console.log(queryList.length);\n    }\n\n    constructor() {\n        this.childrenTitle = [];\n        setInterval(() => {\n            this.childrenTitle.push('标题');\n        }, 1000);\n    }\n}\n```\n我们1秒给标题列表中新增一个元素，观察控制台`queryList`的长度一直在增长；这完全是set功劳（每次children的值改变了，它就会执行对应的方法体）。\n为什么我们不直接通过`child.title='标题'`来设置子组件的标题呢？如果你那么做了，你可能会发现控制台出现这样的报错:\n![viewchildren-error.png](/images/ng-note-component/viewchildren-error.png)\n通常直接改组件实例来改变组件的试图输出不是一个特别好的习惯，我们应该是修改组件对外暴露的属性来改变组件的输出视图，至于这个报错，我们后面的文章再讨论。\n\n#### @ContentChild获取组件内部包裹的内容\n请注意`ContentChild`和`ViewChild`的区别，`ViewChild`获取的是组件视图模版中的元素，而`ContentChild`获取的是组件包裹的内容。我们重新观察下ChildComponent，如果我们想获取template中的div，我们需要使用`ViewChild`。\n```typescript\nimport { Component, ViewChild, ElementRef, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-child',\n    template: '<div>{{title}}</div>',\n})\nexport class ChildComponent {\n    @Input() title: string;\n}\n```\n而如果我们在app.component.html中使用了这个子组件，并且在标签中写了一个div，我们要在ChildComponent代码中获取它就需要使用`ContentChild`了\n```html\n<!--app.component.html-->\n<app-child>\n    <div #dom>你好我是ChildComponent的内容</div>\n</app-child>\n```\n我们想在ChildComponent中获取这个div就使用`ContentChild`（注意这里是ChildCompontent，不是AppComponent）\n```typescript\nimport { Component, ElementRef, Input, ContentChild } from '@angular/core';\n\n@Component({\n    selector: 'app-child',\n    template: '<div>{{title}}</div>',\n})\nexport class ChildComponent {\n    @Input() title: string;\n    @ContentChild('dom')\n    set divElementRef(elementRef: ElementRef) {\n        console.log(elementRef.nativeElement);\n    }\n}\n```\n控制台我们可以看到打印出了这个div\n![viewchildren-error.png](/images/ng-note-component/child-content.png)\n\n#### @ContentChildren\n和@ViewChildren类似，是用于批量获取的，这里就不在说明了\n\n<div class=\"tip\">相关参考文档地址\nhttps://angular.cn/api/core/ContentChild\n\n1. 如果出现多个匹配的子组件`ViewChild`会如何抉择？\n通常有多个我们使用`ViewChildren`,而`ViewChild`会获取最先遇到的那一个（通常是最前面的），为了避免得到错误的对象，我们使用`#变量`进行编号可以指定获取想要的。\n\n代码下载\n<a href=\"/codes/component-simple-4.zip\">component-simple-4.zip</a>\n</div>\n\n","source":"_posts/ng-note-component-4.md","raw":"---\ntitle: angular component note 4\ndate: 2018-07-13 17:11:00\ntags: Angular\ncategories: Web开发\n---\n#### 获取模版上的组件实例\n通常，在一个页面组件的模版中有使用了很多组件，我们只需要通过组件暴露的事件和属性来改变或监视它们。但是偶尔我们也或少会遇到需要直接操作这个组件的实例情况（调用组件内部的方法，获取dom节点）\n\n#### 原生做法\n在传统的html页面中我们可以通过使用`getElementBy[XXXX]`这类方法来获取页面上的元素节点\n```html\n<div id=\"dom\"></div>\n<script>\n    document.getElementById('dom');\n</script>\n```\n\n#### 使用@ViewChild\n```html\n<div #dom></div>\n```\n我们使用模版语法`#变量名`让dom变量和div绑定了（#dom类似id=\"dom\"）\n```typescript\nimport { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements AfterViewInit {\n\n    @ViewChild('dom') divElementRef: ElementRef;\n\n    ngAfterViewInit() {\n        // 我们可以从控制台看到这个div节点\n        console.log(this.divElementRef.nativeElement);\n    }\n}\n```\n1.使用ViewChild装饰器修饰一个变量，装饰器内部提供一个从模版中获取组件的参照（这里使用了一个字符串‘dom’,代表从模版中找到被临时变量dom依附的组件）\n2.只有在模版被成功渲染到页面的时候才能获取到这个div（视图加载完成）\n3.得益于es6的set,get,我们不一定要在视图加载成功时获取这个节点，我们可以在`divElementRef`被设置的时候获取它\n```typescript\nimport { Component, ViewChild, ElementRef } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n    @ViewChild('dom')\n    set divElementRef(elementRef: ElementRef) {\n        console.log(elementRef.nativeElement);\n    }\n\n}\n```\n\n#### 获取模版中的子组件\n我们写了一个简单的子组件\n```typescript\nimport { Component, ViewChild, ElementRef } from '@angular/core';\n\n@Component({\n    selector: 'app-child',\n    template: '<div>{{title}}</div>',\n})\nexport class ChildComponent {\n    title: string;\n}\n\n```\n在app.compontent.html使用这个组件\n```html\n<!--app.component.html-->\n<app-child></app-child>\n```\n在app.component.ts获取这个子组件的实例\n```typescript\nimport { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ChildComponent } from './child.component';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n    @ViewChild(ChildComponent)\n    set divElementRef(child: ChildComponent) {\n        child.title = '我要给你设置标题';\n    }\n\n}\n```\n和上面获取`div`的方式有些不同,我们直接使用了`ChildComponent`指定我们要获取的是ChildComponent组件。当然我们依然可以使用获取`div`的方式捕获这个组件，代码如下\n```html\n<!--app.component.html-->\n<app-child #dom></app-child>\n```\n```typescript\nimport { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ChildComponent } from './child.component';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n    @ViewChild('dom')\n    set divElementRef(child: ChildComponent) {\n        child.title = '我要给你设置标题';\n    }\n\n}\n```\n\n#### @ViewChildren获取多个组件\n上面的例子是特别的，因为模版中只有一个这个组件。但是在很多情况下我们可能会使用大量的相同组件，这时候我们如果想批量操作这些组件，就需要使用`@ViewChildren`了。\n修改子组件，把title变为可绑定的属性\n```typescript\nimport { Component, ViewChild, ElementRef, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-child',\n    template: '<div>{{title}}</div>',\n})\nexport class ChildComponent {\n    @Input() title: string;\n}\n```\n使用`ngFor`批量输出子组件\n```html\n<app-child *ngFor=\"let title of childrenTitle\" [title]=\"title\"></app-child>\n```\n```typescript\nimport { Component, ViewChildren, QueryList } from '@angular/core';\nimport { ChildComponent } from './child.component';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n    childrenTitle: string[];\n\n    @ViewChildren(ChildComponent)\n    set children(queryList: QueryList<ChildComponent>) {\n        console.log(queryList.length);\n    }\n\n    constructor() {\n        this.childrenTitle = [];\n        setInterval(() => {\n            this.childrenTitle.push('标题');\n        }, 1000);\n    }\n}\n```\n我们1秒给标题列表中新增一个元素，观察控制台`queryList`的长度一直在增长；这完全是set功劳（每次children的值改变了，它就会执行对应的方法体）。\n为什么我们不直接通过`child.title='标题'`来设置子组件的标题呢？如果你那么做了，你可能会发现控制台出现这样的报错:\n![viewchildren-error.png](/images/ng-note-component/viewchildren-error.png)\n通常直接改组件实例来改变组件的试图输出不是一个特别好的习惯，我们应该是修改组件对外暴露的属性来改变组件的输出视图，至于这个报错，我们后面的文章再讨论。\n\n#### @ContentChild获取组件内部包裹的内容\n请注意`ContentChild`和`ViewChild`的区别，`ViewChild`获取的是组件视图模版中的元素，而`ContentChild`获取的是组件包裹的内容。我们重新观察下ChildComponent，如果我们想获取template中的div，我们需要使用`ViewChild`。\n```typescript\nimport { Component, ViewChild, ElementRef, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-child',\n    template: '<div>{{title}}</div>',\n})\nexport class ChildComponent {\n    @Input() title: string;\n}\n```\n而如果我们在app.component.html中使用了这个子组件，并且在标签中写了一个div，我们要在ChildComponent代码中获取它就需要使用`ContentChild`了\n```html\n<!--app.component.html-->\n<app-child>\n    <div #dom>你好我是ChildComponent的内容</div>\n</app-child>\n```\n我们想在ChildComponent中获取这个div就使用`ContentChild`（注意这里是ChildCompontent，不是AppComponent）\n```typescript\nimport { Component, ElementRef, Input, ContentChild } from '@angular/core';\n\n@Component({\n    selector: 'app-child',\n    template: '<div>{{title}}</div>',\n})\nexport class ChildComponent {\n    @Input() title: string;\n    @ContentChild('dom')\n    set divElementRef(elementRef: ElementRef) {\n        console.log(elementRef.nativeElement);\n    }\n}\n```\n控制台我们可以看到打印出了这个div\n![viewchildren-error.png](/images/ng-note-component/child-content.png)\n\n#### @ContentChildren\n和@ViewChildren类似，是用于批量获取的，这里就不在说明了\n\n<div class=\"tip\">相关参考文档地址\nhttps://angular.cn/api/core/ContentChild\n\n1. 如果出现多个匹配的子组件`ViewChild`会如何抉择？\n通常有多个我们使用`ViewChildren`,而`ViewChild`会获取最先遇到的那一个（通常是最前面的），为了避免得到错误的对象，我们使用`#变量`进行编号可以指定获取想要的。\n\n代码下载\n<a href=\"/codes/component-simple-4.zip\">component-simple-4.zip</a>\n</div>\n\n","slug":"ng-note-component-4","published":1,"updated":"2019-07-12T03:05:15.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld96002fe8wegzjdaq5z","content":"<h4 id=\"获取模版上的组件实例\"><a href=\"#获取模版上的组件实例\" class=\"headerlink\" title=\"获取模版上的组件实例\"></a>获取模版上的组件实例</h4><p>通常，在一个页面组件的模版中有使用了很多组件，我们只需要通过组件暴露的事件和属性来改变或监视它们。但是偶尔我们也或少会遇到需要直接操作这个组件的实例情况（调用组件内部的方法，获取dom节点）</p>\n<h4 id=\"原生做法\"><a href=\"#原生做法\" class=\"headerlink\" title=\"原生做法\"></a>原生做法</h4><p>在传统的html页面中我们可以通过使用<code>getElementBy[XXXX]</code>这类方法来获取页面上的元素节点<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dom\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dom'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用-ViewChild\"><a href=\"#使用-ViewChild\" class=\"headerlink\" title=\"使用@ViewChild\"></a>使用@ViewChild</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> #<span class=\"attr\">dom</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们使用模版语法<code>#变量名</code>让dom变量和div绑定了（#dom类似id=”dom”）<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, ViewChild, ElementRef, AfterViewInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent <span class=\"keyword\">implements</span> AfterViewInit &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ViewChild</span>(<span class=\"string\">'dom'</span>) divElementRef: ElementRef;</span><br><span class=\"line\"></span><br><span class=\"line\">    ngAfterViewInit() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 我们可以从控制台看到这个div节点</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.divElementRef.nativeElement);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>1.使用ViewChild装饰器修饰一个变量，装饰器内部提供一个从模版中获取组件的参照（这里使用了一个字符串‘dom’,代表从模版中找到被临时变量dom依附的组件）<br>2.只有在模版被成功渲染到页面的时候才能获取到这个div（视图加载完成）<br>3.得益于es6的set,get,我们不一定要在视图加载成功时获取这个节点，我们可以在<code>divElementRef</code>被设置的时候获取它<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, ViewChild, ElementRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ViewChild</span>(<span class=\"string\">'dom'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">set</span> divElementRef(elementRef: ElementRef) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(elementRef.nativeElement);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"获取模版中的子组件\"><a href=\"#获取模版中的子组件\" class=\"headerlink\" title=\"获取模版中的子组件\"></a>获取模版中的子组件</h4><p>我们写了一个简单的子组件<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, ViewChild, ElementRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-child'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">'&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;'</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ChildComponent &#123;</span><br><span class=\"line\">    title: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在app.compontent.html使用这个组件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--app.component.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在app.component.ts获取这个子组件的实例<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, ViewChild, ElementRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ChildComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./child.component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ViewChild</span>(ChildComponent)</span><br><span class=\"line\">    <span class=\"keyword\">set</span> divElementRef(child: ChildComponent) &#123;</span><br><span class=\"line\">        child.title = <span class=\"string\">'我要给你设置标题'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>和上面获取<code>div</code>的方式有些不同,我们直接使用了<code>ChildComponent</code>指定我们要获取的是ChildComponent组件。当然我们依然可以使用获取<code>div</code>的方式捕获这个组件，代码如下<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--app.component.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> #<span class=\"attr\">dom</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, ViewChild, ElementRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ChildComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./child.component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ViewChild</span>(<span class=\"string\">'dom'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">set</span> divElementRef(child: ChildComponent) &#123;</span><br><span class=\"line\">        child.title = <span class=\"string\">'我要给你设置标题'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ViewChildren获取多个组件\"><a href=\"#ViewChildren获取多个组件\" class=\"headerlink\" title=\"@ViewChildren获取多个组件\"></a>@ViewChildren获取多个组件</h4><p>上面的例子是特别的，因为模版中只有一个这个组件。但是在很多情况下我们可能会使用大量的相同组件，这时候我们如果想批量操作这些组件，就需要使用<code>@ViewChildren</code>了。<br>修改子组件，把title变为可绑定的属性<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, ViewChild, ElementRef, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-child'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">'&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;'</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ChildComponent &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Input</span>() title: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用<code>ngFor</code>批量输出子组件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let title of childrenTitle\"</span> [<span class=\"attr\">title</span>]=<span class=\"string\">\"title\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, ViewChildren, QueryList &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ChildComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./child.component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    childrenTitle: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ViewChildren</span>(ChildComponent)</span><br><span class=\"line\">    <span class=\"keyword\">set</span> children(queryList: QueryList&lt;ChildComponent&gt;) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(queryList.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.childrenTitle = [];</span><br><span class=\"line\">        setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.childrenTitle.push(<span class=\"string\">'标题'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们1秒给标题列表中新增一个元素，观察控制台<code>queryList</code>的长度一直在增长；这完全是set功劳（每次children的值改变了，它就会执行对应的方法体）。<br>为什么我们不直接通过<code>child.title=&#39;标题&#39;</code>来设置子组件的标题呢？如果你那么做了，你可能会发现控制台出现这样的报错:<br><img src=\"/images/ng-note-component/viewchildren-error.png\" alt=\"viewchildren-error.png\"><br>通常直接改组件实例来改变组件的试图输出不是一个特别好的习惯，我们应该是修改组件对外暴露的属性来改变组件的输出视图，至于这个报错，我们后面的文章再讨论。</p>\n<h4 id=\"ContentChild获取组件内部包裹的内容\"><a href=\"#ContentChild获取组件内部包裹的内容\" class=\"headerlink\" title=\"@ContentChild获取组件内部包裹的内容\"></a>@ContentChild获取组件内部包裹的内容</h4><p>请注意<code>ContentChild</code>和<code>ViewChild</code>的区别，<code>ViewChild</code>获取的是组件视图模版中的元素，而<code>ContentChild</code>获取的是组件包裹的内容。我们重新观察下ChildComponent，如果我们想获取template中的div，我们需要使用<code>ViewChild</code>。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, ViewChild, ElementRef, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-child'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">'&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;'</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ChildComponent &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Input</span>() title: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而如果我们在app.component.html中使用了这个子组件，并且在标签中写了一个div，我们要在ChildComponent代码中获取它就需要使用<code>ContentChild</code>了<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--app.component.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> #<span class=\"attr\">dom</span>&gt;</span>你好我是ChildComponent的内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>我们想在ChildComponent中获取这个div就使用<code>ContentChild</code>（注意这里是ChildCompontent，不是AppComponent）<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, ElementRef, Input, ContentChild &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-child'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">'&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;'</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ChildComponent &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Input</span>() title: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"meta\">@ContentChild</span>(<span class=\"string\">'dom'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">set</span> divElementRef(elementRef: ElementRef) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(elementRef.nativeElement);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>控制台我们可以看到打印出了这个div<br><img src=\"/images/ng-note-component/child-content.png\" alt=\"viewchildren-error.png\"></p>\n<h4 id=\"ContentChildren\"><a href=\"#ContentChildren\" class=\"headerlink\" title=\"@ContentChildren\"></a>@ContentChildren</h4><p>和@ViewChildren类似，是用于批量获取的，这里就不在说明了</p>\n<div class=\"tip\">相关参考文档地址<br><a href=\"https://angular.cn/api/core/ContentChild\" target=\"_blank\" rel=\"noopener\">https://angular.cn/api/core/ContentChild</a><br><br>1. 如果出现多个匹配的子组件<code>ViewChild</code>会如何抉择？<br>通常有多个我们使用<code>ViewChildren</code>,而<code>ViewChild</code>会获取最先遇到的那一个（通常是最前面的），为了避免得到错误的对象，我们使用<code>#变量</code>进行编号可以指定获取想要的。<br><br>代码下载<br><a href=\"/codes/component-simple-4.zip\">component-simple-4.zip</a><br></div>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"获取模版上的组件实例\"><a href=\"#获取模版上的组件实例\" class=\"headerlink\" title=\"获取模版上的组件实例\"></a>获取模版上的组件实例</h4><p>通常，在一个页面组件的模版中有使用了很多组件，我们只需要通过组件暴露的事件和属性来改变或监视它们。但是偶尔我们也或少会遇到需要直接操作这个组件的实例情况（调用组件内部的方法，获取dom节点）</p>\n<h4 id=\"原生做法\"><a href=\"#原生做法\" class=\"headerlink\" title=\"原生做法\"></a>原生做法</h4><p>在传统的html页面中我们可以通过使用<code>getElementBy[XXXX]</code>这类方法来获取页面上的元素节点<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dom\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dom'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用-ViewChild\"><a href=\"#使用-ViewChild\" class=\"headerlink\" title=\"使用@ViewChild\"></a>使用@ViewChild</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> #<span class=\"attr\">dom</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们使用模版语法<code>#变量名</code>让dom变量和div绑定了（#dom类似id=”dom”）<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, ViewChild, ElementRef, AfterViewInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent <span class=\"keyword\">implements</span> AfterViewInit &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ViewChild</span>(<span class=\"string\">'dom'</span>) divElementRef: ElementRef;</span><br><span class=\"line\"></span><br><span class=\"line\">    ngAfterViewInit() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 我们可以从控制台看到这个div节点</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.divElementRef.nativeElement);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>1.使用ViewChild装饰器修饰一个变量，装饰器内部提供一个从模版中获取组件的参照（这里使用了一个字符串‘dom’,代表从模版中找到被临时变量dom依附的组件）<br>2.只有在模版被成功渲染到页面的时候才能获取到这个div（视图加载完成）<br>3.得益于es6的set,get,我们不一定要在视图加载成功时获取这个节点，我们可以在<code>divElementRef</code>被设置的时候获取它<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, ViewChild, ElementRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ViewChild</span>(<span class=\"string\">'dom'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">set</span> divElementRef(elementRef: ElementRef) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(elementRef.nativeElement);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"获取模版中的子组件\"><a href=\"#获取模版中的子组件\" class=\"headerlink\" title=\"获取模版中的子组件\"></a>获取模版中的子组件</h4><p>我们写了一个简单的子组件<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, ViewChild, ElementRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-child'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">'&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;'</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ChildComponent &#123;</span><br><span class=\"line\">    title: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在app.compontent.html使用这个组件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--app.component.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在app.component.ts获取这个子组件的实例<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, ViewChild, ElementRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ChildComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./child.component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ViewChild</span>(ChildComponent)</span><br><span class=\"line\">    <span class=\"keyword\">set</span> divElementRef(child: ChildComponent) &#123;</span><br><span class=\"line\">        child.title = <span class=\"string\">'我要给你设置标题'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>和上面获取<code>div</code>的方式有些不同,我们直接使用了<code>ChildComponent</code>指定我们要获取的是ChildComponent组件。当然我们依然可以使用获取<code>div</code>的方式捕获这个组件，代码如下<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--app.component.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> #<span class=\"attr\">dom</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, ViewChild, ElementRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ChildComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./child.component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ViewChild</span>(<span class=\"string\">'dom'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">set</span> divElementRef(child: ChildComponent) &#123;</span><br><span class=\"line\">        child.title = <span class=\"string\">'我要给你设置标题'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ViewChildren获取多个组件\"><a href=\"#ViewChildren获取多个组件\" class=\"headerlink\" title=\"@ViewChildren获取多个组件\"></a>@ViewChildren获取多个组件</h4><p>上面的例子是特别的，因为模版中只有一个这个组件。但是在很多情况下我们可能会使用大量的相同组件，这时候我们如果想批量操作这些组件，就需要使用<code>@ViewChildren</code>了。<br>修改子组件，把title变为可绑定的属性<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, ViewChild, ElementRef, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-child'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">'&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;'</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ChildComponent &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Input</span>() title: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用<code>ngFor</code>批量输出子组件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let title of childrenTitle\"</span> [<span class=\"attr\">title</span>]=<span class=\"string\">\"title\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, ViewChildren, QueryList &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ChildComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./child.component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    childrenTitle: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ViewChildren</span>(ChildComponent)</span><br><span class=\"line\">    <span class=\"keyword\">set</span> children(queryList: QueryList&lt;ChildComponent&gt;) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(queryList.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.childrenTitle = [];</span><br><span class=\"line\">        setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.childrenTitle.push(<span class=\"string\">'标题'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们1秒给标题列表中新增一个元素，观察控制台<code>queryList</code>的长度一直在增长；这完全是set功劳（每次children的值改变了，它就会执行对应的方法体）。<br>为什么我们不直接通过<code>child.title=&#39;标题&#39;</code>来设置子组件的标题呢？如果你那么做了，你可能会发现控制台出现这样的报错:<br><img src=\"/images/ng-note-component/viewchildren-error.png\" alt=\"viewchildren-error.png\"><br>通常直接改组件实例来改变组件的试图输出不是一个特别好的习惯，我们应该是修改组件对外暴露的属性来改变组件的输出视图，至于这个报错，我们后面的文章再讨论。</p>\n<h4 id=\"ContentChild获取组件内部包裹的内容\"><a href=\"#ContentChild获取组件内部包裹的内容\" class=\"headerlink\" title=\"@ContentChild获取组件内部包裹的内容\"></a>@ContentChild获取组件内部包裹的内容</h4><p>请注意<code>ContentChild</code>和<code>ViewChild</code>的区别，<code>ViewChild</code>获取的是组件视图模版中的元素，而<code>ContentChild</code>获取的是组件包裹的内容。我们重新观察下ChildComponent，如果我们想获取template中的div，我们需要使用<code>ViewChild</code>。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, ViewChild, ElementRef, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-child'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">'&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;'</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ChildComponent &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Input</span>() title: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而如果我们在app.component.html中使用了这个子组件，并且在标签中写了一个div，我们要在ChildComponent代码中获取它就需要使用<code>ContentChild</code>了<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--app.component.html--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> #<span class=\"attr\">dom</span>&gt;</span>你好我是ChildComponent的内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>我们想在ChildComponent中获取这个div就使用<code>ContentChild</code>（注意这里是ChildCompontent，不是AppComponent）<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, ElementRef, Input, ContentChild &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-child'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">'&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;'</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ChildComponent &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Input</span>() title: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"meta\">@ContentChild</span>(<span class=\"string\">'dom'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">set</span> divElementRef(elementRef: ElementRef) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(elementRef.nativeElement);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>控制台我们可以看到打印出了这个div<br><img src=\"/images/ng-note-component/child-content.png\" alt=\"viewchildren-error.png\"></p>\n<h4 id=\"ContentChildren\"><a href=\"#ContentChildren\" class=\"headerlink\" title=\"@ContentChildren\"></a>@ContentChildren</h4><p>和@ViewChildren类似，是用于批量获取的，这里就不在说明了</p>\n<div class=\"tip\">相关参考文档地址<br><a href=\"https://angular.cn/api/core/ContentChild\" target=\"_blank\" rel=\"noopener\">https://angular.cn/api/core/ContentChild</a><br><br>1. 如果出现多个匹配的子组件<code>ViewChild</code>会如何抉择？<br>通常有多个我们使用<code>ViewChildren</code>,而<code>ViewChild</code>会获取最先遇到的那一个（通常是最前面的），为了避免得到错误的对象，我们使用<code>#变量</code>进行编号可以指定获取想要的。<br><br>代码下载<br><a href=\"/codes/component-simple-4.zip\">component-simple-4.zip</a><br></div>\n\n"},{"title":"angular component note-1","date":"2018-07-06T03:00:46.000Z","_content":"#### 组件描述\n1. 组件是Angular应用UI里面的最基本构造块，Angular应用就像一个组件树。\n\n2. 组件是指令的子集。与指令不同, 组件始终具有模板, 并且每个模板中的元素只能实例化一个组件。（指令是可以共存的）\n\n3. 组件必须属于 NgModule 才能由另一个组件或应用程序使用。若要指定组件是 NgModule 的成员, 应在该 NgModule 的可声明类中列出它（declarations）。\n\n4. 注意使用场景，组件除了具有指令的能力还有自己更高级的拓展，但是组件通常是高度封装而且带有模版（类似自己的视图），而指令是轻量而且可以以一种依附的方式增强宿主的‘能力’；我们可以这么理解，在指令群体中，有些指令成长了（变成了组件），可以干很复杂很难的活（比如显示一个日历），有些指令只是专注与某些特定的领域（比如属性指令，给某个元素加个动画），这些指令可以用在组件上，可以任意组合同时在一个组件上。\n\n<!--more-->\n#### 一个比较好的关系\n组件就是指令，但组件必须有视图。指令可以有视图，也可以没有。\n\n#### 元数据\n```typescript\n@Component({ \n  changeDetection?: ChangeDetectionStrategy\n  viewProviders?: Provider[]\n  moduleId?: string\n  templateUrl?: string\n  template?: string\n  styleUrls?: string[]\n  styles?: string[]\n  animations?: any[]\n  encapsulation?: ViewEncapsulation\n  interpolation?: [string, string]\n  entryComponents?: Array<Type<any> | any[]>\n  preserveWhitespaces?: boolean\n \n  // inherited from core/Directive\n  selector?: string\n  inputs?: string[]\n  outputs?: string[]\n  host?: {...}\n  providers?: Provider[]\n  exportAs?: string\n  queries?: {...}\n})\n```\n\nanimations - 组件动画列表\nchangeDetection - 此组件使用的更改检测策略，比如我们想行为不要更新视图（优化组件性能）\nencapsulation - 此组件使用的样式封装策略（通常我们不会去改动，也不要改）\nentryComponents - 动态插入此组件视图的组件列表\n**exportAs** - 在模板中导出组件实例的名称\nhost - 绑定宿主元素的属性，事件（这个通常不建议写，应该直接写在组件类内部，而不是配置参数中）\ninputs -  组件可以对外数据绑定的属性列表（这个通常不建议写，同上）\ninterpolation - 自定义模版输出的格式默认是['{{','}}'],一般没必要改\nmoduleId - 定义此组件的文件的 ES/CommonJS 模块 id，不写默认就好\noutputs - 公开其他人可以订阅的输出事件的类属性名称列表（这个通常不建议写，应该在类内部中写）\n**providers** - 组件和他的子级可以使用的服务注册列表\nqueries - 配置可插入到组件中的查询,对应的ViewChildren,ContentChildren（通常也不会在这里写，应该在类内部中写）\n**selector** - 选择器,通常页面不需要选择器，选择器不要重名了\n**styleUrls** - 要应用于此组件视图的样式文件url路径（是一个字符串数组）\nstyles - 组件样式，直接写（不能和styleUrls同时存在，是一个字符串数组）\ntemplate - 直接写组建的模版，（是一个字符串数）\n**templateUrl** - 组件的模版url路径，（不能和template同时存在，是一个字符串）\nviewProviders - 组件和他的 **子级视图** 可以使用的服务注册列表\n**preserveWhitespaces** - 保留空格（默认不保留，boolean）\n\n#### 一个简单的组件入门\n\n1. 我们编写了一个进度条组件，它的选择器是app-progress\n\n```typescript\n// progress.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-progress',\n    template: `\n    <div class=\"progress\">\n        <div class=\"progress-bar\" style=\"width:50%;\"></div>\n    </div>`,\n    styles: [`\n        .progress{\n            display: -webkit-box;\n            display: -ms-flexbox;\n            display: flex;\n            height: 1rem;\n            overflow: hidden;\n            font-size: .75rem;\n            background-color: #e9ecef;\n            border-radius: .25rem;\n        }\n        .progress-bar {\n            display: -webkit-box;\n            display: -ms-flexbox;\n            display: flex;\n            -webkit-box-orient: vertical;\n            -webkit-box-direction: normal;\n            -ms-flex-direction: column;\n            flex-direction: column;\n            -webkit-box-pack: center;\n            -ms-flex-pack: center;\n            justify-content: center;\n            color: #fff;\n            text-align: center;\n            background-color: #007bff;\n            transition: width .6s ease;\n        }\n    `]\n})\nexport class ProgressComponent {\n    \n}\n```\n\n2. 在app.module.ts中引入这个组件\n\n```typescript\n// app.module.ts\n\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { ProgressComponent } from './progress.component';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        ProgressComponent,\n    ],\n    imports: [\n        BrowserModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n3. 在app.component.html中使用它\n\n```html\n<!-- app.component.html -->\n<app-progress></app-progress>\n```\n![进度条](/images/ng-note-component/progress.png)\n\n#### 使用@Input让组件可以通过属性进行数据绑定\n上面写的进度条是固定50%的，然而实际使用我们需要不断的变化进度，这个时候就需要让组件可以接受外部传递的进度\n\na. 使用ngStyle指令绑定width样式，可以根据绑定的值不断变幻width\n```html\n<!-- progress.component.ts(template) -->\n<div class=\"progress\">\n    <div class=\"progress-bar\" [ngStyle]=\"{width: value + '%' }\"></div>\n</div>\n```\n```typescript\nexport class ProgressComponent {\n    \n    value:number;\n\n    construct(){\n        // 默认进度条进度为0\n        this.value = 0;\n    }\n}\n```\n\nb. 这个时候我们在progress组件内部修改value的值（0-100）,进度条会跟着变化。\n\nc. 给value加上@Input装饰器，让它可以进行属性的数据绑定\n```typescript\nexport class ProgressComponent {\n\n    @Input() value: number;\n\n    construct() {\n        // 默认进度条进度为0\n        this.value = 0;\n    }\n}\n```\n\nd. 修改app.component.html,给进度条加上value属性并赋值50，我们可以看到和之前截图一样的进度条\n\n```html\n<!-- app.component.html -->\n<app-progress value=\"50\"></app-progress>\n```\n\ne. 把`value=\"50\"`改为绑定模式，让进度条动起来\n```html\n<!-- app.component.html -->\n<app-progress [value]=\"progressValue\"></app-progress>\n```\n```typescript\n// app.component.ts\nexport class AppComponent {\n\n    progressValue: number;\n\n    constructor() {\n        this.progressValue = 0;\n        setInterval(() => {\n            if (++this.progressValue > 100) {\n                this.progressValue = 0;\n            }\n        }, 100);\n    }\n}\n```\n![进度条](/images/ng-note-component/progress.gif)\n\n#### 使用ng-content将宿主元素的子节点投影到模板中的指定位置\na. `<app-progress></app-progress>`就是组件的宿主元素\nb. 通常我们在`<app-progress></app-progress>`标签内部写任何模版都是不能渲染出来的，如：\n```html\n<app-progress [value]=\"progressValue\">\n    {{progressValue}}%\n</app-progress>\n```\n我们并不能看到进度条里面有显示progressValue的值\nc. 在组件模版中加入`<ng-content>`标签，你将会发现progressValue出现了(要想让标签内的元素显示必须给它一个投影位置，这个位置就是`<ng-content>`所在的地方)\n```html\n<!-- progress.component.ts(template) -->\n<div class=\"progress\">\n    <div class=\"progress-bar\" [ngStyle]=\"{width: value + '%' }\">\n        <ng-content></ng-content>\n    </div>\n</div>\n```\n![进度条](/images/ng-note-component/progress-value.png)\n<div class=\"tip\">相关参考文档地址\nhttps://angular.cn/api/core/Component\n代码下载\n<a href=\"/codes/component-simple-1.zip\">component-simple-1.zip</a>\n</div>\n\n","source":"_posts/ng-note-compontent-1.md","raw":"---\ntitle: angular component note-1\ndate: 2018-07-06 11:00:46\ntags: Angular\ncategories: Web开发\n---\n#### 组件描述\n1. 组件是Angular应用UI里面的最基本构造块，Angular应用就像一个组件树。\n\n2. 组件是指令的子集。与指令不同, 组件始终具有模板, 并且每个模板中的元素只能实例化一个组件。（指令是可以共存的）\n\n3. 组件必须属于 NgModule 才能由另一个组件或应用程序使用。若要指定组件是 NgModule 的成员, 应在该 NgModule 的可声明类中列出它（declarations）。\n\n4. 注意使用场景，组件除了具有指令的能力还有自己更高级的拓展，但是组件通常是高度封装而且带有模版（类似自己的视图），而指令是轻量而且可以以一种依附的方式增强宿主的‘能力’；我们可以这么理解，在指令群体中，有些指令成长了（变成了组件），可以干很复杂很难的活（比如显示一个日历），有些指令只是专注与某些特定的领域（比如属性指令，给某个元素加个动画），这些指令可以用在组件上，可以任意组合同时在一个组件上。\n\n<!--more-->\n#### 一个比较好的关系\n组件就是指令，但组件必须有视图。指令可以有视图，也可以没有。\n\n#### 元数据\n```typescript\n@Component({ \n  changeDetection?: ChangeDetectionStrategy\n  viewProviders?: Provider[]\n  moduleId?: string\n  templateUrl?: string\n  template?: string\n  styleUrls?: string[]\n  styles?: string[]\n  animations?: any[]\n  encapsulation?: ViewEncapsulation\n  interpolation?: [string, string]\n  entryComponents?: Array<Type<any> | any[]>\n  preserveWhitespaces?: boolean\n \n  // inherited from core/Directive\n  selector?: string\n  inputs?: string[]\n  outputs?: string[]\n  host?: {...}\n  providers?: Provider[]\n  exportAs?: string\n  queries?: {...}\n})\n```\n\nanimations - 组件动画列表\nchangeDetection - 此组件使用的更改检测策略，比如我们想行为不要更新视图（优化组件性能）\nencapsulation - 此组件使用的样式封装策略（通常我们不会去改动，也不要改）\nentryComponents - 动态插入此组件视图的组件列表\n**exportAs** - 在模板中导出组件实例的名称\nhost - 绑定宿主元素的属性，事件（这个通常不建议写，应该直接写在组件类内部，而不是配置参数中）\ninputs -  组件可以对外数据绑定的属性列表（这个通常不建议写，同上）\ninterpolation - 自定义模版输出的格式默认是['{{','}}'],一般没必要改\nmoduleId - 定义此组件的文件的 ES/CommonJS 模块 id，不写默认就好\noutputs - 公开其他人可以订阅的输出事件的类属性名称列表（这个通常不建议写，应该在类内部中写）\n**providers** - 组件和他的子级可以使用的服务注册列表\nqueries - 配置可插入到组件中的查询,对应的ViewChildren,ContentChildren（通常也不会在这里写，应该在类内部中写）\n**selector** - 选择器,通常页面不需要选择器，选择器不要重名了\n**styleUrls** - 要应用于此组件视图的样式文件url路径（是一个字符串数组）\nstyles - 组件样式，直接写（不能和styleUrls同时存在，是一个字符串数组）\ntemplate - 直接写组建的模版，（是一个字符串数）\n**templateUrl** - 组件的模版url路径，（不能和template同时存在，是一个字符串）\nviewProviders - 组件和他的 **子级视图** 可以使用的服务注册列表\n**preserveWhitespaces** - 保留空格（默认不保留，boolean）\n\n#### 一个简单的组件入门\n\n1. 我们编写了一个进度条组件，它的选择器是app-progress\n\n```typescript\n// progress.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-progress',\n    template: `\n    <div class=\"progress\">\n        <div class=\"progress-bar\" style=\"width:50%;\"></div>\n    </div>`,\n    styles: [`\n        .progress{\n            display: -webkit-box;\n            display: -ms-flexbox;\n            display: flex;\n            height: 1rem;\n            overflow: hidden;\n            font-size: .75rem;\n            background-color: #e9ecef;\n            border-radius: .25rem;\n        }\n        .progress-bar {\n            display: -webkit-box;\n            display: -ms-flexbox;\n            display: flex;\n            -webkit-box-orient: vertical;\n            -webkit-box-direction: normal;\n            -ms-flex-direction: column;\n            flex-direction: column;\n            -webkit-box-pack: center;\n            -ms-flex-pack: center;\n            justify-content: center;\n            color: #fff;\n            text-align: center;\n            background-color: #007bff;\n            transition: width .6s ease;\n        }\n    `]\n})\nexport class ProgressComponent {\n    \n}\n```\n\n2. 在app.module.ts中引入这个组件\n\n```typescript\n// app.module.ts\n\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { ProgressComponent } from './progress.component';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        ProgressComponent,\n    ],\n    imports: [\n        BrowserModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n3. 在app.component.html中使用它\n\n```html\n<!-- app.component.html -->\n<app-progress></app-progress>\n```\n![进度条](/images/ng-note-component/progress.png)\n\n#### 使用@Input让组件可以通过属性进行数据绑定\n上面写的进度条是固定50%的，然而实际使用我们需要不断的变化进度，这个时候就需要让组件可以接受外部传递的进度\n\na. 使用ngStyle指令绑定width样式，可以根据绑定的值不断变幻width\n```html\n<!-- progress.component.ts(template) -->\n<div class=\"progress\">\n    <div class=\"progress-bar\" [ngStyle]=\"{width: value + '%' }\"></div>\n</div>\n```\n```typescript\nexport class ProgressComponent {\n    \n    value:number;\n\n    construct(){\n        // 默认进度条进度为0\n        this.value = 0;\n    }\n}\n```\n\nb. 这个时候我们在progress组件内部修改value的值（0-100）,进度条会跟着变化。\n\nc. 给value加上@Input装饰器，让它可以进行属性的数据绑定\n```typescript\nexport class ProgressComponent {\n\n    @Input() value: number;\n\n    construct() {\n        // 默认进度条进度为0\n        this.value = 0;\n    }\n}\n```\n\nd. 修改app.component.html,给进度条加上value属性并赋值50，我们可以看到和之前截图一样的进度条\n\n```html\n<!-- app.component.html -->\n<app-progress value=\"50\"></app-progress>\n```\n\ne. 把`value=\"50\"`改为绑定模式，让进度条动起来\n```html\n<!-- app.component.html -->\n<app-progress [value]=\"progressValue\"></app-progress>\n```\n```typescript\n// app.component.ts\nexport class AppComponent {\n\n    progressValue: number;\n\n    constructor() {\n        this.progressValue = 0;\n        setInterval(() => {\n            if (++this.progressValue > 100) {\n                this.progressValue = 0;\n            }\n        }, 100);\n    }\n}\n```\n![进度条](/images/ng-note-component/progress.gif)\n\n#### 使用ng-content将宿主元素的子节点投影到模板中的指定位置\na. `<app-progress></app-progress>`就是组件的宿主元素\nb. 通常我们在`<app-progress></app-progress>`标签内部写任何模版都是不能渲染出来的，如：\n```html\n<app-progress [value]=\"progressValue\">\n    {{progressValue}}%\n</app-progress>\n```\n我们并不能看到进度条里面有显示progressValue的值\nc. 在组件模版中加入`<ng-content>`标签，你将会发现progressValue出现了(要想让标签内的元素显示必须给它一个投影位置，这个位置就是`<ng-content>`所在的地方)\n```html\n<!-- progress.component.ts(template) -->\n<div class=\"progress\">\n    <div class=\"progress-bar\" [ngStyle]=\"{width: value + '%' }\">\n        <ng-content></ng-content>\n    </div>\n</div>\n```\n![进度条](/images/ng-note-component/progress-value.png)\n<div class=\"tip\">相关参考文档地址\nhttps://angular.cn/api/core/Component\n代码下载\n<a href=\"/codes/component-simple-1.zip\">component-simple-1.zip</a>\n</div>\n\n","slug":"ng-note-compontent-1","published":1,"updated":"2019-07-12T03:13:28.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld97002ie8weujvhrs9d","content":"<h4 id=\"组件描述\"><a href=\"#组件描述\" class=\"headerlink\" title=\"组件描述\"></a>组件描述</h4><ol>\n<li><p>组件是Angular应用UI里面的最基本构造块，Angular应用就像一个组件树。</p>\n</li>\n<li><p>组件是指令的子集。与指令不同, 组件始终具有模板, 并且每个模板中的元素只能实例化一个组件。（指令是可以共存的）</p>\n</li>\n<li><p>组件必须属于 NgModule 才能由另一个组件或应用程序使用。若要指定组件是 NgModule 的成员, 应在该 NgModule 的可声明类中列出它（declarations）。</p>\n</li>\n<li><p>注意使用场景，组件除了具有指令的能力还有自己更高级的拓展，但是组件通常是高度封装而且带有模版（类似自己的视图），而指令是轻量而且可以以一种依附的方式增强宿主的‘能力’；我们可以这么理解，在指令群体中，有些指令成长了（变成了组件），可以干很复杂很难的活（比如显示一个日历），有些指令只是专注与某些特定的领域（比如属性指令，给某个元素加个动画），这些指令可以用在组件上，可以任意组合同时在一个组件上。</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h4 id=\"一个比较好的关系\"><a href=\"#一个比较好的关系\" class=\"headerlink\" title=\"一个比较好的关系\"></a>一个比较好的关系</h4><p>组件就是指令，但组件必须有视图。指令可以有视图，也可以没有。</p>\n<h4 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123; </span><br><span class=\"line\">  changeDetection?: ChangeDetectionStrategy</span><br><span class=\"line\">  viewProviders?: Provider[]</span><br><span class=\"line\">  moduleId?: <span class=\"built_in\">string</span></span><br><span class=\"line\">  templateUrl?: <span class=\"built_in\">string</span></span><br><span class=\"line\">  template?: <span class=\"built_in\">string</span></span><br><span class=\"line\">  styleUrls?: <span class=\"built_in\">string</span>[]</span><br><span class=\"line\">  styles?: <span class=\"built_in\">string</span>[]</span><br><span class=\"line\">  animations?: <span class=\"built_in\">any</span>[]</span><br><span class=\"line\">  encapsulation?: ViewEncapsulation</span><br><span class=\"line\">  interpolation?: [<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>]</span><br><span class=\"line\">  entryComponents?: <span class=\"built_in\">Array</span>&lt;Type&lt;<span class=\"built_in\">any</span>&gt; | <span class=\"built_in\">any</span>[]&gt;</span><br><span class=\"line\">  preserveWhitespaces?: <span class=\"built_in\">boolean</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// inherited from core/Directive</span></span><br><span class=\"line\">  selector?: <span class=\"built_in\">string</span></span><br><span class=\"line\">  inputs?: <span class=\"built_in\">string</span>[]</span><br><span class=\"line\">  outputs?: <span class=\"built_in\">string</span>[]</span><br><span class=\"line\">  host?: &#123;...&#125;</span><br><span class=\"line\">  providers?: Provider[]</span><br><span class=\"line\">  exportAs?: <span class=\"built_in\">string</span></span><br><span class=\"line\">  queries?: &#123;...&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>animations - 组件动画列表<br>changeDetection - 此组件使用的更改检测策略，比如我们想行为不要更新视图（优化组件性能）<br>encapsulation - 此组件使用的样式封装策略（通常我们不会去改动，也不要改）<br>entryComponents - 动态插入此组件视图的组件列表<br><strong>exportAs</strong> - 在模板中导出组件实例的名称<br>host - 绑定宿主元素的属性，事件（这个通常不建议写，应该直接写在组件类内部，而不是配置参数中）<br>inputs -  组件可以对外数据绑定的属性列表（这个通常不建议写，同上）<br>interpolation - 自定义模版输出的格式默认是[‘,‘],一般没必要改<br>moduleId - 定义此组件的文件的 ES/CommonJS 模块 id，不写默认就好<br>outputs - 公开其他人可以订阅的输出事件的类属性名称列表（这个通常不建议写，应该在类内部中写）<br><strong>providers</strong> - 组件和他的子级可以使用的服务注册列表<br>queries - 配置可插入到组件中的查询,对应的ViewChildren,ContentChildren（通常也不会在这里写，应该在类内部中写）<br><strong>selector</strong> - 选择器,通常页面不需要选择器，选择器不要重名了<br><strong>styleUrls</strong> - 要应用于此组件视图的样式文件url路径（是一个字符串数组）<br>styles - 组件样式，直接写（不能和styleUrls同时存在，是一个字符串数组）<br>template - 直接写组建的模版，（是一个字符串数）<br><strong>templateUrl</strong> - 组件的模版url路径，（不能和template同时存在，是一个字符串）<br>viewProviders - 组件和他的 <strong>子级视图</strong> 可以使用的服务注册列表<br><strong>preserveWhitespaces</strong> - 保留空格（默认不保留，boolean）</p>\n<h4 id=\"一个简单的组件入门\"><a href=\"#一个简单的组件入门\" class=\"headerlink\" title=\"一个简单的组件入门\"></a>一个简单的组件入门</h4><ol>\n<li>我们编写了一个进度条组件，它的选择器是app-progress</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// progress.component.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-progress'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=\"progress\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div class=\"progress-bar\" style=\"width:50%;\"&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;`</span>,</span><br><span class=\"line\">    styles: [<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        .progress&#123;</span></span><br><span class=\"line\"><span class=\"string\">            display: -webkit-box;</span></span><br><span class=\"line\"><span class=\"string\">            display: -ms-flexbox;</span></span><br><span class=\"line\"><span class=\"string\">            display: flex;</span></span><br><span class=\"line\"><span class=\"string\">            height: 1rem;</span></span><br><span class=\"line\"><span class=\"string\">            overflow: hidden;</span></span><br><span class=\"line\"><span class=\"string\">            font-size: .75rem;</span></span><br><span class=\"line\"><span class=\"string\">            background-color: #e9ecef;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: .25rem;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .progress-bar &#123;</span></span><br><span class=\"line\"><span class=\"string\">            display: -webkit-box;</span></span><br><span class=\"line\"><span class=\"string\">            display: -ms-flexbox;</span></span><br><span class=\"line\"><span class=\"string\">            display: flex;</span></span><br><span class=\"line\"><span class=\"string\">            -webkit-box-orient: vertical;</span></span><br><span class=\"line\"><span class=\"string\">            -webkit-box-direction: normal;</span></span><br><span class=\"line\"><span class=\"string\">            -ms-flex-direction: column;</span></span><br><span class=\"line\"><span class=\"string\">            flex-direction: column;</span></span><br><span class=\"line\"><span class=\"string\">            -webkit-box-pack: center;</span></span><br><span class=\"line\"><span class=\"string\">            -ms-flex-pack: center;</span></span><br><span class=\"line\"><span class=\"string\">            justify-content: center;</span></span><br><span class=\"line\"><span class=\"string\">            color: #fff;</span></span><br><span class=\"line\"><span class=\"string\">            text-align: center;</span></span><br><span class=\"line\"><span class=\"string\">            background-color: #007bff;</span></span><br><span class=\"line\"><span class=\"string\">            transition: width .6s ease;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProgressComponent &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在app.module.ts中引入这个组件</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ProgressComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./progress.component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">    declarations: [</span><br><span class=\"line\">        AppComponent,</span><br><span class=\"line\">        ProgressComponent,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    imports: [</span><br><span class=\"line\">        BrowserModule</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    providers: [],</span><br><span class=\"line\">    bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在app.component.html中使用它</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-progress</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-progress</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ng-note-component/progress.png\" alt=\"进度条\"></p>\n<h4 id=\"使用-Input让组件可以通过属性进行数据绑定\"><a href=\"#使用-Input让组件可以通过属性进行数据绑定\" class=\"headerlink\" title=\"使用@Input让组件可以通过属性进行数据绑定\"></a>使用@Input让组件可以通过属性进行数据绑定</h4><p>上面写的进度条是固定50%的，然而实际使用我们需要不断的变化进度，这个时候就需要让组件可以接受外部传递的进度</p>\n<p>a. 使用ngStyle指令绑定width样式，可以根据绑定的值不断变幻width<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- progress.component.ts(template) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-bar\"</span> [<span class=\"attr\">ngStyle</span>]=<span class=\"string\">\"&#123;width: value + '%' &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProgressComponent &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    value:<span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    construct()&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 默认进度条进度为0</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>b. 这个时候我们在progress组件内部修改value的值（0-100）,进度条会跟着变化。</p>\n<p>c. 给value加上@Input装饰器，让它可以进行属性的数据绑定<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProgressComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Input</span>() value: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    construct() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 默认进度条进度为0</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>d. 修改app.component.html,给进度条加上value属性并赋值50，我们可以看到和之前截图一样的进度条</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-progress</span> <span class=\"attr\">value</span>=<span class=\"string\">\"50\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-progress</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>e. 把<code>value=&quot;50&quot;</code>改为绑定模式，让进度条动起来<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-progress</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"progressValue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-progress</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.component.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    progressValue: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.progressValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">        setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (++<span class=\"keyword\">this</span>.progressValue &gt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.progressValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ng-note-component/progress.gif\" alt=\"进度条\"></p>\n<h4 id=\"使用ng-content将宿主元素的子节点投影到模板中的指定位置\"><a href=\"#使用ng-content将宿主元素的子节点投影到模板中的指定位置\" class=\"headerlink\" title=\"使用ng-content将宿主元素的子节点投影到模板中的指定位置\"></a>使用ng-content将宿主元素的子节点投影到模板中的指定位置</h4><p>a. <code>&lt;app-progress&gt;&lt;/app-progress&gt;</code>就是组件的宿主元素<br>b. 通常我们在<code>&lt;app-progress&gt;&lt;/app-progress&gt;</code>标签内部写任何模版都是不能渲染出来的，如：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-progress</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"progressValue\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;progressValue&#125;&#125;%</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-progress</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>我们并不能看到进度条里面有显示progressValue的值<br>c. 在组件模版中加入<code>&lt;ng-content&gt;</code>标签，你将会发现progressValue出现了(要想让标签内的元素显示必须给它一个投影位置，这个位置就是<code>&lt;ng-content&gt;</code>所在的地方)<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- progress.component.ts(template) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-bar\"</span> [<span class=\"attr\">ngStyle</span>]=<span class=\"string\">\"&#123;width: value + '%' &#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ng-content</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/ng-note-component/progress-value.png\" alt=\"进度条\"></p>\n<div class=\"tip\">相关参考文档地址<br><a href=\"https://angular.cn/api/core/Component\" target=\"_blank\" rel=\"noopener\">https://angular.cn/api/core/Component</a><br>代码下载<br><a href=\"/codes/component-simple-1.zip\">component-simple-1.zip</a><br></div>\n\n","site":{"data":{}},"excerpt":"<h4 id=\"组件描述\"><a href=\"#组件描述\" class=\"headerlink\" title=\"组件描述\"></a>组件描述</h4><ol>\n<li><p>组件是Angular应用UI里面的最基本构造块，Angular应用就像一个组件树。</p>\n</li>\n<li><p>组件是指令的子集。与指令不同, 组件始终具有模板, 并且每个模板中的元素只能实例化一个组件。（指令是可以共存的）</p>\n</li>\n<li><p>组件必须属于 NgModule 才能由另一个组件或应用程序使用。若要指定组件是 NgModule 的成员, 应在该 NgModule 的可声明类中列出它（declarations）。</p>\n</li>\n<li><p>注意使用场景，组件除了具有指令的能力还有自己更高级的拓展，但是组件通常是高度封装而且带有模版（类似自己的视图），而指令是轻量而且可以以一种依附的方式增强宿主的‘能力’；我们可以这么理解，在指令群体中，有些指令成长了（变成了组件），可以干很复杂很难的活（比如显示一个日历），有些指令只是专注与某些特定的领域（比如属性指令，给某个元素加个动画），这些指令可以用在组件上，可以任意组合同时在一个组件上。</p>\n</li>\n</ol>","more":"<h4 id=\"一个比较好的关系\"><a href=\"#一个比较好的关系\" class=\"headerlink\" title=\"一个比较好的关系\"></a>一个比较好的关系</h4><p>组件就是指令，但组件必须有视图。指令可以有视图，也可以没有。</p>\n<h4 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(&#123; </span><br><span class=\"line\">  changeDetection?: ChangeDetectionStrategy</span><br><span class=\"line\">  viewProviders?: Provider[]</span><br><span class=\"line\">  moduleId?: <span class=\"built_in\">string</span></span><br><span class=\"line\">  templateUrl?: <span class=\"built_in\">string</span></span><br><span class=\"line\">  template?: <span class=\"built_in\">string</span></span><br><span class=\"line\">  styleUrls?: <span class=\"built_in\">string</span>[]</span><br><span class=\"line\">  styles?: <span class=\"built_in\">string</span>[]</span><br><span class=\"line\">  animations?: <span class=\"built_in\">any</span>[]</span><br><span class=\"line\">  encapsulation?: ViewEncapsulation</span><br><span class=\"line\">  interpolation?: [<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>]</span><br><span class=\"line\">  entryComponents?: <span class=\"built_in\">Array</span>&lt;Type&lt;<span class=\"built_in\">any</span>&gt; | <span class=\"built_in\">any</span>[]&gt;</span><br><span class=\"line\">  preserveWhitespaces?: <span class=\"built_in\">boolean</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// inherited from core/Directive</span></span><br><span class=\"line\">  selector?: <span class=\"built_in\">string</span></span><br><span class=\"line\">  inputs?: <span class=\"built_in\">string</span>[]</span><br><span class=\"line\">  outputs?: <span class=\"built_in\">string</span>[]</span><br><span class=\"line\">  host?: &#123;...&#125;</span><br><span class=\"line\">  providers?: Provider[]</span><br><span class=\"line\">  exportAs?: <span class=\"built_in\">string</span></span><br><span class=\"line\">  queries?: &#123;...&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>animations - 组件动画列表<br>changeDetection - 此组件使用的更改检测策略，比如我们想行为不要更新视图（优化组件性能）<br>encapsulation - 此组件使用的样式封装策略（通常我们不会去改动，也不要改）<br>entryComponents - 动态插入此组件视图的组件列表<br><strong>exportAs</strong> - 在模板中导出组件实例的名称<br>host - 绑定宿主元素的属性，事件（这个通常不建议写，应该直接写在组件类内部，而不是配置参数中）<br>inputs -  组件可以对外数据绑定的属性列表（这个通常不建议写，同上）<br>interpolation - 自定义模版输出的格式默认是[‘,‘],一般没必要改<br>moduleId - 定义此组件的文件的 ES/CommonJS 模块 id，不写默认就好<br>outputs - 公开其他人可以订阅的输出事件的类属性名称列表（这个通常不建议写，应该在类内部中写）<br><strong>providers</strong> - 组件和他的子级可以使用的服务注册列表<br>queries - 配置可插入到组件中的查询,对应的ViewChildren,ContentChildren（通常也不会在这里写，应该在类内部中写）<br><strong>selector</strong> - 选择器,通常页面不需要选择器，选择器不要重名了<br><strong>styleUrls</strong> - 要应用于此组件视图的样式文件url路径（是一个字符串数组）<br>styles - 组件样式，直接写（不能和styleUrls同时存在，是一个字符串数组）<br>template - 直接写组建的模版，（是一个字符串数）<br><strong>templateUrl</strong> - 组件的模版url路径，（不能和template同时存在，是一个字符串）<br>viewProviders - 组件和他的 <strong>子级视图</strong> 可以使用的服务注册列表<br><strong>preserveWhitespaces</strong> - 保留空格（默认不保留，boolean）</p>\n<h4 id=\"一个简单的组件入门\"><a href=\"#一个简单的组件入门\" class=\"headerlink\" title=\"一个简单的组件入门\"></a>一个简单的组件入门</h4><ol>\n<li>我们编写了一个进度条组件，它的选择器是app-progress</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// progress.component.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-progress'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=\"progress\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div class=\"progress-bar\" style=\"width:50%;\"&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;`</span>,</span><br><span class=\"line\">    styles: [<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        .progress&#123;</span></span><br><span class=\"line\"><span class=\"string\">            display: -webkit-box;</span></span><br><span class=\"line\"><span class=\"string\">            display: -ms-flexbox;</span></span><br><span class=\"line\"><span class=\"string\">            display: flex;</span></span><br><span class=\"line\"><span class=\"string\">            height: 1rem;</span></span><br><span class=\"line\"><span class=\"string\">            overflow: hidden;</span></span><br><span class=\"line\"><span class=\"string\">            font-size: .75rem;</span></span><br><span class=\"line\"><span class=\"string\">            background-color: #e9ecef;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: .25rem;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .progress-bar &#123;</span></span><br><span class=\"line\"><span class=\"string\">            display: -webkit-box;</span></span><br><span class=\"line\"><span class=\"string\">            display: -ms-flexbox;</span></span><br><span class=\"line\"><span class=\"string\">            display: flex;</span></span><br><span class=\"line\"><span class=\"string\">            -webkit-box-orient: vertical;</span></span><br><span class=\"line\"><span class=\"string\">            -webkit-box-direction: normal;</span></span><br><span class=\"line\"><span class=\"string\">            -ms-flex-direction: column;</span></span><br><span class=\"line\"><span class=\"string\">            flex-direction: column;</span></span><br><span class=\"line\"><span class=\"string\">            -webkit-box-pack: center;</span></span><br><span class=\"line\"><span class=\"string\">            -ms-flex-pack: center;</span></span><br><span class=\"line\"><span class=\"string\">            justify-content: center;</span></span><br><span class=\"line\"><span class=\"string\">            color: #fff;</span></span><br><span class=\"line\"><span class=\"string\">            text-align: center;</span></span><br><span class=\"line\"><span class=\"string\">            background-color: #007bff;</span></span><br><span class=\"line\"><span class=\"string\">            transition: width .6s ease;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProgressComponent &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在app.module.ts中引入这个组件</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ProgressComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./progress.component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">    declarations: [</span><br><span class=\"line\">        AppComponent,</span><br><span class=\"line\">        ProgressComponent,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    imports: [</span><br><span class=\"line\">        BrowserModule</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    providers: [],</span><br><span class=\"line\">    bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在app.component.html中使用它</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-progress</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-progress</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ng-note-component/progress.png\" alt=\"进度条\"></p>\n<h4 id=\"使用-Input让组件可以通过属性进行数据绑定\"><a href=\"#使用-Input让组件可以通过属性进行数据绑定\" class=\"headerlink\" title=\"使用@Input让组件可以通过属性进行数据绑定\"></a>使用@Input让组件可以通过属性进行数据绑定</h4><p>上面写的进度条是固定50%的，然而实际使用我们需要不断的变化进度，这个时候就需要让组件可以接受外部传递的进度</p>\n<p>a. 使用ngStyle指令绑定width样式，可以根据绑定的值不断变幻width<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- progress.component.ts(template) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-bar\"</span> [<span class=\"attr\">ngStyle</span>]=<span class=\"string\">\"&#123;width: value + '%' &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProgressComponent &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    value:<span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    construct()&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 默认进度条进度为0</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>b. 这个时候我们在progress组件内部修改value的值（0-100）,进度条会跟着变化。</p>\n<p>c. 给value加上@Input装饰器，让它可以进行属性的数据绑定<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProgressComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Input</span>() value: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    construct() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 默认进度条进度为0</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>d. 修改app.component.html,给进度条加上value属性并赋值50，我们可以看到和之前截图一样的进度条</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-progress</span> <span class=\"attr\">value</span>=<span class=\"string\">\"50\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-progress</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>e. 把<code>value=&quot;50&quot;</code>改为绑定模式，让进度条动起来<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-progress</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"progressValue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-progress</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.component.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    progressValue: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.progressValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">        setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (++<span class=\"keyword\">this</span>.progressValue &gt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.progressValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ng-note-component/progress.gif\" alt=\"进度条\"></p>\n<h4 id=\"使用ng-content将宿主元素的子节点投影到模板中的指定位置\"><a href=\"#使用ng-content将宿主元素的子节点投影到模板中的指定位置\" class=\"headerlink\" title=\"使用ng-content将宿主元素的子节点投影到模板中的指定位置\"></a>使用ng-content将宿主元素的子节点投影到模板中的指定位置</h4><p>a. <code>&lt;app-progress&gt;&lt;/app-progress&gt;</code>就是组件的宿主元素<br>b. 通常我们在<code>&lt;app-progress&gt;&lt;/app-progress&gt;</code>标签内部写任何模版都是不能渲染出来的，如：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-progress</span> [<span class=\"attr\">value</span>]=<span class=\"string\">\"progressValue\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;progressValue&#125;&#125;%</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-progress</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>我们并不能看到进度条里面有显示progressValue的值<br>c. 在组件模版中加入<code>&lt;ng-content&gt;</code>标签，你将会发现progressValue出现了(要想让标签内的元素显示必须给它一个投影位置，这个位置就是<code>&lt;ng-content&gt;</code>所在的地方)<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- progress.component.ts(template) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-bar\"</span> [<span class=\"attr\">ngStyle</span>]=<span class=\"string\">\"&#123;width: value + '%' &#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ng-content</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/images/ng-note-component/progress-value.png\" alt=\"进度条\"></p>\n<div class=\"tip\">相关参考文档地址<br><a href=\"https://angular.cn/api/core/Component\" target=\"_blank\" rel=\"noopener\">https://angular.cn/api/core/Component</a><br>代码下载<br><a href=\"/codes/component-simple-1.zip\">component-simple-1.zip</a><br></div>"},{"title":"Angular v6 国际化","date":"2018-09-06T02:51:35.000Z","_content":"#### 给需要翻译的文件打上标记`i18n`\n我们这里选取的是app.component.html中的几个菜单,账号信息，系统设置，退出（我们给这个文字所属的标签都加上了i18n记号）\n```html\n<div tsDropMenu [offsetX]=\"-100\" [offsetY]=\"28\" style=\"width:163px;\">\n    <div class=\"dropdown-item-title\">{{auth.user?.role.roleName}}</div>\n    <button class=\"dropdown-item pointer\">\n        <span class=\"iconfont icon-mobile mr-2\"></span>\n        <span>{{auth.user.account}}</span>\n    </button>\n    <button routerLink=\"/system/detail\" class=\"dropdown-item pointer\">\n        <span class=\"iconfont icon-account mr-2\"></span>\n        <span i18n>账号信息</span>\n    </button>\n    <button class=\"dropdown-item pointer\">\n        <span class=\"iconfont icon-set mr-2\"></span>\n        <span i18n>系统设置</span>\n    </button>\n    <div class=\"dropdown-divider\"></div>\n    <button (click)=\"setOut()\" class=\"dropdown-item pointer\">\n        <span class=\"iconfont icon-out mr-2\"></span>\n        <span i18n>退出</span>\n    </button>\n</div>\n```\n#### 生成翻译文件\n1. 执行 `ng xi18n`\n\n2. 我们发现项目目录中生成一个名叫 messages.xlf 的翻译文件\n\n3. 复制文件到你的本地化翻译文件夹中（你自己随便创建的，比如src/locale目录）,并且重命名（比如你是翻译法语命名为message.fr.xlf，这个名字随便取，只要你能区分)\n\n#### 编写翻译文件，把中文翻译成英语（我们创建了一个message.en-US.xlf）文件\n我们只需要在每条需要翻译的文字source标签下面加上他的翻译target就好了\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\">\n  <file source-language=\"en\" datatype=\"plaintext\" original=\"ng2.template\">\n    <body>\n      <trans-unit id=\"fa5bd7e382b007dd58536547eaaf7e81c083f994\" datatype=\"html\">\n        <source>账号信息</source>\n        <target>Profile</target>\n        <context-group purpose=\"location\">\n          <context context-type=\"sourcefile\">app/app.component.html</context>\n          <context context-type=\"linenumber\">47</context>\n        </context-group>\n      </trans-unit>\n      <trans-unit id=\"fa7a33c82917330e93ebb34fe5a0acd8f9784aa0\" datatype=\"html\">\n        <source>系统设置</source>\n        <target>Settings</target>\n        <context-group purpose=\"location\">\n          <context context-type=\"sourcefile\">app/app.component.html</context>\n          <context context-type=\"linenumber\">51</context>\n        </context-group>\n      </trans-unit>\n      <trans-unit id=\"a6d6468c01f128e151d5423c7a5f662cf39d872d\" datatype=\"html\">\n        <source>退出</source>\n        <target>Logout</target>        \n        <context-group purpose=\"location\">\n          <context context-type=\"sourcefile\">app/app.component.html</context>\n          <context context-type=\"linenumber\">56</context>\n        </context-group>\n      </trans-unit>\n    </body>\n  </file>\n</xliff>\n```\n\n#### 配置下打包语言\n你还要指示 AOT 编译器使用你的翻译配置，要这么做，你就要在`angular.json`文件中使用三个选项来配置翻译信息。\n\ni18nFile: 翻译文件的路径。\ni18nFormat: 翻译文件的格式。\ni18nLocale: 地区的 id\n\n```\n\"build\": {\n  ...\n  \"configurations\": {\n    ...\n    \"en-US\": {\n        \"aot\": true,\n        \"outputPath\": \"dist/en-US/\",\n        \"i18nFile\": \"src/locale/messages.en-US.xlf\",\n        \"i18nFormat\": \"xlf\",\n        \"i18nLocale\": \"en-US\"\n    }\n  }\n},\n\"serve\": {\n  ...\n  \"configurations\": {\n    ...\n    \"en-US\": {\n        \"browserTarget\": \"example:build:en-US\"\n    }\n  }\n}\n```\n<div class=\"tip\">相关参考文档地址\n    https://angular.cn/guide/i18n#i18n-pipes\n</div>","source":"_posts/ng-note-i18n.md","raw":"---\ntitle: Angular v6 国际化\ndate: 2018-09-06 10:51:35\ntags: [i18n,Angular]\ncategories: Web开发\n---\n#### 给需要翻译的文件打上标记`i18n`\n我们这里选取的是app.component.html中的几个菜单,账号信息，系统设置，退出（我们给这个文字所属的标签都加上了i18n记号）\n```html\n<div tsDropMenu [offsetX]=\"-100\" [offsetY]=\"28\" style=\"width:163px;\">\n    <div class=\"dropdown-item-title\">{{auth.user?.role.roleName}}</div>\n    <button class=\"dropdown-item pointer\">\n        <span class=\"iconfont icon-mobile mr-2\"></span>\n        <span>{{auth.user.account}}</span>\n    </button>\n    <button routerLink=\"/system/detail\" class=\"dropdown-item pointer\">\n        <span class=\"iconfont icon-account mr-2\"></span>\n        <span i18n>账号信息</span>\n    </button>\n    <button class=\"dropdown-item pointer\">\n        <span class=\"iconfont icon-set mr-2\"></span>\n        <span i18n>系统设置</span>\n    </button>\n    <div class=\"dropdown-divider\"></div>\n    <button (click)=\"setOut()\" class=\"dropdown-item pointer\">\n        <span class=\"iconfont icon-out mr-2\"></span>\n        <span i18n>退出</span>\n    </button>\n</div>\n```\n#### 生成翻译文件\n1. 执行 `ng xi18n`\n\n2. 我们发现项目目录中生成一个名叫 messages.xlf 的翻译文件\n\n3. 复制文件到你的本地化翻译文件夹中（你自己随便创建的，比如src/locale目录）,并且重命名（比如你是翻译法语命名为message.fr.xlf，这个名字随便取，只要你能区分)\n\n#### 编写翻译文件，把中文翻译成英语（我们创建了一个message.en-US.xlf）文件\n我们只需要在每条需要翻译的文字source标签下面加上他的翻译target就好了\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\">\n  <file source-language=\"en\" datatype=\"plaintext\" original=\"ng2.template\">\n    <body>\n      <trans-unit id=\"fa5bd7e382b007dd58536547eaaf7e81c083f994\" datatype=\"html\">\n        <source>账号信息</source>\n        <target>Profile</target>\n        <context-group purpose=\"location\">\n          <context context-type=\"sourcefile\">app/app.component.html</context>\n          <context context-type=\"linenumber\">47</context>\n        </context-group>\n      </trans-unit>\n      <trans-unit id=\"fa7a33c82917330e93ebb34fe5a0acd8f9784aa0\" datatype=\"html\">\n        <source>系统设置</source>\n        <target>Settings</target>\n        <context-group purpose=\"location\">\n          <context context-type=\"sourcefile\">app/app.component.html</context>\n          <context context-type=\"linenumber\">51</context>\n        </context-group>\n      </trans-unit>\n      <trans-unit id=\"a6d6468c01f128e151d5423c7a5f662cf39d872d\" datatype=\"html\">\n        <source>退出</source>\n        <target>Logout</target>        \n        <context-group purpose=\"location\">\n          <context context-type=\"sourcefile\">app/app.component.html</context>\n          <context context-type=\"linenumber\">56</context>\n        </context-group>\n      </trans-unit>\n    </body>\n  </file>\n</xliff>\n```\n\n#### 配置下打包语言\n你还要指示 AOT 编译器使用你的翻译配置，要这么做，你就要在`angular.json`文件中使用三个选项来配置翻译信息。\n\ni18nFile: 翻译文件的路径。\ni18nFormat: 翻译文件的格式。\ni18nLocale: 地区的 id\n\n```\n\"build\": {\n  ...\n  \"configurations\": {\n    ...\n    \"en-US\": {\n        \"aot\": true,\n        \"outputPath\": \"dist/en-US/\",\n        \"i18nFile\": \"src/locale/messages.en-US.xlf\",\n        \"i18nFormat\": \"xlf\",\n        \"i18nLocale\": \"en-US\"\n    }\n  }\n},\n\"serve\": {\n  ...\n  \"configurations\": {\n    ...\n    \"en-US\": {\n        \"browserTarget\": \"example:build:en-US\"\n    }\n  }\n}\n```\n<div class=\"tip\">相关参考文档地址\n    https://angular.cn/guide/i18n#i18n-pipes\n</div>","slug":"ng-note-i18n","published":1,"updated":"2019-07-12T03:05:00.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld99002le8wem0aejqf0","content":"<h4 id=\"给需要翻译的文件打上标记i18n\"><a href=\"#给需要翻译的文件打上标记i18n\" class=\"headerlink\" title=\"给需要翻译的文件打上标记i18n\"></a>给需要翻译的文件打上标记<code>i18n</code></h4><p>我们这里选取的是app.component.html中的几个菜单,账号信息，系统设置，退出（我们给这个文字所属的标签都加上了i18n记号）<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">tsDropMenu</span> [<span class=\"attr\">offsetX</span>]=<span class=\"string\">\"-100\"</span> [<span class=\"attr\">offsetY</span>]=<span class=\"string\">\"28\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:163px;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown-item-title\"</span>&gt;</span>&#123;&#123;auth.user?.role.roleName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown-item pointer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont icon-mobile mr-2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;auth.user.account&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/system/detail\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown-item pointer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont icon-account mr-2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">i18n</span>&gt;</span>账号信息<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown-item pointer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont icon-set mr-2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">i18n</span>&gt;</span>系统设置<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown-divider\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"setOut()\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown-item pointer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont icon-out mr-2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">i18n</span>&gt;</span>退出<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"生成翻译文件\"><a href=\"#生成翻译文件\" class=\"headerlink\" title=\"生成翻译文件\"></a>生成翻译文件</h4><ol>\n<li><p>执行 <code>ng xi18n</code></p>\n</li>\n<li><p>我们发现项目目录中生成一个名叫 messages.xlf 的翻译文件</p>\n</li>\n<li><p>复制文件到你的本地化翻译文件夹中（你自己随便创建的，比如src/locale目录）,并且重命名（比如你是翻译法语命名为message.fr.xlf，这个名字随便取，只要你能区分)</p>\n</li>\n</ol>\n<h4 id=\"编写翻译文件，把中文翻译成英语（我们创建了一个message-en-US-xlf）文件\"><a href=\"#编写翻译文件，把中文翻译成英语（我们创建了一个message-en-US-xlf）文件\" class=\"headerlink\" title=\"编写翻译文件，把中文翻译成英语（我们创建了一个message.en-US.xlf）文件\"></a>编写翻译文件，把中文翻译成英语（我们创建了一个message.en-US.xlf）文件</h4><p>我们只需要在每条需要翻译的文字source标签下面加上他的翻译target就好了<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span> <span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xliff</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.2\"</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"urn:oasis:names:tc:xliff:document:1.2\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">file</span> <span class=\"attr\">source-language</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">datatype</span>=<span class=\"string\">\"plaintext\"</span> <span class=\"attr\">original</span>=<span class=\"string\">\"ng2.template\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fa5bd7e382b007dd58536547eaaf7e81c083f994\"</span> <span class=\"attr\">datatype</span>=<span class=\"string\">\"html\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>账号信息<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>Profile<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">\"location\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">\"sourcefile\"</span>&gt;</span>app/app.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">\"linenumber\"</span>&gt;</span>47<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fa7a33c82917330e93ebb34fe5a0acd8f9784aa0\"</span> <span class=\"attr\">datatype</span>=<span class=\"string\">\"html\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>系统设置<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>Settings<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">\"location\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">\"sourcefile\"</span>&gt;</span>app/app.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">\"linenumber\"</span>&gt;</span>51<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">\"a6d6468c01f128e151d5423c7a5f662cf39d872d\"</span> <span class=\"attr\">datatype</span>=<span class=\"string\">\"html\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>退出<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>Logout<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span>        </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">\"location\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">\"sourcefile\"</span>&gt;</span>app/app.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">\"linenumber\"</span>&gt;</span>56<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">xliff</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"配置下打包语言\"><a href=\"#配置下打包语言\" class=\"headerlink\" title=\"配置下打包语言\"></a>配置下打包语言</h4><p>你还要指示 AOT 编译器使用你的翻译配置，要这么做，你就要在<code>angular.json</code>文件中使用三个选项来配置翻译信息。</p>\n<p>i18nFile: 翻译文件的路径。<br>i18nFormat: 翻译文件的格式。<br>i18nLocale: 地区的 id</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;build&quot;: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &quot;configurations&quot;: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &quot;en-US&quot;: &#123;</span><br><span class=\"line\">        &quot;aot&quot;: true,</span><br><span class=\"line\">        &quot;outputPath&quot;: &quot;dist/en-US/&quot;,</span><br><span class=\"line\">        &quot;i18nFile&quot;: &quot;src/locale/messages.en-US.xlf&quot;,</span><br><span class=\"line\">        &quot;i18nFormat&quot;: &quot;xlf&quot;,</span><br><span class=\"line\">        &quot;i18nLocale&quot;: &quot;en-US&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;serve&quot;: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &quot;configurations&quot;: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &quot;en-US&quot;: &#123;</span><br><span class=\"line\">        &quot;browserTarget&quot;: &quot;example:build:en-US&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"tip\">相关参考文档地址<br>    <a href=\"https://angular.cn/guide/i18n#i18n-pipes\" target=\"_blank\" rel=\"noopener\">https://angular.cn/guide/i18n#i18n-pipes</a><br></div>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"给需要翻译的文件打上标记i18n\"><a href=\"#给需要翻译的文件打上标记i18n\" class=\"headerlink\" title=\"给需要翻译的文件打上标记i18n\"></a>给需要翻译的文件打上标记<code>i18n</code></h4><p>我们这里选取的是app.component.html中的几个菜单,账号信息，系统设置，退出（我们给这个文字所属的标签都加上了i18n记号）<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">tsDropMenu</span> [<span class=\"attr\">offsetX</span>]=<span class=\"string\">\"-100\"</span> [<span class=\"attr\">offsetY</span>]=<span class=\"string\">\"28\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:163px;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown-item-title\"</span>&gt;</span>&#123;&#123;auth.user?.role.roleName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown-item pointer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont icon-mobile mr-2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;auth.user.account&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">\"/system/detail\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown-item pointer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont icon-account mr-2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">i18n</span>&gt;</span>账号信息<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown-item pointer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont icon-set mr-2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">i18n</span>&gt;</span>系统设置<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown-divider\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"setOut()\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropdown-item pointer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont icon-out mr-2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">i18n</span>&gt;</span>退出<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"生成翻译文件\"><a href=\"#生成翻译文件\" class=\"headerlink\" title=\"生成翻译文件\"></a>生成翻译文件</h4><ol>\n<li><p>执行 <code>ng xi18n</code></p>\n</li>\n<li><p>我们发现项目目录中生成一个名叫 messages.xlf 的翻译文件</p>\n</li>\n<li><p>复制文件到你的本地化翻译文件夹中（你自己随便创建的，比如src/locale目录）,并且重命名（比如你是翻译法语命名为message.fr.xlf，这个名字随便取，只要你能区分)</p>\n</li>\n</ol>\n<h4 id=\"编写翻译文件，把中文翻译成英语（我们创建了一个message-en-US-xlf）文件\"><a href=\"#编写翻译文件，把中文翻译成英语（我们创建了一个message-en-US-xlf）文件\" class=\"headerlink\" title=\"编写翻译文件，把中文翻译成英语（我们创建了一个message.en-US.xlf）文件\"></a>编写翻译文件，把中文翻译成英语（我们创建了一个message.en-US.xlf）文件</h4><p>我们只需要在每条需要翻译的文字source标签下面加上他的翻译target就好了<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span> <span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xliff</span> <span class=\"attr\">version</span>=<span class=\"string\">\"1.2\"</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"urn:oasis:names:tc:xliff:document:1.2\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">file</span> <span class=\"attr\">source-language</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">datatype</span>=<span class=\"string\">\"plaintext\"</span> <span class=\"attr\">original</span>=<span class=\"string\">\"ng2.template\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fa5bd7e382b007dd58536547eaaf7e81c083f994\"</span> <span class=\"attr\">datatype</span>=<span class=\"string\">\"html\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>账号信息<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>Profile<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">\"location\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">\"sourcefile\"</span>&gt;</span>app/app.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">\"linenumber\"</span>&gt;</span>47<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fa7a33c82917330e93ebb34fe5a0acd8f9784aa0\"</span> <span class=\"attr\">datatype</span>=<span class=\"string\">\"html\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>系统设置<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>Settings<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">\"location\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">\"sourcefile\"</span>&gt;</span>app/app.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">\"linenumber\"</span>&gt;</span>51<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">trans-unit</span> <span class=\"attr\">id</span>=<span class=\"string\">\"a6d6468c01f128e151d5423c7a5f662cf39d872d\"</span> <span class=\"attr\">datatype</span>=<span class=\"string\">\"html\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>退出<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>Logout<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span>        </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">context-group</span> <span class=\"attr\">purpose</span>=<span class=\"string\">\"location\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">\"sourcefile\"</span>&gt;</span>app/app.component.html<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">context-type</span>=<span class=\"string\">\"linenumber\"</span>&gt;</span>56<span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">context-group</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">trans-unit</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">xliff</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"配置下打包语言\"><a href=\"#配置下打包语言\" class=\"headerlink\" title=\"配置下打包语言\"></a>配置下打包语言</h4><p>你还要指示 AOT 编译器使用你的翻译配置，要这么做，你就要在<code>angular.json</code>文件中使用三个选项来配置翻译信息。</p>\n<p>i18nFile: 翻译文件的路径。<br>i18nFormat: 翻译文件的格式。<br>i18nLocale: 地区的 id</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;build&quot;: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &quot;configurations&quot;: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &quot;en-US&quot;: &#123;</span><br><span class=\"line\">        &quot;aot&quot;: true,</span><br><span class=\"line\">        &quot;outputPath&quot;: &quot;dist/en-US/&quot;,</span><br><span class=\"line\">        &quot;i18nFile&quot;: &quot;src/locale/messages.en-US.xlf&quot;,</span><br><span class=\"line\">        &quot;i18nFormat&quot;: &quot;xlf&quot;,</span><br><span class=\"line\">        &quot;i18nLocale&quot;: &quot;en-US&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;serve&quot;: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &quot;configurations&quot;: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &quot;en-US&quot;: &#123;</span><br><span class=\"line\">        &quot;browserTarget&quot;: &quot;example:build:en-US&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"tip\">相关参考文档地址<br>    <a href=\"https://angular.cn/guide/i18n#i18n-pipes\" target=\"_blank\" rel=\"noopener\">https://angular.cn/guide/i18n#i18n-pipes</a><br></div>"},{"title":"nginx flv 支持","date":"2019-01-03T06:21:50.000Z","_content":"\n### 中文文档地址\nhttp://www.nginx.cn/doc/optional/flv.html\n\n### nginx更高版本安装\n1. 添加源\n```sh\necho deb http://nginx.org/packages/ubuntu/ trusty nginx >> /etc/apt/sources.list\n\necho deb-src http://nginx.org/packages/ubuntu/ trusty nginx >> /etc/apt/sources.list\n```\n2. 添加key\n```sh\nwget http://nginx.org/keys/nginx_signing.key && apt-key add nginx_signing.key\n```\n\n3. \b更新并安装\n```sh\napt-get update\n\napt-get install nginx\n```\n\n### nginx配置（1.4.2版本及以上)\n\n说明: 本模块必需在编译nginx时加上--with-http_flv_module.\n\n```conf\nlocation ~ \\.flv$ {\n    flv;\n}\n```\n\n### 测试\n1. flv.js [github地址](https://github.com/Bilibili/flv.js) [测试地址](http://bilibili.github.io/flv.js/demo/)\n需要注意浏览器的跨域问题，可以在safari开发者选项设置关闭跨域检查\n2. ijkplayer [GitHub地址](https://github.com/Bilibili/ijkplayer)\nAndroid参考代码\n```java\npackage com.example.cool1024.android_example.fragments;\n\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.v4.app.Fragment;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.SurfaceHolder;\nimport android.view.SurfaceView;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport com.example.cool1024.android_example.R;\n\nimport java.io.IOException;\n\nimport tv.danmaku.ijk.media.player.IMediaPlayer;\nimport tv.danmaku.ijk.media.player.IjkMediaPlayer;\n\n/**\n * B站播放器演示.\n */\npublic class FlvFragment extends Fragment implements SurfaceHolder.Callback{\n\n    public final static String TAG = \"FlvFragmentLog\";\n    private IjkMediaPlayer mIjkMediaPlayer;\n    private SurfaceView mPlayView;\n    private PlayListener mPlayListener = new PlayListener();\n\n    private void preparePlayer() {\n        mIjkMediaPlayer = new IjkMediaPlayer();\n        IjkMediaPlayer.native_setLogLevel(IjkMediaPlayer.IJK_LOG_DEBUG);\n        mIjkMediaPlayer.setOnPreparedListener(mPlayListener);\n        mIjkMediaPlayer.setOnSeekCompleteListener(mPlayListener);\n        mIjkMediaPlayer.setOnBufferingUpdateListener(mPlayListener);\n\n        try {\n            mIjkMediaPlayer.setDataSource(\"http://192.168.1.117/live.flv\");\n            mIjkMediaPlayer.setDisplay(mPlayView.getHolder());\n            mIjkMediaPlayer.prepareAsync();\n        } catch (IOException e) {\n            e.printStackTrace();\n            Log.d(TAG, \"视频取流失败\");\n        }\n    }\n\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View mainView = inflater.inflate(R.layout.fragment_flv, container, false);\n        mainView.findViewById(R.id.log_btn).setOnClickListener(FlvFragment.this);\n        mPlayView = mainView.findViewById(R.id.play_view);\n        mPlayView.getHolder().addCallback(FlvFragment.this);\n        return mainView;\n    }\n\n    // \n    // SurfaceHolder.Callback\n    //\n\n    @Override\n    public void surfaceCreated(SurfaceHolder holder) {\n\n    }\n\n    @Override\n    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {\n        preparePlayer();\n    }\n\n    @Override\n    public void surfaceDestroyed(SurfaceHolder holder) {\n\n    }\n\n    // \n    // 播放器相关回调监听\n    //\n\n\n    class PlayListener implements IMediaPlayer.OnPreparedListener,\n            IMediaPlayer.OnSeekCompleteListener, IMediaPlayer.OnBufferingUpdateListener {\n        @Override\n        public void onPrepared(IMediaPlayer iMediaPlayer) {\n            Log.d(TAG, \"视频准备就绪，开始播放\");\n            iMediaPlayer.start();\n        }\n\n        @Override\n        public void onSeekComplete(IMediaPlayer iMediaPlayer) {\n            Log.d(TAG, \"视频跳转成功\");\n        }\n\n        @Override\n        public void onBufferingUpdate(IMediaPlayer iMediaPlayer, int i) {\n            Log.d(TAG, \"缓冲更新\");\n        }\n    }\n}\n\n```\n\n### 总结\n1. 视频可以随意切换播放进度，但是大视频会卡顿，切换进度过大也会卡顿。\n2. 需要事先把媒体文件转换为flv格式，可以使用ffmpeg\n`ffmpeg -i live.mp4 -vcodec libx264 -c:a aac live.flv`\n3. 需要关键帧数据\n`ffmpeg -i live.mp4 -vcodec libx264 -c:a aac -flvflags add_keyframe_index live.flv`\n4. ffserver也支持，当是这个模块已经从ffmpeg仓库中移除","source":"_posts/nginx-flv.md","raw":"---\ntitle: nginx flv 支持\ndate: 2019-01-03 14:21:50\ntags: ['nginx','flv']\n---\n\n### 中文文档地址\nhttp://www.nginx.cn/doc/optional/flv.html\n\n### nginx更高版本安装\n1. 添加源\n```sh\necho deb http://nginx.org/packages/ubuntu/ trusty nginx >> /etc/apt/sources.list\n\necho deb-src http://nginx.org/packages/ubuntu/ trusty nginx >> /etc/apt/sources.list\n```\n2. 添加key\n```sh\nwget http://nginx.org/keys/nginx_signing.key && apt-key add nginx_signing.key\n```\n\n3. \b更新并安装\n```sh\napt-get update\n\napt-get install nginx\n```\n\n### nginx配置（1.4.2版本及以上)\n\n说明: 本模块必需在编译nginx时加上--with-http_flv_module.\n\n```conf\nlocation ~ \\.flv$ {\n    flv;\n}\n```\n\n### 测试\n1. flv.js [github地址](https://github.com/Bilibili/flv.js) [测试地址](http://bilibili.github.io/flv.js/demo/)\n需要注意浏览器的跨域问题，可以在safari开发者选项设置关闭跨域检查\n2. ijkplayer [GitHub地址](https://github.com/Bilibili/ijkplayer)\nAndroid参考代码\n```java\npackage com.example.cool1024.android_example.fragments;\n\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.v4.app.Fragment;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.SurfaceHolder;\nimport android.view.SurfaceView;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport com.example.cool1024.android_example.R;\n\nimport java.io.IOException;\n\nimport tv.danmaku.ijk.media.player.IMediaPlayer;\nimport tv.danmaku.ijk.media.player.IjkMediaPlayer;\n\n/**\n * B站播放器演示.\n */\npublic class FlvFragment extends Fragment implements SurfaceHolder.Callback{\n\n    public final static String TAG = \"FlvFragmentLog\";\n    private IjkMediaPlayer mIjkMediaPlayer;\n    private SurfaceView mPlayView;\n    private PlayListener mPlayListener = new PlayListener();\n\n    private void preparePlayer() {\n        mIjkMediaPlayer = new IjkMediaPlayer();\n        IjkMediaPlayer.native_setLogLevel(IjkMediaPlayer.IJK_LOG_DEBUG);\n        mIjkMediaPlayer.setOnPreparedListener(mPlayListener);\n        mIjkMediaPlayer.setOnSeekCompleteListener(mPlayListener);\n        mIjkMediaPlayer.setOnBufferingUpdateListener(mPlayListener);\n\n        try {\n            mIjkMediaPlayer.setDataSource(\"http://192.168.1.117/live.flv\");\n            mIjkMediaPlayer.setDisplay(mPlayView.getHolder());\n            mIjkMediaPlayer.prepareAsync();\n        } catch (IOException e) {\n            e.printStackTrace();\n            Log.d(TAG, \"视频取流失败\");\n        }\n    }\n\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View mainView = inflater.inflate(R.layout.fragment_flv, container, false);\n        mainView.findViewById(R.id.log_btn).setOnClickListener(FlvFragment.this);\n        mPlayView = mainView.findViewById(R.id.play_view);\n        mPlayView.getHolder().addCallback(FlvFragment.this);\n        return mainView;\n    }\n\n    // \n    // SurfaceHolder.Callback\n    //\n\n    @Override\n    public void surfaceCreated(SurfaceHolder holder) {\n\n    }\n\n    @Override\n    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {\n        preparePlayer();\n    }\n\n    @Override\n    public void surfaceDestroyed(SurfaceHolder holder) {\n\n    }\n\n    // \n    // 播放器相关回调监听\n    //\n\n\n    class PlayListener implements IMediaPlayer.OnPreparedListener,\n            IMediaPlayer.OnSeekCompleteListener, IMediaPlayer.OnBufferingUpdateListener {\n        @Override\n        public void onPrepared(IMediaPlayer iMediaPlayer) {\n            Log.d(TAG, \"视频准备就绪，开始播放\");\n            iMediaPlayer.start();\n        }\n\n        @Override\n        public void onSeekComplete(IMediaPlayer iMediaPlayer) {\n            Log.d(TAG, \"视频跳转成功\");\n        }\n\n        @Override\n        public void onBufferingUpdate(IMediaPlayer iMediaPlayer, int i) {\n            Log.d(TAG, \"缓冲更新\");\n        }\n    }\n}\n\n```\n\n### 总结\n1. 视频可以随意切换播放进度，但是大视频会卡顿，切换进度过大也会卡顿。\n2. 需要事先把媒体文件转换为flv格式，可以使用ffmpeg\n`ffmpeg -i live.mp4 -vcodec libx264 -c:a aac live.flv`\n3. 需要关键帧数据\n`ffmpeg -i live.mp4 -vcodec libx264 -c:a aac -flvflags add_keyframe_index live.flv`\n4. ffserver也支持，当是这个模块已经从ffmpeg仓库中移除","slug":"nginx-flv","published":1,"updated":"2019-07-05T04:24:05.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld9a002oe8wegkjncjw2","content":"<h3 id=\"中文文档地址\"><a href=\"#中文文档地址\" class=\"headerlink\" title=\"中文文档地址\"></a>中文文档地址</h3><p><a href=\"http://www.nginx.cn/doc/optional/flv.html\" target=\"_blank\" rel=\"noopener\">http://www.nginx.cn/doc/optional/flv.html</a></p>\n<h3 id=\"nginx更高版本安装\"><a href=\"#nginx更高版本安装\" class=\"headerlink\" title=\"nginx更高版本安装\"></a>nginx更高版本安装</h3><ol>\n<li><p>添加源</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> deb http://nginx.org/packages/ubuntu/ trusty nginx &gt;&gt; /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> deb-src http://nginx.org/packages/ubuntu/ trusty nginx &gt;&gt; /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加key</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nginx.org/keys/nginx_signing.key &amp;&amp; apt-key add nginx_signing.key</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>\b更新并安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">apt-get install nginx</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"nginx配置（1-4-2版本及以上\"><a href=\"#nginx配置（1-4-2版本及以上\" class=\"headerlink\" title=\"nginx配置（1.4.2版本及以上)\"></a>nginx配置（1.4.2版本及以上)</h3><p>说明: 本模块必需在编译nginx时加上–with-http_flv_module.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ \\.flv$ &#123;</span><br><span class=\"line\">    flv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><ol>\n<li>flv.js <a href=\"https://github.com/Bilibili/flv.js\" target=\"_blank\" rel=\"noopener\">github地址</a> <a href=\"http://bilibili.github.io/flv.js/demo/\" target=\"_blank\" rel=\"noopener\">测试地址</a><br>需要注意浏览器的跨域问题，可以在safari开发者选项设置关闭跨域检查</li>\n<li>ijkplayer <a href=\"https://github.com/Bilibili/ijkplayer\" target=\"_blank\" rel=\"noopener\">GitHub地址</a><br>Android参考代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.cool1024.android_example.fragments;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.NonNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.SurfaceHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.SurfaceView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.cool1024.android_example.R;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tv.danmaku.ijk.media.player.IMediaPlayer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> tv.danmaku.ijk.media.player.IjkMediaPlayer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * B站播放器演示.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlvFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">SurfaceHolder</span>.<span class=\"title\">Callback</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String TAG = <span class=\"string\">\"FlvFragmentLog\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IjkMediaPlayer mIjkMediaPlayer;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SurfaceView mPlayView;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PlayListener mPlayListener = <span class=\"keyword\">new</span> PlayListener();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">preparePlayer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mIjkMediaPlayer = <span class=\"keyword\">new</span> IjkMediaPlayer();</span><br><span class=\"line\">        IjkMediaPlayer.native_setLogLevel(IjkMediaPlayer.IJK_LOG_DEBUG);</span><br><span class=\"line\">        mIjkMediaPlayer.setOnPreparedListener(mPlayListener);</span><br><span class=\"line\">        mIjkMediaPlayer.setOnSeekCompleteListener(mPlayListener);</span><br><span class=\"line\">        mIjkMediaPlayer.setOnBufferingUpdateListener(mPlayListener);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            mIjkMediaPlayer.setDataSource(<span class=\"string\">\"http://192.168.1.117/live.flv\"</span>);</span><br><span class=\"line\">            mIjkMediaPlayer.setDisplay(mPlayView.getHolder());</span><br><span class=\"line\">            mIjkMediaPlayer.prepareAsync();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">\"视频取流失败\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(@NonNull LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        View mainView = inflater.inflate(R.layout.fragment_flv, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        mainView.findViewById(R.id.log_btn).setOnClickListener(FlvFragment.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        mPlayView = mainView.findViewById(R.id.play_view);</span><br><span class=\"line\">        mPlayView.getHolder().addCallback(FlvFragment.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mainView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"comment\">// SurfaceHolder.Callback</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">surfaceCreated</span><span class=\"params\">(SurfaceHolder holder)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">surfaceChanged</span><span class=\"params\">(SurfaceHolder holder, <span class=\"keyword\">int</span> format, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</span><br><span class=\"line\">        preparePlayer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">surfaceDestroyed</span><span class=\"params\">(SurfaceHolder holder)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"comment\">// 播放器相关回调监听</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlayListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">IMediaPlayer</span>.<span class=\"title\">OnPreparedListener</span>,</span></span><br><span class=\"line\"><span class=\"class\">            <span class=\"title\">IMediaPlayer</span>.<span class=\"title\">OnSeekCompleteListener</span>, <span class=\"title\">IMediaPlayer</span>.<span class=\"title\">OnBufferingUpdateListener</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPrepared</span><span class=\"params\">(IMediaPlayer iMediaPlayer)</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">\"视频准备就绪，开始播放\"</span>);</span><br><span class=\"line\">            iMediaPlayer.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSeekComplete</span><span class=\"params\">(IMediaPlayer iMediaPlayer)</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">\"视频跳转成功\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBufferingUpdate</span><span class=\"params\">(IMediaPlayer iMediaPlayer, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">\"缓冲更新\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>视频可以随意切换播放进度，但是大视频会卡顿，切换进度过大也会卡顿。</li>\n<li>需要事先把媒体文件转换为flv格式，可以使用ffmpeg<br><code>ffmpeg -i live.mp4 -vcodec libx264 -c:a aac live.flv</code></li>\n<li>需要关键帧数据<br><code>ffmpeg -i live.mp4 -vcodec libx264 -c:a aac -flvflags add_keyframe_index live.flv</code></li>\n<li>ffserver也支持，当是这个模块已经从ffmpeg仓库中移除</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"中文文档地址\"><a href=\"#中文文档地址\" class=\"headerlink\" title=\"中文文档地址\"></a>中文文档地址</h3><p><a href=\"http://www.nginx.cn/doc/optional/flv.html\" target=\"_blank\" rel=\"noopener\">http://www.nginx.cn/doc/optional/flv.html</a></p>\n<h3 id=\"nginx更高版本安装\"><a href=\"#nginx更高版本安装\" class=\"headerlink\" title=\"nginx更高版本安装\"></a>nginx更高版本安装</h3><ol>\n<li><p>添加源</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> deb http://nginx.org/packages/ubuntu/ trusty nginx &gt;&gt; /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> deb-src http://nginx.org/packages/ubuntu/ trusty nginx &gt;&gt; /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加key</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nginx.org/keys/nginx_signing.key &amp;&amp; apt-key add nginx_signing.key</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>\b更新并安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">apt-get install nginx</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"nginx配置（1-4-2版本及以上\"><a href=\"#nginx配置（1-4-2版本及以上\" class=\"headerlink\" title=\"nginx配置（1.4.2版本及以上)\"></a>nginx配置（1.4.2版本及以上)</h3><p>说明: 本模块必需在编译nginx时加上–with-http_flv_module.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ \\.flv$ &#123;</span><br><span class=\"line\">    flv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><ol>\n<li>flv.js <a href=\"https://github.com/Bilibili/flv.js\" target=\"_blank\" rel=\"noopener\">github地址</a> <a href=\"http://bilibili.github.io/flv.js/demo/\" target=\"_blank\" rel=\"noopener\">测试地址</a><br>需要注意浏览器的跨域问题，可以在safari开发者选项设置关闭跨域检查</li>\n<li>ijkplayer <a href=\"https://github.com/Bilibili/ijkplayer\" target=\"_blank\" rel=\"noopener\">GitHub地址</a><br>Android参考代码<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.cool1024.android_example.fragments;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.NonNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.SurfaceHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.SurfaceView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.cool1024.android_example.R;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tv.danmaku.ijk.media.player.IMediaPlayer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> tv.danmaku.ijk.media.player.IjkMediaPlayer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * B站播放器演示.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlvFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">SurfaceHolder</span>.<span class=\"title\">Callback</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String TAG = <span class=\"string\">\"FlvFragmentLog\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IjkMediaPlayer mIjkMediaPlayer;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SurfaceView mPlayView;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PlayListener mPlayListener = <span class=\"keyword\">new</span> PlayListener();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">preparePlayer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mIjkMediaPlayer = <span class=\"keyword\">new</span> IjkMediaPlayer();</span><br><span class=\"line\">        IjkMediaPlayer.native_setLogLevel(IjkMediaPlayer.IJK_LOG_DEBUG);</span><br><span class=\"line\">        mIjkMediaPlayer.setOnPreparedListener(mPlayListener);</span><br><span class=\"line\">        mIjkMediaPlayer.setOnSeekCompleteListener(mPlayListener);</span><br><span class=\"line\">        mIjkMediaPlayer.setOnBufferingUpdateListener(mPlayListener);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            mIjkMediaPlayer.setDataSource(<span class=\"string\">\"http://192.168.1.117/live.flv\"</span>);</span><br><span class=\"line\">            mIjkMediaPlayer.setDisplay(mPlayView.getHolder());</span><br><span class=\"line\">            mIjkMediaPlayer.prepareAsync();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">\"视频取流失败\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(@NonNull LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        View mainView = inflater.inflate(R.layout.fragment_flv, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        mainView.findViewById(R.id.log_btn).setOnClickListener(FlvFragment.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        mPlayView = mainView.findViewById(R.id.play_view);</span><br><span class=\"line\">        mPlayView.getHolder().addCallback(FlvFragment.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mainView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"comment\">// SurfaceHolder.Callback</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">surfaceCreated</span><span class=\"params\">(SurfaceHolder holder)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">surfaceChanged</span><span class=\"params\">(SurfaceHolder holder, <span class=\"keyword\">int</span> format, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</span><br><span class=\"line\">        preparePlayer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">surfaceDestroyed</span><span class=\"params\">(SurfaceHolder holder)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"comment\">// 播放器相关回调监听</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlayListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">IMediaPlayer</span>.<span class=\"title\">OnPreparedListener</span>,</span></span><br><span class=\"line\"><span class=\"class\">            <span class=\"title\">IMediaPlayer</span>.<span class=\"title\">OnSeekCompleteListener</span>, <span class=\"title\">IMediaPlayer</span>.<span class=\"title\">OnBufferingUpdateListener</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPrepared</span><span class=\"params\">(IMediaPlayer iMediaPlayer)</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">\"视频准备就绪，开始播放\"</span>);</span><br><span class=\"line\">            iMediaPlayer.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSeekComplete</span><span class=\"params\">(IMediaPlayer iMediaPlayer)</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">\"视频跳转成功\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBufferingUpdate</span><span class=\"params\">(IMediaPlayer iMediaPlayer, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">\"缓冲更新\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>视频可以随意切换播放进度，但是大视频会卡顿，切换进度过大也会卡顿。</li>\n<li>需要事先把媒体文件转换为flv格式，可以使用ffmpeg<br><code>ffmpeg -i live.mp4 -vcodec libx264 -c:a aac live.flv</code></li>\n<li>需要关键帧数据<br><code>ffmpeg -i live.mp4 -vcodec libx264 -c:a aac -flvflags add_keyframe_index live.flv</code></li>\n<li>ffserver也支持，当是这个模块已经从ffmpeg仓库中移除</li>\n</ol>\n"},{"title":"angular component note-2","date":"2018-07-06T06:06:49.000Z","_content":"\n##### 制作一个简单的开关组件\n\n1. 使用`status`保存开关的状态(true:开，false:关)\n\n2. 使用`ngClass`指令切换开关状态下的不同样式`switch-open`和`switch-close`;\n\n3. 组件代码如下\n\n```typescript\nimport { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-switch',\n    template: `\n        <span class=\"switch\" [ngClass]=\"{'switch-open':status,'switch-close':!status}\">\n            <span class=\"switch-bar\"></span>\n        </span>\n    `,\n    styles: [`\n        .switch {\n            display: inline-block;\n            height: 30px;\n            width: 60px;\n            border-radius: 18px;\n            padding: 2px;\n        }\n        .switch-bar {\n            display: inline-block;\n            height: 30px;\n            width: 30px;\n            border-radius: 15px;\n            background-color: white;\n        }\n        .switch-open {\n            background-color: #1f7bfb;\n        }\n        .switch-close {\n            background-color: #ccc;\n        }\n        .switch-open .switch-bar {\n            transition: margin 0.3s linear;\n            margin-left: 30px;\n        }\n        .switch-close .switch-bar {\n            transition: margin 0.3s linear;\n            margin-left: 0px;\n        }\n    `]\n})\nexport class SwitchComponent {\n\n    @Input() status: boolean;\n\n    construct() {\n        // 默认状态为false，关闭状态\n        this.status = false;\n    }\n}\n```\n4. 在app.module.ts中引入这个组件\n\n```typescript\n// app.module.ts\n\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { SwitchComponent } from './switch.component';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        SwitchComponent,\n    ],\n    imports: [\n        BrowserModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n5. 在app.component.html中使用它\n\n```html\n<!-- app.component.html -->\n<app-switch [status]=\"false\"></app-switch>\n```\n<img src=\"/images/ng-note-component/switch.png\" style=\"height:40px\">\n\n##### 使用click事件绑定，让开关可以点击进行开/关的转换\n\n```html\n<!-- switch.component.ts(template) -->\n<span class=\"switch\" \n     (click)=\"changeStatus()\" \n     [ngClass]=\"{'switch-open':status,'switch-close':!status}\">\n    <span class=\"switch-bar\"></span>\n</span>\n```\n```typescript\nexport class SwitchComponent {\n\n    @Input() status: boolean;\n\n    construct() {\n        // 默认状态为false，关闭状态\n        this.status = false;\n    }\n\n    /**\n     * 变更开关状态\n     */\n    changeStatus() {\n        this.status = !this.status;\n    }\n}\n```\n<img src=\"/images/ng-note-component/switch.gif\" style=\"height:40px\">\n\n##### 使用@Output让状态变化传递出去\na. 很多情况，我们希望在开关开启的时候做一些其它相关操作\n\nb. 给组件定义一个输出属性`statusChange`(子组件暴露一个 `EventEmitter` 属性，当事件发生时，子组件利用该属性 `emits`(向上弹射)事件。父组件绑定到这个事件属性，并在事件发生时作出回应。)\n\n```typescript\nexport class SwitchComponent {\n\n    @Input() status: boolean;\n\n    @Output() statusChange = new EventEmitter<boolean>(false);\n\n    construct() {\n        // 默认状态为false，关闭状态\n        this.status = false;\n    }\n\n    /**\n     * 变更开关状态\n     */\n    changeStatus() {\n        this.status = !this.status;\n\n        // 每次状态被改变的时候，我们把状态发射出去\n        this.statusChange.emit(this.status);\n    }\n}\n```\n\nc. 修改app.component.html,给开关加上`statuChange`的事件处理方法,$event是关键词指代组件发射过来的值（这里发射过来的是开关的状态false|true）\n\n```html\n<!-- app.component.html -->\n<app-switch [status]=\"false\" (statusChange)=\"showMessage($event)\"></app-switch>\n```\n```typescript\n// app.component.ts\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n    /**\n     * 显示一条消息\n     * @param {boolean} status 开关状态\n     */\n    showMessage(status: boolean) {\n        alert(status ? '开灯' : '关灯');\n    }\n}\n```\n![进度条](/images/ng-note-component/switch-event.png)\n\nd. 当@Output输出属性名是@Input输入属性+Change时，就会默认组成一对（双向绑定），status和statusChange是一对，那么它们组成了一个双向绑定,可以使用`[(status)]`的形式。当然statusChange依然保留，可以独立使用。\n```html\n<!-- app.component.html -->\n<app-switch [(status)]=\"switchStatus\" (statusChange)=\"showMessage($event)\"></app-switch>\n<p>开关状态:{{switchStatus}}</p>\n```\n```typescript\n// app.component.ts\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n    // 开关状态\n    switchStatus = false;\n    /**\n     * 显示一条消息\n     * @param {boolean} status 开关状态\n     */\n    showMessage(status: boolean) {\n        alert(status ? '开灯' : '关灯');\n    }\n}\n```\n![双向绑定](/images/ng-note-component/switch-event.gif)\n\n<div class=\"tip\">相关参考文档地址\n    https://angular.cn/guide/component-interaction\n代码下载\n<a href=\"/codes/component-simple-2.zip\">component-simple-2.zip</a>\n</div>\n\n","source":"_posts/ng-note-compontent-2.md","raw":"---\ntitle: angular component note-2\ndate: 2018-07-06 14:06:49\ntags: Angular\ncategories: Web开发\n---\n\n##### 制作一个简单的开关组件\n\n1. 使用`status`保存开关的状态(true:开，false:关)\n\n2. 使用`ngClass`指令切换开关状态下的不同样式`switch-open`和`switch-close`;\n\n3. 组件代码如下\n\n```typescript\nimport { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-switch',\n    template: `\n        <span class=\"switch\" [ngClass]=\"{'switch-open':status,'switch-close':!status}\">\n            <span class=\"switch-bar\"></span>\n        </span>\n    `,\n    styles: [`\n        .switch {\n            display: inline-block;\n            height: 30px;\n            width: 60px;\n            border-radius: 18px;\n            padding: 2px;\n        }\n        .switch-bar {\n            display: inline-block;\n            height: 30px;\n            width: 30px;\n            border-radius: 15px;\n            background-color: white;\n        }\n        .switch-open {\n            background-color: #1f7bfb;\n        }\n        .switch-close {\n            background-color: #ccc;\n        }\n        .switch-open .switch-bar {\n            transition: margin 0.3s linear;\n            margin-left: 30px;\n        }\n        .switch-close .switch-bar {\n            transition: margin 0.3s linear;\n            margin-left: 0px;\n        }\n    `]\n})\nexport class SwitchComponent {\n\n    @Input() status: boolean;\n\n    construct() {\n        // 默认状态为false，关闭状态\n        this.status = false;\n    }\n}\n```\n4. 在app.module.ts中引入这个组件\n\n```typescript\n// app.module.ts\n\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { SwitchComponent } from './switch.component';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        SwitchComponent,\n    ],\n    imports: [\n        BrowserModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n5. 在app.component.html中使用它\n\n```html\n<!-- app.component.html -->\n<app-switch [status]=\"false\"></app-switch>\n```\n<img src=\"/images/ng-note-component/switch.png\" style=\"height:40px\">\n\n##### 使用click事件绑定，让开关可以点击进行开/关的转换\n\n```html\n<!-- switch.component.ts(template) -->\n<span class=\"switch\" \n     (click)=\"changeStatus()\" \n     [ngClass]=\"{'switch-open':status,'switch-close':!status}\">\n    <span class=\"switch-bar\"></span>\n</span>\n```\n```typescript\nexport class SwitchComponent {\n\n    @Input() status: boolean;\n\n    construct() {\n        // 默认状态为false，关闭状态\n        this.status = false;\n    }\n\n    /**\n     * 变更开关状态\n     */\n    changeStatus() {\n        this.status = !this.status;\n    }\n}\n```\n<img src=\"/images/ng-note-component/switch.gif\" style=\"height:40px\">\n\n##### 使用@Output让状态变化传递出去\na. 很多情况，我们希望在开关开启的时候做一些其它相关操作\n\nb. 给组件定义一个输出属性`statusChange`(子组件暴露一个 `EventEmitter` 属性，当事件发生时，子组件利用该属性 `emits`(向上弹射)事件。父组件绑定到这个事件属性，并在事件发生时作出回应。)\n\n```typescript\nexport class SwitchComponent {\n\n    @Input() status: boolean;\n\n    @Output() statusChange = new EventEmitter<boolean>(false);\n\n    construct() {\n        // 默认状态为false，关闭状态\n        this.status = false;\n    }\n\n    /**\n     * 变更开关状态\n     */\n    changeStatus() {\n        this.status = !this.status;\n\n        // 每次状态被改变的时候，我们把状态发射出去\n        this.statusChange.emit(this.status);\n    }\n}\n```\n\nc. 修改app.component.html,给开关加上`statuChange`的事件处理方法,$event是关键词指代组件发射过来的值（这里发射过来的是开关的状态false|true）\n\n```html\n<!-- app.component.html -->\n<app-switch [status]=\"false\" (statusChange)=\"showMessage($event)\"></app-switch>\n```\n```typescript\n// app.component.ts\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n    /**\n     * 显示一条消息\n     * @param {boolean} status 开关状态\n     */\n    showMessage(status: boolean) {\n        alert(status ? '开灯' : '关灯');\n    }\n}\n```\n![进度条](/images/ng-note-component/switch-event.png)\n\nd. 当@Output输出属性名是@Input输入属性+Change时，就会默认组成一对（双向绑定），status和statusChange是一对，那么它们组成了一个双向绑定,可以使用`[(status)]`的形式。当然statusChange依然保留，可以独立使用。\n```html\n<!-- app.component.html -->\n<app-switch [(status)]=\"switchStatus\" (statusChange)=\"showMessage($event)\"></app-switch>\n<p>开关状态:{{switchStatus}}</p>\n```\n```typescript\n// app.component.ts\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n    // 开关状态\n    switchStatus = false;\n    /**\n     * 显示一条消息\n     * @param {boolean} status 开关状态\n     */\n    showMessage(status: boolean) {\n        alert(status ? '开灯' : '关灯');\n    }\n}\n```\n![双向绑定](/images/ng-note-component/switch-event.gif)\n\n<div class=\"tip\">相关参考文档地址\n    https://angular.cn/guide/component-interaction\n代码下载\n<a href=\"/codes/component-simple-2.zip\">component-simple-2.zip</a>\n</div>\n\n","slug":"ng-note-compontent-2","published":1,"updated":"2019-07-12T03:05:05.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld9b002qe8weaticankn","content":"<h5 id=\"制作一个简单的开关组件\"><a href=\"#制作一个简单的开关组件\" class=\"headerlink\" title=\"制作一个简单的开关组件\"></a>制作一个简单的开关组件</h5><ol>\n<li><p>使用<code>status</code>保存开关的状态(true:开，false:关)</p>\n</li>\n<li><p>使用<code>ngClass</code>指令切换开关状态下的不同样式<code>switch-open</code>和<code>switch-close</code>;</p>\n</li>\n<li><p>组件代码如下</p>\n</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-switch'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;span class=\"switch\" [ngClass]=\"&#123;'switch-open':status,'switch-close':!status&#125;\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;span class=\"switch-bar\"&gt;&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>,</span><br><span class=\"line\">    styles: [<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        .switch &#123;</span></span><br><span class=\"line\"><span class=\"string\">            display: inline-block;</span></span><br><span class=\"line\"><span class=\"string\">            height: 30px;</span></span><br><span class=\"line\"><span class=\"string\">            width: 60px;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 18px;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 2px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .switch-bar &#123;</span></span><br><span class=\"line\"><span class=\"string\">            display: inline-block;</span></span><br><span class=\"line\"><span class=\"string\">            height: 30px;</span></span><br><span class=\"line\"><span class=\"string\">            width: 30px;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 15px;</span></span><br><span class=\"line\"><span class=\"string\">            background-color: white;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .switch-open &#123;</span></span><br><span class=\"line\"><span class=\"string\">            background-color: #1f7bfb;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .switch-close &#123;</span></span><br><span class=\"line\"><span class=\"string\">            background-color: #ccc;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .switch-open .switch-bar &#123;</span></span><br><span class=\"line\"><span class=\"string\">            transition: margin 0.3s linear;</span></span><br><span class=\"line\"><span class=\"string\">            margin-left: 30px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .switch-close .switch-bar &#123;</span></span><br><span class=\"line\"><span class=\"string\">            transition: margin 0.3s linear;</span></span><br><span class=\"line\"><span class=\"string\">            margin-left: 0px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SwitchComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Input</span>() status: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    construct() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 默认状态为false，关闭状态</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在app.module.ts中引入这个组件</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SwitchComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./switch.component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">    declarations: [</span><br><span class=\"line\">        AppComponent,</span><br><span class=\"line\">        SwitchComponent,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    imports: [</span><br><span class=\"line\">        BrowserModule</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    providers: [],</span><br><span class=\"line\">    bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在app.component.html中使用它</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-switch</span> [<span class=\"attr\">status</span>]=<span class=\"string\">\"false\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-switch</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ng-note-component/switch.png\" style=\"height:40px\"></p>\n<h5 id=\"使用click事件绑定，让开关可以点击进行开-关的转换\"><a href=\"#使用click事件绑定，让开关可以点击进行开-关的转换\" class=\"headerlink\" title=\"使用click事件绑定，让开关可以点击进行开/关的转换\"></a>使用click事件绑定，让开关可以点击进行开/关的转换</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- switch.component.ts(template) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"switch\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">     (<span class=\"attr\">click</span>)=<span class=\"string\">\"changeStatus()\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">     [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"&#123;'switch-open':status,'switch-close':!status&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"switch-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SwitchComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Input</span>() status: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    construct() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 默认状态为false，关闭状态</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 变更开关状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    changeStatus() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = !<span class=\"keyword\">this</span>.status;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ng-note-component/switch.gif\" style=\"height:40px\"></p>\n<h5 id=\"使用-Output让状态变化传递出去\"><a href=\"#使用-Output让状态变化传递出去\" class=\"headerlink\" title=\"使用@Output让状态变化传递出去\"></a>使用@Output让状态变化传递出去</h5><p>a. 很多情况，我们希望在开关开启的时候做一些其它相关操作</p>\n<p>b. 给组件定义一个输出属性<code>statusChange</code>(子组件暴露一个 <code>EventEmitter</code> 属性，当事件发生时，子组件利用该属性 <code>emits</code>(向上弹射)事件。父组件绑定到这个事件属性，并在事件发生时作出回应。)</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SwitchComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Input</span>() status: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Output</span>() statusChange = <span class=\"keyword\">new</span> EventEmitter&lt;<span class=\"built_in\">boolean</span>&gt;(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    construct() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 默认状态为false，关闭状态</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 变更开关状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    changeStatus() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = !<span class=\"keyword\">this</span>.status;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 每次状态被改变的时候，我们把状态发射出去</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.statusChange.emit(<span class=\"keyword\">this</span>.status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>c. 修改app.component.html,给开关加上<code>statuChange</code>的事件处理方法,$event是关键词指代组件发射过来的值（这里发射过来的是开关的状态false|true）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-switch</span> [<span class=\"attr\">status</span>]=<span class=\"string\">\"false\"</span> (<span class=\"attr\">statusChange</span>)=<span class=\"string\">\"showMessage($event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-switch</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.component.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 显示一条消息</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;boolean&#125; status 开关状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    showMessage(status: <span class=\"built_in\">boolean</span>) &#123;</span><br><span class=\"line\">        alert(status ? <span class=\"string\">'开灯'</span> : <span class=\"string\">'关灯'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ng-note-component/switch-event.png\" alt=\"进度条\"></p>\n<p>d. 当@Output输出属性名是@Input输入属性+Change时，就会默认组成一对（双向绑定），status和statusChange是一对，那么它们组成了一个双向绑定,可以使用<code>[(status)]</code>的形式。当然statusChange依然保留，可以独立使用。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-switch</span> [(<span class=\"attr\">status</span>)]=<span class=\"string\">\"switchStatus\"</span> (<span class=\"attr\">statusChange</span>)=<span class=\"string\">\"showMessage($event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-switch</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>开关状态:&#123;&#123;switchStatus&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.component.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 开关状态</span></span><br><span class=\"line\">    switchStatus = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 显示一条消息</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;boolean&#125; status 开关状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    showMessage(status: <span class=\"built_in\">boolean</span>) &#123;</span><br><span class=\"line\">        alert(status ? <span class=\"string\">'开灯'</span> : <span class=\"string\">'关灯'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ng-note-component/switch-event.gif\" alt=\"双向绑定\"></p>\n<div class=\"tip\">相关参考文档地址<br>    <a href=\"https://angular.cn/guide/component-interaction\" target=\"_blank\" rel=\"noopener\">https://angular.cn/guide/component-interaction</a><br>代码下载<br><a href=\"/codes/component-simple-2.zip\">component-simple-2.zip</a><br></div>\n\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"制作一个简单的开关组件\"><a href=\"#制作一个简单的开关组件\" class=\"headerlink\" title=\"制作一个简单的开关组件\"></a>制作一个简单的开关组件</h5><ol>\n<li><p>使用<code>status</code>保存开关的状态(true:开，false:关)</p>\n</li>\n<li><p>使用<code>ngClass</code>指令切换开关状态下的不同样式<code>switch-open</code>和<code>switch-close</code>;</p>\n</li>\n<li><p>组件代码如下</p>\n</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-switch'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;span class=\"switch\" [ngClass]=\"&#123;'switch-open':status,'switch-close':!status&#125;\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;span class=\"switch-bar\"&gt;&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>,</span><br><span class=\"line\">    styles: [<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        .switch &#123;</span></span><br><span class=\"line\"><span class=\"string\">            display: inline-block;</span></span><br><span class=\"line\"><span class=\"string\">            height: 30px;</span></span><br><span class=\"line\"><span class=\"string\">            width: 60px;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 18px;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 2px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .switch-bar &#123;</span></span><br><span class=\"line\"><span class=\"string\">            display: inline-block;</span></span><br><span class=\"line\"><span class=\"string\">            height: 30px;</span></span><br><span class=\"line\"><span class=\"string\">            width: 30px;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 15px;</span></span><br><span class=\"line\"><span class=\"string\">            background-color: white;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .switch-open &#123;</span></span><br><span class=\"line\"><span class=\"string\">            background-color: #1f7bfb;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .switch-close &#123;</span></span><br><span class=\"line\"><span class=\"string\">            background-color: #ccc;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .switch-open .switch-bar &#123;</span></span><br><span class=\"line\"><span class=\"string\">            transition: margin 0.3s linear;</span></span><br><span class=\"line\"><span class=\"string\">            margin-left: 30px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .switch-close .switch-bar &#123;</span></span><br><span class=\"line\"><span class=\"string\">            transition: margin 0.3s linear;</span></span><br><span class=\"line\"><span class=\"string\">            margin-left: 0px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SwitchComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Input</span>() status: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    construct() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 默认状态为false，关闭状态</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在app.module.ts中引入这个组件</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.module.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; SwitchComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./switch.component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">    declarations: [</span><br><span class=\"line\">        AppComponent,</span><br><span class=\"line\">        SwitchComponent,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    imports: [</span><br><span class=\"line\">        BrowserModule</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    providers: [],</span><br><span class=\"line\">    bootstrap: [AppComponent]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>在app.component.html中使用它</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-switch</span> [<span class=\"attr\">status</span>]=<span class=\"string\">\"false\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-switch</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ng-note-component/switch.png\" style=\"height:40px\"></p>\n<h5 id=\"使用click事件绑定，让开关可以点击进行开-关的转换\"><a href=\"#使用click事件绑定，让开关可以点击进行开-关的转换\" class=\"headerlink\" title=\"使用click事件绑定，让开关可以点击进行开/关的转换\"></a>使用click事件绑定，让开关可以点击进行开/关的转换</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- switch.component.ts(template) --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"switch\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">     (<span class=\"attr\">click</span>)=<span class=\"string\">\"changeStatus()\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">     [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"&#123;'switch-open':status,'switch-close':!status&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"switch-bar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SwitchComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Input</span>() status: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    construct() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 默认状态为false，关闭状态</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 变更开关状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    changeStatus() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = !<span class=\"keyword\">this</span>.status;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ng-note-component/switch.gif\" style=\"height:40px\"></p>\n<h5 id=\"使用-Output让状态变化传递出去\"><a href=\"#使用-Output让状态变化传递出去\" class=\"headerlink\" title=\"使用@Output让状态变化传递出去\"></a>使用@Output让状态变化传递出去</h5><p>a. 很多情况，我们希望在开关开启的时候做一些其它相关操作</p>\n<p>b. 给组件定义一个输出属性<code>statusChange</code>(子组件暴露一个 <code>EventEmitter</code> 属性，当事件发生时，子组件利用该属性 <code>emits</code>(向上弹射)事件。父组件绑定到这个事件属性，并在事件发生时作出回应。)</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SwitchComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Input</span>() status: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Output</span>() statusChange = <span class=\"keyword\">new</span> EventEmitter&lt;<span class=\"built_in\">boolean</span>&gt;(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    construct() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 默认状态为false，关闭状态</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 变更开关状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    changeStatus() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = !<span class=\"keyword\">this</span>.status;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 每次状态被改变的时候，我们把状态发射出去</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.statusChange.emit(<span class=\"keyword\">this</span>.status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>c. 修改app.component.html,给开关加上<code>statuChange</code>的事件处理方法,$event是关键词指代组件发射过来的值（这里发射过来的是开关的状态false|true）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-switch</span> [<span class=\"attr\">status</span>]=<span class=\"string\">\"false\"</span> (<span class=\"attr\">statusChange</span>)=<span class=\"string\">\"showMessage($event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-switch</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.component.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 显示一条消息</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;boolean&#125; status 开关状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    showMessage(status: <span class=\"built_in\">boolean</span>) &#123;</span><br><span class=\"line\">        alert(status ? <span class=\"string\">'开灯'</span> : <span class=\"string\">'关灯'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ng-note-component/switch-event.png\" alt=\"进度条\"></p>\n<p>d. 当@Output输出属性名是@Input输入属性+Change时，就会默认组成一对（双向绑定），status和statusChange是一对，那么它们组成了一个双向绑定,可以使用<code>[(status)]</code>的形式。当然statusChange依然保留，可以独立使用。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app.component.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-switch</span> [(<span class=\"attr\">status</span>)]=<span class=\"string\">\"switchStatus\"</span> (<span class=\"attr\">statusChange</span>)=<span class=\"string\">\"showMessage($event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-switch</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>开关状态:&#123;&#123;switchStatus&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.component.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span>(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'app-root'</span>,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'./app.component.html'</span>,</span><br><span class=\"line\">    styleUrls: [<span class=\"string\">'./app.component.css'</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 开关状态</span></span><br><span class=\"line\">    switchStatus = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 显示一条消息</span></span><br><span class=\"line\"><span class=\"comment\">     * @param &#123;boolean&#125; status 开关状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    showMessage(status: <span class=\"built_in\">boolean</span>) &#123;</span><br><span class=\"line\">        alert(status ? <span class=\"string\">'开灯'</span> : <span class=\"string\">'关灯'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ng-note-component/switch-event.gif\" alt=\"双向绑定\"></p>\n<div class=\"tip\">相关参考文档地址<br>    <a href=\"https://angular.cn/guide/component-interaction\" target=\"_blank\" rel=\"noopener\">https://angular.cn/guide/component-interaction</a><br>代码下载<br><a href=\"/codes/component-simple-2.zip\">component-simple-2.zip</a><br></div>\n\n"},{"title":"nginx安装及其相关配置","date":"2018-08-08T09:36:54.000Z","_content":"\n#### 安装nginx服务器\n\n1.执行 `apt-get install nginx`\n\n2.安装结束后：浏览器中可以访问 http://127.0.0.1(以服务器实际ip为准)) 出现nginx默认页面\n> 注意：80号端口不能被占用，通常情况下，有的系统默认安装好了apache服务器，这会与nginx的端口产生冲突\n\n3.常用操作\n\n* 重启：`nginx -s reload`\n* 关闭：`nginx -s stop`\n* 启动：`nginx`\n\n#### 配置参数(window系统)\n```conf\n    #使用CPU核心数目\n    worker_processes  4;\n\n    #错误日志存放目录\n    error_log    logs/error.log;  \n\n    #pid文件目录\n    pid             logs/nginx.pid;       \n\n    events {\n        #最大并发连接数\n        worker_connections  1024;             \n    }\n\n    #设置http服务器\n    http{\n\n        #include 指令为把文件包含进来，此处等价于直接把mime.types文件内容复制到此处,注意文件路径\n        include mime.types;\n\n        default_type  application/octet-stream;\n\n        #访问记录配置\n        access_log  logs/access.log  main;\n\n        #开启sendfile功能，服务器协助推送文件\n        sendfile on;\n\n        #连接超时时间\n        keepalive_timeout  65;\n\n        #使用gzip压缩\n        gzip  on;\n\n        #http站点，一个http服务可以有多个server\n        server{\n\n            #监听80端口\n            listen 80;\n\n            #服务名称\n            server_name  localhost;\n\n            #服务器编码，影响页面访问编码，不设置为默认系统编码（一般不设置）\n            charset utf-8;\n\n            #默认请求设置\n            location / {\n\n                #网站根目录\n                root   E:/www/html;\n\n                #主页设置\n                index  index.html index.htm;\n            }\n            #错误页面设置，可使用自定义错误页面\n            error_page   404              /404.html;\n            error_page   500 502 503 504  /50x.html;\n            location = /50x.html {\n                root   html;\n            }\n\n            #PHP 脚本请求配置，转发到FastCGI处理\n            location ~ \\.php$ {\n\n                #网站根目录\n                root                 E:/HTML/public;\n                #默认配置，请确保系统安装好了PHP\n                fastcgi_pass    127.0.0.1:9000;\n                fastcgi_index   index.php;\n                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n                include            fastcgi_params;\n            }\n        }\n        #第二个站点\n         server{\n\n             #使用8000端口\n             listen       8000;\n\n             #服务名称\n             server_name  server_2;\n\n            #默认请求设置\n            location / {\n                root   E:/www_2/html;\n                index  index.html index.htm;\n            }\n\n            #其它配置可以参考第一个server\n         }\n    }\n```\n\n#### 查看访问日志文件: access.log（windows系统)\n\n```conf\n#所有对服务器的请求都会记录在access.log中\n\n# 服务器IP--[访问时间] -“请求对象描述”\n127.0.0.1 - - [17/Nov/2016:11:56:29 +0800] \"GET / HTTP/1.1\" 500 193 \"-\" \"\"\n```\n\n#### 查看error/notice日志文件: error.log（windows系统)\n\n```\n#失败的请求，服务器错误，启动记录都会在文件中记录\n...内容略...\n```\n\n#### ubuntu16.04 环境配置\n1. 站点配置目录`/etc/nginx/site-enable`\n2. 全局配置 `/etc/nginx/nginx.conf`(开启gzip)\n3. 其它相关公共配置`/etc/nginx/snippets/snakeoil.conf`(https)\n\n##### https部署---默认http跳转到https\n```conf\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n    server_name _;\n    location / {\n        rewrite ^(.*)$ https://$host$request_uri permanent;\n    }\n}\n```\n##### https部署---https服务器校验\n```conf\nlocation /.well-known/acme-challenge {\n    alias /tmp/acme-wellknown;\n}\n```\n##### https部署---克隆证书获取工具\n1. [Let's Encrypt](https://letsencrypt.org)\n2. [Dehydrated](https://github.com/lukas2511/dehydrated)","source":"_posts/nginx安装及其相关配置.md","raw":"---\ntitle: nginx安装及其相关配置\ndate: 2018-08-08 17:36:54\ntags: nginx\n---\n\n#### 安装nginx服务器\n\n1.执行 `apt-get install nginx`\n\n2.安装结束后：浏览器中可以访问 http://127.0.0.1(以服务器实际ip为准)) 出现nginx默认页面\n> 注意：80号端口不能被占用，通常情况下，有的系统默认安装好了apache服务器，这会与nginx的端口产生冲突\n\n3.常用操作\n\n* 重启：`nginx -s reload`\n* 关闭：`nginx -s stop`\n* 启动：`nginx`\n\n#### 配置参数(window系统)\n```conf\n    #使用CPU核心数目\n    worker_processes  4;\n\n    #错误日志存放目录\n    error_log    logs/error.log;  \n\n    #pid文件目录\n    pid             logs/nginx.pid;       \n\n    events {\n        #最大并发连接数\n        worker_connections  1024;             \n    }\n\n    #设置http服务器\n    http{\n\n        #include 指令为把文件包含进来，此处等价于直接把mime.types文件内容复制到此处,注意文件路径\n        include mime.types;\n\n        default_type  application/octet-stream;\n\n        #访问记录配置\n        access_log  logs/access.log  main;\n\n        #开启sendfile功能，服务器协助推送文件\n        sendfile on;\n\n        #连接超时时间\n        keepalive_timeout  65;\n\n        #使用gzip压缩\n        gzip  on;\n\n        #http站点，一个http服务可以有多个server\n        server{\n\n            #监听80端口\n            listen 80;\n\n            #服务名称\n            server_name  localhost;\n\n            #服务器编码，影响页面访问编码，不设置为默认系统编码（一般不设置）\n            charset utf-8;\n\n            #默认请求设置\n            location / {\n\n                #网站根目录\n                root   E:/www/html;\n\n                #主页设置\n                index  index.html index.htm;\n            }\n            #错误页面设置，可使用自定义错误页面\n            error_page   404              /404.html;\n            error_page   500 502 503 504  /50x.html;\n            location = /50x.html {\n                root   html;\n            }\n\n            #PHP 脚本请求配置，转发到FastCGI处理\n            location ~ \\.php$ {\n\n                #网站根目录\n                root                 E:/HTML/public;\n                #默认配置，请确保系统安装好了PHP\n                fastcgi_pass    127.0.0.1:9000;\n                fastcgi_index   index.php;\n                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n                include            fastcgi_params;\n            }\n        }\n        #第二个站点\n         server{\n\n             #使用8000端口\n             listen       8000;\n\n             #服务名称\n             server_name  server_2;\n\n            #默认请求设置\n            location / {\n                root   E:/www_2/html;\n                index  index.html index.htm;\n            }\n\n            #其它配置可以参考第一个server\n         }\n    }\n```\n\n#### 查看访问日志文件: access.log（windows系统)\n\n```conf\n#所有对服务器的请求都会记录在access.log中\n\n# 服务器IP--[访问时间] -“请求对象描述”\n127.0.0.1 - - [17/Nov/2016:11:56:29 +0800] \"GET / HTTP/1.1\" 500 193 \"-\" \"\"\n```\n\n#### 查看error/notice日志文件: error.log（windows系统)\n\n```\n#失败的请求，服务器错误，启动记录都会在文件中记录\n...内容略...\n```\n\n#### ubuntu16.04 环境配置\n1. 站点配置目录`/etc/nginx/site-enable`\n2. 全局配置 `/etc/nginx/nginx.conf`(开启gzip)\n3. 其它相关公共配置`/etc/nginx/snippets/snakeoil.conf`(https)\n\n##### https部署---默认http跳转到https\n```conf\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n    server_name _;\n    location / {\n        rewrite ^(.*)$ https://$host$request_uri permanent;\n    }\n}\n```\n##### https部署---https服务器校验\n```conf\nlocation /.well-known/acme-challenge {\n    alias /tmp/acme-wellknown;\n}\n```\n##### https部署---克隆证书获取工具\n1. [Let's Encrypt](https://letsencrypt.org)\n2. [Dehydrated](https://github.com/lukas2511/dehydrated)","slug":"nginx安装及其相关配置","published":1,"updated":"2019-07-05T04:24:05.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld9d002se8wee0cwwqcn","content":"<h4 id=\"安装nginx服务器\"><a href=\"#安装nginx服务器\" class=\"headerlink\" title=\"安装nginx服务器\"></a>安装nginx服务器</h4><p>1.执行 <code>apt-get install nginx</code></p>\n<p>2.安装结束后：浏览器中可以访问 <a href=\"http://127.0.0.1(以服务器实际ip为准)\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1(以服务器实际ip为准)</a>) 出现nginx默认页面</p>\n<blockquote>\n<p>注意：80号端口不能被占用，通常情况下，有的系统默认安装好了apache服务器，这会与nginx的端口产生冲突</p>\n</blockquote>\n<p>3.常用操作</p>\n<ul>\n<li>重启：<code>nginx -s reload</code></li>\n<li>关闭：<code>nginx -s stop</code></li>\n<li>启动：<code>nginx</code></li>\n</ul>\n<h4 id=\"配置参数-window系统\"><a href=\"#配置参数-window系统\" class=\"headerlink\" title=\"配置参数(window系统)\"></a>配置参数(window系统)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用CPU核心数目</span><br><span class=\"line\">worker_processes  4;</span><br><span class=\"line\"></span><br><span class=\"line\">#错误日志存放目录</span><br><span class=\"line\">error_log    logs/error.log;  </span><br><span class=\"line\"></span><br><span class=\"line\">#pid文件目录</span><br><span class=\"line\">pid             logs/nginx.pid;       </span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    #最大并发连接数</span><br><span class=\"line\">    worker_connections  1024;             </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#设置http服务器</span><br><span class=\"line\">http&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    #include 指令为把文件包含进来，此处等价于直接把mime.types文件内容复制到此处,注意文件路径</span><br><span class=\"line\">    include mime.types;</span><br><span class=\"line\"></span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #访问记录配置</span><br><span class=\"line\">    access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启sendfile功能，服务器协助推送文件</span><br><span class=\"line\">    sendfile on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #连接超时时间</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #使用gzip压缩</span><br><span class=\"line\">    gzip  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #http站点，一个http服务可以有多个server</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        #监听80端口</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\"></span><br><span class=\"line\">        #服务名称</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #服务器编码，影响页面访问编码，不设置为默认系统编码（一般不设置）</span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">        #默认请求设置</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            #网站根目录</span><br><span class=\"line\">            root   E:/www/html;</span><br><span class=\"line\"></span><br><span class=\"line\">            #主页设置</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #错误页面设置，可使用自定义错误页面</span><br><span class=\"line\">        error_page   404              /404.html;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #PHP 脚本请求配置，转发到FastCGI处理</span><br><span class=\"line\">        location ~ \\.php$ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            #网站根目录</span><br><span class=\"line\">            root                 E:/HTML/public;</span><br><span class=\"line\">            #默认配置，请确保系统安装好了PHP</span><br><span class=\"line\">            fastcgi_pass    127.0.0.1:9000;</span><br><span class=\"line\">            fastcgi_index   index.php;</span><br><span class=\"line\">            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class=\"line\">            include            fastcgi_params;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #第二个站点</span><br><span class=\"line\">     server&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         #使用8000端口</span><br><span class=\"line\">         listen       8000;</span><br><span class=\"line\"></span><br><span class=\"line\">         #服务名称</span><br><span class=\"line\">         server_name  server_2;</span><br><span class=\"line\"></span><br><span class=\"line\">        #默认请求设置</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   E:/www_2/html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #其它配置可以参考第一个server</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看访问日志文件-access-log（windows系统\"><a href=\"#查看访问日志文件-access-log（windows系统\" class=\"headerlink\" title=\"查看访问日志文件: access.log（windows系统)\"></a>查看访问日志文件: access.log（windows系统)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#所有对服务器的请求都会记录在access.log中</span><br><span class=\"line\"></span><br><span class=\"line\"># 服务器IP--[访问时间] -“请求对象描述”</span><br><span class=\"line\">127.0.0.1 - - [17/Nov/2016:11:56:29 +0800] &quot;GET / HTTP/1.1&quot; 500 193 &quot;-&quot; &quot;&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看error-notice日志文件-error-log（windows系统\"><a href=\"#查看error-notice日志文件-error-log（windows系统\" class=\"headerlink\" title=\"查看error/notice日志文件: error.log（windows系统)\"></a>查看error/notice日志文件: error.log（windows系统)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#失败的请求，服务器错误，启动记录都会在文件中记录</span><br><span class=\"line\">...内容略...</span><br></pre></td></tr></table></figure>\n<h4 id=\"ubuntu16-04-环境配置\"><a href=\"#ubuntu16-04-环境配置\" class=\"headerlink\" title=\"ubuntu16.04 环境配置\"></a>ubuntu16.04 环境配置</h4><ol>\n<li>站点配置目录<code>/etc/nginx/site-enable</code></li>\n<li>全局配置 <code>/etc/nginx/nginx.conf</code>(开启gzip)</li>\n<li>其它相关公共配置<code>/etc/nginx/snippets/snakeoil.conf</code>(https)</li>\n</ol>\n<h5 id=\"https部署—默认http跳转到https\"><a href=\"#https部署—默认http跳转到https\" class=\"headerlink\" title=\"https部署—默认http跳转到https\"></a>https部署—默认http跳转到https</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80 default_server;</span><br><span class=\"line\">    listen [::]:80 default_server;</span><br><span class=\"line\">    server_name _;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        rewrite ^(.*)$ https://$host$request_uri permanent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"https部署—https服务器校验\"><a href=\"#https部署—https服务器校验\" class=\"headerlink\" title=\"https部署—https服务器校验\"></a>https部署—https服务器校验</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /.well-known/acme-challenge &#123;</span><br><span class=\"line\">    alias /tmp/acme-wellknown;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"https部署—克隆证书获取工具\"><a href=\"#https部署—克隆证书获取工具\" class=\"headerlink\" title=\"https部署—克隆证书获取工具\"></a>https部署—克隆证书获取工具</h5><ol>\n<li><a href=\"https://letsencrypt.org\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt</a></li>\n<li><a href=\"https://github.com/lukas2511/dehydrated\" target=\"_blank\" rel=\"noopener\">Dehydrated</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"安装nginx服务器\"><a href=\"#安装nginx服务器\" class=\"headerlink\" title=\"安装nginx服务器\"></a>安装nginx服务器</h4><p>1.执行 <code>apt-get install nginx</code></p>\n<p>2.安装结束后：浏览器中可以访问 <a href=\"http://127.0.0.1(以服务器实际ip为准)\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1(以服务器实际ip为准)</a>) 出现nginx默认页面</p>\n<blockquote>\n<p>注意：80号端口不能被占用，通常情况下，有的系统默认安装好了apache服务器，这会与nginx的端口产生冲突</p>\n</blockquote>\n<p>3.常用操作</p>\n<ul>\n<li>重启：<code>nginx -s reload</code></li>\n<li>关闭：<code>nginx -s stop</code></li>\n<li>启动：<code>nginx</code></li>\n</ul>\n<h4 id=\"配置参数-window系统\"><a href=\"#配置参数-window系统\" class=\"headerlink\" title=\"配置参数(window系统)\"></a>配置参数(window系统)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用CPU核心数目</span><br><span class=\"line\">worker_processes  4;</span><br><span class=\"line\"></span><br><span class=\"line\">#错误日志存放目录</span><br><span class=\"line\">error_log    logs/error.log;  </span><br><span class=\"line\"></span><br><span class=\"line\">#pid文件目录</span><br><span class=\"line\">pid             logs/nginx.pid;       </span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    #最大并发连接数</span><br><span class=\"line\">    worker_connections  1024;             </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#设置http服务器</span><br><span class=\"line\">http&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    #include 指令为把文件包含进来，此处等价于直接把mime.types文件内容复制到此处,注意文件路径</span><br><span class=\"line\">    include mime.types;</span><br><span class=\"line\"></span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #访问记录配置</span><br><span class=\"line\">    access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启sendfile功能，服务器协助推送文件</span><br><span class=\"line\">    sendfile on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #连接超时时间</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #使用gzip压缩</span><br><span class=\"line\">    gzip  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #http站点，一个http服务可以有多个server</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        #监听80端口</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\"></span><br><span class=\"line\">        #服务名称</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #服务器编码，影响页面访问编码，不设置为默认系统编码（一般不设置）</span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">        #默认请求设置</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            #网站根目录</span><br><span class=\"line\">            root   E:/www/html;</span><br><span class=\"line\"></span><br><span class=\"line\">            #主页设置</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #错误页面设置，可使用自定义错误页面</span><br><span class=\"line\">        error_page   404              /404.html;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #PHP 脚本请求配置，转发到FastCGI处理</span><br><span class=\"line\">        location ~ \\.php$ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            #网站根目录</span><br><span class=\"line\">            root                 E:/HTML/public;</span><br><span class=\"line\">            #默认配置，请确保系统安装好了PHP</span><br><span class=\"line\">            fastcgi_pass    127.0.0.1:9000;</span><br><span class=\"line\">            fastcgi_index   index.php;</span><br><span class=\"line\">            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class=\"line\">            include            fastcgi_params;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #第二个站点</span><br><span class=\"line\">     server&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         #使用8000端口</span><br><span class=\"line\">         listen       8000;</span><br><span class=\"line\"></span><br><span class=\"line\">         #服务名称</span><br><span class=\"line\">         server_name  server_2;</span><br><span class=\"line\"></span><br><span class=\"line\">        #默认请求设置</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   E:/www_2/html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #其它配置可以参考第一个server</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看访问日志文件-access-log（windows系统\"><a href=\"#查看访问日志文件-access-log（windows系统\" class=\"headerlink\" title=\"查看访问日志文件: access.log（windows系统)\"></a>查看访问日志文件: access.log（windows系统)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#所有对服务器的请求都会记录在access.log中</span><br><span class=\"line\"></span><br><span class=\"line\"># 服务器IP--[访问时间] -“请求对象描述”</span><br><span class=\"line\">127.0.0.1 - - [17/Nov/2016:11:56:29 +0800] &quot;GET / HTTP/1.1&quot; 500 193 &quot;-&quot; &quot;&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看error-notice日志文件-error-log（windows系统\"><a href=\"#查看error-notice日志文件-error-log（windows系统\" class=\"headerlink\" title=\"查看error/notice日志文件: error.log（windows系统)\"></a>查看error/notice日志文件: error.log（windows系统)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#失败的请求，服务器错误，启动记录都会在文件中记录</span><br><span class=\"line\">...内容略...</span><br></pre></td></tr></table></figure>\n<h4 id=\"ubuntu16-04-环境配置\"><a href=\"#ubuntu16-04-环境配置\" class=\"headerlink\" title=\"ubuntu16.04 环境配置\"></a>ubuntu16.04 环境配置</h4><ol>\n<li>站点配置目录<code>/etc/nginx/site-enable</code></li>\n<li>全局配置 <code>/etc/nginx/nginx.conf</code>(开启gzip)</li>\n<li>其它相关公共配置<code>/etc/nginx/snippets/snakeoil.conf</code>(https)</li>\n</ol>\n<h5 id=\"https部署—默认http跳转到https\"><a href=\"#https部署—默认http跳转到https\" class=\"headerlink\" title=\"https部署—默认http跳转到https\"></a>https部署—默认http跳转到https</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80 default_server;</span><br><span class=\"line\">    listen [::]:80 default_server;</span><br><span class=\"line\">    server_name _;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        rewrite ^(.*)$ https://$host$request_uri permanent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"https部署—https服务器校验\"><a href=\"#https部署—https服务器校验\" class=\"headerlink\" title=\"https部署—https服务器校验\"></a>https部署—https服务器校验</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /.well-known/acme-challenge &#123;</span><br><span class=\"line\">    alias /tmp/acme-wellknown;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"https部署—克隆证书获取工具\"><a href=\"#https部署—克隆证书获取工具\" class=\"headerlink\" title=\"https部署—克隆证书获取工具\"></a>https部署—克隆证书获取工具</h5><ol>\n<li><a href=\"https://letsencrypt.org\" target=\"_blank\" rel=\"noopener\">Let’s Encrypt</a></li>\n<li><a href=\"https://github.com/lukas2511/dehydrated\" target=\"_blank\" rel=\"noopener\">Dehydrated</a></li>\n</ol>\n"},{"title":"nginx+php环境安全问题","date":"2018-12-05T07:21:08.000Z","_content":"\n## 可执行权限\n\n1. 只给需要执行的php脚本权限\n```\nlocation /index.php {\n    include snippets/fastcgi-php.conf;\n    fastcgi_pass unix:/run/php/php7.2-fpm.sock;\n}\n```\n如laravel项目，只需要public目录下的index.php可执行，这样所有其它的脚本文件不会被意外执行\n\n## 文件上传\n\n1. 文件上传校验类型(图片，视频，文档)，避免恶意文件被上传\n\n2. 尽量使用第三方云端上传方案，这样可以更可靠，不容易本地服务器被注入恶意脚本\n\n3. 文件大小设置,本地上传禁止上传大文件，会占用大量服务器资源\n\n## 上线默认关闭调试\n\n避免关键代码泄漏，调试信息有很多关键代码\n\n## 表单数据安全\n\n1. 所有表单数据都不允许明文传输\n\n2. 提交的数据需要进行签名（字典排序，hash值校验）\n\n3. 敏感数据不允许直接传输（身份证，密码等），即使要传输也要加密\n","source":"_posts/nginx-php-note-1.md","raw":"---\ntitle: nginx+php环境安全问题\ndate: 2018-12-05 15:21:08\ntags: ['nginx','php']\n---\n\n## 可执行权限\n\n1. 只给需要执行的php脚本权限\n```\nlocation /index.php {\n    include snippets/fastcgi-php.conf;\n    fastcgi_pass unix:/run/php/php7.2-fpm.sock;\n}\n```\n如laravel项目，只需要public目录下的index.php可执行，这样所有其它的脚本文件不会被意外执行\n\n## 文件上传\n\n1. 文件上传校验类型(图片，视频，文档)，避免恶意文件被上传\n\n2. 尽量使用第三方云端上传方案，这样可以更可靠，不容易本地服务器被注入恶意脚本\n\n3. 文件大小设置,本地上传禁止上传大文件，会占用大量服务器资源\n\n## 上线默认关闭调试\n\n避免关键代码泄漏，调试信息有很多关键代码\n\n## 表单数据安全\n\n1. 所有表单数据都不允许明文传输\n\n2. 提交的数据需要进行签名（字典排序，hash值校验）\n\n3. 敏感数据不允许直接传输（身份证，密码等），即使要传输也要加密\n","slug":"nginx-php-note-1","published":1,"updated":"2019-07-05T04:24:05.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld9f002we8weeou9c1a1","content":"<h2 id=\"可执行权限\"><a href=\"#可执行权限\" class=\"headerlink\" title=\"可执行权限\"></a>可执行权限</h2><ol>\n<li>只给需要执行的php脚本权限<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /index.php &#123;</span><br><span class=\"line\">    include snippets/fastcgi-php.conf;</span><br><span class=\"line\">    fastcgi_pass unix:/run/php/php7.2-fpm.sock;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如laravel项目，只需要public目录下的index.php可执行，这样所有其它的脚本文件不会被意外执行</p>\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><ol>\n<li><p>文件上传校验类型(图片，视频，文档)，避免恶意文件被上传</p>\n</li>\n<li><p>尽量使用第三方云端上传方案，这样可以更可靠，不容易本地服务器被注入恶意脚本</p>\n</li>\n<li><p>文件大小设置,本地上传禁止上传大文件，会占用大量服务器资源</p>\n</li>\n</ol>\n<h2 id=\"上线默认关闭调试\"><a href=\"#上线默认关闭调试\" class=\"headerlink\" title=\"上线默认关闭调试\"></a>上线默认关闭调试</h2><p>避免关键代码泄漏，调试信息有很多关键代码</p>\n<h2 id=\"表单数据安全\"><a href=\"#表单数据安全\" class=\"headerlink\" title=\"表单数据安全\"></a>表单数据安全</h2><ol>\n<li><p>所有表单数据都不允许明文传输</p>\n</li>\n<li><p>提交的数据需要进行签名（字典排序，hash值校验）</p>\n</li>\n<li><p>敏感数据不允许直接传输（身份证，密码等），即使要传输也要加密</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"可执行权限\"><a href=\"#可执行权限\" class=\"headerlink\" title=\"可执行权限\"></a>可执行权限</h2><ol>\n<li>只给需要执行的php脚本权限<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /index.php &#123;</span><br><span class=\"line\">    include snippets/fastcgi-php.conf;</span><br><span class=\"line\">    fastcgi_pass unix:/run/php/php7.2-fpm.sock;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如laravel项目，只需要public目录下的index.php可执行，这样所有其它的脚本文件不会被意外执行</p>\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><ol>\n<li><p>文件上传校验类型(图片，视频，文档)，避免恶意文件被上传</p>\n</li>\n<li><p>尽量使用第三方云端上传方案，这样可以更可靠，不容易本地服务器被注入恶意脚本</p>\n</li>\n<li><p>文件大小设置,本地上传禁止上传大文件，会占用大量服务器资源</p>\n</li>\n</ol>\n<h2 id=\"上线默认关闭调试\"><a href=\"#上线默认关闭调试\" class=\"headerlink\" title=\"上线默认关闭调试\"></a>上线默认关闭调试</h2><p>避免关键代码泄漏，调试信息有很多关键代码</p>\n<h2 id=\"表单数据安全\"><a href=\"#表单数据安全\" class=\"headerlink\" title=\"表单数据安全\"></a>表单数据安全</h2><ol>\n<li><p>所有表单数据都不允许明文传输</p>\n</li>\n<li><p>提交的数据需要进行签名（字典排序，hash值校验）</p>\n</li>\n<li><p>敏感数据不允许直接传输（身份证，密码等），即使要传输也要加密</p>\n</li>\n</ol>\n"},{"title":"使用request模拟浏览器请求","date":"2018-08-08T09:19:17.000Z","_content":"#### 创建一个测试项目\n1. 创建项目目录\n`mkdir request-faker`\n\n2. npm初始化项目（输入项目相关说明）\n`npm init`\n\n3. 安装*request*和*querystring*\n`npm install request`\n`npm install querystring`\n\n4. 创建一个测试脚本文件*main.js*\n\n#### 相关参考代码\n```javascript\n\nconst request = require(\"request\");\nconst querystring = require(\"querystring\");\nconst fs = require('fs');\n\n/**\n * 伪造浏览器信息\n */\nfunction randomUserAgent() {\n    const userAgentList = [\n        \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\",\n        \"Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1\",\n        \"Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1\",\n        \"Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Mobile Safari/537.36\",\n        \"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Mobile Safari/537.36\",\n        \"Mozilla/5.0 (Linux; Android 5.1.1; Nexus 6 Build/LYZ28E) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Mobile Safari/537.36\",\n        \"Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_2 like Mac OS X) AppleWebKit/603.2.4 (KHTML, like Gecko) Mobile/14F89;GameHelper\",\n        \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/603.2.4 (KHTML, like Gecko) Version/10.1.1 Safari/603.2.4\",\n        \"Mozilla/5.0 (iPhone; CPU iPhone OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A300 Safari/602.1\",\n        \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36\",\n        \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:46.0) Gecko/20100101 Firefox/46.0\",\n        \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:46.0) Gecko/20100101 Firefox/46.0\",\n        \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\",\n        \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)\",\n        \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)\",\n        \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Win64; x64; Trident/6.0)\",\n        \"Mozilla/5.0 (Windows NT 6.3; Win64, x64; Trident/7.0; rv:11.0) like Gecko\",\n        \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/13.10586\",\n        \"Mozilla/5.0 (iPad; CPU OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A300 Safari/602.1\"\n    ];\n    const num = Math.floor(Math.random() * userAgentList.length);\n    return userAgentList[num];\n}\n\n/**\n * 发送一个模拟请求\n */\nfunction sendRequest() {\n    const options = {\n        url: \"http://请求地址\",\n        method: 'POST',\n        gzip: true,\n        headers: {\n            Accept: \"*/*\",\n            \"Accept-Language\": \"zh-CN,zh;q=0.8,gl;q=0.6,zh-TW;q=0.4\",\n            Connection: \"keep-alive\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            Origin: \"http://请求源（服务器域名）\",\n            Referer: \"....\",\n            Host: \"服务器域名,如www.example.com\",\n            Cookie: \"COOKIE_ONE=a;COOKIE_TWO=b\",\n            \"User-Agent\": randomUserAgent()\n        },\n        body: querystring.stringify({\n            \"param.a\": \"xxxx\",\n            \"param.b\": \"xxxx\",\n            \"b\": \"xxxx\",\n        })\n    };\n    request(options, function (error, res, body) {\n        if (error) {\n            console.error(error);\n        } else {\n            console.log(body);\n        }\n    });\n}\n\nsendRequest();\n```\n","source":"_posts/node-note-1.md","raw":"---\ntitle: 使用request模拟浏览器请求\ndate: 2018-08-08 17:19:17\ntags: node.js\ncategories: Web开发\n---\n#### 创建一个测试项目\n1. 创建项目目录\n`mkdir request-faker`\n\n2. npm初始化项目（输入项目相关说明）\n`npm init`\n\n3. 安装*request*和*querystring*\n`npm install request`\n`npm install querystring`\n\n4. 创建一个测试脚本文件*main.js*\n\n#### 相关参考代码\n```javascript\n\nconst request = require(\"request\");\nconst querystring = require(\"querystring\");\nconst fs = require('fs');\n\n/**\n * 伪造浏览器信息\n */\nfunction randomUserAgent() {\n    const userAgentList = [\n        \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\",\n        \"Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1\",\n        \"Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1\",\n        \"Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Mobile Safari/537.36\",\n        \"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Mobile Safari/537.36\",\n        \"Mozilla/5.0 (Linux; Android 5.1.1; Nexus 6 Build/LYZ28E) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Mobile Safari/537.36\",\n        \"Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_2 like Mac OS X) AppleWebKit/603.2.4 (KHTML, like Gecko) Mobile/14F89;GameHelper\",\n        \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/603.2.4 (KHTML, like Gecko) Version/10.1.1 Safari/603.2.4\",\n        \"Mozilla/5.0 (iPhone; CPU iPhone OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A300 Safari/602.1\",\n        \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36\",\n        \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:46.0) Gecko/20100101 Firefox/46.0\",\n        \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:46.0) Gecko/20100101 Firefox/46.0\",\n        \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\",\n        \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)\",\n        \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)\",\n        \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Win64; x64; Trident/6.0)\",\n        \"Mozilla/5.0 (Windows NT 6.3; Win64, x64; Trident/7.0; rv:11.0) like Gecko\",\n        \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/13.10586\",\n        \"Mozilla/5.0 (iPad; CPU OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A300 Safari/602.1\"\n    ];\n    const num = Math.floor(Math.random() * userAgentList.length);\n    return userAgentList[num];\n}\n\n/**\n * 发送一个模拟请求\n */\nfunction sendRequest() {\n    const options = {\n        url: \"http://请求地址\",\n        method: 'POST',\n        gzip: true,\n        headers: {\n            Accept: \"*/*\",\n            \"Accept-Language\": \"zh-CN,zh;q=0.8,gl;q=0.6,zh-TW;q=0.4\",\n            Connection: \"keep-alive\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            Origin: \"http://请求源（服务器域名）\",\n            Referer: \"....\",\n            Host: \"服务器域名,如www.example.com\",\n            Cookie: \"COOKIE_ONE=a;COOKIE_TWO=b\",\n            \"User-Agent\": randomUserAgent()\n        },\n        body: querystring.stringify({\n            \"param.a\": \"xxxx\",\n            \"param.b\": \"xxxx\",\n            \"b\": \"xxxx\",\n        })\n    };\n    request(options, function (error, res, body) {\n        if (error) {\n            console.error(error);\n        } else {\n            console.log(body);\n        }\n    });\n}\n\nsendRequest();\n```\n","slug":"node-note-1","published":1,"updated":"2019-07-12T03:04:31.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld9g002ze8weengq6k24","content":"<h4 id=\"创建一个测试项目\"><a href=\"#创建一个测试项目\" class=\"headerlink\" title=\"创建一个测试项目\"></a>创建一个测试项目</h4><ol>\n<li><p>创建项目目录<br><code>mkdir request-faker</code></p>\n</li>\n<li><p>npm初始化项目（输入项目相关说明）<br><code>npm init</code></p>\n</li>\n<li><p>安装<em>request</em>和<em>querystring</em><br><code>npm install request</code><br><code>npm install querystring</code></p>\n</li>\n<li><p>创建一个测试脚本文件<em>main.js</em></p>\n</li>\n</ol>\n<h4 id=\"相关参考代码\"><a href=\"#相关参考代码\" class=\"headerlink\" title=\"相关参考代码\"></a>相关参考代码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">\"request\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">\"querystring\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 伪造浏览器信息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">randomUserAgent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userAgentList = [</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Mobile Safari/537.36\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Mobile Safari/537.36\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Linux; Android 5.1.1; Nexus 6 Build/LYZ28E) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Mobile Safari/537.36\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_2 like Mac OS X) AppleWebKit/603.2.4 (KHTML, like Gecko) Mobile/14F89;GameHelper\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/603.2.4 (KHTML, like Gecko) Version/10.1.1 Safari/603.2.4\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (iPhone; CPU iPhone OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A300 Safari/602.1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:46.0) Gecko/20100101 Firefox/46.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:46.0) Gecko/20100101 Firefox/46.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Win64; x64; Trident/6.0)\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.3; Win64, x64; Trident/7.0; rv:11.0) like Gecko\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/13.10586\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (iPad; CPU OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A300 Safari/602.1\"</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * userAgentList.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userAgentList[num];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送一个模拟请求</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendRequest</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">        url: <span class=\"string\">\"http://请求地址\"</span>,</span><br><span class=\"line\">        method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">        gzip: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        headers: &#123;</span><br><span class=\"line\">            Accept: <span class=\"string\">\"*/*\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"Accept-Language\"</span>: <span class=\"string\">\"zh-CN,zh;q=0.8,gl;q=0.6,zh-TW;q=0.4\"</span>,</span><br><span class=\"line\">            Connection: <span class=\"string\">\"keep-alive\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/x-www-form-urlencoded\"</span>,</span><br><span class=\"line\">            Origin: <span class=\"string\">\"http://请求源（服务器域名）\"</span>,</span><br><span class=\"line\">            Referer: <span class=\"string\">\"....\"</span>,</span><br><span class=\"line\">            Host: <span class=\"string\">\"服务器域名,如www.example.com\"</span>,</span><br><span class=\"line\">            Cookie: <span class=\"string\">\"COOKIE_ONE=a;COOKIE_TWO=b\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"User-Agent\"</span>: randomUserAgent()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        body: querystring.stringify(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"param.a\"</span>: <span class=\"string\">\"xxxx\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"param.b\"</span>: <span class=\"string\">\"xxxx\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"b\"</span>: <span class=\"string\">\"xxxx\"</span>,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    request(options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, res, body</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(error);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(body);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sendRequest();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"创建一个测试项目\"><a href=\"#创建一个测试项目\" class=\"headerlink\" title=\"创建一个测试项目\"></a>创建一个测试项目</h4><ol>\n<li><p>创建项目目录<br><code>mkdir request-faker</code></p>\n</li>\n<li><p>npm初始化项目（输入项目相关说明）<br><code>npm init</code></p>\n</li>\n<li><p>安装<em>request</em>和<em>querystring</em><br><code>npm install request</code><br><code>npm install querystring</code></p>\n</li>\n<li><p>创建一个测试脚本文件<em>main.js</em></p>\n</li>\n</ol>\n<h4 id=\"相关参考代码\"><a href=\"#相关参考代码\" class=\"headerlink\" title=\"相关参考代码\"></a>相关参考代码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">\"request\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">\"querystring\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 伪造浏览器信息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">randomUserAgent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userAgentList = [</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Mobile Safari/537.36\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Mobile Safari/537.36\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Linux; Android 5.1.1; Nexus 6 Build/LYZ28E) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Mobile Safari/537.36\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_2 like Mac OS X) AppleWebKit/603.2.4 (KHTML, like Gecko) Mobile/14F89;GameHelper\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/603.2.4 (KHTML, like Gecko) Version/10.1.1 Safari/603.2.4\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (iPhone; CPU iPhone OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A300 Safari/602.1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:46.0) Gecko/20100101 Firefox/46.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:46.0) Gecko/20100101 Firefox/46.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Win64; x64; Trident/6.0)\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.3; Win64, x64; Trident/7.0; rv:11.0) like Gecko\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/13.10586\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Mozilla/5.0 (iPad; CPU OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A300 Safari/602.1\"</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * userAgentList.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userAgentList[num];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送一个模拟请求</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendRequest</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">        url: <span class=\"string\">\"http://请求地址\"</span>,</span><br><span class=\"line\">        method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">        gzip: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        headers: &#123;</span><br><span class=\"line\">            Accept: <span class=\"string\">\"*/*\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"Accept-Language\"</span>: <span class=\"string\">\"zh-CN,zh;q=0.8,gl;q=0.6,zh-TW;q=0.4\"</span>,</span><br><span class=\"line\">            Connection: <span class=\"string\">\"keep-alive\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/x-www-form-urlencoded\"</span>,</span><br><span class=\"line\">            Origin: <span class=\"string\">\"http://请求源（服务器域名）\"</span>,</span><br><span class=\"line\">            Referer: <span class=\"string\">\"....\"</span>,</span><br><span class=\"line\">            Host: <span class=\"string\">\"服务器域名,如www.example.com\"</span>,</span><br><span class=\"line\">            Cookie: <span class=\"string\">\"COOKIE_ONE=a;COOKIE_TWO=b\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"User-Agent\"</span>: randomUserAgent()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        body: querystring.stringify(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"param.a\"</span>: <span class=\"string\">\"xxxx\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"param.b\"</span>: <span class=\"string\">\"xxxx\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"b\"</span>: <span class=\"string\">\"xxxx\"</span>,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    request(options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, res, body</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(error);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(body);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sendRequest();</span><br></pre></td></tr></table></figure>\n"},{"title":"php7.2安装","date":"2018-08-08T09:31:06.000Z","_content":"#### 添加新源\n\n`apt-get install software-properties-common python-software-properties`\n\n`sudo add-apt-repository ppa:ondrej/php && sudo apt-get update`\n\n#### 安装php7.2\n\n`sudo apt-get -y install php7.2`\n\n#### 安装php7.2-fpm\n\n`sudo apt-get -y install php7.2-fpm`\n\n#### 如果之前有其他版本PHP，在这边禁用掉\nsudo a2dismod php5\nsudo a2enmod php7.2\n\n#### 基础常用相关拓展安装（请安装）\n\n`sudo -y apt-get install php7.2-mysql php7.2-curl php7.2-json php7.2-mbstring php7.2-xml php7.2-intl`\n\n#### 额外相关拓展（按需安装）\nsudo apt-get install php7.2-gd\nsudo apt-get install php7.2-soap\nsudo apt-get install php7.2-gmp    \nsudo apt-get install php7.2-odbc       \nsudo apt-get install php7.2-pspell     \nsudo apt-get install php7.2-bcmath   \nsudo apt-get install php7.2-enchant    \nsudo apt-get install php7.2-imap       \nsudo apt-get install php7.2-ldap       \nsudo apt-get install php7.2-opcache\nsudo apt-get install php7.2-readline   \nsudo apt-get install php7.2-sqlite3    \nsudo apt-get install php7.2-xmlrpc\nsudo apt-get install php7.2-bz2\nsudo apt-get install php7.2-interbase\nsudo apt-get install php7.2-pgsql      \nsudo apt-get install php7.2-recode     \nsudo apt-get install php7.2-sybase     \nsudo apt-get install php7.2-xsl\nsudo apt-get install php7.2-cgi        \nsudo apt-get install php7.2-dba \nsudo apt-get install php7.2-phpdbg     \nsudo apt-get install php7.2-snmp       \nsudo apt-get install php7.2-tidy       \nsudo apt-get install php7.2-zip\n\n#### 运行/重启/关闭php7.2-fpm\n`service php7.2-fpm start`\n`service php7.2-fpm restart`\n`service php7.2-fpm stop`","source":"_posts/php7-2安装.md","raw":"---\ntitle: php7.2安装\ndate: 2018-08-08 17:31:06\ntags: php\n---\n#### 添加新源\n\n`apt-get install software-properties-common python-software-properties`\n\n`sudo add-apt-repository ppa:ondrej/php && sudo apt-get update`\n\n#### 安装php7.2\n\n`sudo apt-get -y install php7.2`\n\n#### 安装php7.2-fpm\n\n`sudo apt-get -y install php7.2-fpm`\n\n#### 如果之前有其他版本PHP，在这边禁用掉\nsudo a2dismod php5\nsudo a2enmod php7.2\n\n#### 基础常用相关拓展安装（请安装）\n\n`sudo -y apt-get install php7.2-mysql php7.2-curl php7.2-json php7.2-mbstring php7.2-xml php7.2-intl`\n\n#### 额外相关拓展（按需安装）\nsudo apt-get install php7.2-gd\nsudo apt-get install php7.2-soap\nsudo apt-get install php7.2-gmp    \nsudo apt-get install php7.2-odbc       \nsudo apt-get install php7.2-pspell     \nsudo apt-get install php7.2-bcmath   \nsudo apt-get install php7.2-enchant    \nsudo apt-get install php7.2-imap       \nsudo apt-get install php7.2-ldap       \nsudo apt-get install php7.2-opcache\nsudo apt-get install php7.2-readline   \nsudo apt-get install php7.2-sqlite3    \nsudo apt-get install php7.2-xmlrpc\nsudo apt-get install php7.2-bz2\nsudo apt-get install php7.2-interbase\nsudo apt-get install php7.2-pgsql      \nsudo apt-get install php7.2-recode     \nsudo apt-get install php7.2-sybase     \nsudo apt-get install php7.2-xsl\nsudo apt-get install php7.2-cgi        \nsudo apt-get install php7.2-dba \nsudo apt-get install php7.2-phpdbg     \nsudo apt-get install php7.2-snmp       \nsudo apt-get install php7.2-tidy       \nsudo apt-get install php7.2-zip\n\n#### 运行/重启/关闭php7.2-fpm\n`service php7.2-fpm start`\n`service php7.2-fpm restart`\n`service php7.2-fpm stop`","slug":"php7-2安装","published":1,"updated":"2019-07-05T04:24:05.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld9h0032e8wevn0wnbob","content":"<h4 id=\"添加新源\"><a href=\"#添加新源\" class=\"headerlink\" title=\"添加新源\"></a>添加新源</h4><p><code>apt-get install software-properties-common python-software-properties</code></p>\n<p><code>sudo add-apt-repository ppa:ondrej/php &amp;&amp; sudo apt-get update</code></p>\n<h4 id=\"安装php7-2\"><a href=\"#安装php7-2\" class=\"headerlink\" title=\"安装php7.2\"></a>安装php7.2</h4><p><code>sudo apt-get -y install php7.2</code></p>\n<h4 id=\"安装php7-2-fpm\"><a href=\"#安装php7-2-fpm\" class=\"headerlink\" title=\"安装php7.2-fpm\"></a>安装php7.2-fpm</h4><p><code>sudo apt-get -y install php7.2-fpm</code></p>\n<h4 id=\"如果之前有其他版本PHP，在这边禁用掉\"><a href=\"#如果之前有其他版本PHP，在这边禁用掉\" class=\"headerlink\" title=\"如果之前有其他版本PHP，在这边禁用掉\"></a>如果之前有其他版本PHP，在这边禁用掉</h4><p>sudo a2dismod php5<br>sudo a2enmod php7.2</p>\n<h4 id=\"基础常用相关拓展安装（请安装）\"><a href=\"#基础常用相关拓展安装（请安装）\" class=\"headerlink\" title=\"基础常用相关拓展安装（请安装）\"></a>基础常用相关拓展安装（请安装）</h4><p><code>sudo -y apt-get install php7.2-mysql php7.2-curl php7.2-json php7.2-mbstring php7.2-xml php7.2-intl</code></p>\n<h4 id=\"额外相关拓展（按需安装）\"><a href=\"#额外相关拓展（按需安装）\" class=\"headerlink\" title=\"额外相关拓展（按需安装）\"></a>额外相关拓展（按需安装）</h4><p>sudo apt-get install php7.2-gd<br>sudo apt-get install php7.2-soap<br>sudo apt-get install php7.2-gmp<br>sudo apt-get install php7.2-odbc<br>sudo apt-get install php7.2-pspell<br>sudo apt-get install php7.2-bcmath<br>sudo apt-get install php7.2-enchant<br>sudo apt-get install php7.2-imap<br>sudo apt-get install php7.2-ldap<br>sudo apt-get install php7.2-opcache<br>sudo apt-get install php7.2-readline<br>sudo apt-get install php7.2-sqlite3<br>sudo apt-get install php7.2-xmlrpc<br>sudo apt-get install php7.2-bz2<br>sudo apt-get install php7.2-interbase<br>sudo apt-get install php7.2-pgsql<br>sudo apt-get install php7.2-recode<br>sudo apt-get install php7.2-sybase<br>sudo apt-get install php7.2-xsl<br>sudo apt-get install php7.2-cgi<br>sudo apt-get install php7.2-dba<br>sudo apt-get install php7.2-phpdbg<br>sudo apt-get install php7.2-snmp<br>sudo apt-get install php7.2-tidy<br>sudo apt-get install php7.2-zip</p>\n<h4 id=\"运行-重启-关闭php7-2-fpm\"><a href=\"#运行-重启-关闭php7-2-fpm\" class=\"headerlink\" title=\"运行/重启/关闭php7.2-fpm\"></a>运行/重启/关闭php7.2-fpm</h4><p><code>service php7.2-fpm start</code><br><code>service php7.2-fpm restart</code><br><code>service php7.2-fpm stop</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"添加新源\"><a href=\"#添加新源\" class=\"headerlink\" title=\"添加新源\"></a>添加新源</h4><p><code>apt-get install software-properties-common python-software-properties</code></p>\n<p><code>sudo add-apt-repository ppa:ondrej/php &amp;&amp; sudo apt-get update</code></p>\n<h4 id=\"安装php7-2\"><a href=\"#安装php7-2\" class=\"headerlink\" title=\"安装php7.2\"></a>安装php7.2</h4><p><code>sudo apt-get -y install php7.2</code></p>\n<h4 id=\"安装php7-2-fpm\"><a href=\"#安装php7-2-fpm\" class=\"headerlink\" title=\"安装php7.2-fpm\"></a>安装php7.2-fpm</h4><p><code>sudo apt-get -y install php7.2-fpm</code></p>\n<h4 id=\"如果之前有其他版本PHP，在这边禁用掉\"><a href=\"#如果之前有其他版本PHP，在这边禁用掉\" class=\"headerlink\" title=\"如果之前有其他版本PHP，在这边禁用掉\"></a>如果之前有其他版本PHP，在这边禁用掉</h4><p>sudo a2dismod php5<br>sudo a2enmod php7.2</p>\n<h4 id=\"基础常用相关拓展安装（请安装）\"><a href=\"#基础常用相关拓展安装（请安装）\" class=\"headerlink\" title=\"基础常用相关拓展安装（请安装）\"></a>基础常用相关拓展安装（请安装）</h4><p><code>sudo -y apt-get install php7.2-mysql php7.2-curl php7.2-json php7.2-mbstring php7.2-xml php7.2-intl</code></p>\n<h4 id=\"额外相关拓展（按需安装）\"><a href=\"#额外相关拓展（按需安装）\" class=\"headerlink\" title=\"额外相关拓展（按需安装）\"></a>额外相关拓展（按需安装）</h4><p>sudo apt-get install php7.2-gd<br>sudo apt-get install php7.2-soap<br>sudo apt-get install php7.2-gmp<br>sudo apt-get install php7.2-odbc<br>sudo apt-get install php7.2-pspell<br>sudo apt-get install php7.2-bcmath<br>sudo apt-get install php7.2-enchant<br>sudo apt-get install php7.2-imap<br>sudo apt-get install php7.2-ldap<br>sudo apt-get install php7.2-opcache<br>sudo apt-get install php7.2-readline<br>sudo apt-get install php7.2-sqlite3<br>sudo apt-get install php7.2-xmlrpc<br>sudo apt-get install php7.2-bz2<br>sudo apt-get install php7.2-interbase<br>sudo apt-get install php7.2-pgsql<br>sudo apt-get install php7.2-recode<br>sudo apt-get install php7.2-sybase<br>sudo apt-get install php7.2-xsl<br>sudo apt-get install php7.2-cgi<br>sudo apt-get install php7.2-dba<br>sudo apt-get install php7.2-phpdbg<br>sudo apt-get install php7.2-snmp<br>sudo apt-get install php7.2-tidy<br>sudo apt-get install php7.2-zip</p>\n<h4 id=\"运行-重启-关闭php7-2-fpm\"><a href=\"#运行-重启-关闭php7-2-fpm\" class=\"headerlink\" title=\"运行/重启/关闭php7.2-fpm\"></a>运行/重启/关闭php7.2-fpm</h4><p><code>service php7.2-fpm start</code><br><code>service php7.2-fpm restart</code><br><code>service php7.2-fpm stop</code></p>\n"},{"title":"RxJS笔记","date":"2018-11-28T08:32:00.000Z","_content":"\n#### 概览\nRxJS 是使用 Observables 的响应式编程的库，它使编写异步或基于回调的代码更容易。\n[官方文档](https://rxjs-dev.firebaseapp.com)\n<!-- more -->\n\n#### 安装\n1. `npm install rxjs`\n2. 我们在之webpack-example前项目中安装它\n\n#### 可观察对象（Observable）\n1. 很多第三方库可能会在自己的异步耗时方法中返回一个可观察对象用来实时监听完成的进度\n\n####  订阅对象 (Subscription)\n什么是订阅？ 订阅是表示可支配资源的对象，通常是Observable的执行。 订阅有一个重要的方法，取消订阅，不带参数，只是处理订阅所持有的资源。 在以前版本的RxJS中，Subscription被称为“Disposable”。\n\n```typescript\n\n// subscription 就是一个返回的订阅对象\nconst subscription = this.request.get('/user/detail').subscrible(res=>{\n    console.log('打印用户信息', res);\n});\n\n// 如果我不需要获取消息了，我可以通过使用订阅对象中的unsubscrible()方法取消订阅(如果取消订阅时请求还没完成，那么这个请求如果完成了，我们也收不到消息了)\nsubscription.unsubscrible();\n```\n\n#### 观察者（Observer）\n用来接受数据的对象，里面有成功方法（complete），错误方法(error)，接受方法(next)\n\n```typescript\nconst observer = {\n\n    next : (res) => {\n        // 当执行next的时候执行\n    }，\n    complete : () => {\n        // 当执行complete的时候执行\n    }，\n    error : (errorMsg) => {\n        // 当执行error的时候执行\n    }\n}\n};\n// 可以作为subscribe的传入参数，作为监听next,complete,error回调通知\nthis.request.get('/user/detail').subscrible(observer);\n\n// subscribe方法可以有很多写法\nthis.request.get('/user/detail').subscrible({\n    next : (res) => {\n        // 当执行next的时候执行\n    }，\n    complete : () => {\n        // 当执行complete的时候执行\n    }，\n    error : (errorMsg) => {\n        // 当执行error的时候执行\n    }\n});\n\nthis.request.get('/user/detail').subscrible(res=>{\n    // 这里对应的是next方法内容\n});\n\nthis.request.get('user/detail').subscrible(\n    (res)=>{\n        // next 消息\n    },\n    (errorMsg)=>{\n        // error 消息\n    },\n    ()=>{\n        // complete 消息\n    }\n)\n```\n\n#### 内置的生产观察者的方法\n\n1. of 立即执行的观察对象\n`of( 要发送的数据：any )`\n\n2. interval 定时发送信号\n`intervel( 间隔的毫秒数：number )`\n```typescript\nintervel(1000).subscrible(res=>{\n    // 每秒打印一次，依次从0,1,2,3，开始\n    console.log(res);\n});\n\n// 取消订阅可以终止打印\nconst subscription = intervel(1000).subscrible(res=>{\n    // 每秒打印一次，依次从0,1,2,3，开始\n    console.log(res);\n\n    if(满足某种条件时){\n        // 如果要取消订阅（终止打印执行了）\n        subscription.unsubscrible();\n    }\n});\n```\n\n3. timeout 等待一定时间发送一个数据\n`timeout( 等待的毫秒数：number )`\n```typescript\ntimeout(1000).subscrible(res=>{\n    // 一秒后输出0\n    console.log(res);\n});\n```\n\n#### 操作符（工具方法）\n\n1. skip(跳过的次数：number) 忽略指定次数的消息\n```typescript\nintervel(1000).pipe(\n\n    skip(1)\n\n).subscrible(res=>{\n    // 第一次输出的0被跳过了\n    // 每秒打印一次，依次从1,2,3，开始\n    console.log(res);\n});\n```\n\n2. skipWhile(res=>{ 返回一个true：确认要跳过这个消息,false：不要跳过这个消息 }) 忽略掉我不要的消息\n```typescript\nthis.activatedRoute.paramMap.\n        pipe(\n            skipWhile(params => !params.has('id'))\n        )\n        .subscribe(params => {\n            // 打印参数id\n            console.log(params.key('id'));\n        });\n\n```\n\n3. 把当前可观察对象转化成另一个观察对象（替换了之前的可观察对象）\n```typescript\nthis.activatedRoute.paramMap.\n        pipe(\n            skipWhile(params => !params.has('id')),\n            switchMap(params=>{\n                const id = params.get('id');\n                return this.goodsService.getGoods(id)\n            })\n        )\n        .subscribe(goods => {\n            // 打印参数id\n            console.log(goods);\n        });\n\n```\n\n\n3. tap(res=>{ 要做的操作，不用返回任何值 }) \n```typescript\nintervel(1000).pipe(\n    // 我要跳过第一条消息\n    skip(1),\n    // 每次我这里接受到一条消息我都会做一些事情，不会干扰后面的人\n    tap(res=>{\n\n    })\n)\n.subscrible(res=>{\n    // 第一次输出的0被跳过了\n    // 每秒打印一次，依次从1,2,3，开始\n    console.log(res);\n});\n```\n\n4. map(res=>{  返回转换好的数据 })  格式化消息内容\n```typescript\nof({id: 0, name: '张三'}).pipe(\n\n    map(res=>{\n        return {\n            uid: res.id,\n            userName: res.name\n        };\n    })\n\n).subscrible(res=>{\n    // 打印用户信息\n    console.log(res);\n});\n```\n\n5. filter(res=>{ 返回一个true：确认要跳过这个消息,false：不要跳过这个消息 }) 过滤掉不要的消息\n```typescript\nintervel(1000)\n.pipe(\n    \n    // 我只要大于100的值\n    filter(res => {\n        return res>=100;\n    })\n\n)\n.subscrible(res=>{\n    // 100,101,102.。。\n    console.log(res);\n});\n```\n","source":"_posts/rxjs-note-1.md","raw":"---\ntitle: RxJS笔记\ndate: 2018-11-28 16:32:00\ntags: rxjs\ncategories: Web开发\n---\n\n#### 概览\nRxJS 是使用 Observables 的响应式编程的库，它使编写异步或基于回调的代码更容易。\n[官方文档](https://rxjs-dev.firebaseapp.com)\n<!-- more -->\n\n#### 安装\n1. `npm install rxjs`\n2. 我们在之webpack-example前项目中安装它\n\n#### 可观察对象（Observable）\n1. 很多第三方库可能会在自己的异步耗时方法中返回一个可观察对象用来实时监听完成的进度\n\n####  订阅对象 (Subscription)\n什么是订阅？ 订阅是表示可支配资源的对象，通常是Observable的执行。 订阅有一个重要的方法，取消订阅，不带参数，只是处理订阅所持有的资源。 在以前版本的RxJS中，Subscription被称为“Disposable”。\n\n```typescript\n\n// subscription 就是一个返回的订阅对象\nconst subscription = this.request.get('/user/detail').subscrible(res=>{\n    console.log('打印用户信息', res);\n});\n\n// 如果我不需要获取消息了，我可以通过使用订阅对象中的unsubscrible()方法取消订阅(如果取消订阅时请求还没完成，那么这个请求如果完成了，我们也收不到消息了)\nsubscription.unsubscrible();\n```\n\n#### 观察者（Observer）\n用来接受数据的对象，里面有成功方法（complete），错误方法(error)，接受方法(next)\n\n```typescript\nconst observer = {\n\n    next : (res) => {\n        // 当执行next的时候执行\n    }，\n    complete : () => {\n        // 当执行complete的时候执行\n    }，\n    error : (errorMsg) => {\n        // 当执行error的时候执行\n    }\n}\n};\n// 可以作为subscribe的传入参数，作为监听next,complete,error回调通知\nthis.request.get('/user/detail').subscrible(observer);\n\n// subscribe方法可以有很多写法\nthis.request.get('/user/detail').subscrible({\n    next : (res) => {\n        // 当执行next的时候执行\n    }，\n    complete : () => {\n        // 当执行complete的时候执行\n    }，\n    error : (errorMsg) => {\n        // 当执行error的时候执行\n    }\n});\n\nthis.request.get('/user/detail').subscrible(res=>{\n    // 这里对应的是next方法内容\n});\n\nthis.request.get('user/detail').subscrible(\n    (res)=>{\n        // next 消息\n    },\n    (errorMsg)=>{\n        // error 消息\n    },\n    ()=>{\n        // complete 消息\n    }\n)\n```\n\n#### 内置的生产观察者的方法\n\n1. of 立即执行的观察对象\n`of( 要发送的数据：any )`\n\n2. interval 定时发送信号\n`intervel( 间隔的毫秒数：number )`\n```typescript\nintervel(1000).subscrible(res=>{\n    // 每秒打印一次，依次从0,1,2,3，开始\n    console.log(res);\n});\n\n// 取消订阅可以终止打印\nconst subscription = intervel(1000).subscrible(res=>{\n    // 每秒打印一次，依次从0,1,2,3，开始\n    console.log(res);\n\n    if(满足某种条件时){\n        // 如果要取消订阅（终止打印执行了）\n        subscription.unsubscrible();\n    }\n});\n```\n\n3. timeout 等待一定时间发送一个数据\n`timeout( 等待的毫秒数：number )`\n```typescript\ntimeout(1000).subscrible(res=>{\n    // 一秒后输出0\n    console.log(res);\n});\n```\n\n#### 操作符（工具方法）\n\n1. skip(跳过的次数：number) 忽略指定次数的消息\n```typescript\nintervel(1000).pipe(\n\n    skip(1)\n\n).subscrible(res=>{\n    // 第一次输出的0被跳过了\n    // 每秒打印一次，依次从1,2,3，开始\n    console.log(res);\n});\n```\n\n2. skipWhile(res=>{ 返回一个true：确认要跳过这个消息,false：不要跳过这个消息 }) 忽略掉我不要的消息\n```typescript\nthis.activatedRoute.paramMap.\n        pipe(\n            skipWhile(params => !params.has('id'))\n        )\n        .subscribe(params => {\n            // 打印参数id\n            console.log(params.key('id'));\n        });\n\n```\n\n3. 把当前可观察对象转化成另一个观察对象（替换了之前的可观察对象）\n```typescript\nthis.activatedRoute.paramMap.\n        pipe(\n            skipWhile(params => !params.has('id')),\n            switchMap(params=>{\n                const id = params.get('id');\n                return this.goodsService.getGoods(id)\n            })\n        )\n        .subscribe(goods => {\n            // 打印参数id\n            console.log(goods);\n        });\n\n```\n\n\n3. tap(res=>{ 要做的操作，不用返回任何值 }) \n```typescript\nintervel(1000).pipe(\n    // 我要跳过第一条消息\n    skip(1),\n    // 每次我这里接受到一条消息我都会做一些事情，不会干扰后面的人\n    tap(res=>{\n\n    })\n)\n.subscrible(res=>{\n    // 第一次输出的0被跳过了\n    // 每秒打印一次，依次从1,2,3，开始\n    console.log(res);\n});\n```\n\n4. map(res=>{  返回转换好的数据 })  格式化消息内容\n```typescript\nof({id: 0, name: '张三'}).pipe(\n\n    map(res=>{\n        return {\n            uid: res.id,\n            userName: res.name\n        };\n    })\n\n).subscrible(res=>{\n    // 打印用户信息\n    console.log(res);\n});\n```\n\n5. filter(res=>{ 返回一个true：确认要跳过这个消息,false：不要跳过这个消息 }) 过滤掉不要的消息\n```typescript\nintervel(1000)\n.pipe(\n    \n    // 我只要大于100的值\n    filter(res => {\n        return res>=100;\n    })\n\n)\n.subscrible(res=>{\n    // 100,101,102.。。\n    console.log(res);\n});\n```\n","slug":"rxjs-note-1","published":1,"updated":"2019-07-09T09:56:31.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld9j0035e8webi6dsuu5","content":"<h4 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h4><p>RxJS 是使用 Observables 的响应式编程的库，它使编写异步或基于回调的代码更容易。<br><a href=\"https://rxjs-dev.firebaseapp.com\" target=\"_blank\" rel=\"noopener\">官方文档</a><br><a id=\"more\"></a></p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ol>\n<li><code>npm install rxjs</code></li>\n<li>我们在之webpack-example前项目中安装它</li>\n</ol>\n<h4 id=\"可观察对象（Observable）\"><a href=\"#可观察对象（Observable）\" class=\"headerlink\" title=\"可观察对象（Observable）\"></a>可观察对象（Observable）</h4><ol>\n<li>很多第三方库可能会在自己的异步耗时方法中返回一个可观察对象用来实时监听完成的进度</li>\n</ol>\n<h4 id=\"订阅对象-Subscription\"><a href=\"#订阅对象-Subscription\" class=\"headerlink\" title=\"订阅对象 (Subscription)\"></a>订阅对象 (Subscription)</h4><p>什么是订阅？ 订阅是表示可支配资源的对象，通常是Observable的执行。 订阅有一个重要的方法，取消订阅，不带参数，只是处理订阅所持有的资源。 在以前版本的RxJS中，Subscription被称为“Disposable”。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// subscription 就是一个返回的订阅对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> subscription = <span class=\"keyword\">this</span>.request.get(<span class=\"string\">'/user/detail'</span>).subscrible(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'打印用户信息'</span>, res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果我不需要获取消息了，我可以通过使用订阅对象中的unsubscrible()方法取消订阅(如果取消订阅时请求还没完成，那么这个请求如果完成了，我们也收不到消息了)</span></span><br><span class=\"line\">subscription.unsubscrible();</span><br></pre></td></tr></table></figure>\n<h4 id=\"观察者（Observer）\"><a href=\"#观察者（Observer）\" class=\"headerlink\" title=\"观察者（Observer）\"></a>观察者（Observer）</h4><p>用来接受数据的对象，里面有成功方法（complete），错误方法(error)，接受方法(next)</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> observer = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    next : <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当执行next的时候执行</span></span><br><span class=\"line\">    &#125;，</span><br><span class=\"line\">    complete : <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当执行complete的时候执行</span></span><br><span class=\"line\">    &#125;，</span><br><span class=\"line\">    error : <span class=\"function\">(<span class=\"params\">errorMsg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当执行error的时候执行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 可以作为subscribe的传入参数，作为监听next,complete,error回调通知</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.request.get(<span class=\"string\">'/user/detail'</span>).subscrible(observer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// subscribe方法可以有很多写法</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.request.get(<span class=\"string\">'/user/detail'</span>).subscrible(&#123;</span><br><span class=\"line\">    next : <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当执行next的时候执行</span></span><br><span class=\"line\">    &#125;，</span><br><span class=\"line\">    complete : <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当执行complete的时候执行</span></span><br><span class=\"line\">    &#125;，</span><br><span class=\"line\">    error : <span class=\"function\">(<span class=\"params\">errorMsg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当执行error的时候执行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.request.get(<span class=\"string\">'/user/detail'</span>).subscrible(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里对应的是next方法内容</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.request.get(<span class=\"string\">'user/detail'</span>).subscrible(</span><br><span class=\"line\">    (res)=&gt;&#123;</span><br><span class=\"line\">        <span class=\"comment\">// next 消息</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    (errorMsg)=&gt;&#123;</span><br><span class=\"line\">        <span class=\"comment\">// error 消息</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ()=&gt;&#123;</span><br><span class=\"line\">        <span class=\"comment\">// complete 消息</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h4 id=\"内置的生产观察者的方法\"><a href=\"#内置的生产观察者的方法\" class=\"headerlink\" title=\"内置的生产观察者的方法\"></a>内置的生产观察者的方法</h4><ol>\n<li><p>of 立即执行的观察对象<br><code>of( 要发送的数据：any )</code></p>\n</li>\n<li><p>interval 定时发送信号<br><code>intervel( 间隔的毫秒数：number )</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intervel(<span class=\"number\">1000</span>).subscrible(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 每秒打印一次，依次从0,1,2,3，开始</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取消订阅可以终止打印</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> subscription = intervel(<span class=\"number\">1000</span>).subscrible(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 每秒打印一次，依次从0,1,2,3，开始</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(满足某种条件时)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果要取消订阅（终止打印执行了）</span></span><br><span class=\"line\">        subscription.unsubscrible();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>timeout 等待一定时间发送一个数据<br><code>timeout( 等待的毫秒数：number )</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timeout(<span class=\"number\">1000</span>).subscrible(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 一秒后输出0</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"操作符（工具方法）\"><a href=\"#操作符（工具方法）\" class=\"headerlink\" title=\"操作符（工具方法）\"></a>操作符（工具方法）</h4><ol>\n<li><p>skip(跳过的次数：number) 忽略指定次数的消息</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intervel(<span class=\"number\">1000</span>).pipe(</span><br><span class=\"line\"></span><br><span class=\"line\">    skip(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">).subscrible(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一次输出的0被跳过了</span></span><br><span class=\"line\">    <span class=\"comment\">// 每秒打印一次，依次从1,2,3，开始</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>skipWhile(res=&gt;{ 返回一个true：确认要跳过这个消息,false：不要跳过这个消息 }) 忽略掉我不要的消息</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.activatedRoute.paramMap.</span><br><span class=\"line\">        pipe(</span><br><span class=\"line\">            skipWhile(<span class=\"function\"><span class=\"params\">params</span> =&gt;</span> !params.has(<span class=\"string\">'id'</span>))</span><br><span class=\"line\">        )</span><br><span class=\"line\">        .subscribe(<span class=\"function\"><span class=\"params\">params</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 打印参数id</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(params.key(<span class=\"string\">'id'</span>));</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把当前可观察对象转化成另一个观察对象（替换了之前的可观察对象）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.activatedRoute.paramMap.</span><br><span class=\"line\">        pipe(</span><br><span class=\"line\">            skipWhile(<span class=\"function\"><span class=\"params\">params</span> =&gt;</span> !params.has(<span class=\"string\">'id'</span>)),</span><br><span class=\"line\">            switchMap(<span class=\"function\"><span class=\"params\">params</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> id = params.get(<span class=\"string\">'id'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.goodsService.getGoods(id)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        )</span><br><span class=\"line\">        .subscribe(<span class=\"function\"><span class=\"params\">goods</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 打印参数id</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(goods);</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>tap(res=&gt;{ 要做的操作，不用返回任何值 }) </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intervel(<span class=\"number\">1000</span>).pipe(</span><br><span class=\"line\">    <span class=\"comment\">// 我要跳过第一条消息</span></span><br><span class=\"line\">    skip(<span class=\"number\">1</span>),</span><br><span class=\"line\">    <span class=\"comment\">// 每次我这里接受到一条消息我都会做一些事情，不会干扰后面的人</span></span><br><span class=\"line\">    tap(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">)</span><br><span class=\"line\">.subscrible(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一次输出的0被跳过了</span></span><br><span class=\"line\">    <span class=\"comment\">// 每秒打印一次，依次从1,2,3，开始</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>map(res=&gt;{  返回转换好的数据 })  格式化消息内容</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">of(&#123;id: <span class=\"number\">0</span>, name: <span class=\"string\">'张三'</span>&#125;).pipe(</span><br><span class=\"line\"></span><br><span class=\"line\">    map(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            uid: res.id,</span><br><span class=\"line\">            userName: res.name</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">).subscrible(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打印用户信息</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>filter(res=&gt;{ 返回一个true：确认要跳过这个消息,false：不要跳过这个消息 }) 过滤掉不要的消息</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intervel(<span class=\"number\">1000</span>)</span><br><span class=\"line\">.pipe(</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 我只要大于100的值</span></span><br><span class=\"line\">    filter(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res&gt;=<span class=\"number\">100</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\">.subscrible(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 100,101,102.。。</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h4 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h4><p>RxJS 是使用 Observables 的响应式编程的库，它使编写异步或基于回调的代码更容易。<br><a href=\"https://rxjs-dev.firebaseapp.com\" target=\"_blank\" rel=\"noopener\">官方文档</a><br>","more":"</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ol>\n<li><code>npm install rxjs</code></li>\n<li>我们在之webpack-example前项目中安装它</li>\n</ol>\n<h4 id=\"可观察对象（Observable）\"><a href=\"#可观察对象（Observable）\" class=\"headerlink\" title=\"可观察对象（Observable）\"></a>可观察对象（Observable）</h4><ol>\n<li>很多第三方库可能会在自己的异步耗时方法中返回一个可观察对象用来实时监听完成的进度</li>\n</ol>\n<h4 id=\"订阅对象-Subscription\"><a href=\"#订阅对象-Subscription\" class=\"headerlink\" title=\"订阅对象 (Subscription)\"></a>订阅对象 (Subscription)</h4><p>什么是订阅？ 订阅是表示可支配资源的对象，通常是Observable的执行。 订阅有一个重要的方法，取消订阅，不带参数，只是处理订阅所持有的资源。 在以前版本的RxJS中，Subscription被称为“Disposable”。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// subscription 就是一个返回的订阅对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> subscription = <span class=\"keyword\">this</span>.request.get(<span class=\"string\">'/user/detail'</span>).subscrible(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'打印用户信息'</span>, res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果我不需要获取消息了，我可以通过使用订阅对象中的unsubscrible()方法取消订阅(如果取消订阅时请求还没完成，那么这个请求如果完成了，我们也收不到消息了)</span></span><br><span class=\"line\">subscription.unsubscrible();</span><br></pre></td></tr></table></figure>\n<h4 id=\"观察者（Observer）\"><a href=\"#观察者（Observer）\" class=\"headerlink\" title=\"观察者（Observer）\"></a>观察者（Observer）</h4><p>用来接受数据的对象，里面有成功方法（complete），错误方法(error)，接受方法(next)</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> observer = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    next : <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当执行next的时候执行</span></span><br><span class=\"line\">    &#125;，</span><br><span class=\"line\">    complete : <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当执行complete的时候执行</span></span><br><span class=\"line\">    &#125;，</span><br><span class=\"line\">    error : <span class=\"function\">(<span class=\"params\">errorMsg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当执行error的时候执行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 可以作为subscribe的传入参数，作为监听next,complete,error回调通知</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.request.get(<span class=\"string\">'/user/detail'</span>).subscrible(observer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// subscribe方法可以有很多写法</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.request.get(<span class=\"string\">'/user/detail'</span>).subscrible(&#123;</span><br><span class=\"line\">    next : <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当执行next的时候执行</span></span><br><span class=\"line\">    &#125;，</span><br><span class=\"line\">    complete : <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当执行complete的时候执行</span></span><br><span class=\"line\">    &#125;，</span><br><span class=\"line\">    error : <span class=\"function\">(<span class=\"params\">errorMsg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当执行error的时候执行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.request.get(<span class=\"string\">'/user/detail'</span>).subscrible(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里对应的是next方法内容</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.request.get(<span class=\"string\">'user/detail'</span>).subscrible(</span><br><span class=\"line\">    (res)=&gt;&#123;</span><br><span class=\"line\">        <span class=\"comment\">// next 消息</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    (errorMsg)=&gt;&#123;</span><br><span class=\"line\">        <span class=\"comment\">// error 消息</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ()=&gt;&#123;</span><br><span class=\"line\">        <span class=\"comment\">// complete 消息</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h4 id=\"内置的生产观察者的方法\"><a href=\"#内置的生产观察者的方法\" class=\"headerlink\" title=\"内置的生产观察者的方法\"></a>内置的生产观察者的方法</h4><ol>\n<li><p>of 立即执行的观察对象<br><code>of( 要发送的数据：any )</code></p>\n</li>\n<li><p>interval 定时发送信号<br><code>intervel( 间隔的毫秒数：number )</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intervel(<span class=\"number\">1000</span>).subscrible(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 每秒打印一次，依次从0,1,2,3，开始</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取消订阅可以终止打印</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> subscription = intervel(<span class=\"number\">1000</span>).subscrible(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 每秒打印一次，依次从0,1,2,3，开始</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(满足某种条件时)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果要取消订阅（终止打印执行了）</span></span><br><span class=\"line\">        subscription.unsubscrible();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>timeout 等待一定时间发送一个数据<br><code>timeout( 等待的毫秒数：number )</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timeout(<span class=\"number\">1000</span>).subscrible(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 一秒后输出0</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"操作符（工具方法）\"><a href=\"#操作符（工具方法）\" class=\"headerlink\" title=\"操作符（工具方法）\"></a>操作符（工具方法）</h4><ol>\n<li><p>skip(跳过的次数：number) 忽略指定次数的消息</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intervel(<span class=\"number\">1000</span>).pipe(</span><br><span class=\"line\"></span><br><span class=\"line\">    skip(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">).subscrible(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一次输出的0被跳过了</span></span><br><span class=\"line\">    <span class=\"comment\">// 每秒打印一次，依次从1,2,3，开始</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>skipWhile(res=&gt;{ 返回一个true：确认要跳过这个消息,false：不要跳过这个消息 }) 忽略掉我不要的消息</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.activatedRoute.paramMap.</span><br><span class=\"line\">        pipe(</span><br><span class=\"line\">            skipWhile(<span class=\"function\"><span class=\"params\">params</span> =&gt;</span> !params.has(<span class=\"string\">'id'</span>))</span><br><span class=\"line\">        )</span><br><span class=\"line\">        .subscribe(<span class=\"function\"><span class=\"params\">params</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 打印参数id</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(params.key(<span class=\"string\">'id'</span>));</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把当前可观察对象转化成另一个观察对象（替换了之前的可观察对象）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.activatedRoute.paramMap.</span><br><span class=\"line\">        pipe(</span><br><span class=\"line\">            skipWhile(<span class=\"function\"><span class=\"params\">params</span> =&gt;</span> !params.has(<span class=\"string\">'id'</span>)),</span><br><span class=\"line\">            switchMap(<span class=\"function\"><span class=\"params\">params</span>=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> id = params.get(<span class=\"string\">'id'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.goodsService.getGoods(id)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        )</span><br><span class=\"line\">        .subscribe(<span class=\"function\"><span class=\"params\">goods</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 打印参数id</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(goods);</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>tap(res=&gt;{ 要做的操作，不用返回任何值 }) </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intervel(<span class=\"number\">1000</span>).pipe(</span><br><span class=\"line\">    <span class=\"comment\">// 我要跳过第一条消息</span></span><br><span class=\"line\">    skip(<span class=\"number\">1</span>),</span><br><span class=\"line\">    <span class=\"comment\">// 每次我这里接受到一条消息我都会做一些事情，不会干扰后面的人</span></span><br><span class=\"line\">    tap(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">)</span><br><span class=\"line\">.subscrible(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一次输出的0被跳过了</span></span><br><span class=\"line\">    <span class=\"comment\">// 每秒打印一次，依次从1,2,3，开始</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>map(res=&gt;{  返回转换好的数据 })  格式化消息内容</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">of(&#123;id: <span class=\"number\">0</span>, name: <span class=\"string\">'张三'</span>&#125;).pipe(</span><br><span class=\"line\"></span><br><span class=\"line\">    map(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            uid: res.id,</span><br><span class=\"line\">            userName: res.name</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">).subscrible(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打印用户信息</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>filter(res=&gt;{ 返回一个true：确认要跳过这个消息,false：不要跳过这个消息 }) 过滤掉不要的消息</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intervel(<span class=\"number\">1000</span>)</span><br><span class=\"line\">.pipe(</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 我只要大于100的值</span></span><br><span class=\"line\">    filter(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res&gt;=<span class=\"number\">100</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\">.subscrible(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 100,101,102.。。</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"PHP单元测试","date":"2018-12-12T10:37:40.000Z","_content":"\n## 说明\n单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。对于单元测试中单元的含义，一般来说，要根据实际情况去判定其具体含义，如C语言中单元指一个函数，Java里单元指一个类，图形化的软件中可以指一个窗口或一个菜单等。总的来说，单元就是人为规定的最小的被测功能模块。单元测试是在软件开发过程中要进行的最低级别的测试活动，软件的独立单元将在与程序的其他部分相隔离的情况下进行测试。\n\n单元测试（模块测试）是开发者编写的一小段代码，用于检验被测代码的一个很小的、很明确的功能是否正确。通常而言，一个单元测试是用于判断某个特定条件（或者场景）下某个特定函数的行为。例如，你可能把一个很大的值放入一个有序list 中去，然后确认该值出现在list 的尾部。或者，你可能会从字符串中删除匹配某种模式的字符，然后确认字符串确实不再包含这些字符了。\n\n\n## PHP Unit\n1. 官方网站 https://phpunit.readthedocs.io/zh_CN/latest/database.html\n\n2. 测试文件上传\n```php\n<?php\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Foundation\\Testing\\DatabaseTransactions;\nuse Faker\\Factory;\nuse Illuminate\\Http\\UploadedFile;\nuse Illuminate\\Support\\Facades\\Storage;\nclass ToolTest extends TestCase\n{\n    /**\n     * 测试文件上传\n     *\n     * @return array\n     */\n    public function testUpload()\n    {\n        $this->call('POST', 'webblog/tools-ui/upload', [], [], ['file' => UploadedFile::fake()->image(md5(time()) . '.jpg')]);\n        $this->createHtml(__FUNCTION__);\n        $this->assertResponseOk();\n        $apiData = json_decode($this->response->getContent(), true);\n        $this->log('info', __class__ . '::' . __FUNCTION__, $apiData);\n        $this->assertEquals($apiData['result'], true);\n        return $apiData['datas'];\n    }\n}\n```\n\n3. \n```php\n<?php\nuse Laravel\\Lumen\\Testing\\DatabaseMigrations;\nuse Laravel\\Lumen\\Testing\\DatabaseTransactions;\nuse Illuminate\\Support\\Facades\\Facade;\nclass ArticleTest extends TestCase\n{\n    use DatabaseTransactions;\n\n    /**\n     * 测试添加文章标签接口\n     *\n     * @return array\n     */\n    public function testAddArticleLabel()\n    {\n        // 获取一个虚假的标签参数\n        $params = [\n            'article_label_name' => $this->faker->name,\n        ];\n        // 模拟测试路由\n        $this->post('/webblog/article/label/add', $params);\n        // 断言，请求200正常\n        $this->assertResponseOk();\n        // 获取响应数据，并解析成数组\n        $response = json_decode($this->response->getContent(), true);\n        // 断言，接口返回的result参数是true\n        $this->assertEquals($response['result'], true);\n        return $resopnse;\n    }\n    \n    /**\n     * 测试添加文章标签删除接口\n     *\n     * @return void\n     */\n    public function testdeleteArticleLabel()\n    {\n        // 使用上面的添加测试方法，添加一个标签\n        $article_label = $this->testAddArticleLabel();\n        Facade::clearResolvedInstances();\n        // 模拟测试删除路由，附带上之前添加的lable id\n        $response = $this->delete('/webblog/article/label/delete?id=' . $article_label['id']);\n        $this->assertResponseOk();\n        $response = json_decode($this->response->getContent(), true);\n        $this->assertEquals($response['result'], true);\n    }\n\n    /**\n     * 测试文章标签列表获取接口\n     *\n     * @return void\n     */\n    public function testArticleLabels()\n    {\n        $this->get('/webblog/article/label/list');\n        $this->assertResponseOk();\n        $response = json_decode($this->response->getContent(), true);\n        $this->assertEquals($response['result'], true);\n    }\n}\n```\n\n## 持续集成（CONTINUOUS INTEGRATION）\n\n在持续集成环境中，开发人员将会频繁的提交代码到主干。这些新提交在最终合并到主线之前，都需要通过编译和自动化测试流进行验证。这样做是基于之前\n\n持续集成过程中很重视自动化测试验证结果，以保障所有的提交在合并主线之后的质量问题，对可能出现的一些问题进行预警。","source":"_posts/test-note-unit.md","raw":"---\ntitle: PHP单元测试\ndate: 2018-12-12 18:37:40\ntags: unit\ncategories: php\n---\n\n## 说明\n单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。对于单元测试中单元的含义，一般来说，要根据实际情况去判定其具体含义，如C语言中单元指一个函数，Java里单元指一个类，图形化的软件中可以指一个窗口或一个菜单等。总的来说，单元就是人为规定的最小的被测功能模块。单元测试是在软件开发过程中要进行的最低级别的测试活动，软件的独立单元将在与程序的其他部分相隔离的情况下进行测试。\n\n单元测试（模块测试）是开发者编写的一小段代码，用于检验被测代码的一个很小的、很明确的功能是否正确。通常而言，一个单元测试是用于判断某个特定条件（或者场景）下某个特定函数的行为。例如，你可能把一个很大的值放入一个有序list 中去，然后确认该值出现在list 的尾部。或者，你可能会从字符串中删除匹配某种模式的字符，然后确认字符串确实不再包含这些字符了。\n\n\n## PHP Unit\n1. 官方网站 https://phpunit.readthedocs.io/zh_CN/latest/database.html\n\n2. 测试文件上传\n```php\n<?php\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Foundation\\Testing\\DatabaseTransactions;\nuse Faker\\Factory;\nuse Illuminate\\Http\\UploadedFile;\nuse Illuminate\\Support\\Facades\\Storage;\nclass ToolTest extends TestCase\n{\n    /**\n     * 测试文件上传\n     *\n     * @return array\n     */\n    public function testUpload()\n    {\n        $this->call('POST', 'webblog/tools-ui/upload', [], [], ['file' => UploadedFile::fake()->image(md5(time()) . '.jpg')]);\n        $this->createHtml(__FUNCTION__);\n        $this->assertResponseOk();\n        $apiData = json_decode($this->response->getContent(), true);\n        $this->log('info', __class__ . '::' . __FUNCTION__, $apiData);\n        $this->assertEquals($apiData['result'], true);\n        return $apiData['datas'];\n    }\n}\n```\n\n3. \n```php\n<?php\nuse Laravel\\Lumen\\Testing\\DatabaseMigrations;\nuse Laravel\\Lumen\\Testing\\DatabaseTransactions;\nuse Illuminate\\Support\\Facades\\Facade;\nclass ArticleTest extends TestCase\n{\n    use DatabaseTransactions;\n\n    /**\n     * 测试添加文章标签接口\n     *\n     * @return array\n     */\n    public function testAddArticleLabel()\n    {\n        // 获取一个虚假的标签参数\n        $params = [\n            'article_label_name' => $this->faker->name,\n        ];\n        // 模拟测试路由\n        $this->post('/webblog/article/label/add', $params);\n        // 断言，请求200正常\n        $this->assertResponseOk();\n        // 获取响应数据，并解析成数组\n        $response = json_decode($this->response->getContent(), true);\n        // 断言，接口返回的result参数是true\n        $this->assertEquals($response['result'], true);\n        return $resopnse;\n    }\n    \n    /**\n     * 测试添加文章标签删除接口\n     *\n     * @return void\n     */\n    public function testdeleteArticleLabel()\n    {\n        // 使用上面的添加测试方法，添加一个标签\n        $article_label = $this->testAddArticleLabel();\n        Facade::clearResolvedInstances();\n        // 模拟测试删除路由，附带上之前添加的lable id\n        $response = $this->delete('/webblog/article/label/delete?id=' . $article_label['id']);\n        $this->assertResponseOk();\n        $response = json_decode($this->response->getContent(), true);\n        $this->assertEquals($response['result'], true);\n    }\n\n    /**\n     * 测试文章标签列表获取接口\n     *\n     * @return void\n     */\n    public function testArticleLabels()\n    {\n        $this->get('/webblog/article/label/list');\n        $this->assertResponseOk();\n        $response = json_decode($this->response->getContent(), true);\n        $this->assertEquals($response['result'], true);\n    }\n}\n```\n\n## 持续集成（CONTINUOUS INTEGRATION）\n\n在持续集成环境中，开发人员将会频繁的提交代码到主干。这些新提交在最终合并到主线之前，都需要通过编译和自动化测试流进行验证。这样做是基于之前\n\n持续集成过程中很重视自动化测试验证结果，以保障所有的提交在合并主线之后的质量问题，对可能出现的一些问题进行预警。","slug":"test-note-unit","published":1,"updated":"2019-07-09T05:18:18.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld9k0038e8we5eedjoos","content":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。对于单元测试中单元的含义，一般来说，要根据实际情况去判定其具体含义，如C语言中单元指一个函数，Java里单元指一个类，图形化的软件中可以指一个窗口或一个菜单等。总的来说，单元就是人为规定的最小的被测功能模块。单元测试是在软件开发过程中要进行的最低级别的测试活动，软件的独立单元将在与程序的其他部分相隔离的情况下进行测试。</p>\n<p>单元测试（模块测试）是开发者编写的一小段代码，用于检验被测代码的一个很小的、很明确的功能是否正确。通常而言，一个单元测试是用于判断某个特定条件（或者场景）下某个特定函数的行为。例如，你可能把一个很大的值放入一个有序list 中去，然后确认该值出现在list 的尾部。或者，你可能会从字符串中删除匹配某种模式的字符，然后确认字符串确实不再包含这些字符了。</p>\n<h2 id=\"PHP-Unit\"><a href=\"#PHP-Unit\" class=\"headerlink\" title=\"PHP Unit\"></a>PHP Unit</h2><ol>\n<li><p>官方网站 <a href=\"https://phpunit.readthedocs.io/zh_CN/latest/database.html\" target=\"_blank\" rel=\"noopener\">https://phpunit.readthedocs.io/zh_CN/latest/database.html</a></p>\n</li>\n<li><p>测试文件上传</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Foundation</span>\\<span class=\"title\">Testing</span>\\<span class=\"title\">RefreshDatabase</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Foundation</span>\\<span class=\"title\">Testing</span>\\<span class=\"title\">DatabaseTransactions</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Faker</span>\\<span class=\"title\">Factory</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">UploadedFile</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Support</span>\\<span class=\"title\">Facades</span>\\<span class=\"title\">Storage</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToolTest</span> <span class=\"keyword\">extends</span> <span class=\"title\">TestCase</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试文件上传</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testUpload</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;call(<span class=\"string\">'POST'</span>, <span class=\"string\">'webblog/tools-ui/upload'</span>, [], [], [<span class=\"string\">'file'</span> =&gt; UploadedFile::fake()-&gt;image(md5(time()) . <span class=\"string\">'.jpg'</span>)]);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;createHtml(<span class=\"keyword\">__FUNCTION__</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;assertResponseOk();</span><br><span class=\"line\">        $apiData = json_decode(<span class=\"keyword\">$this</span>-&gt;response-&gt;getContent(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;log(<span class=\"string\">'info'</span>, <span class=\"keyword\">__class__</span> . <span class=\"string\">'::'</span> . <span class=\"keyword\">__FUNCTION__</span>, $apiData);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;assertEquals($apiData[<span class=\"string\">'result'</span>], <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $apiData[<span class=\"string\">'datas'</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Laravel</span>\\<span class=\"title\">Lumen</span>\\<span class=\"title\">Testing</span>\\<span class=\"title\">DatabaseMigrations</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Laravel</span>\\<span class=\"title\">Lumen</span>\\<span class=\"title\">Testing</span>\\<span class=\"title\">DatabaseTransactions</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Support</span>\\<span class=\"title\">Facades</span>\\<span class=\"title\">Facade</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArticleTest</span> <span class=\"keyword\">extends</span> <span class=\"title\">TestCase</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">DatabaseTransactions</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试添加文章标签接口</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAddArticleLabel</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取一个虚假的标签参数</span></span><br><span class=\"line\">        $params = [</span><br><span class=\"line\">            <span class=\"string\">'article_label_name'</span> =&gt; <span class=\"keyword\">$this</span>-&gt;faker-&gt;name,</span><br><span class=\"line\">        ];</span><br><span class=\"line\">        <span class=\"comment\">// 模拟测试路由</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;post(<span class=\"string\">'/webblog/article/label/add'</span>, $params);</span><br><span class=\"line\">        <span class=\"comment\">// 断言，请求200正常</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;assertResponseOk();</span><br><span class=\"line\">        <span class=\"comment\">// 获取响应数据，并解析成数组</span></span><br><span class=\"line\">        $response = json_decode(<span class=\"keyword\">$this</span>-&gt;response-&gt;getContent(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 断言，接口返回的result参数是true</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;assertEquals($response[<span class=\"string\">'result'</span>], <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $resopnse;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试添加文章标签删除接口</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testdeleteArticleLabel</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用上面的添加测试方法，添加一个标签</span></span><br><span class=\"line\">        $article_label = <span class=\"keyword\">$this</span>-&gt;testAddArticleLabel();</span><br><span class=\"line\">        Facade::clearResolvedInstances();</span><br><span class=\"line\">        <span class=\"comment\">// 模拟测试删除路由，附带上之前添加的lable id</span></span><br><span class=\"line\">        $response = <span class=\"keyword\">$this</span>-&gt;delete(<span class=\"string\">'/webblog/article/label/delete?id='</span> . $article_label[<span class=\"string\">'id'</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;assertResponseOk();</span><br><span class=\"line\">        $response = json_decode(<span class=\"keyword\">$this</span>-&gt;response-&gt;getContent(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;assertEquals($response[<span class=\"string\">'result'</span>], <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试文章标签列表获取接口</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testArticleLabels</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;get(<span class=\"string\">'/webblog/article/label/list'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;assertResponseOk();</span><br><span class=\"line\">        $response = json_decode(<span class=\"keyword\">$this</span>-&gt;response-&gt;getContent(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;assertEquals($response[<span class=\"string\">'result'</span>], <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"持续集成（CONTINUOUS-INTEGRATION）\"><a href=\"#持续集成（CONTINUOUS-INTEGRATION）\" class=\"headerlink\" title=\"持续集成（CONTINUOUS INTEGRATION）\"></a>持续集成（CONTINUOUS INTEGRATION）</h2><p>在持续集成环境中，开发人员将会频繁的提交代码到主干。这些新提交在最终合并到主线之前，都需要通过编译和自动化测试流进行验证。这样做是基于之前</p>\n<p>持续集成过程中很重视自动化测试验证结果，以保障所有的提交在合并主线之后的质量问题，对可能出现的一些问题进行预警。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。对于单元测试中单元的含义，一般来说，要根据实际情况去判定其具体含义，如C语言中单元指一个函数，Java里单元指一个类，图形化的软件中可以指一个窗口或一个菜单等。总的来说，单元就是人为规定的最小的被测功能模块。单元测试是在软件开发过程中要进行的最低级别的测试活动，软件的独立单元将在与程序的其他部分相隔离的情况下进行测试。</p>\n<p>单元测试（模块测试）是开发者编写的一小段代码，用于检验被测代码的一个很小的、很明确的功能是否正确。通常而言，一个单元测试是用于判断某个特定条件（或者场景）下某个特定函数的行为。例如，你可能把一个很大的值放入一个有序list 中去，然后确认该值出现在list 的尾部。或者，你可能会从字符串中删除匹配某种模式的字符，然后确认字符串确实不再包含这些字符了。</p>\n<h2 id=\"PHP-Unit\"><a href=\"#PHP-Unit\" class=\"headerlink\" title=\"PHP Unit\"></a>PHP Unit</h2><ol>\n<li><p>官方网站 <a href=\"https://phpunit.readthedocs.io/zh_CN/latest/database.html\" target=\"_blank\" rel=\"noopener\">https://phpunit.readthedocs.io/zh_CN/latest/database.html</a></p>\n</li>\n<li><p>测试文件上传</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Foundation</span>\\<span class=\"title\">Testing</span>\\<span class=\"title\">RefreshDatabase</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Foundation</span>\\<span class=\"title\">Testing</span>\\<span class=\"title\">DatabaseTransactions</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Faker</span>\\<span class=\"title\">Factory</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">UploadedFile</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Support</span>\\<span class=\"title\">Facades</span>\\<span class=\"title\">Storage</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToolTest</span> <span class=\"keyword\">extends</span> <span class=\"title\">TestCase</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试文件上传</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testUpload</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;call(<span class=\"string\">'POST'</span>, <span class=\"string\">'webblog/tools-ui/upload'</span>, [], [], [<span class=\"string\">'file'</span> =&gt; UploadedFile::fake()-&gt;image(md5(time()) . <span class=\"string\">'.jpg'</span>)]);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;createHtml(<span class=\"keyword\">__FUNCTION__</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;assertResponseOk();</span><br><span class=\"line\">        $apiData = json_decode(<span class=\"keyword\">$this</span>-&gt;response-&gt;getContent(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;log(<span class=\"string\">'info'</span>, <span class=\"keyword\">__class__</span> . <span class=\"string\">'::'</span> . <span class=\"keyword\">__FUNCTION__</span>, $apiData);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;assertEquals($apiData[<span class=\"string\">'result'</span>], <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $apiData[<span class=\"string\">'datas'</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Laravel</span>\\<span class=\"title\">Lumen</span>\\<span class=\"title\">Testing</span>\\<span class=\"title\">DatabaseMigrations</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Laravel</span>\\<span class=\"title\">Lumen</span>\\<span class=\"title\">Testing</span>\\<span class=\"title\">DatabaseTransactions</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Support</span>\\<span class=\"title\">Facades</span>\\<span class=\"title\">Facade</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArticleTest</span> <span class=\"keyword\">extends</span> <span class=\"title\">TestCase</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">DatabaseTransactions</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试添加文章标签接口</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testAddArticleLabel</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取一个虚假的标签参数</span></span><br><span class=\"line\">        $params = [</span><br><span class=\"line\">            <span class=\"string\">'article_label_name'</span> =&gt; <span class=\"keyword\">$this</span>-&gt;faker-&gt;name,</span><br><span class=\"line\">        ];</span><br><span class=\"line\">        <span class=\"comment\">// 模拟测试路由</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;post(<span class=\"string\">'/webblog/article/label/add'</span>, $params);</span><br><span class=\"line\">        <span class=\"comment\">// 断言，请求200正常</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;assertResponseOk();</span><br><span class=\"line\">        <span class=\"comment\">// 获取响应数据，并解析成数组</span></span><br><span class=\"line\">        $response = json_decode(<span class=\"keyword\">$this</span>-&gt;response-&gt;getContent(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 断言，接口返回的result参数是true</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;assertEquals($response[<span class=\"string\">'result'</span>], <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $resopnse;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试添加文章标签删除接口</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testdeleteArticleLabel</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用上面的添加测试方法，添加一个标签</span></span><br><span class=\"line\">        $article_label = <span class=\"keyword\">$this</span>-&gt;testAddArticleLabel();</span><br><span class=\"line\">        Facade::clearResolvedInstances();</span><br><span class=\"line\">        <span class=\"comment\">// 模拟测试删除路由，附带上之前添加的lable id</span></span><br><span class=\"line\">        $response = <span class=\"keyword\">$this</span>-&gt;delete(<span class=\"string\">'/webblog/article/label/delete?id='</span> . $article_label[<span class=\"string\">'id'</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;assertResponseOk();</span><br><span class=\"line\">        $response = json_decode(<span class=\"keyword\">$this</span>-&gt;response-&gt;getContent(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;assertEquals($response[<span class=\"string\">'result'</span>], <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试文章标签列表获取接口</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testArticleLabels</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;get(<span class=\"string\">'/webblog/article/label/list'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;assertResponseOk();</span><br><span class=\"line\">        $response = json_decode(<span class=\"keyword\">$this</span>-&gt;response-&gt;getContent(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;assertEquals($response[<span class=\"string\">'result'</span>], <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"持续集成（CONTINUOUS-INTEGRATION）\"><a href=\"#持续集成（CONTINUOUS-INTEGRATION）\" class=\"headerlink\" title=\"持续集成（CONTINUOUS INTEGRATION）\"></a>持续集成（CONTINUOUS INTEGRATION）</h2><p>在持续集成环境中，开发人员将会频繁的提交代码到主干。这些新提交在最终合并到主线之前，都需要通过编译和自动化测试流进行验证。这样做是基于之前</p>\n<p>持续集成过程中很重视自动化测试验证结果，以保障所有的提交在合并主线之后的质量问题，对可能出现的一些问题进行预警。</p>\n"},{"title":"使用webpack构建一个简易的web项目","date":"2018-11-21T07:46:26.000Z","_content":"\n#### 1.创建一个空的npm项目\n* 创建项目目录文件夹webpack-example\n* 执行`npm init`初始化项目,根据提示输入项目的相关信息即可\n![图片](/images/webpack/npm-init.png)\n* 我们可以观察到目录中多了一个package.json文件\n\n#### 2.安装webpack-不是全局安装，是项目本地安装\n* [参考文档](https://www.webpackjs.com/guides/installation/)\n* 安装webpack`npm install --save-dev webpack`\n* 安装webpack-cli`npm install --save-dev webpack-cli`\n\n#### 3.创建项目的webpack配置文件webpack.config.js\n* [参考文档](https://www.webpackjs.com/guides/getting-started/#%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6)\n* 配置文件写入下面代码\n```js\n// webpack.config.js\nconst path = require('path');\n\nmodule.exports = {\n    entry: './src/index.js',\n    output: {\n        filename: 'index-build.js',\n        path: path.resolve(__dirname, 'dist')\n    }\n};\n```\n* entry是入口文件路径配置，这里写的是当前目录下的src目录中的index.js\n* output是出口文件，index.js文件打包后会保存为dist目录中的index-build.js\n\n#### 4.创建index.js并写入一段简单的代码\n```js\n// src/index.js\nalert('webpack example');\n```\n\n#### 5.创建项目的dist/index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Webpack Example</title>\n</head>\n\n<body>\n\n</body>\n<!-- 引入打包好的js -->\n<script src=\"index-build.js\"></script>\n\n</html>\n```\n#### 6.打包项目\n* npx webpack --mode production\n* dist目录出现了index-build.js\n* 用浏览器打开index.html查看结果\n\n\n#### 7.简化命令\n* 在package.json文件的script数组中添加下面命令代码\n```json\n{\n  \"name\": \"webpack-example\",\n  \"version\": \"1.0.0\",\n  \"description\": \"我的测试项目\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    // 我们新增了build快捷脚本命令\n    \"build\": \"npx webpack --mode production\"\n  },\n  \"author\": \"cool1024\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"webpack\": \"^4.26.0\",\n    \"webpack-cli\": \"^3.1.2\"\n  }\n}\n```\n* 执行`npm run build`即可打包项目\n\n\n\n","source":"_posts/webpack-note-1.md","raw":"---\ntitle: 使用webpack构建一个简易的web项目\ndate: 2018-11-21 15:46:26\ntags: webpack\ncategories: Web开发\n---\n\n#### 1.创建一个空的npm项目\n* 创建项目目录文件夹webpack-example\n* 执行`npm init`初始化项目,根据提示输入项目的相关信息即可\n![图片](/images/webpack/npm-init.png)\n* 我们可以观察到目录中多了一个package.json文件\n\n#### 2.安装webpack-不是全局安装，是项目本地安装\n* [参考文档](https://www.webpackjs.com/guides/installation/)\n* 安装webpack`npm install --save-dev webpack`\n* 安装webpack-cli`npm install --save-dev webpack-cli`\n\n#### 3.创建项目的webpack配置文件webpack.config.js\n* [参考文档](https://www.webpackjs.com/guides/getting-started/#%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6)\n* 配置文件写入下面代码\n```js\n// webpack.config.js\nconst path = require('path');\n\nmodule.exports = {\n    entry: './src/index.js',\n    output: {\n        filename: 'index-build.js',\n        path: path.resolve(__dirname, 'dist')\n    }\n};\n```\n* entry是入口文件路径配置，这里写的是当前目录下的src目录中的index.js\n* output是出口文件，index.js文件打包后会保存为dist目录中的index-build.js\n\n#### 4.创建index.js并写入一段简单的代码\n```js\n// src/index.js\nalert('webpack example');\n```\n\n#### 5.创建项目的dist/index.html\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Webpack Example</title>\n</head>\n\n<body>\n\n</body>\n<!-- 引入打包好的js -->\n<script src=\"index-build.js\"></script>\n\n</html>\n```\n#### 6.打包项目\n* npx webpack --mode production\n* dist目录出现了index-build.js\n* 用浏览器打开index.html查看结果\n\n\n#### 7.简化命令\n* 在package.json文件的script数组中添加下面命令代码\n```json\n{\n  \"name\": \"webpack-example\",\n  \"version\": \"1.0.0\",\n  \"description\": \"我的测试项目\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    // 我们新增了build快捷脚本命令\n    \"build\": \"npx webpack --mode production\"\n  },\n  \"author\": \"cool1024\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"webpack\": \"^4.26.0\",\n    \"webpack-cli\": \"^3.1.2\"\n  }\n}\n```\n* 执行`npm run build`即可打包项目\n\n\n\n","slug":"webpack-note-1","published":1,"updated":"2019-07-12T03:00:58.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld9m003be8we8phc057y","content":"<h4 id=\"1-创建一个空的npm项目\"><a href=\"#1-创建一个空的npm项目\" class=\"headerlink\" title=\"1.创建一个空的npm项目\"></a>1.创建一个空的npm项目</h4><ul>\n<li>创建项目目录文件夹webpack-example</li>\n<li>执行<code>npm init</code>初始化项目,根据提示输入项目的相关信息即可<br><img src=\"/images/webpack/npm-init.png\" alt=\"图片\"></li>\n<li>我们可以观察到目录中多了一个package.json文件</li>\n</ul>\n<h4 id=\"2-安装webpack-不是全局安装，是项目本地安装\"><a href=\"#2-安装webpack-不是全局安装，是项目本地安装\" class=\"headerlink\" title=\"2.安装webpack-不是全局安装，是项目本地安装\"></a>2.安装webpack-不是全局安装，是项目本地安装</h4><ul>\n<li><a href=\"https://www.webpackjs.com/guides/installation/\" target=\"_blank\" rel=\"noopener\">参考文档</a></li>\n<li>安装webpack<code>npm install --save-dev webpack</code></li>\n<li>安装webpack-cli<code>npm install --save-dev webpack-cli</code></li>\n</ul>\n<h4 id=\"3-创建项目的webpack配置文件webpack-config-js\"><a href=\"#3-创建项目的webpack配置文件webpack-config-js\" class=\"headerlink\" title=\"3.创建项目的webpack配置文件webpack.config.js\"></a>3.创建项目的webpack配置文件webpack.config.js</h4><ul>\n<li><a href=\"https://www.webpackjs.com/guides/getting-started/#%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">参考文档</a></li>\n<li><p>配置文件写入下面代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'index-build.js'</span>,</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>entry是入口文件路径配置，这里写的是当前目录下的src目录中的index.js</p>\n</li>\n<li>output是出口文件，index.js文件打包后会保存为dist目录中的index-build.js</li>\n</ul>\n<h4 id=\"4-创建index-js并写入一段简单的代码\"><a href=\"#4-创建index-js并写入一段简单的代码\" class=\"headerlink\" title=\"4.创建index.js并写入一段简单的代码\"></a>4.创建index.js并写入一段简单的代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/index.js</span></span><br><span class=\"line\">alert(<span class=\"string\">'webpack example'</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-创建项目的dist-index-html\"><a href=\"#5-创建项目的dist-index-html\" class=\"headerlink\" title=\"5.创建项目的dist/index.html\"></a>5.创建项目的dist/index.html</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack Example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引入打包好的js --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"index-build.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-打包项目\"><a href=\"#6-打包项目\" class=\"headerlink\" title=\"6.打包项目\"></a>6.打包项目</h4><ul>\n<li>npx webpack –mode production</li>\n<li>dist目录出现了index-build.js</li>\n<li>用浏览器打开index.html查看结果</li>\n</ul>\n<h4 id=\"7-简化命令\"><a href=\"#7-简化命令\" class=\"headerlink\" title=\"7.简化命令\"></a>7.简化命令</h4><ul>\n<li><p>在package.json文件的script数组中添加下面命令代码</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack-example\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"我的测试项目\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    // 我们新增了build快捷脚本命令</span><br><span class=\"line\">    \"build\": \"npx webpack --mode production\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"author\": \"cool1024\",</span><br><span class=\"line\">  \"license\": \"ISC\",</span><br><span class=\"line\">  \"devDependencies\": &#123;</span><br><span class=\"line\">    \"webpack\": \"^4.26.0\",</span><br><span class=\"line\">    \"webpack-cli\": \"^3.1.2\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>npm run build</code>即可打包项目</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-创建一个空的npm项目\"><a href=\"#1-创建一个空的npm项目\" class=\"headerlink\" title=\"1.创建一个空的npm项目\"></a>1.创建一个空的npm项目</h4><ul>\n<li>创建项目目录文件夹webpack-example</li>\n<li>执行<code>npm init</code>初始化项目,根据提示输入项目的相关信息即可<br><img src=\"/images/webpack/npm-init.png\" alt=\"图片\"></li>\n<li>我们可以观察到目录中多了一个package.json文件</li>\n</ul>\n<h4 id=\"2-安装webpack-不是全局安装，是项目本地安装\"><a href=\"#2-安装webpack-不是全局安装，是项目本地安装\" class=\"headerlink\" title=\"2.安装webpack-不是全局安装，是项目本地安装\"></a>2.安装webpack-不是全局安装，是项目本地安装</h4><ul>\n<li><a href=\"https://www.webpackjs.com/guides/installation/\" target=\"_blank\" rel=\"noopener\">参考文档</a></li>\n<li>安装webpack<code>npm install --save-dev webpack</code></li>\n<li>安装webpack-cli<code>npm install --save-dev webpack-cli</code></li>\n</ul>\n<h4 id=\"3-创建项目的webpack配置文件webpack-config-js\"><a href=\"#3-创建项目的webpack配置文件webpack-config-js\" class=\"headerlink\" title=\"3.创建项目的webpack配置文件webpack.config.js\"></a>3.创建项目的webpack配置文件webpack.config.js</h4><ul>\n<li><a href=\"https://www.webpackjs.com/guides/getting-started/#%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">参考文档</a></li>\n<li><p>配置文件写入下面代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'index-build.js'</span>,</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>entry是入口文件路径配置，这里写的是当前目录下的src目录中的index.js</p>\n</li>\n<li>output是出口文件，index.js文件打包后会保存为dist目录中的index-build.js</li>\n</ul>\n<h4 id=\"4-创建index-js并写入一段简单的代码\"><a href=\"#4-创建index-js并写入一段简单的代码\" class=\"headerlink\" title=\"4.创建index.js并写入一段简单的代码\"></a>4.创建index.js并写入一段简单的代码</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/index.js</span></span><br><span class=\"line\">alert(<span class=\"string\">'webpack example'</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-创建项目的dist-index-html\"><a href=\"#5-创建项目的dist-index-html\" class=\"headerlink\" title=\"5.创建项目的dist/index.html\"></a>5.创建项目的dist/index.html</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack Example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引入打包好的js --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"index-build.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-打包项目\"><a href=\"#6-打包项目\" class=\"headerlink\" title=\"6.打包项目\"></a>6.打包项目</h4><ul>\n<li>npx webpack –mode production</li>\n<li>dist目录出现了index-build.js</li>\n<li>用浏览器打开index.html查看结果</li>\n</ul>\n<h4 id=\"7-简化命令\"><a href=\"#7-简化命令\" class=\"headerlink\" title=\"7.简化命令\"></a>7.简化命令</h4><ul>\n<li><p>在package.json文件的script数组中添加下面命令代码</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack-example\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"我的测试项目\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">    // 我们新增了build快捷脚本命令</span><br><span class=\"line\">    \"build\": \"npx webpack --mode production\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"author\": \"cool1024\",</span><br><span class=\"line\">  \"license\": \"ISC\",</span><br><span class=\"line\">  \"devDependencies\": &#123;</span><br><span class=\"line\">    \"webpack\": \"^4.26.0\",</span><br><span class=\"line\">    \"webpack-cli\": \"^3.1.2\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>npm run build</code>即可打包项目</p>\n</li>\n</ul>\n"},{"title":"php配置","date":"2018-08-13T03:51:31.000Z","_content":"#### Nginx与PHP常用配置 (Linux) - 测试环境 Ubuntu 16.0.4 -新版本 php7.0\n\n\n1.新安装的Nginx配置文件 /etc/nginx/site-enbale/default\na.编辑此文件，去掉若干#注释并修改：vi /etc/nginx/site-enable/default\nb.结果如下\n```conf\nserver {\n\n    listen 80;\n\n    #网站更目录，存放网页\n    root /var/www/html;\n\n    index index.html index.htm index.php;\n\n    server_name localhost;\n\n    location / {\n\n            try_files $uri $uri/ =404;\n            #客户端连时可以交互数据的大小\n            #主要影响了提交的表单数据量大小，如上传文件，POST大量数据\n            #默认为1M,如需要上传大文，可以设为更大\n            client_max_body_size    1m;\n    }\n    location ~ \\.php$ {\n            #此处默认安装的为php7.0\n            #如果安装的是php5，此处改为  fastcgi_pass unix:/var/run/php5-fpm.sock;\n            #这只是参考，请注意确认在/var/run/能够看到这个文件php5-fpm.sock\n            fastcgi_pass unix:/var/run/php7.0-fpm.sock;\n\n            fastcgi_index index.php;\n\n            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n\n            include fastcgi_params;\n    }\n}\n```\n\n2.php配置文件 /etc/php7.0/fpm/php.ini(根据版本不同有差异，也许是/etc/php5/fpm/php.ini)\na.编辑此文件（如果有必要的，一般不修改）\nb.修改示例\n// post请求数据最大量，一般的默认为8M，如果需要上传大文件则设置更大\n`post_max_size = 20M`\n\n#允许上传文件的最大尺寸，修改此处后必须(post_max_size>upload_max_filesize)\n#文件也是POST请求上传的，所以如果post_max_size太小，第一关卡都过不了\n`upload_max_filesize = 20M`\n\n#允许上传的最大文件数，一般不修改\n`max_file_uploads = 20`\n","source":"_posts/php配置.md","raw":"---\ntitle: php配置\ndate: 2018-08-13 11:51:31\ntags: php\n---\n#### Nginx与PHP常用配置 (Linux) - 测试环境 Ubuntu 16.0.4 -新版本 php7.0\n\n\n1.新安装的Nginx配置文件 /etc/nginx/site-enbale/default\na.编辑此文件，去掉若干#注释并修改：vi /etc/nginx/site-enable/default\nb.结果如下\n```conf\nserver {\n\n    listen 80;\n\n    #网站更目录，存放网页\n    root /var/www/html;\n\n    index index.html index.htm index.php;\n\n    server_name localhost;\n\n    location / {\n\n            try_files $uri $uri/ =404;\n            #客户端连时可以交互数据的大小\n            #主要影响了提交的表单数据量大小，如上传文件，POST大量数据\n            #默认为1M,如需要上传大文，可以设为更大\n            client_max_body_size    1m;\n    }\n    location ~ \\.php$ {\n            #此处默认安装的为php7.0\n            #如果安装的是php5，此处改为  fastcgi_pass unix:/var/run/php5-fpm.sock;\n            #这只是参考，请注意确认在/var/run/能够看到这个文件php5-fpm.sock\n            fastcgi_pass unix:/var/run/php7.0-fpm.sock;\n\n            fastcgi_index index.php;\n\n            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n\n            include fastcgi_params;\n    }\n}\n```\n\n2.php配置文件 /etc/php7.0/fpm/php.ini(根据版本不同有差异，也许是/etc/php5/fpm/php.ini)\na.编辑此文件（如果有必要的，一般不修改）\nb.修改示例\n// post请求数据最大量，一般的默认为8M，如果需要上传大文件则设置更大\n`post_max_size = 20M`\n\n#允许上传文件的最大尺寸，修改此处后必须(post_max_size>upload_max_filesize)\n#文件也是POST请求上传的，所以如果post_max_size太小，第一关卡都过不了\n`upload_max_filesize = 20M`\n\n#允许上传的最大文件数，一般不修改\n`max_file_uploads = 20`\n","slug":"php配置","published":1,"updated":"2019-07-05T04:24:05.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld9n003fe8werjxgr9yz","content":"<h4 id=\"Nginx与PHP常用配置-Linux-测试环境-Ubuntu-16-0-4-新版本-php7-0\"><a href=\"#Nginx与PHP常用配置-Linux-测试环境-Ubuntu-16-0-4-新版本-php7-0\" class=\"headerlink\" title=\"Nginx与PHP常用配置 (Linux) - 测试环境 Ubuntu 16.0.4 -新版本 php7.0\"></a>Nginx与PHP常用配置 (Linux) - 测试环境 Ubuntu 16.0.4 -新版本 php7.0</h4><p>1.新安装的Nginx配置文件 /etc/nginx/site-enbale/default<br>a.编辑此文件，去掉若干#注释并修改：vi /etc/nginx/site-enable/default<br>b.结果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\"></span><br><span class=\"line\">    #网站更目录，存放网页</span><br><span class=\"line\">    root /var/www/html;</span><br><span class=\"line\"></span><br><span class=\"line\">    index index.html index.htm index.php;</span><br><span class=\"line\"></span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            try_files $uri $uri/ =404;</span><br><span class=\"line\">            #客户端连时可以交互数据的大小</span><br><span class=\"line\">            #主要影响了提交的表单数据量大小，如上传文件，POST大量数据</span><br><span class=\"line\">            #默认为1M,如需要上传大文，可以设为更大</span><br><span class=\"line\">            client_max_body_size    1m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ \\.php$ &#123;</span><br><span class=\"line\">            #此处默认安装的为php7.0</span><br><span class=\"line\">            #如果安装的是php5，此处改为  fastcgi_pass unix:/var/run/php5-fpm.sock;</span><br><span class=\"line\">            #这只是参考，请注意确认在/var/run/能够看到这个文件php5-fpm.sock</span><br><span class=\"line\">            fastcgi_pass unix:/var/run/php7.0-fpm.sock;</span><br><span class=\"line\"></span><br><span class=\"line\">            fastcgi_index index.php;</span><br><span class=\"line\"></span><br><span class=\"line\">            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class=\"line\"></span><br><span class=\"line\">            include fastcgi_params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.php配置文件 /etc/php7.0/fpm/php.ini(根据版本不同有差异，也许是/etc/php5/fpm/php.ini)<br>a.编辑此文件（如果有必要的，一般不修改）<br>b.修改示例<br>// post请求数据最大量，一般的默认为8M，如果需要上传大文件则设置更大<br><code>post_max_size = 20M</code></p>\n<p>#允许上传文件的最大尺寸，修改此处后必须(post_max_size&gt;upload_max_filesize)</p>\n<p>#文件也是POST请求上传的，所以如果post_max_size太小，第一关卡都过不了<br><code>upload_max_filesize = 20M</code></p>\n<p>#允许上传的最大文件数，一般不修改<br><code>max_file_uploads = 20</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Nginx与PHP常用配置-Linux-测试环境-Ubuntu-16-0-4-新版本-php7-0\"><a href=\"#Nginx与PHP常用配置-Linux-测试环境-Ubuntu-16-0-4-新版本-php7-0\" class=\"headerlink\" title=\"Nginx与PHP常用配置 (Linux) - 测试环境 Ubuntu 16.0.4 -新版本 php7.0\"></a>Nginx与PHP常用配置 (Linux) - 测试环境 Ubuntu 16.0.4 -新版本 php7.0</h4><p>1.新安装的Nginx配置文件 /etc/nginx/site-enbale/default<br>a.编辑此文件，去掉若干#注释并修改：vi /etc/nginx/site-enable/default<br>b.结果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\"></span><br><span class=\"line\">    #网站更目录，存放网页</span><br><span class=\"line\">    root /var/www/html;</span><br><span class=\"line\"></span><br><span class=\"line\">    index index.html index.htm index.php;</span><br><span class=\"line\"></span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            try_files $uri $uri/ =404;</span><br><span class=\"line\">            #客户端连时可以交互数据的大小</span><br><span class=\"line\">            #主要影响了提交的表单数据量大小，如上传文件，POST大量数据</span><br><span class=\"line\">            #默认为1M,如需要上传大文，可以设为更大</span><br><span class=\"line\">            client_max_body_size    1m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ \\.php$ &#123;</span><br><span class=\"line\">            #此处默认安装的为php7.0</span><br><span class=\"line\">            #如果安装的是php5，此处改为  fastcgi_pass unix:/var/run/php5-fpm.sock;</span><br><span class=\"line\">            #这只是参考，请注意确认在/var/run/能够看到这个文件php5-fpm.sock</span><br><span class=\"line\">            fastcgi_pass unix:/var/run/php7.0-fpm.sock;</span><br><span class=\"line\"></span><br><span class=\"line\">            fastcgi_index index.php;</span><br><span class=\"line\"></span><br><span class=\"line\">            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class=\"line\"></span><br><span class=\"line\">            include fastcgi_params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.php配置文件 /etc/php7.0/fpm/php.ini(根据版本不同有差异，也许是/etc/php5/fpm/php.ini)<br>a.编辑此文件（如果有必要的，一般不修改）<br>b.修改示例<br>// post请求数据最大量，一般的默认为8M，如果需要上传大文件则设置更大<br><code>post_max_size = 20M</code></p>\n<p>#允许上传文件的最大尺寸，修改此处后必须(post_max_size&gt;upload_max_filesize)</p>\n<p>#文件也是POST请求上传的，所以如果post_max_size太小，第一关卡都过不了<br><code>upload_max_filesize = 20M</code></p>\n<p>#允许上传的最大文件数，一般不修改<br><code>max_file_uploads = 20</code></p>\n"},{"title":"使用SASS","date":"2018-11-21T08:48:24.000Z","_content":"\n#### 概览\n[参考文档](http://sass.bootcss.com/docs/sass-reference/)\n\nSass 是对 CSS 的扩展，让 CSS 语言更强大、优雅。 它允许你使用变量、嵌套规则、 mixins、导入等众多功能， 并且完全兼容 CSS 语法。 Sass 有助于保持大型样式表结构良好， 同时也让你能够快速开始小型项目， 特别是在搭配 Compass 样式库一同使用时。\n<!--more-->\n\n#### 特色\n\n* 完全兼容 CSS3\n* 在 CSS 语言基础上添加了扩展功能，比如变量、嵌套 (nesting)、混合 (mixin)\n* 对颜色和其它值进行操作的{Sass::Script::Functions 函数}\n* 函数库控制指令之类的高级功能\n* 良好的格式，可对输出格式进行定制\n* 支持 Firebug\n\n#### 语法\n1. 数据类型\n    * 数字（例如 1.2、13、10px）\n    * 文本字符串，无论是否有引号（例如 \"foo\"、'bar'、baz）\n    * 颜色（例如 blue、#04a3f9、rgba(255, 0, 0, 0.5)）\n    * 布尔值（例如 true、false）\n    * 空值（例如 null）\n    * 值列表，用空格或逗号分隔（例如 1.5em 1em 0 2em、Helvetica, Arial, sans-serif）\n```scss\n// example.scss\n$primary: #04a3f9;\n$default-font-size: 1rem;\n\n\nbody{\n    font-size: $default-font-size;\n}\n\n.btn-primary{\n    font-size: $default-font-size;\n    background-color: $primary;\n}\n```\n2. 支持 + - * / 计算\n```scss\n.p-one {\n    font: 1rem + 1px; \n}\n.p-two {\n  color: rgba(255, 0, 0, 0.75) + rgba(0, 255, 0, 0.75);\n}\n```\n\n3. 导入其它样式文件\n```scss\n@import \"scss/variables\";\n```\n\n4. 样式继承\n```scss\n.card{\n    width: 100px;\n    height: 200px;\n}\n\n.info-card{\n    @extend .card;\n    background-color: blue;\n}\n\n.warning-card{\n    @extend .card;\n    background-color: yellow;\n}\n```\n\n5. 循环打印，批量生成主题对应的组件样式\n\n```scss\n// 可用的主题\n$colors: (\n        \"primary\": #aaa, \n        \"info\": #bbb,\n        \"warning\": #ccc,\n        \"danger\": #ddd,\n    );\n\n// 循环生成样式\n@each $key, $value in $colors {\n    .btn-#{$key} {\n        background-color: $value;\n    }\n}\n```\n\n```css\n/* 生成的css文件 */\n.btn-primary{\n    background-color: #aaa;\n}\n.btn-info{\n    background-color: #bbb;\n}\n.btn-warning{\n    background-color: #ccc;\n}\n.btn-danger{\n    background-color: #ddd;\n}\n```\n\n6. 引用父级\n```scss\n.btn{\n    background-color: #aaa;\n\n    &:hover{\n        background-color: rgba(#aaa, 0.1)\n    }\n\n    &:active{\n        background-color: rgba(#aaa, 0.8)\n    }\n}\n```\n\n#### 在webpack项目中添加sass支持\n\n* `npm install sass-loader node-sass style-loader css-loader webpack --save-dev`\n* 修改配置文件，添加下面加载器配置参数\n```js\nconst path = require('path');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n        scss: './src/index.scss'\n    },\n    output: {\n        filename: '[name]-build.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n        rules: [{\n            test: /\\.scss$/,\n            use: [\n                \"style-loader\", // creates style nodes from JS strings\n                \"css-loader\", // translates CSS into CommonJS\n                \"sass-loader\" // compiles Sass to CSS, using Node Sass by default\n            ]\n        }]\n    }\n};\n* 在src目录下创建一个index.scss文件\n```\n#### 使用bootstrap\n\n* [参考文档](http://getbootstrap.com/docs/4.1/getting-started/introduction/)\n* `npm install bootstrap`\n* 在index.sccs中引入bootstrap\n```scss\n// index.scss\n@import \"~bootstrap/dist/css/bootstrap\";\n```\n* 在index.html引入scss.build.js\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Webpack Example</title>\n</head>\n\n<body>\n    <button class=\"btn btn-danger\">Danger</button>\n\n</body>\n<script src=\"index-build.js\"></script>\n<script src=\"scss-build.js\"></script>\n\n</html>\n```\n* 按需使用比如我只要按钮样式\n```scss\n/* 使用scss,自定义主题 */\n// @import \"~bootstrap/dist/css/bootstrap\";\n\n/* 使用scss,自定义主题 */\n@import \"~bootstrap/scss/functions\";\n\n/* 你的变量设置，覆盖默认值-前置 */\n$red: #ddd; // 我把danger的全局颜色改了\n\n@import \"~bootstrap/scss/variables\";\n@import \"~bootstrap/scss/mixins\";\n\n/* 你的变量设置，覆盖默认值-后置 */\n\n@import \"~bootstrap/scss/buttons\";\n\n```\n\n\n","source":"_posts/webpack-note-2.md","raw":"---\ntitle: 使用SASS\ndate: 2018-11-21 16:48:24\ntags: ['webpack','sass']\ncategories: Web开发\n---\n\n#### 概览\n[参考文档](http://sass.bootcss.com/docs/sass-reference/)\n\nSass 是对 CSS 的扩展，让 CSS 语言更强大、优雅。 它允许你使用变量、嵌套规则、 mixins、导入等众多功能， 并且完全兼容 CSS 语法。 Sass 有助于保持大型样式表结构良好， 同时也让你能够快速开始小型项目， 特别是在搭配 Compass 样式库一同使用时。\n<!--more-->\n\n#### 特色\n\n* 完全兼容 CSS3\n* 在 CSS 语言基础上添加了扩展功能，比如变量、嵌套 (nesting)、混合 (mixin)\n* 对颜色和其它值进行操作的{Sass::Script::Functions 函数}\n* 函数库控制指令之类的高级功能\n* 良好的格式，可对输出格式进行定制\n* 支持 Firebug\n\n#### 语法\n1. 数据类型\n    * 数字（例如 1.2、13、10px）\n    * 文本字符串，无论是否有引号（例如 \"foo\"、'bar'、baz）\n    * 颜色（例如 blue、#04a3f9、rgba(255, 0, 0, 0.5)）\n    * 布尔值（例如 true、false）\n    * 空值（例如 null）\n    * 值列表，用空格或逗号分隔（例如 1.5em 1em 0 2em、Helvetica, Arial, sans-serif）\n```scss\n// example.scss\n$primary: #04a3f9;\n$default-font-size: 1rem;\n\n\nbody{\n    font-size: $default-font-size;\n}\n\n.btn-primary{\n    font-size: $default-font-size;\n    background-color: $primary;\n}\n```\n2. 支持 + - * / 计算\n```scss\n.p-one {\n    font: 1rem + 1px; \n}\n.p-two {\n  color: rgba(255, 0, 0, 0.75) + rgba(0, 255, 0, 0.75);\n}\n```\n\n3. 导入其它样式文件\n```scss\n@import \"scss/variables\";\n```\n\n4. 样式继承\n```scss\n.card{\n    width: 100px;\n    height: 200px;\n}\n\n.info-card{\n    @extend .card;\n    background-color: blue;\n}\n\n.warning-card{\n    @extend .card;\n    background-color: yellow;\n}\n```\n\n5. 循环打印，批量生成主题对应的组件样式\n\n```scss\n// 可用的主题\n$colors: (\n        \"primary\": #aaa, \n        \"info\": #bbb,\n        \"warning\": #ccc,\n        \"danger\": #ddd,\n    );\n\n// 循环生成样式\n@each $key, $value in $colors {\n    .btn-#{$key} {\n        background-color: $value;\n    }\n}\n```\n\n```css\n/* 生成的css文件 */\n.btn-primary{\n    background-color: #aaa;\n}\n.btn-info{\n    background-color: #bbb;\n}\n.btn-warning{\n    background-color: #ccc;\n}\n.btn-danger{\n    background-color: #ddd;\n}\n```\n\n6. 引用父级\n```scss\n.btn{\n    background-color: #aaa;\n\n    &:hover{\n        background-color: rgba(#aaa, 0.1)\n    }\n\n    &:active{\n        background-color: rgba(#aaa, 0.8)\n    }\n}\n```\n\n#### 在webpack项目中添加sass支持\n\n* `npm install sass-loader node-sass style-loader css-loader webpack --save-dev`\n* 修改配置文件，添加下面加载器配置参数\n```js\nconst path = require('path');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n        scss: './src/index.scss'\n    },\n    output: {\n        filename: '[name]-build.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n        rules: [{\n            test: /\\.scss$/,\n            use: [\n                \"style-loader\", // creates style nodes from JS strings\n                \"css-loader\", // translates CSS into CommonJS\n                \"sass-loader\" // compiles Sass to CSS, using Node Sass by default\n            ]\n        }]\n    }\n};\n* 在src目录下创建一个index.scss文件\n```\n#### 使用bootstrap\n\n* [参考文档](http://getbootstrap.com/docs/4.1/getting-started/introduction/)\n* `npm install bootstrap`\n* 在index.sccs中引入bootstrap\n```scss\n// index.scss\n@import \"~bootstrap/dist/css/bootstrap\";\n```\n* 在index.html引入scss.build.js\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Webpack Example</title>\n</head>\n\n<body>\n    <button class=\"btn btn-danger\">Danger</button>\n\n</body>\n<script src=\"index-build.js\"></script>\n<script src=\"scss-build.js\"></script>\n\n</html>\n```\n* 按需使用比如我只要按钮样式\n```scss\n/* 使用scss,自定义主题 */\n// @import \"~bootstrap/dist/css/bootstrap\";\n\n/* 使用scss,自定义主题 */\n@import \"~bootstrap/scss/functions\";\n\n/* 你的变量设置，覆盖默认值-前置 */\n$red: #ddd; // 我把danger的全局颜色改了\n\n@import \"~bootstrap/scss/variables\";\n@import \"~bootstrap/scss/mixins\";\n\n/* 你的变量设置，覆盖默认值-后置 */\n\n@import \"~bootstrap/scss/buttons\";\n\n```\n\n\n","slug":"webpack-note-2","published":1,"updated":"2019-07-12T03:00:38.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld9p003ie8we0afg10c9","content":"<h4 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h4><p><a href=\"http://sass.bootcss.com/docs/sass-reference/\" target=\"_blank\" rel=\"noopener\">参考文档</a></p>\n<p>Sass 是对 CSS 的扩展，让 CSS 语言更强大、优雅。 它允许你使用变量、嵌套规则、 mixins、导入等众多功能， 并且完全兼容 CSS 语法。 Sass 有助于保持大型样式表结构良好， 同时也让你能够快速开始小型项目， 特别是在搭配 Compass 样式库一同使用时。<br><a id=\"more\"></a></p>\n<h4 id=\"特色\"><a href=\"#特色\" class=\"headerlink\" title=\"特色\"></a>特色</h4><ul>\n<li>完全兼容 CSS3</li>\n<li>在 CSS 语言基础上添加了扩展功能，比如变量、嵌套 (nesting)、混合 (mixin)</li>\n<li>对颜色和其它值进行操作的{Sass::Script::Functions 函数}</li>\n<li>函数库控制指令之类的高级功能</li>\n<li>良好的格式，可对输出格式进行定制</li>\n<li>支持 Firebug</li>\n</ul>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><ol>\n<li><p>数据类型</p>\n<ul>\n<li>数字（例如 1.2、13、10px）</li>\n<li>文本字符串，无论是否有引号（例如 “foo”、’bar’、baz）</li>\n<li>颜色（例如 blue、#04a3f9、rgba(255, 0, 0, 0.5)）</li>\n<li>布尔值（例如 true、false）</li>\n<li>空值（例如 null）</li>\n<li>值列表，用空格或逗号分隔（例如 1.5em 1em 0 2em、Helvetica, Arial, sans-serif）<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example.scss</span></span><br><span class=\"line\"><span class=\"variable\">$primary</span>: <span class=\"number\">#04a3f9</span>;</span><br><span class=\"line\"><span class=\"variable\">$default-font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"variable\">$default-font-size</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-primary</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"variable\">$default-font-size</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"variable\">$primary</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>支持 + - * / 计算</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.p-one</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>: <span class=\"number\">1rem</span> + <span class=\"number\">1px</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.p-two</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: rgba(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.75</span>) + rgba(<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0.75</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>导入其它样式文件</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"scss/variables\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>样式继承</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.card</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.info-card</span>&#123;</span><br><span class=\"line\">    @<span class=\"keyword\">extend</span> .card;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.warning-card</span>&#123;</span><br><span class=\"line\">    @<span class=\"keyword\">extend</span> .card;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>循环打印，批量生成主题对应的组件样式</p>\n</li>\n</ol>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可用的主题</span></span><br><span class=\"line\"><span class=\"variable\">$colors</span>: (</span><br><span class=\"line\">        <span class=\"string\">\"primary\"</span>: <span class=\"number\">#aaa</span>, </span><br><span class=\"line\">        <span class=\"string\">\"info\"</span>: <span class=\"number\">#bbb</span>,</span><br><span class=\"line\">        <span class=\"string\">\"warning\"</span>: <span class=\"number\">#ccc</span>,</span><br><span class=\"line\">        <span class=\"string\">\"danger\"</span>: <span class=\"number\">#ddd</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 循环生成样式</span></span><br><span class=\"line\">@<span class=\"keyword\">each</span> <span class=\"variable\">$key</span>, <span class=\"variable\">$value</span> in <span class=\"variable\">$colors</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.btn-</span>#&#123;<span class=\"variable\">$key</span>&#125; &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: <span class=\"variable\">$value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 生成的css文件 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.btn-primary</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#aaa</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-info</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#bbb</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-warning</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-danger</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>引用父级<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#aaa</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:hover&#123;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: rgba(<span class=\"number\">#aaa</span>, <span class=\"number\">0.1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:active&#123;</span><br><span class=\"line\">        background-color: rgba(<span class=\"number\">#aaa</span>, <span class=\"number\">0.8</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"在webpack项目中添加sass支持\"><a href=\"#在webpack项目中添加sass支持\" class=\"headerlink\" title=\"在webpack项目中添加sass支持\"></a>在webpack项目中添加sass支持</h4><ul>\n<li><code>npm install sass-loader node-sass style-loader css-loader webpack --save-dev</code></li>\n<li>修改配置文件，添加下面加载器配置参数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">        scss: <span class=\"string\">'./src/index.scss'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'[name]-build.js'</span>,</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">            use: [</span><br><span class=\"line\">                <span class=\"string\">\"style-loader\"</span>, <span class=\"comment\">// creates style nodes from JS strings</span></span><br><span class=\"line\">                <span class=\"string\">\"css-loader\"</span>, <span class=\"comment\">// translates CSS into CommonJS</span></span><br><span class=\"line\">                <span class=\"string\">\"sass-loader\"</span> <span class=\"comment\">// compiles Sass to CSS, using Node Sass by default</span></span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">* 在src目录下创建一个index.scss文件</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"使用bootstrap\"><a href=\"#使用bootstrap\" class=\"headerlink\" title=\"使用bootstrap\"></a>使用bootstrap</h4><ul>\n<li><a href=\"http://getbootstrap.com/docs/4.1/getting-started/introduction/\" target=\"_blank\" rel=\"noopener\">参考文档</a></li>\n<li><code>npm install bootstrap</code></li>\n<li><p>在index.sccs中引入bootstrap</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.scss</span></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"~bootstrap/dist/css/bootstrap\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在index.html引入scss.build.js</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack Example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-danger\"</span>&gt;</span>Danger<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"index-build.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"scss-build.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>按需使用比如我只要按钮样式</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 使用scss,自定义主题 */</span></span><br><span class=\"line\"><span class=\"comment\">// @import \"~bootstrap/dist/css/bootstrap\";</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 使用scss,自定义主题 */</span></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"~bootstrap/scss/functions\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 你的变量设置，覆盖默认值-前置 */</span></span><br><span class=\"line\"><span class=\"variable\">$red</span>: <span class=\"number\">#ddd</span>; <span class=\"comment\">// 我把danger的全局颜色改了</span></span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"~bootstrap/scss/variables\"</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"~bootstrap/scss/mixins\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 你的变量设置，覆盖默认值-后置 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"~bootstrap/scss/buttons\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h4><p><a href=\"http://sass.bootcss.com/docs/sass-reference/\" target=\"_blank\" rel=\"noopener\">参考文档</a></p>\n<p>Sass 是对 CSS 的扩展，让 CSS 语言更强大、优雅。 它允许你使用变量、嵌套规则、 mixins、导入等众多功能， 并且完全兼容 CSS 语法。 Sass 有助于保持大型样式表结构良好， 同时也让你能够快速开始小型项目， 特别是在搭配 Compass 样式库一同使用时。<br>","more":"</p>\n<h4 id=\"特色\"><a href=\"#特色\" class=\"headerlink\" title=\"特色\"></a>特色</h4><ul>\n<li>完全兼容 CSS3</li>\n<li>在 CSS 语言基础上添加了扩展功能，比如变量、嵌套 (nesting)、混合 (mixin)</li>\n<li>对颜色和其它值进行操作的{Sass::Script::Functions 函数}</li>\n<li>函数库控制指令之类的高级功能</li>\n<li>良好的格式，可对输出格式进行定制</li>\n<li>支持 Firebug</li>\n</ul>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><ol>\n<li><p>数据类型</p>\n<ul>\n<li>数字（例如 1.2、13、10px）</li>\n<li>文本字符串，无论是否有引号（例如 “foo”、’bar’、baz）</li>\n<li>颜色（例如 blue、#04a3f9、rgba(255, 0, 0, 0.5)）</li>\n<li>布尔值（例如 true、false）</li>\n<li>空值（例如 null）</li>\n<li>值列表，用空格或逗号分隔（例如 1.5em 1em 0 2em、Helvetica, Arial, sans-serif）<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example.scss</span></span><br><span class=\"line\"><span class=\"variable\">$primary</span>: <span class=\"number\">#04a3f9</span>;</span><br><span class=\"line\"><span class=\"variable\">$default-font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"variable\">$default-font-size</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-primary</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"variable\">$default-font-size</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"variable\">$primary</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>支持 + - * / 计算</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.p-one</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>: <span class=\"number\">1rem</span> + <span class=\"number\">1px</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.p-two</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: rgba(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.75</span>) + rgba(<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0.75</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>导入其它样式文件</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"scss/variables\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>样式继承</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.card</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.info-card</span>&#123;</span><br><span class=\"line\">    @<span class=\"keyword\">extend</span> .card;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.warning-card</span>&#123;</span><br><span class=\"line\">    @<span class=\"keyword\">extend</span> .card;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>循环打印，批量生成主题对应的组件样式</p>\n</li>\n</ol>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可用的主题</span></span><br><span class=\"line\"><span class=\"variable\">$colors</span>: (</span><br><span class=\"line\">        <span class=\"string\">\"primary\"</span>: <span class=\"number\">#aaa</span>, </span><br><span class=\"line\">        <span class=\"string\">\"info\"</span>: <span class=\"number\">#bbb</span>,</span><br><span class=\"line\">        <span class=\"string\">\"warning\"</span>: <span class=\"number\">#ccc</span>,</span><br><span class=\"line\">        <span class=\"string\">\"danger\"</span>: <span class=\"number\">#ddd</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 循环生成样式</span></span><br><span class=\"line\">@<span class=\"keyword\">each</span> <span class=\"variable\">$key</span>, <span class=\"variable\">$value</span> in <span class=\"variable\">$colors</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.btn-</span>#&#123;<span class=\"variable\">$key</span>&#125; &#123;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: <span class=\"variable\">$value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 生成的css文件 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.btn-primary</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#aaa</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-info</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#bbb</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-warning</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-danger</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>引用父级<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.btn</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#aaa</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:hover&#123;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: rgba(<span class=\"number\">#aaa</span>, <span class=\"number\">0.1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &amp;:active&#123;</span><br><span class=\"line\">        background-color: rgba(<span class=\"number\">#aaa</span>, <span class=\"number\">0.8</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"在webpack项目中添加sass支持\"><a href=\"#在webpack项目中添加sass支持\" class=\"headerlink\" title=\"在webpack项目中添加sass支持\"></a>在webpack项目中添加sass支持</h4><ul>\n<li><code>npm install sass-loader node-sass style-loader css-loader webpack --save-dev</code></li>\n<li>修改配置文件，添加下面加载器配置参数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">        scss: <span class=\"string\">'./src/index.scss'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">'[name]-build.js'</span>,</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">            use: [</span><br><span class=\"line\">                <span class=\"string\">\"style-loader\"</span>, <span class=\"comment\">// creates style nodes from JS strings</span></span><br><span class=\"line\">                <span class=\"string\">\"css-loader\"</span>, <span class=\"comment\">// translates CSS into CommonJS</span></span><br><span class=\"line\">                <span class=\"string\">\"sass-loader\"</span> <span class=\"comment\">// compiles Sass to CSS, using Node Sass by default</span></span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">* 在src目录下创建一个index.scss文件</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"使用bootstrap\"><a href=\"#使用bootstrap\" class=\"headerlink\" title=\"使用bootstrap\"></a>使用bootstrap</h4><ul>\n<li><a href=\"http://getbootstrap.com/docs/4.1/getting-started/introduction/\" target=\"_blank\" rel=\"noopener\">参考文档</a></li>\n<li><code>npm install bootstrap</code></li>\n<li><p>在index.sccs中引入bootstrap</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.scss</span></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"~bootstrap/dist/css/bootstrap\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在index.html引入scss.build.js</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack Example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-danger\"</span>&gt;</span>Danger<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"index-build.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"scss-build.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>按需使用比如我只要按钮样式</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 使用scss,自定义主题 */</span></span><br><span class=\"line\"><span class=\"comment\">// @import \"~bootstrap/dist/css/bootstrap\";</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 使用scss,自定义主题 */</span></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"~bootstrap/scss/functions\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 你的变量设置，覆盖默认值-前置 */</span></span><br><span class=\"line\"><span class=\"variable\">$red</span>: <span class=\"number\">#ddd</span>; <span class=\"comment\">// 我把danger的全局颜色改了</span></span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"~bootstrap/scss/variables\"</span>;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"~bootstrap/scss/mixins\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 你的变量设置，覆盖默认值-后置 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"~bootstrap/scss/buttons\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"WebRTC 服务端环境搭建-(IceServer)","date":"2019-01-25T07:11:11.000Z","_content":"\n### WebRTC 连接顺序\n1. 直接连接（两台设备直接可以访问对方，同一内网中）\n2. 通过stun服务器进行穿透\n3. 无法穿透则通过turn服务器中转\n\n### 安装coturn\n1. Ubuntu apt可以直接安装\n`apt-get install coturn`\n2. 编译安装\n* [GitHub地址](https://github.com/coturn/coturn)\n\n### 简单运行\n```cmd\nturnserver -o -a -f -v --mobility -m 2 --max-bps=100000 --min-port=32355 --max-port=65535 --user=账号:密码 -r demo -L公网ip\n```\n\n### 使用时配置参数\n```javascript\nconst peerConnectionConfig = {\n    iceServers: [\n        {\n            urls: \"stun:139.129.161.216:3478\",\n            username: '账号',\n            credential: '密码'\n        },\n        {\n            urls: \"turn:139.129.161.216:3478\",\n            username: '账号',\n            credential: '密码'\n        }\n    ]\n};\n\nconst pc = new RTCPeerConnection(peerConnectionConfig);\n```\n\n### 服务器测试\n测试网址：https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/","source":"_posts/webrtc-note-1.md","raw":"---\ntitle: WebRTC 服务端环境搭建-(IceServer)\ndate: 2019-01-25 15:11:11\ntags: ['webrtc','coturn']\ncategories: Web开发\n---\n\n### WebRTC 连接顺序\n1. 直接连接（两台设备直接可以访问对方，同一内网中）\n2. 通过stun服务器进行穿透\n3. 无法穿透则通过turn服务器中转\n\n### 安装coturn\n1. Ubuntu apt可以直接安装\n`apt-get install coturn`\n2. 编译安装\n* [GitHub地址](https://github.com/coturn/coturn)\n\n### 简单运行\n```cmd\nturnserver -o -a -f -v --mobility -m 2 --max-bps=100000 --min-port=32355 --max-port=65535 --user=账号:密码 -r demo -L公网ip\n```\n\n### 使用时配置参数\n```javascript\nconst peerConnectionConfig = {\n    iceServers: [\n        {\n            urls: \"stun:139.129.161.216:3478\",\n            username: '账号',\n            credential: '密码'\n        },\n        {\n            urls: \"turn:139.129.161.216:3478\",\n            username: '账号',\n            credential: '密码'\n        }\n    ]\n};\n\nconst pc = new RTCPeerConnection(peerConnectionConfig);\n```\n\n### 服务器测试\n测试网址：https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/","slug":"webrtc-note-1","published":1,"updated":"2019-07-12T02:58:28.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld9q003ke8we72nkp52b","content":"<h3 id=\"WebRTC-连接顺序\"><a href=\"#WebRTC-连接顺序\" class=\"headerlink\" title=\"WebRTC 连接顺序\"></a>WebRTC 连接顺序</h3><ol>\n<li>直接连接（两台设备直接可以访问对方，同一内网中）</li>\n<li>通过stun服务器进行穿透</li>\n<li>无法穿透则通过turn服务器中转</li>\n</ol>\n<h3 id=\"安装coturn\"><a href=\"#安装coturn\" class=\"headerlink\" title=\"安装coturn\"></a>安装coturn</h3><ol>\n<li>Ubuntu apt可以直接安装<br><code>apt-get install coturn</code></li>\n<li>编译安装</li>\n</ol>\n<ul>\n<li><a href=\"https://github.com/coturn/coturn\" target=\"_blank\" rel=\"noopener\">GitHub地址</a></li>\n</ul>\n<h3 id=\"简单运行\"><a href=\"#简单运行\" class=\"headerlink\" title=\"简单运行\"></a>简单运行</h3><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">turnserver -o -a -f -v --mobility -m <span class=\"number\">2</span> --max-bps=<span class=\"number\">100000</span> --min-port=<span class=\"number\">32355</span> --max-port=<span class=\"number\">65535</span> --user=账号:密码 -r demo -L公网ip</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用时配置参数\"><a href=\"#使用时配置参数\" class=\"headerlink\" title=\"使用时配置参数\"></a>使用时配置参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> peerConnectionConfig = &#123;</span><br><span class=\"line\">    iceServers: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            urls: <span class=\"string\">\"stun:139.129.161.216:3478\"</span>,</span><br><span class=\"line\">            username: <span class=\"string\">'账号'</span>,</span><br><span class=\"line\">            credential: <span class=\"string\">'密码'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            urls: <span class=\"string\">\"turn:139.129.161.216:3478\"</span>,</span><br><span class=\"line\">            username: <span class=\"string\">'账号'</span>,</span><br><span class=\"line\">            credential: <span class=\"string\">'密码'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> pc = <span class=\"keyword\">new</span> RTCPeerConnection(peerConnectionConfig);</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务器测试\"><a href=\"#服务器测试\" class=\"headerlink\" title=\"服务器测试\"></a>服务器测试</h3><p>测试网址：<a href=\"https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/\" target=\"_blank\" rel=\"noopener\">https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"WebRTC-连接顺序\"><a href=\"#WebRTC-连接顺序\" class=\"headerlink\" title=\"WebRTC 连接顺序\"></a>WebRTC 连接顺序</h3><ol>\n<li>直接连接（两台设备直接可以访问对方，同一内网中）</li>\n<li>通过stun服务器进行穿透</li>\n<li>无法穿透则通过turn服务器中转</li>\n</ol>\n<h3 id=\"安装coturn\"><a href=\"#安装coturn\" class=\"headerlink\" title=\"安装coturn\"></a>安装coturn</h3><ol>\n<li>Ubuntu apt可以直接安装<br><code>apt-get install coturn</code></li>\n<li>编译安装</li>\n</ol>\n<ul>\n<li><a href=\"https://github.com/coturn/coturn\" target=\"_blank\" rel=\"noopener\">GitHub地址</a></li>\n</ul>\n<h3 id=\"简单运行\"><a href=\"#简单运行\" class=\"headerlink\" title=\"简单运行\"></a>简单运行</h3><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">turnserver -o -a -f -v --mobility -m <span class=\"number\">2</span> --max-bps=<span class=\"number\">100000</span> --min-port=<span class=\"number\">32355</span> --max-port=<span class=\"number\">65535</span> --user=账号:密码 -r demo -L公网ip</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用时配置参数\"><a href=\"#使用时配置参数\" class=\"headerlink\" title=\"使用时配置参数\"></a>使用时配置参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> peerConnectionConfig = &#123;</span><br><span class=\"line\">    iceServers: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            urls: <span class=\"string\">\"stun:139.129.161.216:3478\"</span>,</span><br><span class=\"line\">            username: <span class=\"string\">'账号'</span>,</span><br><span class=\"line\">            credential: <span class=\"string\">'密码'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            urls: <span class=\"string\">\"turn:139.129.161.216:3478\"</span>,</span><br><span class=\"line\">            username: <span class=\"string\">'账号'</span>,</span><br><span class=\"line\">            credential: <span class=\"string\">'密码'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> pc = <span class=\"keyword\">new</span> RTCPeerConnection(peerConnectionConfig);</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务器测试\"><a href=\"#服务器测试\" class=\"headerlink\" title=\"服务器测试\"></a>服务器测试</h3><p>测试网址：<a href=\"https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/\" target=\"_blank\" rel=\"noopener\">https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/</a></p>\n"},{"title":"快速学习css相关参考文档","date":"2018-08-14T08:18:29.000Z","_content":"\n1. [30 Seconds of CSS](https://atomiks.github.io/30-seconds-of-css/#mouse-cursor-gradient-tracking)\n","source":"_posts/快速学习css.md","raw":"---\ntitle: 快速学习css相关参考文档\ndate: 2018-08-14 16:18:29\ntags: css\n---\n\n1. [30 Seconds of CSS](https://atomiks.github.io/30-seconds-of-css/#mouse-cursor-gradient-tracking)\n","slug":"快速学习css","published":1,"updated":"2019-07-05T04:24:05.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld9s003ne8welgmrbplf","content":"<ol>\n<li><a href=\"https://atomiks.github.io/30-seconds-of-css/#mouse-cursor-gradient-tracking\" target=\"_blank\" rel=\"noopener\">30 Seconds of CSS</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><a href=\"https://atomiks.github.io/30-seconds-of-css/#mouse-cursor-gradient-tracking\" target=\"_blank\" rel=\"noopener\">30 Seconds of CSS</a></li>\n</ol>\n"},{"title":"端到端测试","date":"2018-12-12T08:02:14.000Z","_content":"\n## 简介\n端到端测试是一种用于测试应用程序流程是否按照设计从头到尾执行的方法。 执行端到端测试的目的是识别系统依赖性并确保在各种系统组件和系统之间传递正确的信息。\n\n测试，尤其是自动化测试在现代 WEB 工程中有着非常重要的角色，与交付过程集成良好的自动化测试流程可以在新版发布时帮你快速回归产品功能，也可以充当产品文档。测试因粒度不同又可以分为单元测试、接口测试、功能测试。在 WEB 领域，功能测试亦称为端到端测试（End to End Test，简称 E2E 测试）\n<!--more-->\n\n## Node.js中常见的几种e2e测试工具\n\n1. CasperJS [官网](http://casperjs.org/)\nCasperJS允许您使用高级功能和直接界面构建完整的导航场景，以完成各种规模的任务。\n\n2. Protractor [官网](http://www.protractortest.org)\nProtractor是Angular和AngularJS应用程序的端到端测试框架。 Protractor针对在真实浏览器中运行的应用程序运行测试，并以用户的身份与其进行交互。\n\n3. Nightwatch.js [官网](http://nightwatchjs.org/)\nNightwatch.js是一款易于使用的基于Node.js的端到端（E2E）测试解决方案，适用于基于浏览器的应用和网站。 它使用功能强大的W3C WebDriver API对DOM元素执行命令和断言。\n\n4. TestCafe [官网](https://devexpress.github.io/testcafe/)\nTestCafe 是非常年轻但很受开发者欢迎的测试框架，因为不需要依赖 WebDriver 之类的东西，TestCafe 环境只需一键即可完成，这也意味着，你可以在任何安装了浏览器应用的物理设备上运行测试。TestCafe 对 ES6/ES7 语法的天然支持让它更具前瞻性，命令行工具产生的测试报告简洁但不失完整。由于开源的时间较短，相比于其他测试框架 TestCafe 的社区和生态还不够成熟。尽管如此，不断出现的各种 TestCafe 功能扩展也证明了它的社区和生态在不断壮大。对于站在 WEB 技术风口浪尖的同学，TestCafe 无疑是非常值得留意的 E2E 测试解决方案，开箱即用的特性极大的降低了使用者的成本。\n\n## 编写我的测试代码 CasperJS\n1. 打卡我们之前创建的weapack-example项目\n2. 安装casperjs `npm install casperjs`\n3. 安装测试应用程序，下载地址：http://phantomjs.org/download.html\n3. 在项目根目录中创建test文件夹，并创建一个测试文件index.js\n4. 把测试脚本运行指令写入package.json文件中\n```json\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"npx webpack --mode production\",\n    \"e2e\": \"node_modules/casperjs/bin/casperjs test test/index.js\"\n  },\n```\n5. 在index.js中写入下面测试代码\n```js\ncasper.test.begin('测试查询结果是否有效', function (test) {\n    casper.start('http://localhost', function () {\n        test.assertVisible('#search_input', '我能看到搜索窗口');\n        this.sendKeys(\"#search_input\", 'A', { keepFocus: true });\n        this.echo('第一个打开的页面的标题是: ' + this.getTitle());\n    });\n\n    casper.then(function () {\n        var input = this.evaluate(function () {\n            return document.querySelector('input');\n        });\n        this.echo('输入框的值:' + input.value)\n    });\n\n    casper.run(function () {\n        test.done();\n    });\n});\n```\n\n## 编写我的测试代码 Protractor\n1. 创建一个Angular项目，这里以ng-tui/dashboard项目为例子\n2. 默认配置好了Protractor无需特别的配置\n3. 编写测试文件 e2ea/app.e2e-spec.ts\n4. 编写登入测试脚本\n```typescript\nimport { browser, by, element } from 'protractor';\n\ndescribe('workspace-project App', () => {\n\n    it('登入成功', () => {\n        browser.get('/').then(() => {\n            // 获取账号输入框\n            const accountInput = element(by.css('input[name=\"account\"]'));\n            // 获取密码输入框\n            const passwordInput = element(by.css('input[name=\"password\"]'));\n            // 获取提交按钮\n            const submitBtn = element(by.css('.btn-block'));\n            // 自动输入账号密码\n            accountInput.sendKeys('admin');\n            passwordInput.sendKeys('123456789');\n            // 按下提交按钮\n            submitBtn.click();\n            // 成功跳转到首页\n            expect(browser.getCurrentUrl()).toBe('http://localhost:4200/home');000);\n        });\n    });\n});\n\n```\n\n## 断言\n```js\nconst assert = require('assert');\nconst faker = require('faker');\nconst request = require('superagent')\n\n// 简单测试\nconst now = Date.now();\nconsole.log(now);\n// assert.ok(now % 2 === 0, '时间戳必须是偶数');\n\n// 接口测试\nconst limit = faker.random.number({ min: 1, max: 10 });\nrequest.get('https://www.cool1024.com/store/goods/search?limit=' + limit + '&offset=0').end(function (err, res) {\n    assert.ok(200 === res.status, '响应码必须是200');\n    const json = JSON.parse(res.text);\n    assert.ok(true === json.result, '接口调用必须成功');\n    const data = json.datas;\n    assert.ok(Array.isArray(data.rows), 'ROWS必须是数组');\n    assert.ok(data.rows.length <= limit, '查询的数据量不能大于LIMIT');\n    console.log(data);\n});\n```\n## mocha\n```js\nconst assert = require('assert');\nconst request = require('superagent')\n\ndescribe('商品模块测试', function () {\n\n    it('商品列表测试', function () {\n        return request.get('https://www.cool1024.com/store/goods/search?limit=10&offset=0')\n            .then(function (res) {\n                assert.ok(200 === res.status, '响应码必须是200');\n            });\n    });\n\n    it('商品详情测试', function () {\n        return request.get('https://www.cool1024.com/store/goods/get?goodsId=4')\n            .then(function (res) {\n                assert.ok(200 === res.status, '响应码必须是200');\n            });\n    });\n});\n```\n\n## selenium-webdriver\n```js\nrequire('chromedriver');\nconst { Builder, By, Key, until } = require('selenium-webdriver');\nvar driver = new Builder()\n    .forBrowser('chrome')\n    .build();\n(async function () {\n    try {\n        await driver.get('https://search.jd.com');\n        await driver.findElement(By.id('keyword')).sendKeys('键盘');\n        await driver.findElement(By.className('input_submit')).click();\n        const text = await driver.findElement(By.className('gl-warp'));\n        console.log(text);\n    } finally {\n        await driver.quit();\n    }\n})();\n```","source":"_posts/test-note-e2e.md","raw":"---\ntitle: 端到端测试\ndate: 2018-12-12 16:02:14\ntags: e2e\ncategories: Web开发\n---\n\n## 简介\n端到端测试是一种用于测试应用程序流程是否按照设计从头到尾执行的方法。 执行端到端测试的目的是识别系统依赖性并确保在各种系统组件和系统之间传递正确的信息。\n\n测试，尤其是自动化测试在现代 WEB 工程中有着非常重要的角色，与交付过程集成良好的自动化测试流程可以在新版发布时帮你快速回归产品功能，也可以充当产品文档。测试因粒度不同又可以分为单元测试、接口测试、功能测试。在 WEB 领域，功能测试亦称为端到端测试（End to End Test，简称 E2E 测试）\n<!--more-->\n\n## Node.js中常见的几种e2e测试工具\n\n1. CasperJS [官网](http://casperjs.org/)\nCasperJS允许您使用高级功能和直接界面构建完整的导航场景，以完成各种规模的任务。\n\n2. Protractor [官网](http://www.protractortest.org)\nProtractor是Angular和AngularJS应用程序的端到端测试框架。 Protractor针对在真实浏览器中运行的应用程序运行测试，并以用户的身份与其进行交互。\n\n3. Nightwatch.js [官网](http://nightwatchjs.org/)\nNightwatch.js是一款易于使用的基于Node.js的端到端（E2E）测试解决方案，适用于基于浏览器的应用和网站。 它使用功能强大的W3C WebDriver API对DOM元素执行命令和断言。\n\n4. TestCafe [官网](https://devexpress.github.io/testcafe/)\nTestCafe 是非常年轻但很受开发者欢迎的测试框架，因为不需要依赖 WebDriver 之类的东西，TestCafe 环境只需一键即可完成，这也意味着，你可以在任何安装了浏览器应用的物理设备上运行测试。TestCafe 对 ES6/ES7 语法的天然支持让它更具前瞻性，命令行工具产生的测试报告简洁但不失完整。由于开源的时间较短，相比于其他测试框架 TestCafe 的社区和生态还不够成熟。尽管如此，不断出现的各种 TestCafe 功能扩展也证明了它的社区和生态在不断壮大。对于站在 WEB 技术风口浪尖的同学，TestCafe 无疑是非常值得留意的 E2E 测试解决方案，开箱即用的特性极大的降低了使用者的成本。\n\n## 编写我的测试代码 CasperJS\n1. 打卡我们之前创建的weapack-example项目\n2. 安装casperjs `npm install casperjs`\n3. 安装测试应用程序，下载地址：http://phantomjs.org/download.html\n3. 在项目根目录中创建test文件夹，并创建一个测试文件index.js\n4. 把测试脚本运行指令写入package.json文件中\n```json\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"npx webpack --mode production\",\n    \"e2e\": \"node_modules/casperjs/bin/casperjs test test/index.js\"\n  },\n```\n5. 在index.js中写入下面测试代码\n```js\ncasper.test.begin('测试查询结果是否有效', function (test) {\n    casper.start('http://localhost', function () {\n        test.assertVisible('#search_input', '我能看到搜索窗口');\n        this.sendKeys(\"#search_input\", 'A', { keepFocus: true });\n        this.echo('第一个打开的页面的标题是: ' + this.getTitle());\n    });\n\n    casper.then(function () {\n        var input = this.evaluate(function () {\n            return document.querySelector('input');\n        });\n        this.echo('输入框的值:' + input.value)\n    });\n\n    casper.run(function () {\n        test.done();\n    });\n});\n```\n\n## 编写我的测试代码 Protractor\n1. 创建一个Angular项目，这里以ng-tui/dashboard项目为例子\n2. 默认配置好了Protractor无需特别的配置\n3. 编写测试文件 e2ea/app.e2e-spec.ts\n4. 编写登入测试脚本\n```typescript\nimport { browser, by, element } from 'protractor';\n\ndescribe('workspace-project App', () => {\n\n    it('登入成功', () => {\n        browser.get('/').then(() => {\n            // 获取账号输入框\n            const accountInput = element(by.css('input[name=\"account\"]'));\n            // 获取密码输入框\n            const passwordInput = element(by.css('input[name=\"password\"]'));\n            // 获取提交按钮\n            const submitBtn = element(by.css('.btn-block'));\n            // 自动输入账号密码\n            accountInput.sendKeys('admin');\n            passwordInput.sendKeys('123456789');\n            // 按下提交按钮\n            submitBtn.click();\n            // 成功跳转到首页\n            expect(browser.getCurrentUrl()).toBe('http://localhost:4200/home');000);\n        });\n    });\n});\n\n```\n\n## 断言\n```js\nconst assert = require('assert');\nconst faker = require('faker');\nconst request = require('superagent')\n\n// 简单测试\nconst now = Date.now();\nconsole.log(now);\n// assert.ok(now % 2 === 0, '时间戳必须是偶数');\n\n// 接口测试\nconst limit = faker.random.number({ min: 1, max: 10 });\nrequest.get('https://www.cool1024.com/store/goods/search?limit=' + limit + '&offset=0').end(function (err, res) {\n    assert.ok(200 === res.status, '响应码必须是200');\n    const json = JSON.parse(res.text);\n    assert.ok(true === json.result, '接口调用必须成功');\n    const data = json.datas;\n    assert.ok(Array.isArray(data.rows), 'ROWS必须是数组');\n    assert.ok(data.rows.length <= limit, '查询的数据量不能大于LIMIT');\n    console.log(data);\n});\n```\n## mocha\n```js\nconst assert = require('assert');\nconst request = require('superagent')\n\ndescribe('商品模块测试', function () {\n\n    it('商品列表测试', function () {\n        return request.get('https://www.cool1024.com/store/goods/search?limit=10&offset=0')\n            .then(function (res) {\n                assert.ok(200 === res.status, '响应码必须是200');\n            });\n    });\n\n    it('商品详情测试', function () {\n        return request.get('https://www.cool1024.com/store/goods/get?goodsId=4')\n            .then(function (res) {\n                assert.ok(200 === res.status, '响应码必须是200');\n            });\n    });\n});\n```\n\n## selenium-webdriver\n```js\nrequire('chromedriver');\nconst { Builder, By, Key, until } = require('selenium-webdriver');\nvar driver = new Builder()\n    .forBrowser('chrome')\n    .build();\n(async function () {\n    try {\n        await driver.get('https://search.jd.com');\n        await driver.findElement(By.id('keyword')).sendKeys('键盘');\n        await driver.findElement(By.className('input_submit')).click();\n        const text = await driver.findElement(By.className('gl-warp'));\n        console.log(text);\n    } finally {\n        await driver.quit();\n    }\n})();\n```","slug":"test-note-e2e","published":1,"updated":"2019-07-12T03:01:32.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld9u003pe8we9ww5mfmf","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>端到端测试是一种用于测试应用程序流程是否按照设计从头到尾执行的方法。 执行端到端测试的目的是识别系统依赖性并确保在各种系统组件和系统之间传递正确的信息。</p>\n<p>测试，尤其是自动化测试在现代 WEB 工程中有着非常重要的角色，与交付过程集成良好的自动化测试流程可以在新版发布时帮你快速回归产品功能，也可以充当产品文档。测试因粒度不同又可以分为单元测试、接口测试、功能测试。在 WEB 领域，功能测试亦称为端到端测试（End to End Test，简称 E2E 测试）<br><a id=\"more\"></a></p>\n<h2 id=\"Node-js中常见的几种e2e测试工具\"><a href=\"#Node-js中常见的几种e2e测试工具\" class=\"headerlink\" title=\"Node.js中常见的几种e2e测试工具\"></a>Node.js中常见的几种e2e测试工具</h2><ol>\n<li><p>CasperJS <a href=\"http://casperjs.org/\" target=\"_blank\" rel=\"noopener\">官网</a><br>CasperJS允许您使用高级功能和直接界面构建完整的导航场景，以完成各种规模的任务。</p>\n</li>\n<li><p>Protractor <a href=\"http://www.protractortest.org\" target=\"_blank\" rel=\"noopener\">官网</a><br>Protractor是Angular和AngularJS应用程序的端到端测试框架。 Protractor针对在真实浏览器中运行的应用程序运行测试，并以用户的身份与其进行交互。</p>\n</li>\n<li><p>Nightwatch.js <a href=\"http://nightwatchjs.org/\" target=\"_blank\" rel=\"noopener\">官网</a><br>Nightwatch.js是一款易于使用的基于Node.js的端到端（E2E）测试解决方案，适用于基于浏览器的应用和网站。 它使用功能强大的W3C WebDriver API对DOM元素执行命令和断言。</p>\n</li>\n<li><p>TestCafe <a href=\"https://devexpress.github.io/testcafe/\" target=\"_blank\" rel=\"noopener\">官网</a><br>TestCafe 是非常年轻但很受开发者欢迎的测试框架，因为不需要依赖 WebDriver 之类的东西，TestCafe 环境只需一键即可完成，这也意味着，你可以在任何安装了浏览器应用的物理设备上运行测试。TestCafe 对 ES6/ES7 语法的天然支持让它更具前瞻性，命令行工具产生的测试报告简洁但不失完整。由于开源的时间较短，相比于其他测试框架 TestCafe 的社区和生态还不够成熟。尽管如此，不断出现的各种 TestCafe 功能扩展也证明了它的社区和生态在不断壮大。对于站在 WEB 技术风口浪尖的同学，TestCafe 无疑是非常值得留意的 E2E 测试解决方案，开箱即用的特性极大的降低了使用者的成本。</p>\n</li>\n</ol>\n<h2 id=\"编写我的测试代码-CasperJS\"><a href=\"#编写我的测试代码-CasperJS\" class=\"headerlink\" title=\"编写我的测试代码 CasperJS\"></a>编写我的测试代码 CasperJS</h2><ol>\n<li>打卡我们之前创建的weapack-example项目</li>\n<li>安装casperjs <code>npm install casperjs</code></li>\n<li>安装测试应用程序，下载地址：<a href=\"http://phantomjs.org/download.html\" target=\"_blank\" rel=\"noopener\">http://phantomjs.org/download.html</a></li>\n<li>在项目根目录中创建test文件夹，并创建一个测试文件index.js</li>\n<li><p>把测试脚本运行指令写入package.json文件中</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",</span><br><span class=\"line\">  \"build\": \"npx webpack --mode production\",</span><br><span class=\"line\">  \"e2e\": \"node_modules/casperjs/bin/casperjs test test/index.js\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在index.js中写入下面测试代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">casper.test.begin(<span class=\"string\">'测试查询结果是否有效'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">test</span>) </span>&#123;</span><br><span class=\"line\">    casper.start(<span class=\"string\">'http://localhost'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        test.assertVisible(<span class=\"string\">'#search_input'</span>, <span class=\"string\">'我能看到搜索窗口'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sendKeys(<span class=\"string\">\"#search_input\"</span>, <span class=\"string\">'A'</span>, &#123; <span class=\"attr\">keepFocus</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.echo(<span class=\"string\">'第一个打开的页面的标题是: '</span> + <span class=\"keyword\">this</span>.getTitle());</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    casper.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> input = <span class=\"keyword\">this</span>.evaluate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'input'</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.echo(<span class=\"string\">'输入框的值:'</span> + input.value)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    casper.run(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        test.done();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"编写我的测试代码-Protractor\"><a href=\"#编写我的测试代码-Protractor\" class=\"headerlink\" title=\"编写我的测试代码 Protractor\"></a>编写我的测试代码 Protractor</h2><ol>\n<li>创建一个Angular项目，这里以ng-tui/dashboard项目为例子</li>\n<li>默认配置好了Protractor无需特别的配置</li>\n<li>编写测试文件 e2ea/app.e2e-spec.ts</li>\n<li>编写登入测试脚本<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; browser, by, element &#125; <span class=\"keyword\">from</span> <span class=\"string\">'protractor'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'workspace-project App'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'登入成功'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        browser.get(<span class=\"string\">'/'</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取账号输入框</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> accountInput = element(by.css(<span class=\"string\">'input[name=\"account\"]'</span>));</span><br><span class=\"line\">            <span class=\"comment\">// 获取密码输入框</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> passwordInput = element(by.css(<span class=\"string\">'input[name=\"password\"]'</span>));</span><br><span class=\"line\">            <span class=\"comment\">// 获取提交按钮</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> submitBtn = element(by.css(<span class=\"string\">'.btn-block'</span>));</span><br><span class=\"line\">            <span class=\"comment\">// 自动输入账号密码</span></span><br><span class=\"line\">            accountInput.sendKeys(<span class=\"string\">'admin'</span>);</span><br><span class=\"line\">            passwordInput.sendKeys(<span class=\"string\">'123456789'</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 按下提交按钮</span></span><br><span class=\"line\">            submitBtn.click();</span><br><span class=\"line\">            <span class=\"comment\">// 成功跳转到首页</span></span><br><span class=\"line\">            expect(browser.getCurrentUrl()).toBe(<span class=\"string\">'http://localhost:4200/home'</span>);<span class=\"number\">000</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> assert = <span class=\"built_in\">require</span>(<span class=\"string\">'assert'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> faker = <span class=\"built_in\">require</span>(<span class=\"string\">'faker'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'superagent'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简单测试</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(now);</span><br><span class=\"line\"><span class=\"comment\">// assert.ok(now % 2 === 0, '时间戳必须是偶数');</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接口测试</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> limit = faker.random.number(&#123; <span class=\"attr\">min</span>: <span class=\"number\">1</span>, <span class=\"attr\">max</span>: <span class=\"number\">10</span> &#125;);</span><br><span class=\"line\">request.get(<span class=\"string\">'https://www.cool1024.com/store/goods/search?limit='</span> + limit + <span class=\"string\">'&amp;offset=0'</span>).end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    assert.ok(<span class=\"number\">200</span> === res.status, <span class=\"string\">'响应码必须是200'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> json = <span class=\"built_in\">JSON</span>.parse(res.text);</span><br><span class=\"line\">    assert.ok(<span class=\"literal\">true</span> === json.result, <span class=\"string\">'接口调用必须成功'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = json.datas;</span><br><span class=\"line\">    assert.ok(<span class=\"built_in\">Array</span>.isArray(data.rows), <span class=\"string\">'ROWS必须是数组'</span>);</span><br><span class=\"line\">    assert.ok(data.rows.length &lt;= limit, <span class=\"string\">'查询的数据量不能大于LIMIT'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"mocha\"><a href=\"#mocha\" class=\"headerlink\" title=\"mocha\"></a>mocha</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> assert = <span class=\"built_in\">require</span>(<span class=\"string\">'assert'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'superagent'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'商品模块测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'商品列表测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> request.get(<span class=\"string\">'https://www.cool1024.com/store/goods/search?limit=10&amp;offset=0'</span>)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">                assert.ok(<span class=\"number\">200</span> === res.status, <span class=\"string\">'响应码必须是200'</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'商品详情测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> request.get(<span class=\"string\">'https://www.cool1024.com/store/goods/get?goodsId=4'</span>)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">                assert.ok(<span class=\"number\">200</span> === res.status, <span class=\"string\">'响应码必须是200'</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"selenium-webdriver\"><a href=\"#selenium-webdriver\" class=\"headerlink\" title=\"selenium-webdriver\"></a>selenium-webdriver</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'chromedriver'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; Builder, By, Key, until &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'selenium-webdriver'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> driver = <span class=\"keyword\">new</span> Builder()</span><br><span class=\"line\">    .forBrowser(<span class=\"string\">'chrome'</span>)</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> driver.get(<span class=\"string\">'https://search.jd.com'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> driver.findElement(By.id(<span class=\"string\">'keyword'</span>)).sendKeys(<span class=\"string\">'键盘'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> driver.findElement(By.className(<span class=\"string\">'input_submit'</span>)).click();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> text = <span class=\"keyword\">await</span> driver.findElement(By.className(<span class=\"string\">'gl-warp'</span>));</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(text);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> driver.quit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>端到端测试是一种用于测试应用程序流程是否按照设计从头到尾执行的方法。 执行端到端测试的目的是识别系统依赖性并确保在各种系统组件和系统之间传递正确的信息。</p>\n<p>测试，尤其是自动化测试在现代 WEB 工程中有着非常重要的角色，与交付过程集成良好的自动化测试流程可以在新版发布时帮你快速回归产品功能，也可以充当产品文档。测试因粒度不同又可以分为单元测试、接口测试、功能测试。在 WEB 领域，功能测试亦称为端到端测试（End to End Test，简称 E2E 测试）<br>","more":"</p>\n<h2 id=\"Node-js中常见的几种e2e测试工具\"><a href=\"#Node-js中常见的几种e2e测试工具\" class=\"headerlink\" title=\"Node.js中常见的几种e2e测试工具\"></a>Node.js中常见的几种e2e测试工具</h2><ol>\n<li><p>CasperJS <a href=\"http://casperjs.org/\" target=\"_blank\" rel=\"noopener\">官网</a><br>CasperJS允许您使用高级功能和直接界面构建完整的导航场景，以完成各种规模的任务。</p>\n</li>\n<li><p>Protractor <a href=\"http://www.protractortest.org\" target=\"_blank\" rel=\"noopener\">官网</a><br>Protractor是Angular和AngularJS应用程序的端到端测试框架。 Protractor针对在真实浏览器中运行的应用程序运行测试，并以用户的身份与其进行交互。</p>\n</li>\n<li><p>Nightwatch.js <a href=\"http://nightwatchjs.org/\" target=\"_blank\" rel=\"noopener\">官网</a><br>Nightwatch.js是一款易于使用的基于Node.js的端到端（E2E）测试解决方案，适用于基于浏览器的应用和网站。 它使用功能强大的W3C WebDriver API对DOM元素执行命令和断言。</p>\n</li>\n<li><p>TestCafe <a href=\"https://devexpress.github.io/testcafe/\" target=\"_blank\" rel=\"noopener\">官网</a><br>TestCafe 是非常年轻但很受开发者欢迎的测试框架，因为不需要依赖 WebDriver 之类的东西，TestCafe 环境只需一键即可完成，这也意味着，你可以在任何安装了浏览器应用的物理设备上运行测试。TestCafe 对 ES6/ES7 语法的天然支持让它更具前瞻性，命令行工具产生的测试报告简洁但不失完整。由于开源的时间较短，相比于其他测试框架 TestCafe 的社区和生态还不够成熟。尽管如此，不断出现的各种 TestCafe 功能扩展也证明了它的社区和生态在不断壮大。对于站在 WEB 技术风口浪尖的同学，TestCafe 无疑是非常值得留意的 E2E 测试解决方案，开箱即用的特性极大的降低了使用者的成本。</p>\n</li>\n</ol>\n<h2 id=\"编写我的测试代码-CasperJS\"><a href=\"#编写我的测试代码-CasperJS\" class=\"headerlink\" title=\"编写我的测试代码 CasperJS\"></a>编写我的测试代码 CasperJS</h2><ol>\n<li>打卡我们之前创建的weapack-example项目</li>\n<li>安装casperjs <code>npm install casperjs</code></li>\n<li>安装测试应用程序，下载地址：<a href=\"http://phantomjs.org/download.html\" target=\"_blank\" rel=\"noopener\">http://phantomjs.org/download.html</a></li>\n<li>在项目根目录中创建test文件夹，并创建一个测试文件index.js</li>\n<li><p>把测试脚本运行指令写入package.json文件中</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",</span><br><span class=\"line\">  \"build\": \"npx webpack --mode production\",</span><br><span class=\"line\">  \"e2e\": \"node_modules/casperjs/bin/casperjs test test/index.js\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在index.js中写入下面测试代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">casper.test.begin(<span class=\"string\">'测试查询结果是否有效'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">test</span>) </span>&#123;</span><br><span class=\"line\">    casper.start(<span class=\"string\">'http://localhost'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        test.assertVisible(<span class=\"string\">'#search_input'</span>, <span class=\"string\">'我能看到搜索窗口'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sendKeys(<span class=\"string\">\"#search_input\"</span>, <span class=\"string\">'A'</span>, &#123; <span class=\"attr\">keepFocus</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.echo(<span class=\"string\">'第一个打开的页面的标题是: '</span> + <span class=\"keyword\">this</span>.getTitle());</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    casper.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> input = <span class=\"keyword\">this</span>.evaluate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'input'</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.echo(<span class=\"string\">'输入框的值:'</span> + input.value)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    casper.run(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        test.done();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"编写我的测试代码-Protractor\"><a href=\"#编写我的测试代码-Protractor\" class=\"headerlink\" title=\"编写我的测试代码 Protractor\"></a>编写我的测试代码 Protractor</h2><ol>\n<li>创建一个Angular项目，这里以ng-tui/dashboard项目为例子</li>\n<li>默认配置好了Protractor无需特别的配置</li>\n<li>编写测试文件 e2ea/app.e2e-spec.ts</li>\n<li>编写登入测试脚本<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; browser, by, element &#125; <span class=\"keyword\">from</span> <span class=\"string\">'protractor'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'workspace-project App'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'登入成功'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        browser.get(<span class=\"string\">'/'</span>).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取账号输入框</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> accountInput = element(by.css(<span class=\"string\">'input[name=\"account\"]'</span>));</span><br><span class=\"line\">            <span class=\"comment\">// 获取密码输入框</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> passwordInput = element(by.css(<span class=\"string\">'input[name=\"password\"]'</span>));</span><br><span class=\"line\">            <span class=\"comment\">// 获取提交按钮</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> submitBtn = element(by.css(<span class=\"string\">'.btn-block'</span>));</span><br><span class=\"line\">            <span class=\"comment\">// 自动输入账号密码</span></span><br><span class=\"line\">            accountInput.sendKeys(<span class=\"string\">'admin'</span>);</span><br><span class=\"line\">            passwordInput.sendKeys(<span class=\"string\">'123456789'</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 按下提交按钮</span></span><br><span class=\"line\">            submitBtn.click();</span><br><span class=\"line\">            <span class=\"comment\">// 成功跳转到首页</span></span><br><span class=\"line\">            expect(browser.getCurrentUrl()).toBe(<span class=\"string\">'http://localhost:4200/home'</span>);<span class=\"number\">000</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> assert = <span class=\"built_in\">require</span>(<span class=\"string\">'assert'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> faker = <span class=\"built_in\">require</span>(<span class=\"string\">'faker'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'superagent'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简单测试</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(now);</span><br><span class=\"line\"><span class=\"comment\">// assert.ok(now % 2 === 0, '时间戳必须是偶数');</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接口测试</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> limit = faker.random.number(&#123; <span class=\"attr\">min</span>: <span class=\"number\">1</span>, <span class=\"attr\">max</span>: <span class=\"number\">10</span> &#125;);</span><br><span class=\"line\">request.get(<span class=\"string\">'https://www.cool1024.com/store/goods/search?limit='</span> + limit + <span class=\"string\">'&amp;offset=0'</span>).end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    assert.ok(<span class=\"number\">200</span> === res.status, <span class=\"string\">'响应码必须是200'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> json = <span class=\"built_in\">JSON</span>.parse(res.text);</span><br><span class=\"line\">    assert.ok(<span class=\"literal\">true</span> === json.result, <span class=\"string\">'接口调用必须成功'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = json.datas;</span><br><span class=\"line\">    assert.ok(<span class=\"built_in\">Array</span>.isArray(data.rows), <span class=\"string\">'ROWS必须是数组'</span>);</span><br><span class=\"line\">    assert.ok(data.rows.length &lt;= limit, <span class=\"string\">'查询的数据量不能大于LIMIT'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"mocha\"><a href=\"#mocha\" class=\"headerlink\" title=\"mocha\"></a>mocha</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> assert = <span class=\"built_in\">require</span>(<span class=\"string\">'assert'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'superagent'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'商品模块测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'商品列表测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> request.get(<span class=\"string\">'https://www.cool1024.com/store/goods/search?limit=10&amp;offset=0'</span>)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">                assert.ok(<span class=\"number\">200</span> === res.status, <span class=\"string\">'响应码必须是200'</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'商品详情测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> request.get(<span class=\"string\">'https://www.cool1024.com/store/goods/get?goodsId=4'</span>)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">                assert.ok(<span class=\"number\">200</span> === res.status, <span class=\"string\">'响应码必须是200'</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"selenium-webdriver\"><a href=\"#selenium-webdriver\" class=\"headerlink\" title=\"selenium-webdriver\"></a>selenium-webdriver</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'chromedriver'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; Builder, By, Key, until &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'selenium-webdriver'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> driver = <span class=\"keyword\">new</span> Builder()</span><br><span class=\"line\">    .forBrowser(<span class=\"string\">'chrome'</span>)</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> driver.get(<span class=\"string\">'https://search.jd.com'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> driver.findElement(By.id(<span class=\"string\">'keyword'</span>)).sendKeys(<span class=\"string\">'键盘'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> driver.findElement(By.className(<span class=\"string\">'input_submit'</span>)).click();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> text = <span class=\"keyword\">await</span> driver.findElement(By.className(<span class=\"string\">'gl-warp'</span>));</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(text);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> driver.quit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>"},{"title":"Java线程速览(一)","date":"2019-07-09T11:08:35.000Z","_content":"\n## 线程\n**进程**是指一个内存中运行的应用程序，每个进程都有自己独立的一块内存空间，一个进程中可以启动多个线程。比如在Windows系统中，一个运行的exe就是一个进程。\n一条**线程**指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。\n\n## 用户线程与守护线程\n* 守护线程是服务提供者线程。当JVM检测到应用程序中的所有线程都只是守护线程时，它将退出应用程序。（如GC。任何一个守护线程都是整个JVM中所有非守护线程的保姆）；我们可以在线程start之前调用setDaemon(true)将它设置为守护线程\n* 用户线程即普通的线程\n\n## 创建线程\n* 通过实现 Runnable 接口；\n创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类，实现其run方法\n\n* 通过继承 Thread 类本身\n创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。\n\n该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。\n* 通过 Callable 和 Future 创建线程\n a. 创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。\n b. 创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。\n c. 使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。\n d. 调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。\n<!--more-->\n\nRunnableExample.kt\n```Kotlin\npackage com.cool1024\n\nclass RunnableExample:Runnable{\n    override fun run(){\n        println(\"RunnableExample\")\n    }\n}\n```\n\nThreadExample.kt\n```Kotlin\npackage com.cool1024\n\nclass ThreadExample:Thread(){\n    override fun run(){\n        println(\"ThreadExample\")\n    }\n}\n```\n\nCallableExample.kt\n```Kotlin\npackage com.cool1024\n\nimport java.util.concurrent.Callable\n\nclass CallableExample:Callable<Boolean>{\n    override fun call():Boolean{\n        println(\"CallableExample\")\n        return true\n    }\n}\n```\n\nApp.kt\n```Kotlin\npackage com.cool1024\n\nimport java.util.concurrent.FutureTask\n\nobject App{\n    @JvmStatic\n    fun main(args: Array<String>) {\n        val runnableExample = Thread(RunnableExample())\n        runnableExample.start()\n        val threadExample = ThreadExample()\n        threadExample.start()\n        val callableExample = CallableExample()\n        val futureTask = FutureTask<Boolean>(callableExample)\n        Thread(futureTask).start()\n        println(\"Return value${futureTask.get()}\")\n    }\n}\n```\n\n> 1. 采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。\n2. 使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。\n\n## 线程生命周期\n[参考博客地址](https://www.cnblogs.com/sunddenly/p/4106562.html) https://www.cnblogs.com/sunddenly/p/4106562.html\n![生命周期图](/images/kotlin/thread-life.png)\n\n* **新建状态**:\n使用 new 关键字和 Thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start() 这个线程。\n\n* **就绪状态**:\n当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。\n\n* **运行状态**:\n如果就绪状态的线程获取 CPU 资源，就可以执行 run()，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。\n\n* **阻塞状态**:\n如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：\n\n * 等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。\n\n * 同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。\n\n * 其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。\n\n* **死亡状态**:\n一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。\n\n## 线程的优先级\n每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。Java 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。\n\n## 线程的相关操作\n\n* `public void start()` 使线程进入就绪状态，随时等待系统调度（使该线程开始执行）\n* `public final void setName(String name)` 设置线程的名称\n* `public final void setPriority(int priority)` 设置线程的优先级\n* `public void interrupt()` 中断线程\n* `public final boolean isAlive()` 判处线程是否处于活动状态(调用start方法后直到终止之前都是活跃)\n* `public static void yield()`\n暂停当前正在执行的线程对象，并执行其他线程。\n* `public static void sleep(long millisec)`\n在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。\n\n\n## 相关参考代码\n\n1. 使用`isAlive`判断线程是否处在活动状态,`currentThread`获取当前所在线程,`sleep`让线程休眠（暂停执行）\n\n```Kotlin\nclass RunnableExample:Runnable{\n    override fun run(){\n        println(\"RunnableExample:${Thread.currentThread().isAlive()}\")\n        Thread.sleep(2000)\n    }\n}\n\nobject App{\n    @JvmStatic\n    fun main(args: Array<String>) {\n        val runnableExample = Thread(RunnableExample())\n        runnableExample.start()\n        for(i in 0 until 10){\n            Thread.sleep(1000)\n            println(\"MainThread-RunnableExample:${runnableExample.isAlive()}\")\n        }\n    }\n}\n```\n\n前2秒打印结果为true，2秒后线程结束，打印false\n```\nRunnableExample:true\nMainThread-RunnableExample:true\nMainThread-RunnableExample:true\nMainThread-RunnableExample:false\nMainThread-RunnableExample:false\nMainThread-RunnableExample:false\nMainThread-RunnableExample:false\nMainThread-RunnableExample:false\nMainThread-RunnableExample:false\nMainThread-RunnableExample:false\nMainThread-RunnableExample:false\n```\n\n2. 使用`interrupt`终止线程的执行，注意这个方法不会立即终止线程，它只是给当前线程发送了一个停止标记，实际情况需要我们自行处理\n\n```Kotlin\nclass RunnableExample:Runnable{\n    override fun run(){\n        try{\n            for(i in 0 until 100){\n                if(Thread.interrupted()){\n                    throw InterruptedException(\"我要被停止了\")\n                }\n                println(\"RunnableExample:$i\")\n            }\n        }catch(e:InterruptedException){\n            println(\"RunnableExample:终止\")\n            e.printStackTrace()\n        }\n    }\n}\n\nobject App{\n    @JvmStatic\n    fun main(args: Array<String>) {\n        val runnableExample = Thread(RunnableExample())\n        runnableExample.start()\n        Thread.sleep(1000)\n        runnableExample.interrupt()\n        Thread.sleep(1000)\n    }\n}\n```\n\n线程在1秒前正常输入，而后我们在主线程发出了中断请求`runnableExample.interrupt()`,线程中通过`Thread.interrupted()`判断是否要终止，确认后抛出异常而停止\n```\nRunnableExample:0\n...\n...\nRunnableExample:1860\nRunnableExample:1861\nRunnableExample:1862\nRunnableExample:1863\nRunnableExample:1864\nRunnableExample:1865\nRunnableExample:终止\njava.lang.InterruptedException: 我要被停止了\n        at com.cool1024.RunnableExample.run(RunnableExample.kt:8)\n        at java.lang.Thread.run(Thread.java:748)\n```\n\n停止线程的方法:\na. 使用退出标志\n```Java\npublic class TempThread extends Thread {\n    public volatile boolean exit = false; \n        public void run() { \n        while (!exit){\n            //do something\n        }\n    } \n}\n```\nb. 使用interrupt()方法中断当前线程\nc. 使用stop()方法强行终止（弃用了）\n\n3. `yeild()`使当前线程从运行状态转变为就绪状态,让出自己的CUP资源，然后重新在就绪队列中选择线程执行（可能又是自己，让出去任然有可能被再次执行）\n\n```Kotlin\nclass RunnableExample:Runnable{\n    override fun run(){\n        for(i in 0 until 100){\n            println(\"Name:${Thread.currentThread().name},$i\")\n            Thread.sleep(1000)\n        }\n    }\n}\n\nclass RunnableYeildExample:Runnable{\n    override fun run(){\n        for(i in 0 until 100){\n            println(\"Name:${Thread.currentThread().name},$i\")\n            Thread.yield()\n            Thread.sleep(1000)\n        }\n    }\n}\n\nobject App{\n    @JvmStatic\n    fun main(args: Array<String>) {\n        val threadOne = Thread(RunnableExample(),\"ONE\")\n        val threadTwo = Thread(RunnableYeildExample(),\"TWO\")\n        threadOne.start()\n        threadTwo.start()\n    }\n}\n```\n\n可以看到TWO线程让出资源后依然可能立即执行\n```\nName:ONE,0\nName:TWO,0\nName:TWO,1\nName:ONE,1\nName:ONE,2\nName:TWO,2\nName:TWO,3\nName:ONE,3\nName:TWO,4\nName:ONE,4\nName:ONE,5\nName:TWO,5\nName:TWO,6\nName:ONE,6\nName:TWO,7\n...\n...\n```\n\n4. 恢复与暂停suspend/resume\n缺点：\n独占，如果线程内使用了公共同步对象，那么`suspend`执行后会一致被占用（锁住，经常导致死锁）\n容易出现数据不同步\n\n## 线程安全与非线程安全\n**线程安全**就是多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，其他线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据污染。\n\n**线程不安全**就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据\n\n\n## 并发处理相关\n\n1. 原子变量\n\n原子变量保证了该变量的所有操作都是原子的，不会因为多线程的同时访问而导致脏数据的读取问题。synchronized关键字也可以做到对变量的原子操作。只是synchronized的成本相对较高，需要获取锁对象，释放锁对象，如果不能获取到锁，还需要阻塞在阻塞队列上进行等待。而如果单单只是为了解决对变量的原子操作，建议使用原子变量。\n\n原子变量类的命名类似于AtomicXxx，例如，AtomicInteger类用于表示一个int变量。原子变量可用于在不使用任何锁的情况下以原子方式对单个变量执行多个指令。\n\n * **标量原子变量类**\nAtomicInteger，AtomicLong和AtomicBoolean类分别支持对原始数据类型int，long和boolean的操作。\n\n当引用变量需要以原子方式更新时，AtomicReference类用于处理引用数据类型。\n\n* **原子数组类**\n有三个类称为AtomicIntegerArray，AtomicLongArray和AtomicReferenceArray，它们表示一个int，long和引用类型的数组，其元素可以进行原子性更新。\n\n* **原子字段更新程序类**\n有三个类称为AtomicLongFieldUpdater，AtomicIntegerFieldUpdater和AtomicReferenceFieldUpdater，可用于使用反射以原子方式更新类的易失性字段。\n\n要获得对这些类的对象的引用，您需要使用他们的工厂方法newUpdater()。\n\n* **原子复合变量类**\n\n如下代码情况，多个线程公用一个计数器，如果不加上同步锁（synchronized）\n```Kotlin\nclass RunnableExample:Runnable{\n    var count:Int = 0\n    override fun run(){\n        for(i in 0 until 10){\n            count++\n            println(\"CountValue:$count\")\n            Thread.sleep(100)\n        }\n    }\n}\n\nobject App{\n    @JvmStatic\n    fun main(args: Array<String>) {\n        val runnableExample = RunnableExample()\n        val threadOne = Thread(runnableExample)\n        val threadTwo = Thread(runnableExample)\n        threadOne.start()\n        threadTwo.start()\n        Thread.sleep(2000)\n\n    }\n}\n```\n由于count不是线程安全的，程序执行每次的结果可能都不一样\n\n```\nCountValue:1\nCountValue:2\nCountValue:3\nCountValue:4\nCountValue:5\nCountValue:5\nCountValue:6\nCountValue:7\nCountValue:8\nCountValue:9\nCountValue:10\nCountValue:11\nCountValue:12\nCountValue:12\nCountValue:14\nCountValue:14\nCountValue:15\nCountValue:16\nCountValue:17\nCountValue:17\nEnd-CountValue:17\n```\n\n\n如果使用原子变量，那么就可以得到正确一致的结果（我们可以发现虽然打印值的顺序不同，但是最后结果值是正确的）\n```Kotlin\nimport java.util.concurrent.atomic.AtomicInteger\n\nclass RunnableExample:Runnable{\n    \n    @Volatile var count:AtomicInteger = AtomicInteger(0)\n    override fun run(){\n        for(i in 0 until 10){\n            println(\"CountValue:${count.incrementAndGet()}\")\n            Thread.sleep(100)\n        }\n    }\n}\n```\n\n```\nCountValue:2\nCountValue:1\nCountValue:3\nCountValue:4\nCountValue:6\nCountValue:5\nCountValue:8\nCountValue:7\nCountValue:10\nCountValue:9\nCountValue:11\nCountValue:12\nCountValue:13\nCountValue:14\nCountValue:15\nCountValue:16\nCountValue:17\nCountValue:18\nCountValue:19\nCountValue:20\nEnd-CountValue:20\n```\n\n## Volatile 变量\nJava 语言中的 volatile 变量可以被看作是一种 “程度较轻的 synchronized”；与 synchronized 块相比，volatile 变量所需的编码较少，并且运行时开销也较少，但是它所能实现的功能也仅是 synchronized 的一部分。本文介绍了几种有效使用 volatile 变量的模式，并强调了几种不适合使用 volatile 变量的情形。\n\n锁提供了两种主要特性：互斥（mutual exclusion） 和可见性（visibility）。互斥即一次只允许一个线程持有某个特定的锁，因此可使用该特性实现对共享数据的协调访问协议，这样，一次就只有一个线程能够使用该共享数据。可见性要更加复杂一些，它必须确保释放锁之前对共享数据做出的更改对于随后获得该锁的另一个线程是可见的 —— 如果没有同步机制提供的这种可见性保证，线程看到的共享变量可能是修改前的值或不一致的值，这将引发许多严重问题。\n\n您只能在有限的一些情形下使用 volatile 变量替代锁。要使 volatile 变量提供理想的线程安全，必须同时满足下面两个条件：\n\n * 对变量的写操作不依赖于当前值。\n * 该变量没有包含在具有其他变量的不变式中。\n\n [更多内容详细参考](https://www.ibm.com/developerworks/cn/java/j-jtp06197.html)\n\n## Synchronized\n\n synchronized是Java中的关键字，是一种同步锁。它修饰的对象有以下几种： \n1. 代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象； \n2. 方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象； \n3. 静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象； \n4. 类，其作用的范围是synchronized后面括号括起来的部分，作用主的对象是这个类的所有对象。\n\n\n使用synchronized我们可以确保count的增加是正确的\n\nJava代码\n```Java\nclass RunnableJavaExample implements Runnable{\n\n    public int count = 0;\n\n    synchronized public int increamentAndGet(){\n        return ++count;\n    }\n\n    @Override\n    public void run(){\n        try{\n            for(int i=0;i<10;i++){\n                System.out.println(Thread.currentThread().getName()+\",CountValue:\"+increamentAndGet());\n                Thread.sleep(100);\n            }\n        }catch(Exception e){\n            \n        }\n        \n    }\n\n    public static void main(String[] args){\n        Runnable runnable = new RunnableJavaExample();\n        new Thread(runnable,\"ONE\").start();\n        new Thread(runnable,\"TWO\").start();\n    }\n}\n```\n\nKotlin代码\n```Kotlin\nclass RunnableExample:Runnable{\n\n    var count:Int = 0\n\n    @Synchronized fun increamentAndGet():Int{\n        return ++count\n    }\n\n    override fun run(){\n        for(i in 0 until 10){\n            println(\"CountValue:${increamentAndGet()}\")\n            Thread.sleep(100)\n        }\n    }\n}\n\nobject App{\n    @JvmStatic\n    fun main(args: Array<String>) {\n        val runnableExample = RunnableExample()\n        val threadOne = Thread(runnableExample,\"ONE\")\n        val threadTwo = Thread(runnableExample,\"TWO\")\n        threadOne.start()\n        threadTwo.start()\n        Thread.sleep(2000)\n        println(\"End-CountValue:${runnableExample.count}\")\n    }\n}\n```","source":"_posts/线程池（一）.md","raw":"---\ntitle: Java线程速览(一)\ndate: 2019-07-09 19:08:35\ntags: [\"android\"]\ncategories: Android开发\n---\n\n## 线程\n**进程**是指一个内存中运行的应用程序，每个进程都有自己独立的一块内存空间，一个进程中可以启动多个线程。比如在Windows系统中，一个运行的exe就是一个进程。\n一条**线程**指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。\n\n## 用户线程与守护线程\n* 守护线程是服务提供者线程。当JVM检测到应用程序中的所有线程都只是守护线程时，它将退出应用程序。（如GC。任何一个守护线程都是整个JVM中所有非守护线程的保姆）；我们可以在线程start之前调用setDaemon(true)将它设置为守护线程\n* 用户线程即普通的线程\n\n## 创建线程\n* 通过实现 Runnable 接口；\n创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类，实现其run方法\n\n* 通过继承 Thread 类本身\n创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。\n\n该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。\n* 通过 Callable 和 Future 创建线程\n a. 创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。\n b. 创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。\n c. 使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。\n d. 调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。\n<!--more-->\n\nRunnableExample.kt\n```Kotlin\npackage com.cool1024\n\nclass RunnableExample:Runnable{\n    override fun run(){\n        println(\"RunnableExample\")\n    }\n}\n```\n\nThreadExample.kt\n```Kotlin\npackage com.cool1024\n\nclass ThreadExample:Thread(){\n    override fun run(){\n        println(\"ThreadExample\")\n    }\n}\n```\n\nCallableExample.kt\n```Kotlin\npackage com.cool1024\n\nimport java.util.concurrent.Callable\n\nclass CallableExample:Callable<Boolean>{\n    override fun call():Boolean{\n        println(\"CallableExample\")\n        return true\n    }\n}\n```\n\nApp.kt\n```Kotlin\npackage com.cool1024\n\nimport java.util.concurrent.FutureTask\n\nobject App{\n    @JvmStatic\n    fun main(args: Array<String>) {\n        val runnableExample = Thread(RunnableExample())\n        runnableExample.start()\n        val threadExample = ThreadExample()\n        threadExample.start()\n        val callableExample = CallableExample()\n        val futureTask = FutureTask<Boolean>(callableExample)\n        Thread(futureTask).start()\n        println(\"Return value${futureTask.get()}\")\n    }\n}\n```\n\n> 1. 采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。\n2. 使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。\n\n## 线程生命周期\n[参考博客地址](https://www.cnblogs.com/sunddenly/p/4106562.html) https://www.cnblogs.com/sunddenly/p/4106562.html\n![生命周期图](/images/kotlin/thread-life.png)\n\n* **新建状态**:\n使用 new 关键字和 Thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start() 这个线程。\n\n* **就绪状态**:\n当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。\n\n* **运行状态**:\n如果就绪状态的线程获取 CPU 资源，就可以执行 run()，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。\n\n* **阻塞状态**:\n如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：\n\n * 等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。\n\n * 同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。\n\n * 其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。\n\n* **死亡状态**:\n一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。\n\n## 线程的优先级\n每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。Java 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。\n\n## 线程的相关操作\n\n* `public void start()` 使线程进入就绪状态，随时等待系统调度（使该线程开始执行）\n* `public final void setName(String name)` 设置线程的名称\n* `public final void setPriority(int priority)` 设置线程的优先级\n* `public void interrupt()` 中断线程\n* `public final boolean isAlive()` 判处线程是否处于活动状态(调用start方法后直到终止之前都是活跃)\n* `public static void yield()`\n暂停当前正在执行的线程对象，并执行其他线程。\n* `public static void sleep(long millisec)`\n在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。\n\n\n## 相关参考代码\n\n1. 使用`isAlive`判断线程是否处在活动状态,`currentThread`获取当前所在线程,`sleep`让线程休眠（暂停执行）\n\n```Kotlin\nclass RunnableExample:Runnable{\n    override fun run(){\n        println(\"RunnableExample:${Thread.currentThread().isAlive()}\")\n        Thread.sleep(2000)\n    }\n}\n\nobject App{\n    @JvmStatic\n    fun main(args: Array<String>) {\n        val runnableExample = Thread(RunnableExample())\n        runnableExample.start()\n        for(i in 0 until 10){\n            Thread.sleep(1000)\n            println(\"MainThread-RunnableExample:${runnableExample.isAlive()}\")\n        }\n    }\n}\n```\n\n前2秒打印结果为true，2秒后线程结束，打印false\n```\nRunnableExample:true\nMainThread-RunnableExample:true\nMainThread-RunnableExample:true\nMainThread-RunnableExample:false\nMainThread-RunnableExample:false\nMainThread-RunnableExample:false\nMainThread-RunnableExample:false\nMainThread-RunnableExample:false\nMainThread-RunnableExample:false\nMainThread-RunnableExample:false\nMainThread-RunnableExample:false\n```\n\n2. 使用`interrupt`终止线程的执行，注意这个方法不会立即终止线程，它只是给当前线程发送了一个停止标记，实际情况需要我们自行处理\n\n```Kotlin\nclass RunnableExample:Runnable{\n    override fun run(){\n        try{\n            for(i in 0 until 100){\n                if(Thread.interrupted()){\n                    throw InterruptedException(\"我要被停止了\")\n                }\n                println(\"RunnableExample:$i\")\n            }\n        }catch(e:InterruptedException){\n            println(\"RunnableExample:终止\")\n            e.printStackTrace()\n        }\n    }\n}\n\nobject App{\n    @JvmStatic\n    fun main(args: Array<String>) {\n        val runnableExample = Thread(RunnableExample())\n        runnableExample.start()\n        Thread.sleep(1000)\n        runnableExample.interrupt()\n        Thread.sleep(1000)\n    }\n}\n```\n\n线程在1秒前正常输入，而后我们在主线程发出了中断请求`runnableExample.interrupt()`,线程中通过`Thread.interrupted()`判断是否要终止，确认后抛出异常而停止\n```\nRunnableExample:0\n...\n...\nRunnableExample:1860\nRunnableExample:1861\nRunnableExample:1862\nRunnableExample:1863\nRunnableExample:1864\nRunnableExample:1865\nRunnableExample:终止\njava.lang.InterruptedException: 我要被停止了\n        at com.cool1024.RunnableExample.run(RunnableExample.kt:8)\n        at java.lang.Thread.run(Thread.java:748)\n```\n\n停止线程的方法:\na. 使用退出标志\n```Java\npublic class TempThread extends Thread {\n    public volatile boolean exit = false; \n        public void run() { \n        while (!exit){\n            //do something\n        }\n    } \n}\n```\nb. 使用interrupt()方法中断当前线程\nc. 使用stop()方法强行终止（弃用了）\n\n3. `yeild()`使当前线程从运行状态转变为就绪状态,让出自己的CUP资源，然后重新在就绪队列中选择线程执行（可能又是自己，让出去任然有可能被再次执行）\n\n```Kotlin\nclass RunnableExample:Runnable{\n    override fun run(){\n        for(i in 0 until 100){\n            println(\"Name:${Thread.currentThread().name},$i\")\n            Thread.sleep(1000)\n        }\n    }\n}\n\nclass RunnableYeildExample:Runnable{\n    override fun run(){\n        for(i in 0 until 100){\n            println(\"Name:${Thread.currentThread().name},$i\")\n            Thread.yield()\n            Thread.sleep(1000)\n        }\n    }\n}\n\nobject App{\n    @JvmStatic\n    fun main(args: Array<String>) {\n        val threadOne = Thread(RunnableExample(),\"ONE\")\n        val threadTwo = Thread(RunnableYeildExample(),\"TWO\")\n        threadOne.start()\n        threadTwo.start()\n    }\n}\n```\n\n可以看到TWO线程让出资源后依然可能立即执行\n```\nName:ONE,0\nName:TWO,0\nName:TWO,1\nName:ONE,1\nName:ONE,2\nName:TWO,2\nName:TWO,3\nName:ONE,3\nName:TWO,4\nName:ONE,4\nName:ONE,5\nName:TWO,5\nName:TWO,6\nName:ONE,6\nName:TWO,7\n...\n...\n```\n\n4. 恢复与暂停suspend/resume\n缺点：\n独占，如果线程内使用了公共同步对象，那么`suspend`执行后会一致被占用（锁住，经常导致死锁）\n容易出现数据不同步\n\n## 线程安全与非线程安全\n**线程安全**就是多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，其他线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据污染。\n\n**线程不安全**就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据\n\n\n## 并发处理相关\n\n1. 原子变量\n\n原子变量保证了该变量的所有操作都是原子的，不会因为多线程的同时访问而导致脏数据的读取问题。synchronized关键字也可以做到对变量的原子操作。只是synchronized的成本相对较高，需要获取锁对象，释放锁对象，如果不能获取到锁，还需要阻塞在阻塞队列上进行等待。而如果单单只是为了解决对变量的原子操作，建议使用原子变量。\n\n原子变量类的命名类似于AtomicXxx，例如，AtomicInteger类用于表示一个int变量。原子变量可用于在不使用任何锁的情况下以原子方式对单个变量执行多个指令。\n\n * **标量原子变量类**\nAtomicInteger，AtomicLong和AtomicBoolean类分别支持对原始数据类型int，long和boolean的操作。\n\n当引用变量需要以原子方式更新时，AtomicReference类用于处理引用数据类型。\n\n* **原子数组类**\n有三个类称为AtomicIntegerArray，AtomicLongArray和AtomicReferenceArray，它们表示一个int，long和引用类型的数组，其元素可以进行原子性更新。\n\n* **原子字段更新程序类**\n有三个类称为AtomicLongFieldUpdater，AtomicIntegerFieldUpdater和AtomicReferenceFieldUpdater，可用于使用反射以原子方式更新类的易失性字段。\n\n要获得对这些类的对象的引用，您需要使用他们的工厂方法newUpdater()。\n\n* **原子复合变量类**\n\n如下代码情况，多个线程公用一个计数器，如果不加上同步锁（synchronized）\n```Kotlin\nclass RunnableExample:Runnable{\n    var count:Int = 0\n    override fun run(){\n        for(i in 0 until 10){\n            count++\n            println(\"CountValue:$count\")\n            Thread.sleep(100)\n        }\n    }\n}\n\nobject App{\n    @JvmStatic\n    fun main(args: Array<String>) {\n        val runnableExample = RunnableExample()\n        val threadOne = Thread(runnableExample)\n        val threadTwo = Thread(runnableExample)\n        threadOne.start()\n        threadTwo.start()\n        Thread.sleep(2000)\n\n    }\n}\n```\n由于count不是线程安全的，程序执行每次的结果可能都不一样\n\n```\nCountValue:1\nCountValue:2\nCountValue:3\nCountValue:4\nCountValue:5\nCountValue:5\nCountValue:6\nCountValue:7\nCountValue:8\nCountValue:9\nCountValue:10\nCountValue:11\nCountValue:12\nCountValue:12\nCountValue:14\nCountValue:14\nCountValue:15\nCountValue:16\nCountValue:17\nCountValue:17\nEnd-CountValue:17\n```\n\n\n如果使用原子变量，那么就可以得到正确一致的结果（我们可以发现虽然打印值的顺序不同，但是最后结果值是正确的）\n```Kotlin\nimport java.util.concurrent.atomic.AtomicInteger\n\nclass RunnableExample:Runnable{\n    \n    @Volatile var count:AtomicInteger = AtomicInteger(0)\n    override fun run(){\n        for(i in 0 until 10){\n            println(\"CountValue:${count.incrementAndGet()}\")\n            Thread.sleep(100)\n        }\n    }\n}\n```\n\n```\nCountValue:2\nCountValue:1\nCountValue:3\nCountValue:4\nCountValue:6\nCountValue:5\nCountValue:8\nCountValue:7\nCountValue:10\nCountValue:9\nCountValue:11\nCountValue:12\nCountValue:13\nCountValue:14\nCountValue:15\nCountValue:16\nCountValue:17\nCountValue:18\nCountValue:19\nCountValue:20\nEnd-CountValue:20\n```\n\n## Volatile 变量\nJava 语言中的 volatile 变量可以被看作是一种 “程度较轻的 synchronized”；与 synchronized 块相比，volatile 变量所需的编码较少，并且运行时开销也较少，但是它所能实现的功能也仅是 synchronized 的一部分。本文介绍了几种有效使用 volatile 变量的模式，并强调了几种不适合使用 volatile 变量的情形。\n\n锁提供了两种主要特性：互斥（mutual exclusion） 和可见性（visibility）。互斥即一次只允许一个线程持有某个特定的锁，因此可使用该特性实现对共享数据的协调访问协议，这样，一次就只有一个线程能够使用该共享数据。可见性要更加复杂一些，它必须确保释放锁之前对共享数据做出的更改对于随后获得该锁的另一个线程是可见的 —— 如果没有同步机制提供的这种可见性保证，线程看到的共享变量可能是修改前的值或不一致的值，这将引发许多严重问题。\n\n您只能在有限的一些情形下使用 volatile 变量替代锁。要使 volatile 变量提供理想的线程安全，必须同时满足下面两个条件：\n\n * 对变量的写操作不依赖于当前值。\n * 该变量没有包含在具有其他变量的不变式中。\n\n [更多内容详细参考](https://www.ibm.com/developerworks/cn/java/j-jtp06197.html)\n\n## Synchronized\n\n synchronized是Java中的关键字，是一种同步锁。它修饰的对象有以下几种： \n1. 代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象； \n2. 方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象； \n3. 静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象； \n4. 类，其作用的范围是synchronized后面括号括起来的部分，作用主的对象是这个类的所有对象。\n\n\n使用synchronized我们可以确保count的增加是正确的\n\nJava代码\n```Java\nclass RunnableJavaExample implements Runnable{\n\n    public int count = 0;\n\n    synchronized public int increamentAndGet(){\n        return ++count;\n    }\n\n    @Override\n    public void run(){\n        try{\n            for(int i=0;i<10;i++){\n                System.out.println(Thread.currentThread().getName()+\",CountValue:\"+increamentAndGet());\n                Thread.sleep(100);\n            }\n        }catch(Exception e){\n            \n        }\n        \n    }\n\n    public static void main(String[] args){\n        Runnable runnable = new RunnableJavaExample();\n        new Thread(runnable,\"ONE\").start();\n        new Thread(runnable,\"TWO\").start();\n    }\n}\n```\n\nKotlin代码\n```Kotlin\nclass RunnableExample:Runnable{\n\n    var count:Int = 0\n\n    @Synchronized fun increamentAndGet():Int{\n        return ++count\n    }\n\n    override fun run(){\n        for(i in 0 until 10){\n            println(\"CountValue:${increamentAndGet()}\")\n            Thread.sleep(100)\n        }\n    }\n}\n\nobject App{\n    @JvmStatic\n    fun main(args: Array<String>) {\n        val runnableExample = RunnableExample()\n        val threadOne = Thread(runnableExample,\"ONE\")\n        val threadTwo = Thread(runnableExample,\"TWO\")\n        threadOne.start()\n        threadTwo.start()\n        Thread.sleep(2000)\n        println(\"End-CountValue:${runnableExample.count}\")\n    }\n}\n```","slug":"线程池（一）","published":1,"updated":"2019-07-10T10:33:26.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld9v003te8wet51af6hn","content":"<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><p><strong>进程</strong>是指一个内存中运行的应用程序，每个进程都有自己独立的一块内存空间，一个进程中可以启动多个线程。比如在Windows系统中，一个运行的exe就是一个进程。<br>一条<strong>线程</strong>指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>\n<h2 id=\"用户线程与守护线程\"><a href=\"#用户线程与守护线程\" class=\"headerlink\" title=\"用户线程与守护线程\"></a>用户线程与守护线程</h2><ul>\n<li>守护线程是服务提供者线程。当JVM检测到应用程序中的所有线程都只是守护线程时，它将退出应用程序。（如GC。任何一个守护线程都是整个JVM中所有非守护线程的保姆）；我们可以在线程start之前调用setDaemon(true)将它设置为守护线程</li>\n<li>用户线程即普通的线程</li>\n</ul>\n<h2 id=\"创建线程\"><a href=\"#创建线程\" class=\"headerlink\" title=\"创建线程\"></a>创建线程</h2><ul>\n<li><p>通过实现 Runnable 接口；<br>创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类，实现其run方法</p>\n</li>\n<li><p>通过继承 Thread 类本身<br>创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。</p>\n</li>\n</ul>\n<p>该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。</p>\n<ul>\n<li>通过 Callable 和 Future 创建线程<br>a. 创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。<br>b. 创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。<br>c. 使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。<br>d. 调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。<a id=\"more\"></a>\n</li>\n</ul>\n<p>RunnableExample.kt<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cool1024</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableExample</span>:<span class=\"type\">Runnable&#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"RunnableExample\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ThreadExample.kt<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cool1024</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadExample</span>:<span class=\"type\">Thread</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"ThreadExample\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>CallableExample.kt<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cool1024</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallableExample</span>:<span class=\"type\">Callable</span>&lt;<span class=\"type\">Boolean</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">call</span><span class=\"params\">()</span></span>:<span class=\"built_in\">Boolean</span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"CallableExample\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>App.kt<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cool1024</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.FutureTask</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> App&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> runnableExample = Thread(RunnableExample())</span><br><span class=\"line\">        runnableExample.start()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> threadExample = ThreadExample()</span><br><span class=\"line\">        threadExample.start()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> callableExample = CallableExample()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> futureTask = FutureTask&lt;<span class=\"built_in\">Boolean</span>&gt;(callableExample)</span><br><span class=\"line\">        Thread(futureTask).start()</span><br><span class=\"line\">        println(<span class=\"string\">\"Return value<span class=\"subst\">$&#123;futureTask.get()&#125;</span>\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<ol>\n<li>采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。</li>\n<li>使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。</li>\n</ol>\n</blockquote>\n<h2 id=\"线程生命周期\"><a href=\"#线程生命周期\" class=\"headerlink\" title=\"线程生命周期\"></a>线程生命周期</h2><p><a href=\"https://www.cnblogs.com/sunddenly/p/4106562.html\" target=\"_blank\" rel=\"noopener\">参考博客地址</a> <a href=\"https://www.cnblogs.com/sunddenly/p/4106562.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/sunddenly/p/4106562.html</a><br><img src=\"/images/kotlin/thread-life.png\" alt=\"生命周期图\"></p>\n<ul>\n<li><p><strong>新建状态</strong>:<br>使用 new 关键字和 Thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start() 这个线程。</p>\n</li>\n<li><p><strong>就绪状态</strong>:<br>当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。</p>\n</li>\n<li><p><strong>运行状态</strong>:<br>如果就绪状态的线程获取 CPU 资源，就可以执行 run()，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。</p>\n</li>\n<li><p><strong>阻塞状态</strong>:<br>如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：</p>\n<ul>\n<li><p>等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。</p>\n</li>\n<li><p>同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。</p>\n</li>\n<li><p>其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>死亡状态</strong>:<br>一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。</p>\n</li>\n</ul>\n<h2 id=\"线程的优先级\"><a href=\"#线程的优先级\" class=\"headerlink\" title=\"线程的优先级\"></a>线程的优先级</h2><p>每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。Java 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。</p>\n<h2 id=\"线程的相关操作\"><a href=\"#线程的相关操作\" class=\"headerlink\" title=\"线程的相关操作\"></a>线程的相关操作</h2><ul>\n<li><code>public void start()</code> 使线程进入就绪状态，随时等待系统调度（使该线程开始执行）</li>\n<li><code>public final void setName(String name)</code> 设置线程的名称</li>\n<li><code>public final void setPriority(int priority)</code> 设置线程的优先级</li>\n<li><code>public void interrupt()</code> 中断线程</li>\n<li><code>public final boolean isAlive()</code> 判处线程是否处于活动状态(调用start方法后直到终止之前都是活跃)</li>\n<li><code>public static void yield()</code><br>暂停当前正在执行的线程对象，并执行其他线程。</li>\n<li><code>public static void sleep(long millisec)</code><br>在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。</li>\n</ul>\n<h2 id=\"相关参考代码\"><a href=\"#相关参考代码\" class=\"headerlink\" title=\"相关参考代码\"></a>相关参考代码</h2><ol>\n<li>使用<code>isAlive</code>判断线程是否处在活动状态,<code>currentThread</code>获取当前所在线程,<code>sleep</code>让线程休眠（暂停执行）</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableExample</span>:<span class=\"type\">Runnable&#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"RunnableExample:<span class=\"subst\">$&#123;Thread.currentThread().isAlive()&#125;</span>\"</span>)</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">2000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> App&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> runnableExample = Thread(RunnableExample())</span><br><span class=\"line\">        runnableExample.start()</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>)</span><br><span class=\"line\">            println(<span class=\"string\">\"MainThread-RunnableExample:<span class=\"subst\">$&#123;runnableExample.isAlive()&#125;</span>\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前2秒打印结果为true，2秒后线程结束，打印false<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RunnableExample:true</span><br><span class=\"line\">MainThread-RunnableExample:true</span><br><span class=\"line\">MainThread-RunnableExample:true</span><br><span class=\"line\">MainThread-RunnableExample:false</span><br><span class=\"line\">MainThread-RunnableExample:false</span><br><span class=\"line\">MainThread-RunnableExample:false</span><br><span class=\"line\">MainThread-RunnableExample:false</span><br><span class=\"line\">MainThread-RunnableExample:false</span><br><span class=\"line\">MainThread-RunnableExample:false</span><br><span class=\"line\">MainThread-RunnableExample:false</span><br><span class=\"line\">MainThread-RunnableExample:false</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>使用<code>interrupt</code>终止线程的执行，注意这个方法不会立即终止线程，它只是给当前线程发送了一个停止标记，实际情况需要我们自行处理</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableExample</span>:<span class=\"type\">Runnable&#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Thread.interrupted())&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> InterruptedException(<span class=\"string\">\"我要被停止了\"</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                println(<span class=\"string\">\"RunnableExample:<span class=\"variable\">$i</span>\"</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(e:InterruptedException)&#123;</span><br><span class=\"line\">            println(<span class=\"string\">\"RunnableExample:终止\"</span>)</span><br><span class=\"line\">            e.printStackTrace()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> App&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> runnableExample = Thread(RunnableExample())</span><br><span class=\"line\">        runnableExample.start()</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        runnableExample.interrupt()</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>线程在1秒前正常输入，而后我们在主线程发出了中断请求<code>runnableExample.interrupt()</code>,线程中通过<code>Thread.interrupted()</code>判断是否要终止，确认后抛出异常而停止<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RunnableExample:0</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">RunnableExample:1860</span><br><span class=\"line\">RunnableExample:1861</span><br><span class=\"line\">RunnableExample:1862</span><br><span class=\"line\">RunnableExample:1863</span><br><span class=\"line\">RunnableExample:1864</span><br><span class=\"line\">RunnableExample:1865</span><br><span class=\"line\">RunnableExample:终止</span><br><span class=\"line\">java.lang.InterruptedException: 我要被停止了</span><br><span class=\"line\">        at com.cool1024.RunnableExample.run(RunnableExample.kt:8)</span><br><span class=\"line\">        at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure></p>\n<p>停止线程的方法:<br>a. 使用退出标志<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TempThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> exit = <span class=\"keyword\">false</span>; </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!exit)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//do something</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>b. 使用interrupt()方法中断当前线程<br>c. 使用stop()方法强行终止（弃用了）</p>\n<ol start=\"3\">\n<li><code>yeild()</code>使当前线程从运行状态转变为就绪状态,让出自己的CUP资源，然后重新在就绪队列中选择线程执行（可能又是自己，让出去任然有可能被再次执行）</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableExample</span>:<span class=\"type\">Runnable&#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">            println(<span class=\"string\">\"Name:<span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>,<span class=\"variable\">$i</span>\"</span>)</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableYeildExample</span>:<span class=\"type\">Runnable&#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">            println(<span class=\"string\">\"Name:<span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>,<span class=\"variable\">$i</span>\"</span>)</span><br><span class=\"line\">            Thread.yield()</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> App&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> threadOne = Thread(RunnableExample(),<span class=\"string\">\"ONE\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> threadTwo = Thread(RunnableYeildExample(),<span class=\"string\">\"TWO\"</span>)</span><br><span class=\"line\">        threadOne.start()</span><br><span class=\"line\">        threadTwo.start()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到TWO线程让出资源后依然可能立即执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name:ONE,0</span><br><span class=\"line\">Name:TWO,0</span><br><span class=\"line\">Name:TWO,1</span><br><span class=\"line\">Name:ONE,1</span><br><span class=\"line\">Name:ONE,2</span><br><span class=\"line\">Name:TWO,2</span><br><span class=\"line\">Name:TWO,3</span><br><span class=\"line\">Name:ONE,3</span><br><span class=\"line\">Name:TWO,4</span><br><span class=\"line\">Name:ONE,4</span><br><span class=\"line\">Name:ONE,5</span><br><span class=\"line\">Name:TWO,5</span><br><span class=\"line\">Name:TWO,6</span><br><span class=\"line\">Name:ONE,6</span><br><span class=\"line\">Name:TWO,7</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<ol start=\"4\">\n<li>恢复与暂停suspend/resume<br>缺点：<br>独占，如果线程内使用了公共同步对象，那么<code>suspend</code>执行后会一致被占用（锁住，经常导致死锁）<br>容易出现数据不同步</li>\n</ol>\n<h2 id=\"线程安全与非线程安全\"><a href=\"#线程安全与非线程安全\" class=\"headerlink\" title=\"线程安全与非线程安全\"></a>线程安全与非线程安全</h2><p><strong>线程安全</strong>就是多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，其他线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据污染。</p>\n<p><strong>线程不安全</strong>就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据</p>\n<h2 id=\"并发处理相关\"><a href=\"#并发处理相关\" class=\"headerlink\" title=\"并发处理相关\"></a>并发处理相关</h2><ol>\n<li>原子变量</li>\n</ol>\n<p>原子变量保证了该变量的所有操作都是原子的，不会因为多线程的同时访问而导致脏数据的读取问题。synchronized关键字也可以做到对变量的原子操作。只是synchronized的成本相对较高，需要获取锁对象，释放锁对象，如果不能获取到锁，还需要阻塞在阻塞队列上进行等待。而如果单单只是为了解决对变量的原子操作，建议使用原子变量。</p>\n<p>原子变量类的命名类似于AtomicXxx，例如，AtomicInteger类用于表示一个int变量。原子变量可用于在不使用任何锁的情况下以原子方式对单个变量执行多个指令。</p>\n<ul>\n<li><strong>标量原子变量类</strong><br>AtomicInteger，AtomicLong和AtomicBoolean类分别支持对原始数据类型int，long和boolean的操作。</li>\n</ul>\n<p>当引用变量需要以原子方式更新时，AtomicReference类用于处理引用数据类型。</p>\n<ul>\n<li><p><strong>原子数组类</strong><br>有三个类称为AtomicIntegerArray，AtomicLongArray和AtomicReferenceArray，它们表示一个int，long和引用类型的数组，其元素可以进行原子性更新。</p>\n</li>\n<li><p><strong>原子字段更新程序类</strong><br>有三个类称为AtomicLongFieldUpdater，AtomicIntegerFieldUpdater和AtomicReferenceFieldUpdater，可用于使用反射以原子方式更新类的易失性字段。</p>\n</li>\n</ul>\n<p>要获得对这些类的对象的引用，您需要使用他们的工厂方法newUpdater()。</p>\n<ul>\n<li><strong>原子复合变量类</strong></li>\n</ul>\n<p>如下代码情况，多个线程公用一个计数器，如果不加上同步锁（synchronized）<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableExample</span>:<span class=\"type\">Runnable&#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> count:<span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            count++</span><br><span class=\"line\">            println(<span class=\"string\">\"CountValue:<span class=\"variable\">$count</span>\"</span>)</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> App&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> runnableExample = RunnableExample()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> threadOne = Thread(runnableExample)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> threadTwo = Thread(runnableExample)</span><br><span class=\"line\">        threadOne.start()</span><br><span class=\"line\">        threadTwo.start()</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">2000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>由于count不是线程安全的，程序执行每次的结果可能都不一样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CountValue:1</span><br><span class=\"line\">CountValue:2</span><br><span class=\"line\">CountValue:3</span><br><span class=\"line\">CountValue:4</span><br><span class=\"line\">CountValue:5</span><br><span class=\"line\">CountValue:5</span><br><span class=\"line\">CountValue:6</span><br><span class=\"line\">CountValue:7</span><br><span class=\"line\">CountValue:8</span><br><span class=\"line\">CountValue:9</span><br><span class=\"line\">CountValue:10</span><br><span class=\"line\">CountValue:11</span><br><span class=\"line\">CountValue:12</span><br><span class=\"line\">CountValue:12</span><br><span class=\"line\">CountValue:14</span><br><span class=\"line\">CountValue:14</span><br><span class=\"line\">CountValue:15</span><br><span class=\"line\">CountValue:16</span><br><span class=\"line\">CountValue:17</span><br><span class=\"line\">CountValue:17</span><br><span class=\"line\">End-CountValue:17</span><br></pre></td></tr></table></figure>\n<p>如果使用原子变量，那么就可以得到正确一致的结果（我们可以发现虽然打印值的顺序不同，但是最后结果值是正确的）<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableExample</span>:<span class=\"type\">Runnable&#123;</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Volatile</span> <span class=\"keyword\">var</span> count:AtomicInteger = AtomicInteger(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            println(<span class=\"string\">\"CountValue:<span class=\"subst\">$&#123;count.incrementAndGet()&#125;</span>\"</span>)</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CountValue:2</span><br><span class=\"line\">CountValue:1</span><br><span class=\"line\">CountValue:3</span><br><span class=\"line\">CountValue:4</span><br><span class=\"line\">CountValue:6</span><br><span class=\"line\">CountValue:5</span><br><span class=\"line\">CountValue:8</span><br><span class=\"line\">CountValue:7</span><br><span class=\"line\">CountValue:10</span><br><span class=\"line\">CountValue:9</span><br><span class=\"line\">CountValue:11</span><br><span class=\"line\">CountValue:12</span><br><span class=\"line\">CountValue:13</span><br><span class=\"line\">CountValue:14</span><br><span class=\"line\">CountValue:15</span><br><span class=\"line\">CountValue:16</span><br><span class=\"line\">CountValue:17</span><br><span class=\"line\">CountValue:18</span><br><span class=\"line\">CountValue:19</span><br><span class=\"line\">CountValue:20</span><br><span class=\"line\">End-CountValue:20</span><br></pre></td></tr></table></figure>\n<h2 id=\"Volatile-变量\"><a href=\"#Volatile-变量\" class=\"headerlink\" title=\"Volatile 变量\"></a>Volatile 变量</h2><p>Java 语言中的 volatile 变量可以被看作是一种 “程度较轻的 synchronized”；与 synchronized 块相比，volatile 变量所需的编码较少，并且运行时开销也较少，但是它所能实现的功能也仅是 synchronized 的一部分。本文介绍了几种有效使用 volatile 变量的模式，并强调了几种不适合使用 volatile 变量的情形。</p>\n<p>锁提供了两种主要特性：互斥（mutual exclusion） 和可见性（visibility）。互斥即一次只允许一个线程持有某个特定的锁，因此可使用该特性实现对共享数据的协调访问协议，这样，一次就只有一个线程能够使用该共享数据。可见性要更加复杂一些，它必须确保释放锁之前对共享数据做出的更改对于随后获得该锁的另一个线程是可见的 —— 如果没有同步机制提供的这种可见性保证，线程看到的共享变量可能是修改前的值或不一致的值，这将引发许多严重问题。</p>\n<p>您只能在有限的一些情形下使用 volatile 变量替代锁。要使 volatile 变量提供理想的线程安全，必须同时满足下面两个条件：</p>\n<ul>\n<li>对变量的写操作不依赖于当前值。</li>\n<li><p>该变量没有包含在具有其他变量的不变式中。</p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/java/j-jtp06197.html\" target=\"_blank\" rel=\"noopener\">更多内容详细参考</a></p>\n</li>\n</ul>\n<h2 id=\"Synchronized\"><a href=\"#Synchronized\" class=\"headerlink\" title=\"Synchronized\"></a>Synchronized</h2><p> synchronized是Java中的关键字，是一种同步锁。它修饰的对象有以下几种： </p>\n<ol>\n<li>代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象； </li>\n<li>方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象； </li>\n<li>静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象； </li>\n<li>类，其作用的范围是synchronized后面括号括起来的部分，作用主的对象是这个类的所有对象。</li>\n</ol>\n<p>使用synchronized我们可以确保count的增加是正确的</p>\n<p>Java代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableJavaExample</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">synchronized</span> <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">increamentAndGet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ++count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">\",CountValue:\"</span>+increamentAndGet());</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> RunnableJavaExample();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(runnable,<span class=\"string\">\"ONE\"</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(runnable,<span class=\"string\">\"TWO\"</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Kotlin代码<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableExample</span>:<span class=\"type\">Runnable&#123;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> count:<span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Synchronized</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">increamentAndGet</span><span class=\"params\">()</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ++count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            println(<span class=\"string\">\"CountValue:<span class=\"subst\">$&#123;increamentAndGet()&#125;</span>\"</span>)</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> App&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> runnableExample = RunnableExample()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> threadOne = Thread(runnableExample,<span class=\"string\">\"ONE\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> threadTwo = Thread(runnableExample,<span class=\"string\">\"TWO\"</span>)</span><br><span class=\"line\">        threadOne.start()</span><br><span class=\"line\">        threadTwo.start()</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">2000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">\"End-CountValue:<span class=\"subst\">$&#123;runnableExample.count&#125;</span>\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><p><strong>进程</strong>是指一个内存中运行的应用程序，每个进程都有自己独立的一块内存空间，一个进程中可以启动多个线程。比如在Windows系统中，一个运行的exe就是一个进程。<br>一条<strong>线程</strong>指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>\n<h2 id=\"用户线程与守护线程\"><a href=\"#用户线程与守护线程\" class=\"headerlink\" title=\"用户线程与守护线程\"></a>用户线程与守护线程</h2><ul>\n<li>守护线程是服务提供者线程。当JVM检测到应用程序中的所有线程都只是守护线程时，它将退出应用程序。（如GC。任何一个守护线程都是整个JVM中所有非守护线程的保姆）；我们可以在线程start之前调用setDaemon(true)将它设置为守护线程</li>\n<li>用户线程即普通的线程</li>\n</ul>\n<h2 id=\"创建线程\"><a href=\"#创建线程\" class=\"headerlink\" title=\"创建线程\"></a>创建线程</h2><ul>\n<li><p>通过实现 Runnable 接口；<br>创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类，实现其run方法</p>\n</li>\n<li><p>通过继承 Thread 类本身<br>创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。</p>\n</li>\n</ul>\n<p>该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。</p>\n<ul>\n<li>通过 Callable 和 Future 创建线程<br>a. 创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。<br>b. 创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。<br>c. 使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。<br>d. 调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。","more":"</li>\n</ul>\n<p>RunnableExample.kt<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cool1024</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableExample</span>:<span class=\"type\">Runnable&#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"RunnableExample\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ThreadExample.kt<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cool1024</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadExample</span>:<span class=\"type\">Thread</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"ThreadExample\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>CallableExample.kt<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cool1024</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallableExample</span>:<span class=\"type\">Callable</span>&lt;<span class=\"type\">Boolean</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">call</span><span class=\"params\">()</span></span>:<span class=\"built_in\">Boolean</span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"CallableExample\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>App.kt<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cool1024</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.FutureTask</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> App&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> runnableExample = Thread(RunnableExample())</span><br><span class=\"line\">        runnableExample.start()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> threadExample = ThreadExample()</span><br><span class=\"line\">        threadExample.start()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> callableExample = CallableExample()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> futureTask = FutureTask&lt;<span class=\"built_in\">Boolean</span>&gt;(callableExample)</span><br><span class=\"line\">        Thread(futureTask).start()</span><br><span class=\"line\">        println(<span class=\"string\">\"Return value<span class=\"subst\">$&#123;futureTask.get()&#125;</span>\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<ol>\n<li>采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。</li>\n<li>使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。</li>\n</ol>\n</blockquote>\n<h2 id=\"线程生命周期\"><a href=\"#线程生命周期\" class=\"headerlink\" title=\"线程生命周期\"></a>线程生命周期</h2><p><a href=\"https://www.cnblogs.com/sunddenly/p/4106562.html\" target=\"_blank\" rel=\"noopener\">参考博客地址</a> <a href=\"https://www.cnblogs.com/sunddenly/p/4106562.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/sunddenly/p/4106562.html</a><br><img src=\"/images/kotlin/thread-life.png\" alt=\"生命周期图\"></p>\n<ul>\n<li><p><strong>新建状态</strong>:<br>使用 new 关键字和 Thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start() 这个线程。</p>\n</li>\n<li><p><strong>就绪状态</strong>:<br>当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。</p>\n</li>\n<li><p><strong>运行状态</strong>:<br>如果就绪状态的线程获取 CPU 资源，就可以执行 run()，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。</p>\n</li>\n<li><p><strong>阻塞状态</strong>:<br>如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：</p>\n<ul>\n<li><p>等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。</p>\n</li>\n<li><p>同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。</p>\n</li>\n<li><p>其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>死亡状态</strong>:<br>一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。</p>\n</li>\n</ul>\n<h2 id=\"线程的优先级\"><a href=\"#线程的优先级\" class=\"headerlink\" title=\"线程的优先级\"></a>线程的优先级</h2><p>每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。Java 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。</p>\n<h2 id=\"线程的相关操作\"><a href=\"#线程的相关操作\" class=\"headerlink\" title=\"线程的相关操作\"></a>线程的相关操作</h2><ul>\n<li><code>public void start()</code> 使线程进入就绪状态，随时等待系统调度（使该线程开始执行）</li>\n<li><code>public final void setName(String name)</code> 设置线程的名称</li>\n<li><code>public final void setPriority(int priority)</code> 设置线程的优先级</li>\n<li><code>public void interrupt()</code> 中断线程</li>\n<li><code>public final boolean isAlive()</code> 判处线程是否处于活动状态(调用start方法后直到终止之前都是活跃)</li>\n<li><code>public static void yield()</code><br>暂停当前正在执行的线程对象，并执行其他线程。</li>\n<li><code>public static void sleep(long millisec)</code><br>在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。</li>\n</ul>\n<h2 id=\"相关参考代码\"><a href=\"#相关参考代码\" class=\"headerlink\" title=\"相关参考代码\"></a>相关参考代码</h2><ol>\n<li>使用<code>isAlive</code>判断线程是否处在活动状态,<code>currentThread</code>获取当前所在线程,<code>sleep</code>让线程休眠（暂停执行）</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableExample</span>:<span class=\"type\">Runnable&#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"RunnableExample:<span class=\"subst\">$&#123;Thread.currentThread().isAlive()&#125;</span>\"</span>)</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">2000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> App&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> runnableExample = Thread(RunnableExample())</span><br><span class=\"line\">        runnableExample.start()</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>)</span><br><span class=\"line\">            println(<span class=\"string\">\"MainThread-RunnableExample:<span class=\"subst\">$&#123;runnableExample.isAlive()&#125;</span>\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前2秒打印结果为true，2秒后线程结束，打印false<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RunnableExample:true</span><br><span class=\"line\">MainThread-RunnableExample:true</span><br><span class=\"line\">MainThread-RunnableExample:true</span><br><span class=\"line\">MainThread-RunnableExample:false</span><br><span class=\"line\">MainThread-RunnableExample:false</span><br><span class=\"line\">MainThread-RunnableExample:false</span><br><span class=\"line\">MainThread-RunnableExample:false</span><br><span class=\"line\">MainThread-RunnableExample:false</span><br><span class=\"line\">MainThread-RunnableExample:false</span><br><span class=\"line\">MainThread-RunnableExample:false</span><br><span class=\"line\">MainThread-RunnableExample:false</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>使用<code>interrupt</code>终止线程的执行，注意这个方法不会立即终止线程，它只是给当前线程发送了一个停止标记，实际情况需要我们自行处理</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableExample</span>:<span class=\"type\">Runnable&#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Thread.interrupted())&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> InterruptedException(<span class=\"string\">\"我要被停止了\"</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                println(<span class=\"string\">\"RunnableExample:<span class=\"variable\">$i</span>\"</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(e:InterruptedException)&#123;</span><br><span class=\"line\">            println(<span class=\"string\">\"RunnableExample:终止\"</span>)</span><br><span class=\"line\">            e.printStackTrace()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> App&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> runnableExample = Thread(RunnableExample())</span><br><span class=\"line\">        runnableExample.start()</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        runnableExample.interrupt()</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>线程在1秒前正常输入，而后我们在主线程发出了中断请求<code>runnableExample.interrupt()</code>,线程中通过<code>Thread.interrupted()</code>判断是否要终止，确认后抛出异常而停止<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RunnableExample:0</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">RunnableExample:1860</span><br><span class=\"line\">RunnableExample:1861</span><br><span class=\"line\">RunnableExample:1862</span><br><span class=\"line\">RunnableExample:1863</span><br><span class=\"line\">RunnableExample:1864</span><br><span class=\"line\">RunnableExample:1865</span><br><span class=\"line\">RunnableExample:终止</span><br><span class=\"line\">java.lang.InterruptedException: 我要被停止了</span><br><span class=\"line\">        at com.cool1024.RunnableExample.run(RunnableExample.kt:8)</span><br><span class=\"line\">        at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure></p>\n<p>停止线程的方法:<br>a. 使用退出标志<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TempThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> exit = <span class=\"keyword\">false</span>; </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!exit)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//do something</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>b. 使用interrupt()方法中断当前线程<br>c. 使用stop()方法强行终止（弃用了）</p>\n<ol start=\"3\">\n<li><code>yeild()</code>使当前线程从运行状态转变为就绪状态,让出自己的CUP资源，然后重新在就绪队列中选择线程执行（可能又是自己，让出去任然有可能被再次执行）</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableExample</span>:<span class=\"type\">Runnable&#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">            println(<span class=\"string\">\"Name:<span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>,<span class=\"variable\">$i</span>\"</span>)</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableYeildExample</span>:<span class=\"type\">Runnable&#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">            println(<span class=\"string\">\"Name:<span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>,<span class=\"variable\">$i</span>\"</span>)</span><br><span class=\"line\">            Thread.yield()</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> App&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> threadOne = Thread(RunnableExample(),<span class=\"string\">\"ONE\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> threadTwo = Thread(RunnableYeildExample(),<span class=\"string\">\"TWO\"</span>)</span><br><span class=\"line\">        threadOne.start()</span><br><span class=\"line\">        threadTwo.start()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到TWO线程让出资源后依然可能立即执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name:ONE,0</span><br><span class=\"line\">Name:TWO,0</span><br><span class=\"line\">Name:TWO,1</span><br><span class=\"line\">Name:ONE,1</span><br><span class=\"line\">Name:ONE,2</span><br><span class=\"line\">Name:TWO,2</span><br><span class=\"line\">Name:TWO,3</span><br><span class=\"line\">Name:ONE,3</span><br><span class=\"line\">Name:TWO,4</span><br><span class=\"line\">Name:ONE,4</span><br><span class=\"line\">Name:ONE,5</span><br><span class=\"line\">Name:TWO,5</span><br><span class=\"line\">Name:TWO,6</span><br><span class=\"line\">Name:ONE,6</span><br><span class=\"line\">Name:TWO,7</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<ol start=\"4\">\n<li>恢复与暂停suspend/resume<br>缺点：<br>独占，如果线程内使用了公共同步对象，那么<code>suspend</code>执行后会一致被占用（锁住，经常导致死锁）<br>容易出现数据不同步</li>\n</ol>\n<h2 id=\"线程安全与非线程安全\"><a href=\"#线程安全与非线程安全\" class=\"headerlink\" title=\"线程安全与非线程安全\"></a>线程安全与非线程安全</h2><p><strong>线程安全</strong>就是多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，其他线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据污染。</p>\n<p><strong>线程不安全</strong>就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据</p>\n<h2 id=\"并发处理相关\"><a href=\"#并发处理相关\" class=\"headerlink\" title=\"并发处理相关\"></a>并发处理相关</h2><ol>\n<li>原子变量</li>\n</ol>\n<p>原子变量保证了该变量的所有操作都是原子的，不会因为多线程的同时访问而导致脏数据的读取问题。synchronized关键字也可以做到对变量的原子操作。只是synchronized的成本相对较高，需要获取锁对象，释放锁对象，如果不能获取到锁，还需要阻塞在阻塞队列上进行等待。而如果单单只是为了解决对变量的原子操作，建议使用原子变量。</p>\n<p>原子变量类的命名类似于AtomicXxx，例如，AtomicInteger类用于表示一个int变量。原子变量可用于在不使用任何锁的情况下以原子方式对单个变量执行多个指令。</p>\n<ul>\n<li><strong>标量原子变量类</strong><br>AtomicInteger，AtomicLong和AtomicBoolean类分别支持对原始数据类型int，long和boolean的操作。</li>\n</ul>\n<p>当引用变量需要以原子方式更新时，AtomicReference类用于处理引用数据类型。</p>\n<ul>\n<li><p><strong>原子数组类</strong><br>有三个类称为AtomicIntegerArray，AtomicLongArray和AtomicReferenceArray，它们表示一个int，long和引用类型的数组，其元素可以进行原子性更新。</p>\n</li>\n<li><p><strong>原子字段更新程序类</strong><br>有三个类称为AtomicLongFieldUpdater，AtomicIntegerFieldUpdater和AtomicReferenceFieldUpdater，可用于使用反射以原子方式更新类的易失性字段。</p>\n</li>\n</ul>\n<p>要获得对这些类的对象的引用，您需要使用他们的工厂方法newUpdater()。</p>\n<ul>\n<li><strong>原子复合变量类</strong></li>\n</ul>\n<p>如下代码情况，多个线程公用一个计数器，如果不加上同步锁（synchronized）<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableExample</span>:<span class=\"type\">Runnable&#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> count:<span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            count++</span><br><span class=\"line\">            println(<span class=\"string\">\"CountValue:<span class=\"variable\">$count</span>\"</span>)</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> App&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> runnableExample = RunnableExample()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> threadOne = Thread(runnableExample)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> threadTwo = Thread(runnableExample)</span><br><span class=\"line\">        threadOne.start()</span><br><span class=\"line\">        threadTwo.start()</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">2000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>由于count不是线程安全的，程序执行每次的结果可能都不一样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CountValue:1</span><br><span class=\"line\">CountValue:2</span><br><span class=\"line\">CountValue:3</span><br><span class=\"line\">CountValue:4</span><br><span class=\"line\">CountValue:5</span><br><span class=\"line\">CountValue:5</span><br><span class=\"line\">CountValue:6</span><br><span class=\"line\">CountValue:7</span><br><span class=\"line\">CountValue:8</span><br><span class=\"line\">CountValue:9</span><br><span class=\"line\">CountValue:10</span><br><span class=\"line\">CountValue:11</span><br><span class=\"line\">CountValue:12</span><br><span class=\"line\">CountValue:12</span><br><span class=\"line\">CountValue:14</span><br><span class=\"line\">CountValue:14</span><br><span class=\"line\">CountValue:15</span><br><span class=\"line\">CountValue:16</span><br><span class=\"line\">CountValue:17</span><br><span class=\"line\">CountValue:17</span><br><span class=\"line\">End-CountValue:17</span><br></pre></td></tr></table></figure>\n<p>如果使用原子变量，那么就可以得到正确一致的结果（我们可以发现虽然打印值的顺序不同，但是最后结果值是正确的）<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableExample</span>:<span class=\"type\">Runnable&#123;</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Volatile</span> <span class=\"keyword\">var</span> count:AtomicInteger = AtomicInteger(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            println(<span class=\"string\">\"CountValue:<span class=\"subst\">$&#123;count.incrementAndGet()&#125;</span>\"</span>)</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CountValue:2</span><br><span class=\"line\">CountValue:1</span><br><span class=\"line\">CountValue:3</span><br><span class=\"line\">CountValue:4</span><br><span class=\"line\">CountValue:6</span><br><span class=\"line\">CountValue:5</span><br><span class=\"line\">CountValue:8</span><br><span class=\"line\">CountValue:7</span><br><span class=\"line\">CountValue:10</span><br><span class=\"line\">CountValue:9</span><br><span class=\"line\">CountValue:11</span><br><span class=\"line\">CountValue:12</span><br><span class=\"line\">CountValue:13</span><br><span class=\"line\">CountValue:14</span><br><span class=\"line\">CountValue:15</span><br><span class=\"line\">CountValue:16</span><br><span class=\"line\">CountValue:17</span><br><span class=\"line\">CountValue:18</span><br><span class=\"line\">CountValue:19</span><br><span class=\"line\">CountValue:20</span><br><span class=\"line\">End-CountValue:20</span><br></pre></td></tr></table></figure>\n<h2 id=\"Volatile-变量\"><a href=\"#Volatile-变量\" class=\"headerlink\" title=\"Volatile 变量\"></a>Volatile 变量</h2><p>Java 语言中的 volatile 变量可以被看作是一种 “程度较轻的 synchronized”；与 synchronized 块相比，volatile 变量所需的编码较少，并且运行时开销也较少，但是它所能实现的功能也仅是 synchronized 的一部分。本文介绍了几种有效使用 volatile 变量的模式，并强调了几种不适合使用 volatile 变量的情形。</p>\n<p>锁提供了两种主要特性：互斥（mutual exclusion） 和可见性（visibility）。互斥即一次只允许一个线程持有某个特定的锁，因此可使用该特性实现对共享数据的协调访问协议，这样，一次就只有一个线程能够使用该共享数据。可见性要更加复杂一些，它必须确保释放锁之前对共享数据做出的更改对于随后获得该锁的另一个线程是可见的 —— 如果没有同步机制提供的这种可见性保证，线程看到的共享变量可能是修改前的值或不一致的值，这将引发许多严重问题。</p>\n<p>您只能在有限的一些情形下使用 volatile 变量替代锁。要使 volatile 变量提供理想的线程安全，必须同时满足下面两个条件：</p>\n<ul>\n<li>对变量的写操作不依赖于当前值。</li>\n<li><p>该变量没有包含在具有其他变量的不变式中。</p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/java/j-jtp06197.html\" target=\"_blank\" rel=\"noopener\">更多内容详细参考</a></p>\n</li>\n</ul>\n<h2 id=\"Synchronized\"><a href=\"#Synchronized\" class=\"headerlink\" title=\"Synchronized\"></a>Synchronized</h2><p> synchronized是Java中的关键字，是一种同步锁。它修饰的对象有以下几种： </p>\n<ol>\n<li>代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象； </li>\n<li>方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象； </li>\n<li>静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象； </li>\n<li>类，其作用的范围是synchronized后面括号括起来的部分，作用主的对象是这个类的所有对象。</li>\n</ol>\n<p>使用synchronized我们可以确保count的增加是正确的</p>\n<p>Java代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableJavaExample</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">synchronized</span> <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">increamentAndGet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ++count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">\",CountValue:\"</span>+increamentAndGet());</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> RunnableJavaExample();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(runnable,<span class=\"string\">\"ONE\"</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(runnable,<span class=\"string\">\"TWO\"</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Kotlin代码<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableExample</span>:<span class=\"type\">Runnable&#123;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> count:<span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Synchronized</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">increamentAndGet</span><span class=\"params\">()</span></span>:<span class=\"built_in\">Int</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ++count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0</span> until <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            println(<span class=\"string\">\"CountValue:<span class=\"subst\">$&#123;increamentAndGet()&#125;</span>\"</span>)</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> App&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> runnableExample = RunnableExample()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> threadOne = Thread(runnableExample,<span class=\"string\">\"ONE\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> threadTwo = Thread(runnableExample,<span class=\"string\">\"TWO\"</span>)</span><br><span class=\"line\">        threadOne.start()</span><br><span class=\"line\">        threadTwo.start()</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">2000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">\"End-CountValue:<span class=\"subst\">$&#123;runnableExample.count&#125;</span>\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"跨境支付","date":"2018-09-05T02:09:25.000Z","_content":"\n#### 支付宝\n[参考文档:https://global.alipay.com/service](https://global.alipay.com/service)\n1. PC网站支付\n2. 移动端网站支付\n3. App支付\n\n#### 微信支付\n[参考文档:https://global.alipay.com/service](https://pay.weixin.qq.com/wiki/doc/api/app/app_jw.php?chapter=9_1)\n1. 扫码支付\n2. App支付\n3. 公众号支付\n\n####PayPal\n1. Mobile,Web\n\n","source":"_posts/跨境支付.md","raw":"---\ntitle: 跨境支付\ndate: 2018-09-05 10:09:25\ntags: ['Aplipay','WechatPay']\n---\n\n#### 支付宝\n[参考文档:https://global.alipay.com/service](https://global.alipay.com/service)\n1. PC网站支付\n2. 移动端网站支付\n3. App支付\n\n#### 微信支付\n[参考文档:https://global.alipay.com/service](https://pay.weixin.qq.com/wiki/doc/api/app/app_jw.php?chapter=9_1)\n1. 扫码支付\n2. App支付\n3. 公众号支付\n\n####PayPal\n1. Mobile,Web\n\n","slug":"跨境支付","published":1,"updated":"2019-07-05T04:24:05.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld9x003ve8we8rr38dsv","content":"<h4 id=\"支付宝\"><a href=\"#支付宝\" class=\"headerlink\" title=\"支付宝\"></a>支付宝</h4><p><a href=\"https://global.alipay.com/service\" target=\"_blank\" rel=\"noopener\">参考文档:https://global.alipay.com/service</a></p>\n<ol>\n<li>PC网站支付</li>\n<li>移动端网站支付</li>\n<li>App支付</li>\n</ol>\n<h4 id=\"微信支付\"><a href=\"#微信支付\" class=\"headerlink\" title=\"微信支付\"></a>微信支付</h4><p><a href=\"https://pay.weixin.qq.com/wiki/doc/api/app/app_jw.php?chapter=9_1\" target=\"_blank\" rel=\"noopener\">参考文档:https://global.alipay.com/service</a></p>\n<ol>\n<li>扫码支付</li>\n<li>App支付</li>\n<li>公众号支付</li>\n</ol>\n<p>####PayPal</p>\n<ol>\n<li>Mobile,Web</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"支付宝\"><a href=\"#支付宝\" class=\"headerlink\" title=\"支付宝\"></a>支付宝</h4><p><a href=\"https://global.alipay.com/service\" target=\"_blank\" rel=\"noopener\">参考文档:https://global.alipay.com/service</a></p>\n<ol>\n<li>PC网站支付</li>\n<li>移动端网站支付</li>\n<li>App支付</li>\n</ol>\n<h4 id=\"微信支付\"><a href=\"#微信支付\" class=\"headerlink\" title=\"微信支付\"></a>微信支付</h4><p><a href=\"https://pay.weixin.qq.com/wiki/doc/api/app/app_jw.php?chapter=9_1\" target=\"_blank\" rel=\"noopener\">参考文档:https://global.alipay.com/service</a></p>\n<ol>\n<li>扫码支付</li>\n<li>App支付</li>\n<li>公众号支付</li>\n</ol>\n<p>####PayPal</p>\n<ol>\n<li>Mobile,Web</li>\n</ol>\n"},{"title":"Java线程池（二）","date":"2019-07-10T12:41:40.000Z","_content":"\n# 线程池\n线程池是一种多线程处理形式，处理过程中将任务添加到队列，然后在创建线程后自动启动这些任务。线程池线程都是后台线程。每个线程都使用默认的堆栈大小，以默认的优先级运行，并处于多线程单元中。如果某个线程在托管代码中空闲（如正在等待某个事件），则线程池将插入另一个辅助线程来使所有处理器保持繁忙。如果所有线程池线程都始终保持繁忙，但队列中包含挂起的工作，则线程池将在一段时间后创建另一个辅助线程但线程的数目永远不会超过最大值。超过最大值的线程可以排队，但他们要等到其他线程完成后才启动。\n\n一个线程池包括以下四个基本组成部分：\n\n1、线程池管理器（ThreadPool）：用于创建并管理线程池，包括 创建线程池，销毁线程池，添加新任务；\n2、工作线程（PoolWorker）：线程池中线程，在没有任务时处于等待状态，可以循环的执行任务；\n3、任务接口（Task）：每个任务必须实现的接口，以供工作线程调度任务的执行，它主要规定了任务的入口，任务执行完后的收尾工作，任务的执行状态等；\n4、任务队列（taskQueue）：用于存放没有处理的任务。提供一种缓冲机制。\n<!--more-->\n\n# 传统创建线程的问题\n\n1. 每次都需要创建Thread对象消耗资源/性能。\n2. 线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或OOM。\n3. 缺乏更多功能，如定时执行、定期执行、线程中断。\n\n# 线程池优势\n\n1. 降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗(线程重用，这样就不会频繁地创建、销毁线程和调用GC)；\n2. 提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行；\n3. 提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。\n4. 提供定时执行、定期执行、单线程、并发数控制等功能。\n\n>假设一个服务器完成一项任务所需时间为：T1 创建线程时间，T2 在线程中执行任务的时间，T3 销毁线程时间。如果：T1 + T3 远大于 T2，则可以采用线程池，以提高服务器性能。\n\n# 几种线程池\n\n## ThreadPoolExecutor 基本线程池（默认）\n典型的构造方法\n```Java\n/**\n* @param corePoolSize the number of threads to keep in the pool, even\n*        if they are idle, unless {@code allowCoreThreadTimeOut} is set\n* @param maximumPoolSize the maximum number of threads to allow in the\n*        pool\n* @param keepAliveTime when the number of threads is greater than\n*        the core, this is the maximum time that excess idle threads\n*        will wait for new tasks before terminating.\n* @param unit the time unit for the {@code keepAliveTime} argument\n* @param workQueue the queue to use for holding tasks before they are\n*        executed.  This queue will hold only the {@code Runnable}\n*        tasks submitted by the {@code execute} method.\n* @param threadFactory the factory to use when the executor\n*        creates a new thread\n* @param handler the handler to use when execution is blocked\n*        because the thread bounds and queue capacities are reached\n*/\npublic ThreadPoolExecutor(\n    int corePoolSize,\n    int maximumPoolSize,\n    long keepAliveTime,\n    TimeUnit unit,\n    BlockingQueue<Runnable> workQueue,\n    ThreadFactory threadFactory,\n    RejectedExecutionHandler handler) \n```\n参数说明\n * `corePoolSize`核心线程数（常年住在池子里的~），这些线程会一直保留就算是空闲的，除非设置了`allowCoreThreadTimeOut`,这样空闲等待一定时间（超时）后就会被销毁\n * `maximumPoolSize`线程池中允许存在的最大线程数量（包括了核心线程哦，这个肯定要大于或等于核心线程数啦~）\n ```Java\n // 源码中有如下判断\n if (corePoolSize < 0 ||\n            maximumPoolSize <= 0 ||\n            maximumPoolSize < corePoolSize ||\n            keepAliveTime < 0)\n            throw new IllegalArgumentException();\n ```\n * `keepAliveTime`线程空闲后保活时间（等着有任务来~），注意核心线程是默认一直保活的不会被销毁；如果`allowCoreThreadTimeOut`被设置为`true`时，那么这个参数时间也会作用与核心线程\n * `unit`是`keepAliveTime`的时间单位\n * `workQueue`任务队列，用于保存还没有执行的任务，这个队列只包含使用`execute`方法提交的任务\n * `threadFactory`用于创建新线程的工厂，可以自己实现如下接口，也可以用`Executors.defaultThreadFactory()`提供的默认工厂实例\n ```Java\n public interface ThreadFactory {\n\n    /**\n     * Constructs a new {@code Thread}.  Implementations may also initialize\n     * priority, name, daemon status, {@code ThreadGroup}, etc.\n     *\n     * @param r a runnable to be executed by new thread instance\n     * @return constructed thread, or {@code null} if the request to\n     *         create a thread is rejected\n     */\n    Thread newThread(Runnable r);\n}\n ```\n * `handler`任务执行被拒绝的处理方式,可以自己实现`RejectedExecutionHandler`，也可以用线程池默认自带的defaultHandler（不填参数即可），当是默认的处理对象AbortPolicy()只是简单的抛出了一个异常并没有做任何实际处理\n ```Java\n public interface RejectedExecutionHandler {\n\n    /**\n     * Method that may be invoked by a {@link ThreadPoolExecutor} when\n     * {@link ThreadPoolExecutor#execute execute} cannot accept a\n     * task.  This may occur when no more threads or queue slots are\n     * available because their bounds would be exceeded, or upon\n     * shutdown of the Executor.\n     *\n     * <p>In the absence of other alternatives, the method may throw\n     * an unchecked {@link RejectedExecutionException}, which will be\n     * propagated to the caller of {@code execute}.\n     *\n     * @param r the runnable task requested to be executed\n     * @param executor the executor attempting to execute this task\n     * @throws RejectedExecutionException if there is no remedy\n     */\n    void rejectedExecution(Runnable r, ThreadPoolExecutor executor);\n}\n ```\n\n ```Java\n public static class AbortPolicy implements RejectedExecutionHandler {\n        /**\n         * Creates an {@code AbortPolicy}.\n         */\n        public AbortPolicy() { }\n\n        /**\n         * Always throws RejectedExecutionException.\n         *\n         * @param r the runnable task requested to be executed\n         * @param e the executor attempting to execute this task\n         * @throws RejectedExecutionException always\n         */\n        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n            throw new RejectedExecutionException(\"Task \" + r.toString() +\n                                                 \" rejected from \" +\n                                                 e.toString());\n        }\n    }\n ```\n简单用例\n```Kotlin\nval threadPoolExecutor = ThreadPoolExecutor(10,100,1,TimeUnit.SECONDS,LinkedBlockingQueue<Runnable>(100))\nfor(i in 0..100){\n    val runnable = Runnable {\n        Thread.sleep(1000)\n        println(\"事情做完了~\")\n    }\n    threadPoolExecutor.execute(runnable)\n}\n```\n\n执行execute方法将Runnable实例传入后\n\n1. 如果线程池中的线程数未达到核心线程数，则会立马启用一个核心线程去执行。\n2. 如果线程池中的线程数已经达到核心线程数，且workQueue未满，则将新线程放入workQueue中等待执行。\n3. 如果线程池中的线程数已经达到核心线程数但未超过非核心线程数，且workQueue已满，则开启一个非核心线程来执行任务。\n4. 如果线程池中的线程数已经超过非核心线程数，且workQueue已满，则拒绝执行该任务，采取饱和策略，交予RejectedExecutionHandler处理。\n```Java\npublic void execute(Runnable command) {\n    if (command == null)\n        throw new NullPointerException();\n       /*\n        * Proceed in 3 steps:\n        *\n        * 1. If fewer than corePoolSize threads are running, try to\n        * start a new thread with the given command as its first\n        * task.  The call to addWorker atomically checks runState and\n        * workerCount, and so prevents false alarms that would add\n        * threads when it shouldn't, by returning false.\n        *\n        * 2. If a task can be successfully queued, then we still need\n        * to double-check whether we should have added a thread\n        * (because existing ones died since last checking) or that\n        * the pool shut down since entry into this method. So we\n        * recheck state and if necessary roll back the enqueuing if\n        * stopped, or start a new thread if there are none.\n        *\n        * 3. If we cannot queue task, then we try to add a new\n        * thread.  If it fails, we know we are shut down or saturated\n        * and so reject the task.\n        */\n    int c = ctl.get();\n\n    // 如果当前线程池中线程数目小于核心线程数据那么开辟一个新的线程执行任务\n    if (workerCountOf(c) < corePoolSize) { \n        if (addWorker(command, true))\n            return;\n        c = ctl.get();\n    }\n\n    /**\n     * 如果任务可以成功排队，那么我们仍然需要仔细检查是否应该添加一个线程（因为自上次检查后现有的线程已经死亡），\n     * 或者自从进入此方法后被线程池关闭了。 所以我们重新检查状态，如果必要的话，如果没有，则回滚入队，或者如果没有，\n     * 则启动新的线程。\n     */\n    if (isRunning(c) && workQueue.offer(command)) {\n        int recheck = ctl.get();\n        if (! isRunning(recheck) && remove(command))\n            reject(command);\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n\n    // 如果我们不能排队任务，那么我们尝试添加一个新线程。 如果失败，我们知道我们已关闭或饱和，因此拒绝该任务。\n    else if (!addWorker(command, false))\n        reject(command);\n}\n```\n\n## FixedThreadPool(一个固定大小的线程池，可以用于已知并发压力的情况下，对线程数做限制)\nFixedThreadPool并不是一个类，仅仅是当核心线程数==最大线程数（也就是就只有核心线程），并且任务队列是没有限制的的ThreadPoolExecutor，我们从源代码可以看出LinkedBlockingQueue没有指定大小，并且线程空闲等待时间为0（永不超时，一直常驻）\n```Java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                    0L, TimeUnit.MILLISECONDS,\n                                    new LinkedBlockingQueue<Runnable>());\n}\n\n// LinkedBlockingQueue构造方法截取\npublic LinkedBlockingQueue() {\n    this(Integer.MAX_VALUE);\n}\n```\n\n## CachedThreadPool(一个可以无限扩大的线程池，比较适合处理执行时间比较小的任务)\n直接看源代码，很直接，没有核心线程（常驻的线程），最大线程数为最大Int（2<sup>31</sup>-1.），并且每个非核心线程空闲等待的时间为60s，采用SynchronousQueue队列\n```Java\npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                    60L, TimeUnit.SECONDS,\n                                    new SynchronousQueue<Runnable>());\n}\n```\n\n因为没有核心线程，其他全为非核心线程，SynchronousQueue是不存储元素的，每次插入操作必须伴随一个移除操作，一个移除操作也要伴随一个插入操作。\n当一个任务执行时，先用SynchronousQueue的offer提交任务，如果线程池中有线程空闲，则调用SynchronousQueue的poll方法来移除任务并交给线程处理；如果没有线程空闲，则开启一个新的非核心线程来处理任务。\n由于maximumPoolSize是无界的，所以如果线程处理任务速度小于提交任务的速度，则会不断地创建新的线程，这时需要注意不要过度创建，应采取措施调整双方速度，不然线程创建太多会影响性能。\n从其特点可以看出，CachedThreadPool适用于有大量需要立即执行的耗时少的任务的情况。\n\n## SingleThreadPool(只有一个核心线程的线程池，按顺序依次执行，可以用于需要保证顺序执行的场景)\n\n我们可以无限制的添加任务到队列中，但是一直都只有一个任务能被执行（单一线程）。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。\n\n```Java\n/**\n* Creates an Executor that uses a single worker thread operating\n* off an unbounded queue. (Note however that if this single\n* thread terminates due to a failure during execution prior to\n* shutdown, a new one will take its place if needed to execute\n* subsequent tasks.)  Tasks are guaranteed to execute\n* sequentially, and no more than one task will be active at any\n* given time. Unlike the otherwise equivalent\n* {@code newFixedThreadPool(1)} the returned executor is\n* guaranteed not to be reconfigurable to use additional threads.\n*\n* @return the newly created single-threaded Executor\n*/\npublic static ExecutorService newSingleThreadExecutor() {\n    return new FinalizableDelegatedExecutorService\n        (new ThreadPoolExecutor(1, 1,\n                                0L, TimeUnit.MILLISECONDS,\n                                new LinkedBlockingQueue<Runnable>()));\n}\n```\n\n## ScheduledThreadPool（可以延时启动，定时启动的线程池，适用于需要多个后台线程执行周期任务的场景）\n\n[详细参考链接](https://www.jianshu.com/p/925dba9f5969)\n\n与上面的线程池不同ScheduledThreadPool是一个单独的ScheduledExecutorService实现，并且继承了ThreadPoolExecutor\n```Kotlin\nimport java.util.concurrent.Executors\nimport java.util.concurrent.TimeUnit\n\nobject App{\n    @JvmStatic\n    fun main(args: Array<String>) {\n        val scheduledPoolExecutor = Executors.newScheduledThreadPool(10)\n\n        for (i in 0..100) {\n            val runnable = Runnable {\n                Thread.sleep(100)\n                println(\"$i 事情做完了~\")\n            }\n            scheduledPoolExecutor.schedule(runnable, 1, TimeUnit.SECONDS)\n        }\n    }\n}\n```\n上面代码会在一秒后执行队列中的任务\n\n>* SynchronousQueue\n是无界的，是一种无缓冲的等待队列，但是由于该Queue本身的特性，在某次添加元素后必须等待其他线程取走后才能继续添加；可以认为SynchronousQueue是一个缓存值为1的阻塞队列，但是 isEmpty()方法永远返回是true，remainingCapacity() 方法永远返回是0，remove()和removeAll() 方法永远返回是false，iterator()方法永远返回空，peek()方法永远返回null。\n声明一个SynchronousQueue有两种不同的方式，它们之间有着不太一样的行为。公平模式和非公平模式的区别:如果采用公平模式：SynchronousQueue会采用公平锁，并配合一个FIFO队列来阻塞多余的生产者和消费者，从而体系整体的公平策略；但如果是非公平模式（SynchronousQueue默认）：SynchronousQueue采用非公平锁，同时配合一个LIFO队列来管理多余的生产者和消费者，而后一种模式，如果生产者和消费者的处理速度有差距，则很容易出现饥渴的情况，即可能有某些生产者或者是消费者的数据永远都得不到处理。\n* LinkedBlockingQueue\n是无界的，是一个无界缓存的等待队列。基于链表的阻塞队列，内部维持着一个数据缓冲队列（该队列由链表构成）。当生产者往队列中放入一个数据时，队列会从生产者手中获取数据，并缓存在队列内部，而生产者立即返回；只有当队列缓冲区达到最大值缓存容量时（LinkedBlockingQueue可以通过构造函数指定该值），才会阻塞生产者队列，直到消费者从队列中消费掉一份数据，生产者线程会被唤醒，反之对于消费者这端的处理也基于同样的原理。\nLinkedBlockingQueue之所以能够高效的处理并发数据，还因为其对于生产者端和消费者端分别采用了独立的锁来控制数据同步，这也意味着在高并发的情况下生产者和消费者可以并行地操作队列中的数据，以此来提高整个队列的并发性能。\n* ArrayBlockingQueue\n是有界的，是一个有界缓存的等待队列。基于数组的阻塞队列，同LinkedBlockingQueue类似，内部维持着一个定长数据缓冲队列（该队列由数组构成）。ArrayBlockingQueue内部还保存着两个整形变量，分别标识着队列的头部和尾部在数组中的位置。\nArrayBlockingQueue在生产者放入数据和消费者获取数据，都是共用同一个锁对象，由此也意味着两者无法真正并行运行，这点尤其不同于LinkedBlockingQueue；按照实现原理来分析，ArrayBlockingQueue完全可以采用分离锁，从而实现生产者和消费者操作的完全并行运行。Doug Lea之所以没这样去做，也许是因为ArrayBlockingQueue的数据写入和获取操作已经足够轻巧，以至于引入独立的锁机制，除了给代码带来额外的复杂性外，其在性能上完全占不到任何便宜。 ArrayBlockingQueue和LinkedBlockingQueue间还有一个明显的不同之处在于，前者在插入或删除元素时不会产生或销毁任何额外的对象实例，而后者则会生成一个额外的Node对象。这在长时间内需要高效并发地处理大批量数据的系统中，其对于GC的影响还是存在一定的区别。\nArrayBlockingQueue和LinkedBlockingQueue是两个最普通、最常用的阻塞队列，一般情况下，处理多线程间的生产者消费者问题，使用这两个类足以。","source":"_posts/线程池（二）.md","raw":"---\ntitle: Java线程池（二）\ndate: 2019-07-10 20:41:40\ntags: [\"android\"]\ncategories: Android开发\n---\n\n# 线程池\n线程池是一种多线程处理形式，处理过程中将任务添加到队列，然后在创建线程后自动启动这些任务。线程池线程都是后台线程。每个线程都使用默认的堆栈大小，以默认的优先级运行，并处于多线程单元中。如果某个线程在托管代码中空闲（如正在等待某个事件），则线程池将插入另一个辅助线程来使所有处理器保持繁忙。如果所有线程池线程都始终保持繁忙，但队列中包含挂起的工作，则线程池将在一段时间后创建另一个辅助线程但线程的数目永远不会超过最大值。超过最大值的线程可以排队，但他们要等到其他线程完成后才启动。\n\n一个线程池包括以下四个基本组成部分：\n\n1、线程池管理器（ThreadPool）：用于创建并管理线程池，包括 创建线程池，销毁线程池，添加新任务；\n2、工作线程（PoolWorker）：线程池中线程，在没有任务时处于等待状态，可以循环的执行任务；\n3、任务接口（Task）：每个任务必须实现的接口，以供工作线程调度任务的执行，它主要规定了任务的入口，任务执行完后的收尾工作，任务的执行状态等；\n4、任务队列（taskQueue）：用于存放没有处理的任务。提供一种缓冲机制。\n<!--more-->\n\n# 传统创建线程的问题\n\n1. 每次都需要创建Thread对象消耗资源/性能。\n2. 线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或OOM。\n3. 缺乏更多功能，如定时执行、定期执行、线程中断。\n\n# 线程池优势\n\n1. 降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗(线程重用，这样就不会频繁地创建、销毁线程和调用GC)；\n2. 提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行；\n3. 提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。\n4. 提供定时执行、定期执行、单线程、并发数控制等功能。\n\n>假设一个服务器完成一项任务所需时间为：T1 创建线程时间，T2 在线程中执行任务的时间，T3 销毁线程时间。如果：T1 + T3 远大于 T2，则可以采用线程池，以提高服务器性能。\n\n# 几种线程池\n\n## ThreadPoolExecutor 基本线程池（默认）\n典型的构造方法\n```Java\n/**\n* @param corePoolSize the number of threads to keep in the pool, even\n*        if they are idle, unless {@code allowCoreThreadTimeOut} is set\n* @param maximumPoolSize the maximum number of threads to allow in the\n*        pool\n* @param keepAliveTime when the number of threads is greater than\n*        the core, this is the maximum time that excess idle threads\n*        will wait for new tasks before terminating.\n* @param unit the time unit for the {@code keepAliveTime} argument\n* @param workQueue the queue to use for holding tasks before they are\n*        executed.  This queue will hold only the {@code Runnable}\n*        tasks submitted by the {@code execute} method.\n* @param threadFactory the factory to use when the executor\n*        creates a new thread\n* @param handler the handler to use when execution is blocked\n*        because the thread bounds and queue capacities are reached\n*/\npublic ThreadPoolExecutor(\n    int corePoolSize,\n    int maximumPoolSize,\n    long keepAliveTime,\n    TimeUnit unit,\n    BlockingQueue<Runnable> workQueue,\n    ThreadFactory threadFactory,\n    RejectedExecutionHandler handler) \n```\n参数说明\n * `corePoolSize`核心线程数（常年住在池子里的~），这些线程会一直保留就算是空闲的，除非设置了`allowCoreThreadTimeOut`,这样空闲等待一定时间（超时）后就会被销毁\n * `maximumPoolSize`线程池中允许存在的最大线程数量（包括了核心线程哦，这个肯定要大于或等于核心线程数啦~）\n ```Java\n // 源码中有如下判断\n if (corePoolSize < 0 ||\n            maximumPoolSize <= 0 ||\n            maximumPoolSize < corePoolSize ||\n            keepAliveTime < 0)\n            throw new IllegalArgumentException();\n ```\n * `keepAliveTime`线程空闲后保活时间（等着有任务来~），注意核心线程是默认一直保活的不会被销毁；如果`allowCoreThreadTimeOut`被设置为`true`时，那么这个参数时间也会作用与核心线程\n * `unit`是`keepAliveTime`的时间单位\n * `workQueue`任务队列，用于保存还没有执行的任务，这个队列只包含使用`execute`方法提交的任务\n * `threadFactory`用于创建新线程的工厂，可以自己实现如下接口，也可以用`Executors.defaultThreadFactory()`提供的默认工厂实例\n ```Java\n public interface ThreadFactory {\n\n    /**\n     * Constructs a new {@code Thread}.  Implementations may also initialize\n     * priority, name, daemon status, {@code ThreadGroup}, etc.\n     *\n     * @param r a runnable to be executed by new thread instance\n     * @return constructed thread, or {@code null} if the request to\n     *         create a thread is rejected\n     */\n    Thread newThread(Runnable r);\n}\n ```\n * `handler`任务执行被拒绝的处理方式,可以自己实现`RejectedExecutionHandler`，也可以用线程池默认自带的defaultHandler（不填参数即可），当是默认的处理对象AbortPolicy()只是简单的抛出了一个异常并没有做任何实际处理\n ```Java\n public interface RejectedExecutionHandler {\n\n    /**\n     * Method that may be invoked by a {@link ThreadPoolExecutor} when\n     * {@link ThreadPoolExecutor#execute execute} cannot accept a\n     * task.  This may occur when no more threads or queue slots are\n     * available because their bounds would be exceeded, or upon\n     * shutdown of the Executor.\n     *\n     * <p>In the absence of other alternatives, the method may throw\n     * an unchecked {@link RejectedExecutionException}, which will be\n     * propagated to the caller of {@code execute}.\n     *\n     * @param r the runnable task requested to be executed\n     * @param executor the executor attempting to execute this task\n     * @throws RejectedExecutionException if there is no remedy\n     */\n    void rejectedExecution(Runnable r, ThreadPoolExecutor executor);\n}\n ```\n\n ```Java\n public static class AbortPolicy implements RejectedExecutionHandler {\n        /**\n         * Creates an {@code AbortPolicy}.\n         */\n        public AbortPolicy() { }\n\n        /**\n         * Always throws RejectedExecutionException.\n         *\n         * @param r the runnable task requested to be executed\n         * @param e the executor attempting to execute this task\n         * @throws RejectedExecutionException always\n         */\n        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n            throw new RejectedExecutionException(\"Task \" + r.toString() +\n                                                 \" rejected from \" +\n                                                 e.toString());\n        }\n    }\n ```\n简单用例\n```Kotlin\nval threadPoolExecutor = ThreadPoolExecutor(10,100,1,TimeUnit.SECONDS,LinkedBlockingQueue<Runnable>(100))\nfor(i in 0..100){\n    val runnable = Runnable {\n        Thread.sleep(1000)\n        println(\"事情做完了~\")\n    }\n    threadPoolExecutor.execute(runnable)\n}\n```\n\n执行execute方法将Runnable实例传入后\n\n1. 如果线程池中的线程数未达到核心线程数，则会立马启用一个核心线程去执行。\n2. 如果线程池中的线程数已经达到核心线程数，且workQueue未满，则将新线程放入workQueue中等待执行。\n3. 如果线程池中的线程数已经达到核心线程数但未超过非核心线程数，且workQueue已满，则开启一个非核心线程来执行任务。\n4. 如果线程池中的线程数已经超过非核心线程数，且workQueue已满，则拒绝执行该任务，采取饱和策略，交予RejectedExecutionHandler处理。\n```Java\npublic void execute(Runnable command) {\n    if (command == null)\n        throw new NullPointerException();\n       /*\n        * Proceed in 3 steps:\n        *\n        * 1. If fewer than corePoolSize threads are running, try to\n        * start a new thread with the given command as its first\n        * task.  The call to addWorker atomically checks runState and\n        * workerCount, and so prevents false alarms that would add\n        * threads when it shouldn't, by returning false.\n        *\n        * 2. If a task can be successfully queued, then we still need\n        * to double-check whether we should have added a thread\n        * (because existing ones died since last checking) or that\n        * the pool shut down since entry into this method. So we\n        * recheck state and if necessary roll back the enqueuing if\n        * stopped, or start a new thread if there are none.\n        *\n        * 3. If we cannot queue task, then we try to add a new\n        * thread.  If it fails, we know we are shut down or saturated\n        * and so reject the task.\n        */\n    int c = ctl.get();\n\n    // 如果当前线程池中线程数目小于核心线程数据那么开辟一个新的线程执行任务\n    if (workerCountOf(c) < corePoolSize) { \n        if (addWorker(command, true))\n            return;\n        c = ctl.get();\n    }\n\n    /**\n     * 如果任务可以成功排队，那么我们仍然需要仔细检查是否应该添加一个线程（因为自上次检查后现有的线程已经死亡），\n     * 或者自从进入此方法后被线程池关闭了。 所以我们重新检查状态，如果必要的话，如果没有，则回滚入队，或者如果没有，\n     * 则启动新的线程。\n     */\n    if (isRunning(c) && workQueue.offer(command)) {\n        int recheck = ctl.get();\n        if (! isRunning(recheck) && remove(command))\n            reject(command);\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n\n    // 如果我们不能排队任务，那么我们尝试添加一个新线程。 如果失败，我们知道我们已关闭或饱和，因此拒绝该任务。\n    else if (!addWorker(command, false))\n        reject(command);\n}\n```\n\n## FixedThreadPool(一个固定大小的线程池，可以用于已知并发压力的情况下，对线程数做限制)\nFixedThreadPool并不是一个类，仅仅是当核心线程数==最大线程数（也就是就只有核心线程），并且任务队列是没有限制的的ThreadPoolExecutor，我们从源代码可以看出LinkedBlockingQueue没有指定大小，并且线程空闲等待时间为0（永不超时，一直常驻）\n```Java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                    0L, TimeUnit.MILLISECONDS,\n                                    new LinkedBlockingQueue<Runnable>());\n}\n\n// LinkedBlockingQueue构造方法截取\npublic LinkedBlockingQueue() {\n    this(Integer.MAX_VALUE);\n}\n```\n\n## CachedThreadPool(一个可以无限扩大的线程池，比较适合处理执行时间比较小的任务)\n直接看源代码，很直接，没有核心线程（常驻的线程），最大线程数为最大Int（2<sup>31</sup>-1.），并且每个非核心线程空闲等待的时间为60s，采用SynchronousQueue队列\n```Java\npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                    60L, TimeUnit.SECONDS,\n                                    new SynchronousQueue<Runnable>());\n}\n```\n\n因为没有核心线程，其他全为非核心线程，SynchronousQueue是不存储元素的，每次插入操作必须伴随一个移除操作，一个移除操作也要伴随一个插入操作。\n当一个任务执行时，先用SynchronousQueue的offer提交任务，如果线程池中有线程空闲，则调用SynchronousQueue的poll方法来移除任务并交给线程处理；如果没有线程空闲，则开启一个新的非核心线程来处理任务。\n由于maximumPoolSize是无界的，所以如果线程处理任务速度小于提交任务的速度，则会不断地创建新的线程，这时需要注意不要过度创建，应采取措施调整双方速度，不然线程创建太多会影响性能。\n从其特点可以看出，CachedThreadPool适用于有大量需要立即执行的耗时少的任务的情况。\n\n## SingleThreadPool(只有一个核心线程的线程池，按顺序依次执行，可以用于需要保证顺序执行的场景)\n\n我们可以无限制的添加任务到队列中，但是一直都只有一个任务能被执行（单一线程）。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。\n\n```Java\n/**\n* Creates an Executor that uses a single worker thread operating\n* off an unbounded queue. (Note however that if this single\n* thread terminates due to a failure during execution prior to\n* shutdown, a new one will take its place if needed to execute\n* subsequent tasks.)  Tasks are guaranteed to execute\n* sequentially, and no more than one task will be active at any\n* given time. Unlike the otherwise equivalent\n* {@code newFixedThreadPool(1)} the returned executor is\n* guaranteed not to be reconfigurable to use additional threads.\n*\n* @return the newly created single-threaded Executor\n*/\npublic static ExecutorService newSingleThreadExecutor() {\n    return new FinalizableDelegatedExecutorService\n        (new ThreadPoolExecutor(1, 1,\n                                0L, TimeUnit.MILLISECONDS,\n                                new LinkedBlockingQueue<Runnable>()));\n}\n```\n\n## ScheduledThreadPool（可以延时启动，定时启动的线程池，适用于需要多个后台线程执行周期任务的场景）\n\n[详细参考链接](https://www.jianshu.com/p/925dba9f5969)\n\n与上面的线程池不同ScheduledThreadPool是一个单独的ScheduledExecutorService实现，并且继承了ThreadPoolExecutor\n```Kotlin\nimport java.util.concurrent.Executors\nimport java.util.concurrent.TimeUnit\n\nobject App{\n    @JvmStatic\n    fun main(args: Array<String>) {\n        val scheduledPoolExecutor = Executors.newScheduledThreadPool(10)\n\n        for (i in 0..100) {\n            val runnable = Runnable {\n                Thread.sleep(100)\n                println(\"$i 事情做完了~\")\n            }\n            scheduledPoolExecutor.schedule(runnable, 1, TimeUnit.SECONDS)\n        }\n    }\n}\n```\n上面代码会在一秒后执行队列中的任务\n\n>* SynchronousQueue\n是无界的，是一种无缓冲的等待队列，但是由于该Queue本身的特性，在某次添加元素后必须等待其他线程取走后才能继续添加；可以认为SynchronousQueue是一个缓存值为1的阻塞队列，但是 isEmpty()方法永远返回是true，remainingCapacity() 方法永远返回是0，remove()和removeAll() 方法永远返回是false，iterator()方法永远返回空，peek()方法永远返回null。\n声明一个SynchronousQueue有两种不同的方式，它们之间有着不太一样的行为。公平模式和非公平模式的区别:如果采用公平模式：SynchronousQueue会采用公平锁，并配合一个FIFO队列来阻塞多余的生产者和消费者，从而体系整体的公平策略；但如果是非公平模式（SynchronousQueue默认）：SynchronousQueue采用非公平锁，同时配合一个LIFO队列来管理多余的生产者和消费者，而后一种模式，如果生产者和消费者的处理速度有差距，则很容易出现饥渴的情况，即可能有某些生产者或者是消费者的数据永远都得不到处理。\n* LinkedBlockingQueue\n是无界的，是一个无界缓存的等待队列。基于链表的阻塞队列，内部维持着一个数据缓冲队列（该队列由链表构成）。当生产者往队列中放入一个数据时，队列会从生产者手中获取数据，并缓存在队列内部，而生产者立即返回；只有当队列缓冲区达到最大值缓存容量时（LinkedBlockingQueue可以通过构造函数指定该值），才会阻塞生产者队列，直到消费者从队列中消费掉一份数据，生产者线程会被唤醒，反之对于消费者这端的处理也基于同样的原理。\nLinkedBlockingQueue之所以能够高效的处理并发数据，还因为其对于生产者端和消费者端分别采用了独立的锁来控制数据同步，这也意味着在高并发的情况下生产者和消费者可以并行地操作队列中的数据，以此来提高整个队列的并发性能。\n* ArrayBlockingQueue\n是有界的，是一个有界缓存的等待队列。基于数组的阻塞队列，同LinkedBlockingQueue类似，内部维持着一个定长数据缓冲队列（该队列由数组构成）。ArrayBlockingQueue内部还保存着两个整形变量，分别标识着队列的头部和尾部在数组中的位置。\nArrayBlockingQueue在生产者放入数据和消费者获取数据，都是共用同一个锁对象，由此也意味着两者无法真正并行运行，这点尤其不同于LinkedBlockingQueue；按照实现原理来分析，ArrayBlockingQueue完全可以采用分离锁，从而实现生产者和消费者操作的完全并行运行。Doug Lea之所以没这样去做，也许是因为ArrayBlockingQueue的数据写入和获取操作已经足够轻巧，以至于引入独立的锁机制，除了给代码带来额外的复杂性外，其在性能上完全占不到任何便宜。 ArrayBlockingQueue和LinkedBlockingQueue间还有一个明显的不同之处在于，前者在插入或删除元素时不会产生或销毁任何额外的对象实例，而后者则会生成一个额外的Node对象。这在长时间内需要高效并发地处理大批量数据的系统中，其对于GC的影响还是存在一定的区别。\nArrayBlockingQueue和LinkedBlockingQueue是两个最普通、最常用的阻塞队列，一般情况下，处理多线程间的生产者消费者问题，使用这两个类足以。","slug":"线程池（二）","published":1,"updated":"2019-07-12T03:07:47.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy2gld9z003ze8wev10v7h5y","content":"<h1 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h1><p>线程池是一种多线程处理形式，处理过程中将任务添加到队列，然后在创建线程后自动启动这些任务。线程池线程都是后台线程。每个线程都使用默认的堆栈大小，以默认的优先级运行，并处于多线程单元中。如果某个线程在托管代码中空闲（如正在等待某个事件），则线程池将插入另一个辅助线程来使所有处理器保持繁忙。如果所有线程池线程都始终保持繁忙，但队列中包含挂起的工作，则线程池将在一段时间后创建另一个辅助线程但线程的数目永远不会超过最大值。超过最大值的线程可以排队，但他们要等到其他线程完成后才启动。</p>\n<p>一个线程池包括以下四个基本组成部分：</p>\n<p>1、线程池管理器（ThreadPool）：用于创建并管理线程池，包括 创建线程池，销毁线程池，添加新任务；<br>2、工作线程（PoolWorker）：线程池中线程，在没有任务时处于等待状态，可以循环的执行任务；<br>3、任务接口（Task）：每个任务必须实现的接口，以供工作线程调度任务的执行，它主要规定了任务的入口，任务执行完后的收尾工作，任务的执行状态等；<br>4、任务队列（taskQueue）：用于存放没有处理的任务。提供一种缓冲机制。<br><a id=\"more\"></a></p>\n<h1 id=\"传统创建线程的问题\"><a href=\"#传统创建线程的问题\" class=\"headerlink\" title=\"传统创建线程的问题\"></a>传统创建线程的问题</h1><ol>\n<li>每次都需要创建Thread对象消耗资源/性能。</li>\n<li>线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或OOM。</li>\n<li>缺乏更多功能，如定时执行、定期执行、线程中断。</li>\n</ol>\n<h1 id=\"线程池优势\"><a href=\"#线程池优势\" class=\"headerlink\" title=\"线程池优势\"></a>线程池优势</h1><ol>\n<li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗(线程重用，这样就不会频繁地创建、销毁线程和调用GC)；</li>\n<li>提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行；</li>\n<li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li>\n<li>提供定时执行、定期执行、单线程、并发数控制等功能。</li>\n</ol>\n<blockquote>\n<p>假设一个服务器完成一项任务所需时间为：T1 创建线程时间，T2 在线程中执行任务的时间，T3 销毁线程时间。如果：T1 + T3 远大于 T2，则可以采用线程池，以提高服务器性能。</p>\n</blockquote>\n<h1 id=\"几种线程池\"><a href=\"#几种线程池\" class=\"headerlink\" title=\"几种线程池\"></a>几种线程池</h1><h2 id=\"ThreadPoolExecutor-基本线程池（默认）\"><a href=\"#ThreadPoolExecutor-基本线程池（默认）\" class=\"headerlink\" title=\"ThreadPoolExecutor 基本线程池（默认）\"></a>ThreadPoolExecutor 基本线程池（默认）</h2><p>典型的构造方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class=\"line\"><span class=\"comment\">*        if they are idle, unless &#123;<span class=\"doctag\">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class=\"line\"><span class=\"comment\">*        pool</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class=\"line\"><span class=\"comment\">*        the core, this is the maximum time that excess idle threads</span></span><br><span class=\"line\"><span class=\"comment\">*        will wait for new tasks before terminating.</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> unit the time unit for the &#123;<span class=\"doctag\">@code</span> keepAliveTime&#125; argument</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class=\"line\"><span class=\"comment\">*        executed.  This queue will hold only the &#123;<span class=\"doctag\">@code</span> Runnable&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*        tasks submitted by the &#123;<span class=\"doctag\">@code</span> execute&#125; method.</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> threadFactory the factory to use when the executor</span></span><br><span class=\"line\"><span class=\"comment\">*        creates a new thread</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> handler the handler to use when execution is blocked</span></span><br><span class=\"line\"><span class=\"comment\">*        because the thread bounds and queue capacities are reached</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    ThreadFactory threadFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    RejectedExecutionHandler handler)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>参数说明</p>\n<ul>\n<li><code>corePoolSize</code>核心线程数（常年住在池子里的~），这些线程会一直保留就算是空闲的，除非设置了<code>allowCoreThreadTimeOut</code>,这样空闲等待一定时间（超时）后就会被销毁</li>\n<li><p><code>maximumPoolSize</code>线程池中允许存在的最大线程数量（包括了核心线程哦，这个肯定要大于或等于核心线程数啦~）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 源码中有如下判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (corePoolSize &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">           maximumPoolSize &lt;= <span class=\"number\">0</span> ||</span><br><span class=\"line\">           maximumPoolSize &lt; corePoolSize ||</span><br><span class=\"line\">           keepAliveTime &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>keepAliveTime</code>线程空闲后保活时间（等着有任务来~），注意核心线程是默认一直保活的不会被销毁；如果<code>allowCoreThreadTimeOut</code>被设置为<code>true</code>时，那么这个参数时间也会作用与核心线程</p>\n</li>\n<li><code>unit</code>是<code>keepAliveTime</code>的时间单位</li>\n<li><code>workQueue</code>任务队列，用于保存还没有执行的任务，这个队列只包含使用<code>execute</code>方法提交的任务</li>\n<li><p><code>threadFactory</code>用于创建新线程的工厂，可以自己实现如下接口，也可以用<code>Executors.defaultThreadFactory()</code>提供的默认工厂实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ThreadFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constructs a new &#123;<span class=\"doctag\">@code</span> Thread&#125;.  Implementations may also initialize</span></span><br><span class=\"line\"><span class=\"comment\">     * priority, name, daemon status, &#123;<span class=\"doctag\">@code</span> ThreadGroup&#125;, etc.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> r a runnable to be executed by new thread instance</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> constructed thread, or &#123;<span class=\"doctag\">@code</span> null&#125; if the request to</span></span><br><span class=\"line\"><span class=\"comment\">     *         create a thread is rejected</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>handler</code>任务执行被拒绝的处理方式,可以自己实现<code>RejectedExecutionHandler</code>，也可以用线程池默认自带的defaultHandler（不填参数即可），当是默认的处理对象AbortPolicy()只是简单的抛出了一个异常并没有做任何实际处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RejectedExecutionHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Method that may be invoked by a &#123;<span class=\"doctag\">@link</span> ThreadPoolExecutor&#125; when</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> ThreadPoolExecutor#execute execute&#125; cannot accept a</span></span><br><span class=\"line\"><span class=\"comment\">     * task.  This may occur when no more threads or queue slots are</span></span><br><span class=\"line\"><span class=\"comment\">     * available because their bounds would be exceeded, or upon</span></span><br><span class=\"line\"><span class=\"comment\">     * shutdown of the Executor.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;In the absence of other alternatives, the method may throw</span></span><br><span class=\"line\"><span class=\"comment\">     * an unchecked &#123;<span class=\"doctag\">@link</span> RejectedExecutionException&#125;, which will be</span></span><br><span class=\"line\"><span class=\"comment\">     * propagated to the caller of &#123;<span class=\"doctag\">@code</span> execute&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> r the runnable task requested to be executed</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> executor the executor attempting to execute this task</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> RejectedExecutionException if there is no remedy</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rejectedExecution</span><span class=\"params\">(Runnable r, ThreadPoolExecutor executor)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbortPolicy</span> <span class=\"keyword\">implements</span> <span class=\"title\">RejectedExecutionHandler</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * Creates an &#123;<span class=\"doctag\">@code</span> AbortPolicy&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbortPolicy</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * Always throws RejectedExecutionException.</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        * <span class=\"doctag\">@param</span> r the runnable task requested to be executed</span></span><br><span class=\"line\"><span class=\"comment\">        * <span class=\"doctag\">@param</span> e the executor attempting to execute this task</span></span><br><span class=\"line\"><span class=\"comment\">        * <span class=\"doctag\">@throws</span> RejectedExecutionException always</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rejectedExecution</span><span class=\"params\">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RejectedExecutionException(<span class=\"string\">\"Task \"</span> + r.toString() +</span><br><span class=\"line\">                                                <span class=\"string\">\" rejected from \"</span> +</span><br><span class=\"line\">                                                e.toString());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>简单用例<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> threadPoolExecutor = ThreadPoolExecutor(<span class=\"number\">10</span>,<span class=\"number\">100</span>,<span class=\"number\">1</span>,TimeUnit.SECONDS,LinkedBlockingQueue&lt;Runnable&gt;(<span class=\"number\">100</span>))</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0.</span><span class=\"number\">.100</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> runnable = Runnable &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">\"事情做完了~\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threadPoolExecutor.execute(runnable)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行execute方法将Runnable实例传入后</p>\n<ol>\n<li>如果线程池中的线程数未达到核心线程数，则会立马启用一个核心线程去执行。</li>\n<li>如果线程池中的线程数已经达到核心线程数，且workQueue未满，则将新线程放入workQueue中等待执行。</li>\n<li>如果线程池中的线程数已经达到核心线程数但未超过非核心线程数，且workQueue已满，则开启一个非核心线程来执行任务。</li>\n<li>如果线程池中的线程数已经超过非核心线程数，且workQueue已满，则拒绝执行该任务，采取饱和策略，交予RejectedExecutionHandler处理。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable command)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (command == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">       <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * Proceed in 3 steps:</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        * 1. If fewer than corePoolSize threads are running, try to</span></span><br><span class=\"line\"><span class=\"comment\">        * start a new thread with the given command as its first</span></span><br><span class=\"line\"><span class=\"comment\">        * task.  The call to addWorker atomically checks runState and</span></span><br><span class=\"line\"><span class=\"comment\">        * workerCount, and so prevents false alarms that would add</span></span><br><span class=\"line\"><span class=\"comment\">        * threads when it shouldn't, by returning false.</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        * 2. If a task can be successfully queued, then we still need</span></span><br><span class=\"line\"><span class=\"comment\">        * to double-check whether we should have added a thread</span></span><br><span class=\"line\"><span class=\"comment\">        * (because existing ones died since last checking) or that</span></span><br><span class=\"line\"><span class=\"comment\">        * the pool shut down since entry into this method. So we</span></span><br><span class=\"line\"><span class=\"comment\">        * recheck state and if necessary roll back the enqueuing if</span></span><br><span class=\"line\"><span class=\"comment\">        * stopped, or start a new thread if there are none.</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        * 3. If we cannot queue task, then we try to add a new</span></span><br><span class=\"line\"><span class=\"comment\">        * thread.  If it fails, we know we are shut down or saturated</span></span><br><span class=\"line\"><span class=\"comment\">        * and so reject the task.</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = ctl.get();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果当前线程池中线程数目小于核心线程数据那么开辟一个新的线程执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workerCountOf(c) &lt; corePoolSize) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (addWorker(command, <span class=\"keyword\">true</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        c = ctl.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果任务可以成功排队，那么我们仍然需要仔细检查是否应该添加一个线程（因为自上次检查后现有的线程已经死亡），</span></span><br><span class=\"line\"><span class=\"comment\">     * 或者自从进入此方法后被线程池关闭了。 所以我们重新检查状态，如果必要的话，如果没有，则回滚入队，或者如果没有，</span></span><br><span class=\"line\"><span class=\"comment\">     * 则启动新的线程。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> recheck = ctl.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class=\"line\">            reject(command);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (workerCountOf(recheck) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            addWorker(<span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果我们不能排队任务，那么我们尝试添加一个新线程。 如果失败，我们知道我们已关闭或饱和，因此拒绝该任务。</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!addWorker(command, <span class=\"keyword\">false</span>))</span><br><span class=\"line\">        reject(command);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"FixedThreadPool-一个固定大小的线程池，可以用于已知并发压力的情况下，对线程数做限制\"><a href=\"#FixedThreadPool-一个固定大小的线程池，可以用于已知并发压力的情况下，对线程数做限制\" class=\"headerlink\" title=\"FixedThreadPool(一个固定大小的线程池，可以用于已知并发压力的情况下，对线程数做限制)\"></a>FixedThreadPool(一个固定大小的线程池，可以用于已知并发压力的情况下，对线程数做限制)</h2><p>FixedThreadPool并不是一个类，仅仅是当核心线程数==最大线程数（也就是就只有核心线程），并且任务队列是没有限制的的ThreadPoolExecutor，我们从源代码可以看出LinkedBlockingQueue没有指定大小，并且线程空闲等待时间为0（永不超时，一直常驻）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class=\"line\">                                    <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                    <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// LinkedBlockingQueue构造方法截取</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkedBlockingQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(Integer.MAX_VALUE);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"CachedThreadPool-一个可以无限扩大的线程池，比较适合处理执行时间比较小的任务\"><a href=\"#CachedThreadPool-一个可以无限扩大的线程池，比较适合处理执行时间比较小的任务\" class=\"headerlink\" title=\"CachedThreadPool(一个可以无限扩大的线程池，比较适合处理执行时间比较小的任务)\"></a>CachedThreadPool(一个可以无限扩大的线程池，比较适合处理执行时间比较小的任务)</h2><p>直接看源代码，很直接，没有核心线程（常驻的线程），最大线程数为最大Int（2<sup>31</sup>-1.），并且每个非核心线程空闲等待的时间为60s，采用SynchronousQueue队列<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                    <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                    <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为没有核心线程，其他全为非核心线程，SynchronousQueue是不存储元素的，每次插入操作必须伴随一个移除操作，一个移除操作也要伴随一个插入操作。<br>当一个任务执行时，先用SynchronousQueue的offer提交任务，如果线程池中有线程空闲，则调用SynchronousQueue的poll方法来移除任务并交给线程处理；如果没有线程空闲，则开启一个新的非核心线程来处理任务。<br>由于maximumPoolSize是无界的，所以如果线程处理任务速度小于提交任务的速度，则会不断地创建新的线程，这时需要注意不要过度创建，应采取措施调整双方速度，不然线程创建太多会影响性能。<br>从其特点可以看出，CachedThreadPool适用于有大量需要立即执行的耗时少的任务的情况。</p>\n<h2 id=\"SingleThreadPool-只有一个核心线程的线程池，按顺序依次执行，可以用于需要保证顺序执行的场景\"><a href=\"#SingleThreadPool-只有一个核心线程的线程池，按顺序依次执行，可以用于需要保证顺序执行的场景\" class=\"headerlink\" title=\"SingleThreadPool(只有一个核心线程的线程池，按顺序依次执行，可以用于需要保证顺序执行的场景)\"></a>SingleThreadPool(只有一个核心线程的线程池，按顺序依次执行，可以用于需要保证顺序执行的场景)</h2><p>我们可以无限制的添加任务到队列中，但是一直都只有一个任务能被执行（单一线程）。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Creates an Executor that uses a single worker thread operating</span></span><br><span class=\"line\"><span class=\"comment\">* off an unbounded queue. (Note however that if this single</span></span><br><span class=\"line\"><span class=\"comment\">* thread terminates due to a failure during execution prior to</span></span><br><span class=\"line\"><span class=\"comment\">* shutdown, a new one will take its place if needed to execute</span></span><br><span class=\"line\"><span class=\"comment\">* subsequent tasks.)  Tasks are guaranteed to execute</span></span><br><span class=\"line\"><span class=\"comment\">* sequentially, and no more than one task will be active at any</span></span><br><span class=\"line\"><span class=\"comment\">* given time. Unlike the otherwise equivalent</span></span><br><span class=\"line\"><span class=\"comment\">* &#123;<span class=\"doctag\">@code</span> newFixedThreadPool(1)&#125; the returned executor is</span></span><br><span class=\"line\"><span class=\"comment\">* guaranteed not to be reconfigurable to use additional threads.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> the newly created single-threaded Executor</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</span><br><span class=\"line\">        (<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">                                <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ScheduledThreadPool（可以延时启动，定时启动的线程池，适用于需要多个后台线程执行周期任务的场景）\"><a href=\"#ScheduledThreadPool（可以延时启动，定时启动的线程池，适用于需要多个后台线程执行周期任务的场景）\" class=\"headerlink\" title=\"ScheduledThreadPool（可以延时启动，定时启动的线程池，适用于需要多个后台线程执行周期任务的场景）\"></a>ScheduledThreadPool（可以延时启动，定时启动的线程池，适用于需要多个后台线程执行周期任务的场景）</h2><p><a href=\"https://www.jianshu.com/p/925dba9f5969\" target=\"_blank\" rel=\"noopener\">详细参考链接</a></p>\n<p>与上面的线程池不同ScheduledThreadPool是一个单独的ScheduledExecutorService实现，并且继承了ThreadPoolExecutor<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> App&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> scheduledPoolExecutor = Executors.newScheduledThreadPool(<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0.</span><span class=\"number\">.100</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> runnable = Runnable &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100</span>)</span><br><span class=\"line\">                println(<span class=\"string\">\"<span class=\"variable\">$i</span> 事情做完了~\"</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            scheduledPoolExecutor.schedule(runnable, <span class=\"number\">1</span>, TimeUnit.SECONDS)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码会在一秒后执行队列中的任务</p>\n<blockquote>\n<ul>\n<li>SynchronousQueue<br>是无界的，是一种无缓冲的等待队列，但是由于该Queue本身的特性，在某次添加元素后必须等待其他线程取走后才能继续添加；可以认为SynchronousQueue是一个缓存值为1的阻塞队列，但是 isEmpty()方法永远返回是true，remainingCapacity() 方法永远返回是0，remove()和removeAll() 方法永远返回是false，iterator()方法永远返回空，peek()方法永远返回null。<br>声明一个SynchronousQueue有两种不同的方式，它们之间有着不太一样的行为。公平模式和非公平模式的区别:如果采用公平模式：SynchronousQueue会采用公平锁，并配合一个FIFO队列来阻塞多余的生产者和消费者，从而体系整体的公平策略；但如果是非公平模式（SynchronousQueue默认）：SynchronousQueue采用非公平锁，同时配合一个LIFO队列来管理多余的生产者和消费者，而后一种模式，如果生产者和消费者的处理速度有差距，则很容易出现饥渴的情况，即可能有某些生产者或者是消费者的数据永远都得不到处理。</li>\n<li>LinkedBlockingQueue<br>是无界的，是一个无界缓存的等待队列。基于链表的阻塞队列，内部维持着一个数据缓冲队列（该队列由链表构成）。当生产者往队列中放入一个数据时，队列会从生产者手中获取数据，并缓存在队列内部，而生产者立即返回；只有当队列缓冲区达到最大值缓存容量时（LinkedBlockingQueue可以通过构造函数指定该值），才会阻塞生产者队列，直到消费者从队列中消费掉一份数据，生产者线程会被唤醒，反之对于消费者这端的处理也基于同样的原理。<br>LinkedBlockingQueue之所以能够高效的处理并发数据，还因为其对于生产者端和消费者端分别采用了独立的锁来控制数据同步，这也意味着在高并发的情况下生产者和消费者可以并行地操作队列中的数据，以此来提高整个队列的并发性能。</li>\n<li>ArrayBlockingQueue<br>是有界的，是一个有界缓存的等待队列。基于数组的阻塞队列，同LinkedBlockingQueue类似，内部维持着一个定长数据缓冲队列（该队列由数组构成）。ArrayBlockingQueue内部还保存着两个整形变量，分别标识着队列的头部和尾部在数组中的位置。<br>ArrayBlockingQueue在生产者放入数据和消费者获取数据，都是共用同一个锁对象，由此也意味着两者无法真正并行运行，这点尤其不同于LinkedBlockingQueue；按照实现原理来分析，ArrayBlockingQueue完全可以采用分离锁，从而实现生产者和消费者操作的完全并行运行。Doug Lea之所以没这样去做，也许是因为ArrayBlockingQueue的数据写入和获取操作已经足够轻巧，以至于引入独立的锁机制，除了给代码带来额外的复杂性外，其在性能上完全占不到任何便宜。 ArrayBlockingQueue和LinkedBlockingQueue间还有一个明显的不同之处在于，前者在插入或删除元素时不会产生或销毁任何额外的对象实例，而后者则会生成一个额外的Node对象。这在长时间内需要高效并发地处理大批量数据的系统中，其对于GC的影响还是存在一定的区别。<br>ArrayBlockingQueue和LinkedBlockingQueue是两个最普通、最常用的阻塞队列，一般情况下，处理多线程间的生产者消费者问题，使用这两个类足以。</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h1><p>线程池是一种多线程处理形式，处理过程中将任务添加到队列，然后在创建线程后自动启动这些任务。线程池线程都是后台线程。每个线程都使用默认的堆栈大小，以默认的优先级运行，并处于多线程单元中。如果某个线程在托管代码中空闲（如正在等待某个事件），则线程池将插入另一个辅助线程来使所有处理器保持繁忙。如果所有线程池线程都始终保持繁忙，但队列中包含挂起的工作，则线程池将在一段时间后创建另一个辅助线程但线程的数目永远不会超过最大值。超过最大值的线程可以排队，但他们要等到其他线程完成后才启动。</p>\n<p>一个线程池包括以下四个基本组成部分：</p>\n<p>1、线程池管理器（ThreadPool）：用于创建并管理线程池，包括 创建线程池，销毁线程池，添加新任务；<br>2、工作线程（PoolWorker）：线程池中线程，在没有任务时处于等待状态，可以循环的执行任务；<br>3、任务接口（Task）：每个任务必须实现的接口，以供工作线程调度任务的执行，它主要规定了任务的入口，任务执行完后的收尾工作，任务的执行状态等；<br>4、任务队列（taskQueue）：用于存放没有处理的任务。提供一种缓冲机制。<br>","more":"</p>\n<h1 id=\"传统创建线程的问题\"><a href=\"#传统创建线程的问题\" class=\"headerlink\" title=\"传统创建线程的问题\"></a>传统创建线程的问题</h1><ol>\n<li>每次都需要创建Thread对象消耗资源/性能。</li>\n<li>线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或OOM。</li>\n<li>缺乏更多功能，如定时执行、定期执行、线程中断。</li>\n</ol>\n<h1 id=\"线程池优势\"><a href=\"#线程池优势\" class=\"headerlink\" title=\"线程池优势\"></a>线程池优势</h1><ol>\n<li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗(线程重用，这样就不会频繁地创建、销毁线程和调用GC)；</li>\n<li>提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行；</li>\n<li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li>\n<li>提供定时执行、定期执行、单线程、并发数控制等功能。</li>\n</ol>\n<blockquote>\n<p>假设一个服务器完成一项任务所需时间为：T1 创建线程时间，T2 在线程中执行任务的时间，T3 销毁线程时间。如果：T1 + T3 远大于 T2，则可以采用线程池，以提高服务器性能。</p>\n</blockquote>\n<h1 id=\"几种线程池\"><a href=\"#几种线程池\" class=\"headerlink\" title=\"几种线程池\"></a>几种线程池</h1><h2 id=\"ThreadPoolExecutor-基本线程池（默认）\"><a href=\"#ThreadPoolExecutor-基本线程池（默认）\" class=\"headerlink\" title=\"ThreadPoolExecutor 基本线程池（默认）\"></a>ThreadPoolExecutor 基本线程池（默认）</h2><p>典型的构造方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class=\"line\"><span class=\"comment\">*        if they are idle, unless &#123;<span class=\"doctag\">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class=\"line\"><span class=\"comment\">*        pool</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class=\"line\"><span class=\"comment\">*        the core, this is the maximum time that excess idle threads</span></span><br><span class=\"line\"><span class=\"comment\">*        will wait for new tasks before terminating.</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> unit the time unit for the &#123;<span class=\"doctag\">@code</span> keepAliveTime&#125; argument</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class=\"line\"><span class=\"comment\">*        executed.  This queue will hold only the &#123;<span class=\"doctag\">@code</span> Runnable&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*        tasks submitted by the &#123;<span class=\"doctag\">@code</span> execute&#125; method.</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> threadFactory the factory to use when the executor</span></span><br><span class=\"line\"><span class=\"comment\">*        creates a new thread</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> handler the handler to use when execution is blocked</span></span><br><span class=\"line\"><span class=\"comment\">*        because the thread bounds and queue capacities are reached</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    ThreadFactory threadFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    RejectedExecutionHandler handler)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>参数说明</p>\n<ul>\n<li><code>corePoolSize</code>核心线程数（常年住在池子里的~），这些线程会一直保留就算是空闲的，除非设置了<code>allowCoreThreadTimeOut</code>,这样空闲等待一定时间（超时）后就会被销毁</li>\n<li><p><code>maximumPoolSize</code>线程池中允许存在的最大线程数量（包括了核心线程哦，这个肯定要大于或等于核心线程数啦~）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 源码中有如下判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (corePoolSize &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">           maximumPoolSize &lt;= <span class=\"number\">0</span> ||</span><br><span class=\"line\">           maximumPoolSize &lt; corePoolSize ||</span><br><span class=\"line\">           keepAliveTime &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>keepAliveTime</code>线程空闲后保活时间（等着有任务来~），注意核心线程是默认一直保活的不会被销毁；如果<code>allowCoreThreadTimeOut</code>被设置为<code>true</code>时，那么这个参数时间也会作用与核心线程</p>\n</li>\n<li><code>unit</code>是<code>keepAliveTime</code>的时间单位</li>\n<li><code>workQueue</code>任务队列，用于保存还没有执行的任务，这个队列只包含使用<code>execute</code>方法提交的任务</li>\n<li><p><code>threadFactory</code>用于创建新线程的工厂，可以自己实现如下接口，也可以用<code>Executors.defaultThreadFactory()</code>提供的默认工厂实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ThreadFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Constructs a new &#123;<span class=\"doctag\">@code</span> Thread&#125;.  Implementations may also initialize</span></span><br><span class=\"line\"><span class=\"comment\">     * priority, name, daemon status, &#123;<span class=\"doctag\">@code</span> ThreadGroup&#125;, etc.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> r a runnable to be executed by new thread instance</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> constructed thread, or &#123;<span class=\"doctag\">@code</span> null&#125; if the request to</span></span><br><span class=\"line\"><span class=\"comment\">     *         create a thread is rejected</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>handler</code>任务执行被拒绝的处理方式,可以自己实现<code>RejectedExecutionHandler</code>，也可以用线程池默认自带的defaultHandler（不填参数即可），当是默认的处理对象AbortPolicy()只是简单的抛出了一个异常并没有做任何实际处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RejectedExecutionHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Method that may be invoked by a &#123;<span class=\"doctag\">@link</span> ThreadPoolExecutor&#125; when</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> ThreadPoolExecutor#execute execute&#125; cannot accept a</span></span><br><span class=\"line\"><span class=\"comment\">     * task.  This may occur when no more threads or queue slots are</span></span><br><span class=\"line\"><span class=\"comment\">     * available because their bounds would be exceeded, or upon</span></span><br><span class=\"line\"><span class=\"comment\">     * shutdown of the Executor.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;In the absence of other alternatives, the method may throw</span></span><br><span class=\"line\"><span class=\"comment\">     * an unchecked &#123;<span class=\"doctag\">@link</span> RejectedExecutionException&#125;, which will be</span></span><br><span class=\"line\"><span class=\"comment\">     * propagated to the caller of &#123;<span class=\"doctag\">@code</span> execute&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> r the runnable task requested to be executed</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> executor the executor attempting to execute this task</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> RejectedExecutionException if there is no remedy</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rejectedExecution</span><span class=\"params\">(Runnable r, ThreadPoolExecutor executor)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbortPolicy</span> <span class=\"keyword\">implements</span> <span class=\"title\">RejectedExecutionHandler</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * Creates an &#123;<span class=\"doctag\">@code</span> AbortPolicy&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbortPolicy</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * Always throws RejectedExecutionException.</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        * <span class=\"doctag\">@param</span> r the runnable task requested to be executed</span></span><br><span class=\"line\"><span class=\"comment\">        * <span class=\"doctag\">@param</span> e the executor attempting to execute this task</span></span><br><span class=\"line\"><span class=\"comment\">        * <span class=\"doctag\">@throws</span> RejectedExecutionException always</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rejectedExecution</span><span class=\"params\">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RejectedExecutionException(<span class=\"string\">\"Task \"</span> + r.toString() +</span><br><span class=\"line\">                                                <span class=\"string\">\" rejected from \"</span> +</span><br><span class=\"line\">                                                e.toString());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>简单用例<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> threadPoolExecutor = ThreadPoolExecutor(<span class=\"number\">10</span>,<span class=\"number\">100</span>,<span class=\"number\">1</span>,TimeUnit.SECONDS,LinkedBlockingQueue&lt;Runnable&gt;(<span class=\"number\">100</span>))</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0.</span><span class=\"number\">.100</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> runnable = Runnable &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>)</span><br><span class=\"line\">        println(<span class=\"string\">\"事情做完了~\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threadPoolExecutor.execute(runnable)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行execute方法将Runnable实例传入后</p>\n<ol>\n<li>如果线程池中的线程数未达到核心线程数，则会立马启用一个核心线程去执行。</li>\n<li>如果线程池中的线程数已经达到核心线程数，且workQueue未满，则将新线程放入workQueue中等待执行。</li>\n<li>如果线程池中的线程数已经达到核心线程数但未超过非核心线程数，且workQueue已满，则开启一个非核心线程来执行任务。</li>\n<li>如果线程池中的线程数已经超过非核心线程数，且workQueue已满，则拒绝执行该任务，采取饱和策略，交予RejectedExecutionHandler处理。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable command)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (command == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">       <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * Proceed in 3 steps:</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        * 1. If fewer than corePoolSize threads are running, try to</span></span><br><span class=\"line\"><span class=\"comment\">        * start a new thread with the given command as its first</span></span><br><span class=\"line\"><span class=\"comment\">        * task.  The call to addWorker atomically checks runState and</span></span><br><span class=\"line\"><span class=\"comment\">        * workerCount, and so prevents false alarms that would add</span></span><br><span class=\"line\"><span class=\"comment\">        * threads when it shouldn't, by returning false.</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        * 2. If a task can be successfully queued, then we still need</span></span><br><span class=\"line\"><span class=\"comment\">        * to double-check whether we should have added a thread</span></span><br><span class=\"line\"><span class=\"comment\">        * (because existing ones died since last checking) or that</span></span><br><span class=\"line\"><span class=\"comment\">        * the pool shut down since entry into this method. So we</span></span><br><span class=\"line\"><span class=\"comment\">        * recheck state and if necessary roll back the enqueuing if</span></span><br><span class=\"line\"><span class=\"comment\">        * stopped, or start a new thread if there are none.</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        * 3. If we cannot queue task, then we try to add a new</span></span><br><span class=\"line\"><span class=\"comment\">        * thread.  If it fails, we know we are shut down or saturated</span></span><br><span class=\"line\"><span class=\"comment\">        * and so reject the task.</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = ctl.get();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果当前线程池中线程数目小于核心线程数据那么开辟一个新的线程执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workerCountOf(c) &lt; corePoolSize) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (addWorker(command, <span class=\"keyword\">true</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        c = ctl.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果任务可以成功排队，那么我们仍然需要仔细检查是否应该添加一个线程（因为自上次检查后现有的线程已经死亡），</span></span><br><span class=\"line\"><span class=\"comment\">     * 或者自从进入此方法后被线程池关闭了。 所以我们重新检查状态，如果必要的话，如果没有，则回滚入队，或者如果没有，</span></span><br><span class=\"line\"><span class=\"comment\">     * 则启动新的线程。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> recheck = ctl.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class=\"line\">            reject(command);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (workerCountOf(recheck) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            addWorker(<span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果我们不能排队任务，那么我们尝试添加一个新线程。 如果失败，我们知道我们已关闭或饱和，因此拒绝该任务。</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!addWorker(command, <span class=\"keyword\">false</span>))</span><br><span class=\"line\">        reject(command);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"FixedThreadPool-一个固定大小的线程池，可以用于已知并发压力的情况下，对线程数做限制\"><a href=\"#FixedThreadPool-一个固定大小的线程池，可以用于已知并发压力的情况下，对线程数做限制\" class=\"headerlink\" title=\"FixedThreadPool(一个固定大小的线程池，可以用于已知并发压力的情况下，对线程数做限制)\"></a>FixedThreadPool(一个固定大小的线程池，可以用于已知并发压力的情况下，对线程数做限制)</h2><p>FixedThreadPool并不是一个类，仅仅是当核心线程数==最大线程数（也就是就只有核心线程），并且任务队列是没有限制的的ThreadPoolExecutor，我们从源代码可以看出LinkedBlockingQueue没有指定大小，并且线程空闲等待时间为0（永不超时，一直常驻）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class=\"line\">                                    <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                    <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// LinkedBlockingQueue构造方法截取</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LinkedBlockingQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(Integer.MAX_VALUE);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"CachedThreadPool-一个可以无限扩大的线程池，比较适合处理执行时间比较小的任务\"><a href=\"#CachedThreadPool-一个可以无限扩大的线程池，比较适合处理执行时间比较小的任务\" class=\"headerlink\" title=\"CachedThreadPool(一个可以无限扩大的线程池，比较适合处理执行时间比较小的任务)\"></a>CachedThreadPool(一个可以无限扩大的线程池，比较适合处理执行时间比较小的任务)</h2><p>直接看源代码，很直接，没有核心线程（常驻的线程），最大线程数为最大Int（2<sup>31</sup>-1.），并且每个非核心线程空闲等待的时间为60s，采用SynchronousQueue队列<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                    <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                    <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为没有核心线程，其他全为非核心线程，SynchronousQueue是不存储元素的，每次插入操作必须伴随一个移除操作，一个移除操作也要伴随一个插入操作。<br>当一个任务执行时，先用SynchronousQueue的offer提交任务，如果线程池中有线程空闲，则调用SynchronousQueue的poll方法来移除任务并交给线程处理；如果没有线程空闲，则开启一个新的非核心线程来处理任务。<br>由于maximumPoolSize是无界的，所以如果线程处理任务速度小于提交任务的速度，则会不断地创建新的线程，这时需要注意不要过度创建，应采取措施调整双方速度，不然线程创建太多会影响性能。<br>从其特点可以看出，CachedThreadPool适用于有大量需要立即执行的耗时少的任务的情况。</p>\n<h2 id=\"SingleThreadPool-只有一个核心线程的线程池，按顺序依次执行，可以用于需要保证顺序执行的场景\"><a href=\"#SingleThreadPool-只有一个核心线程的线程池，按顺序依次执行，可以用于需要保证顺序执行的场景\" class=\"headerlink\" title=\"SingleThreadPool(只有一个核心线程的线程池，按顺序依次执行，可以用于需要保证顺序执行的场景)\"></a>SingleThreadPool(只有一个核心线程的线程池，按顺序依次执行，可以用于需要保证顺序执行的场景)</h2><p>我们可以无限制的添加任务到队列中，但是一直都只有一个任务能被执行（单一线程）。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Creates an Executor that uses a single worker thread operating</span></span><br><span class=\"line\"><span class=\"comment\">* off an unbounded queue. (Note however that if this single</span></span><br><span class=\"line\"><span class=\"comment\">* thread terminates due to a failure during execution prior to</span></span><br><span class=\"line\"><span class=\"comment\">* shutdown, a new one will take its place if needed to execute</span></span><br><span class=\"line\"><span class=\"comment\">* subsequent tasks.)  Tasks are guaranteed to execute</span></span><br><span class=\"line\"><span class=\"comment\">* sequentially, and no more than one task will be active at any</span></span><br><span class=\"line\"><span class=\"comment\">* given time. Unlike the otherwise equivalent</span></span><br><span class=\"line\"><span class=\"comment\">* &#123;<span class=\"doctag\">@code</span> newFixedThreadPool(1)&#125; the returned executor is</span></span><br><span class=\"line\"><span class=\"comment\">* guaranteed not to be reconfigurable to use additional threads.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> the newly created single-threaded Executor</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</span><br><span class=\"line\">        (<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">                                <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ScheduledThreadPool（可以延时启动，定时启动的线程池，适用于需要多个后台线程执行周期任务的场景）\"><a href=\"#ScheduledThreadPool（可以延时启动，定时启动的线程池，适用于需要多个后台线程执行周期任务的场景）\" class=\"headerlink\" title=\"ScheduledThreadPool（可以延时启动，定时启动的线程池，适用于需要多个后台线程执行周期任务的场景）\"></a>ScheduledThreadPool（可以延时启动，定时启动的线程池，适用于需要多个后台线程执行周期任务的场景）</h2><p><a href=\"https://www.jianshu.com/p/925dba9f5969\" target=\"_blank\" rel=\"noopener\">详细参考链接</a></p>\n<p>与上面的线程池不同ScheduledThreadPool是一个单独的ScheduledExecutorService实现，并且继承了ThreadPoolExecutor<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> App&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> scheduledPoolExecutor = Executors.newScheduledThreadPool(<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">0.</span><span class=\"number\">.100</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> runnable = Runnable &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100</span>)</span><br><span class=\"line\">                println(<span class=\"string\">\"<span class=\"variable\">$i</span> 事情做完了~\"</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            scheduledPoolExecutor.schedule(runnable, <span class=\"number\">1</span>, TimeUnit.SECONDS)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码会在一秒后执行队列中的任务</p>\n<blockquote>\n<ul>\n<li>SynchronousQueue<br>是无界的，是一种无缓冲的等待队列，但是由于该Queue本身的特性，在某次添加元素后必须等待其他线程取走后才能继续添加；可以认为SynchronousQueue是一个缓存值为1的阻塞队列，但是 isEmpty()方法永远返回是true，remainingCapacity() 方法永远返回是0，remove()和removeAll() 方法永远返回是false，iterator()方法永远返回空，peek()方法永远返回null。<br>声明一个SynchronousQueue有两种不同的方式，它们之间有着不太一样的行为。公平模式和非公平模式的区别:如果采用公平模式：SynchronousQueue会采用公平锁，并配合一个FIFO队列来阻塞多余的生产者和消费者，从而体系整体的公平策略；但如果是非公平模式（SynchronousQueue默认）：SynchronousQueue采用非公平锁，同时配合一个LIFO队列来管理多余的生产者和消费者，而后一种模式，如果生产者和消费者的处理速度有差距，则很容易出现饥渴的情况，即可能有某些生产者或者是消费者的数据永远都得不到处理。</li>\n<li>LinkedBlockingQueue<br>是无界的，是一个无界缓存的等待队列。基于链表的阻塞队列，内部维持着一个数据缓冲队列（该队列由链表构成）。当生产者往队列中放入一个数据时，队列会从生产者手中获取数据，并缓存在队列内部，而生产者立即返回；只有当队列缓冲区达到最大值缓存容量时（LinkedBlockingQueue可以通过构造函数指定该值），才会阻塞生产者队列，直到消费者从队列中消费掉一份数据，生产者线程会被唤醒，反之对于消费者这端的处理也基于同样的原理。<br>LinkedBlockingQueue之所以能够高效的处理并发数据，还因为其对于生产者端和消费者端分别采用了独立的锁来控制数据同步，这也意味着在高并发的情况下生产者和消费者可以并行地操作队列中的数据，以此来提高整个队列的并发性能。</li>\n<li>ArrayBlockingQueue<br>是有界的，是一个有界缓存的等待队列。基于数组的阻塞队列，同LinkedBlockingQueue类似，内部维持着一个定长数据缓冲队列（该队列由数组构成）。ArrayBlockingQueue内部还保存着两个整形变量，分别标识着队列的头部和尾部在数组中的位置。<br>ArrayBlockingQueue在生产者放入数据和消费者获取数据，都是共用同一个锁对象，由此也意味着两者无法真正并行运行，这点尤其不同于LinkedBlockingQueue；按照实现原理来分析，ArrayBlockingQueue完全可以采用分离锁，从而实现生产者和消费者操作的完全并行运行。Doug Lea之所以没这样去做，也许是因为ArrayBlockingQueue的数据写入和获取操作已经足够轻巧，以至于引入独立的锁机制，除了给代码带来额外的复杂性外，其在性能上完全占不到任何便宜。 ArrayBlockingQueue和LinkedBlockingQueue间还有一个明显的不同之处在于，前者在插入或删除元素时不会产生或销毁任何额外的对象实例，而后者则会生成一个额外的Node对象。这在长时间内需要高效并发地处理大批量数据的系统中，其对于GC的影响还是存在一定的区别。<br>ArrayBlockingQueue和LinkedBlockingQueue是两个最普通、最常用的阻塞队列，一般情况下，处理多线程间的生产者消费者问题，使用这两个类足以。</li>\n</ul>\n</blockquote>"},{"title":"前端测试笔记（一）","date":"2019-05-06T09:39:50.000Z","_content":"\n## 断言\n```js\nconst assert = require('assert');\nconst faker = require('faker');\nconst request = require('superagent')\n\n// 简单测试\nconst now = Date.now();\nconsole.log(now);\n// assert.ok(now % 2 === 0, '时间戳必须是偶数');\n\n// 接口测试\nconst limit = faker.random.number({ min: 1, max: 10 });\nrequest.get('https://www.cool1024.com/store/goods/search?limit=' + limit + '&offset=0').end(function (err, res) {\n    assert.ok(200 === res.status, '响应码必须是200');\n    const json = JSON.parse(res.text);\n    assert.ok(true === json.result, '接口调用必须成功');\n    const data = json.datas;\n    assert.ok(Array.isArray(data.rows), 'ROWS必须是数组');\n    assert.ok(data.rows.length <= limit, '查询的数据量不能大于LIMIT');\n    console.log(data);\n});\n```\n## mocha\n```js\nconst assert = require('assert');\nconst request = require('superagent')\n\ndescribe('商品模块测试', function () {\n\n    it('商品列表测试', function () {\n        return request.get('https://www.cool1024.com/store/goods/search?limit=10&offset=0')\n            .then(function (res) {\n                assert.ok(200 === res.status, '响应码必须是200');\n            });\n    });\n\n    it('商品详情测试', function () {\n        return request.get('https://www.cool1024.com/store/goods/get?goodsId=4')\n            .then(function (res) {\n                assert.ok(200 === res.status, '响应码必须是200');\n            });\n    });\n});\n```\n\n## selenium-webdriver\n```js\nrequire('chromedriver');\nconst { Builder, By, Key, until } = require('selenium-webdriver');\nvar driver = new Builder()\n    .forBrowser('chrome')\n    .build();\n(async function () {\n    try {\n        await driver.get('https://search.jd.com');\n        await driver.findElement(By.id('keyword')).sendKeys('键盘');\n        await driver.findElement(By.className('input_submit')).click();\n        const text = await driver.findElement(By.className('gl-warp'));\n        console.log(text);\n    } finally {\n        await driver.quit();\n    }\n})();\n```\n","source":"_posts/test.md","raw":"---\ntitle: 前端测试笔记（一）\ndate: 2019-05-06 17:39:50\ntags: [\"JavaScript\"]\ncategories: Web开发\n---\n\n## 断言\n```js\nconst assert = require('assert');\nconst faker = require('faker');\nconst request = require('superagent')\n\n// 简单测试\nconst now = Date.now();\nconsole.log(now);\n// assert.ok(now % 2 === 0, '时间戳必须是偶数');\n\n// 接口测试\nconst limit = faker.random.number({ min: 1, max: 10 });\nrequest.get('https://www.cool1024.com/store/goods/search?limit=' + limit + '&offset=0').end(function (err, res) {\n    assert.ok(200 === res.status, '响应码必须是200');\n    const json = JSON.parse(res.text);\n    assert.ok(true === json.result, '接口调用必须成功');\n    const data = json.datas;\n    assert.ok(Array.isArray(data.rows), 'ROWS必须是数组');\n    assert.ok(data.rows.length <= limit, '查询的数据量不能大于LIMIT');\n    console.log(data);\n});\n```\n## mocha\n```js\nconst assert = require('assert');\nconst request = require('superagent')\n\ndescribe('商品模块测试', function () {\n\n    it('商品列表测试', function () {\n        return request.get('https://www.cool1024.com/store/goods/search?limit=10&offset=0')\n            .then(function (res) {\n                assert.ok(200 === res.status, '响应码必须是200');\n            });\n    });\n\n    it('商品详情测试', function () {\n        return request.get('https://www.cool1024.com/store/goods/get?goodsId=4')\n            .then(function (res) {\n                assert.ok(200 === res.status, '响应码必须是200');\n            });\n    });\n});\n```\n\n## selenium-webdriver\n```js\nrequire('chromedriver');\nconst { Builder, By, Key, until } = require('selenium-webdriver');\nvar driver = new Builder()\n    .forBrowser('chrome')\n    .build();\n(async function () {\n    try {\n        await driver.get('https://search.jd.com');\n        await driver.findElement(By.id('keyword')).sendKeys('键盘');\n        await driver.findElement(By.className('input_submit')).click();\n        const text = await driver.findElement(By.className('gl-warp'));\n        console.log(text);\n    } finally {\n        await driver.quit();\n    }\n})();\n```\n","slug":"test","published":1,"updated":"2019-07-14T04:41:13.824Z","_id":"cjy2h0kmn0000qkwe15rz1v8i","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> assert = <span class=\"built_in\">require</span>(<span class=\"string\">'assert'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> faker = <span class=\"built_in\">require</span>(<span class=\"string\">'faker'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'superagent'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简单测试</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(now);</span><br><span class=\"line\"><span class=\"comment\">// assert.ok(now % 2 === 0, '时间戳必须是偶数');</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接口测试</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> limit = faker.random.number(&#123; <span class=\"attr\">min</span>: <span class=\"number\">1</span>, <span class=\"attr\">max</span>: <span class=\"number\">10</span> &#125;);</span><br><span class=\"line\">request.get(<span class=\"string\">'https://www.cool1024.com/store/goods/search?limit='</span> + limit + <span class=\"string\">'&amp;offset=0'</span>).end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    assert.ok(<span class=\"number\">200</span> === res.status, <span class=\"string\">'响应码必须是200'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> json = <span class=\"built_in\">JSON</span>.parse(res.text);</span><br><span class=\"line\">    assert.ok(<span class=\"literal\">true</span> === json.result, <span class=\"string\">'接口调用必须成功'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = json.datas;</span><br><span class=\"line\">    assert.ok(<span class=\"built_in\">Array</span>.isArray(data.rows), <span class=\"string\">'ROWS必须是数组'</span>);</span><br><span class=\"line\">    assert.ok(data.rows.length &lt;= limit, <span class=\"string\">'查询的数据量不能大于LIMIT'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"mocha\"><a href=\"#mocha\" class=\"headerlink\" title=\"mocha\"></a>mocha</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> assert = <span class=\"built_in\">require</span>(<span class=\"string\">'assert'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'superagent'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'商品模块测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'商品列表测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> request.get(<span class=\"string\">'https://www.cool1024.com/store/goods/search?limit=10&amp;offset=0'</span>)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">                assert.ok(<span class=\"number\">200</span> === res.status, <span class=\"string\">'响应码必须是200'</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'商品详情测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> request.get(<span class=\"string\">'https://www.cool1024.com/store/goods/get?goodsId=4'</span>)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">                assert.ok(<span class=\"number\">200</span> === res.status, <span class=\"string\">'响应码必须是200'</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"selenium-webdriver\"><a href=\"#selenium-webdriver\" class=\"headerlink\" title=\"selenium-webdriver\"></a>selenium-webdriver</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'chromedriver'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; Builder, By, Key, until &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'selenium-webdriver'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> driver = <span class=\"keyword\">new</span> Builder()</span><br><span class=\"line\">    .forBrowser(<span class=\"string\">'chrome'</span>)</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> driver.get(<span class=\"string\">'https://search.jd.com'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> driver.findElement(By.id(<span class=\"string\">'keyword'</span>)).sendKeys(<span class=\"string\">'键盘'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> driver.findElement(By.className(<span class=\"string\">'input_submit'</span>)).click();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> text = <span class=\"keyword\">await</span> driver.findElement(By.className(<span class=\"string\">'gl-warp'</span>));</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(text);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> driver.quit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> assert = <span class=\"built_in\">require</span>(<span class=\"string\">'assert'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> faker = <span class=\"built_in\">require</span>(<span class=\"string\">'faker'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'superagent'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简单测试</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> now = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(now);</span><br><span class=\"line\"><span class=\"comment\">// assert.ok(now % 2 === 0, '时间戳必须是偶数');</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接口测试</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> limit = faker.random.number(&#123; <span class=\"attr\">min</span>: <span class=\"number\">1</span>, <span class=\"attr\">max</span>: <span class=\"number\">10</span> &#125;);</span><br><span class=\"line\">request.get(<span class=\"string\">'https://www.cool1024.com/store/goods/search?limit='</span> + limit + <span class=\"string\">'&amp;offset=0'</span>).end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    assert.ok(<span class=\"number\">200</span> === res.status, <span class=\"string\">'响应码必须是200'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> json = <span class=\"built_in\">JSON</span>.parse(res.text);</span><br><span class=\"line\">    assert.ok(<span class=\"literal\">true</span> === json.result, <span class=\"string\">'接口调用必须成功'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = json.datas;</span><br><span class=\"line\">    assert.ok(<span class=\"built_in\">Array</span>.isArray(data.rows), <span class=\"string\">'ROWS必须是数组'</span>);</span><br><span class=\"line\">    assert.ok(data.rows.length &lt;= limit, <span class=\"string\">'查询的数据量不能大于LIMIT'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"mocha\"><a href=\"#mocha\" class=\"headerlink\" title=\"mocha\"></a>mocha</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> assert = <span class=\"built_in\">require</span>(<span class=\"string\">'assert'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'superagent'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'商品模块测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'商品列表测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> request.get(<span class=\"string\">'https://www.cool1024.com/store/goods/search?limit=10&amp;offset=0'</span>)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">                assert.ok(<span class=\"number\">200</span> === res.status, <span class=\"string\">'响应码必须是200'</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    it(<span class=\"string\">'商品详情测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> request.get(<span class=\"string\">'https://www.cool1024.com/store/goods/get?goodsId=4'</span>)</span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">                assert.ok(<span class=\"number\">200</span> === res.status, <span class=\"string\">'响应码必须是200'</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"selenium-webdriver\"><a href=\"#selenium-webdriver\" class=\"headerlink\" title=\"selenium-webdriver\"></a>selenium-webdriver</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'chromedriver'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; Builder, By, Key, until &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'selenium-webdriver'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> driver = <span class=\"keyword\">new</span> Builder()</span><br><span class=\"line\">    .forBrowser(<span class=\"string\">'chrome'</span>)</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> driver.get(<span class=\"string\">'https://search.jd.com'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> driver.findElement(By.id(<span class=\"string\">'keyword'</span>)).sendKeys(<span class=\"string\">'键盘'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> driver.findElement(By.className(<span class=\"string\">'input_submit'</span>)).click();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> text = <span class=\"keyword\">await</span> driver.findElement(By.className(<span class=\"string\">'gl-warp'</span>));</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(text);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> driver.quit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n"},{"title":"WebGL","date":"2019-04-25T10:09:36.000Z","_content":"\n\n#### WebGL\nWebGL 是一种 3D 绘图标准，这种绘图技术标准允许把 JavaScript 和 OpenGL ES 2.0 结合在一起，通过增加 OpenGL ES 2.0 的一个 JavaScript 绑定，WebGL 可以为 HTML5 Canvas 提供硬件 3D 加速渲染，这样 Web 开发人员就可以借助系统显卡来在浏览器里更流畅地展示3D场景和模型了，还能创建复杂的导航和数据视觉化。\n\n本教程是 WebGL 的最新版介绍，文章区别于网上其他同类的内容，内容全面且新颖，旨在通过简洁的介绍，让读者明白 WebGL 是如何使用的。\n\n#### 参考库\n网址：https://threejs.org/\n\n#### 这是一个新坑，以后有时间要完成~~","source":"_posts/webgl.md","raw":"---\ntitle: WebGL\ndate: 2019-04-25 18:09:36\ntags: [\"JavaScript\"]\ncategories: Web开发\n---\n\n\n#### WebGL\nWebGL 是一种 3D 绘图标准，这种绘图技术标准允许把 JavaScript 和 OpenGL ES 2.0 结合在一起，通过增加 OpenGL ES 2.0 的一个 JavaScript 绑定，WebGL 可以为 HTML5 Canvas 提供硬件 3D 加速渲染，这样 Web 开发人员就可以借助系统显卡来在浏览器里更流畅地展示3D场景和模型了，还能创建复杂的导航和数据视觉化。\n\n本教程是 WebGL 的最新版介绍，文章区别于网上其他同类的内容，内容全面且新颖，旨在通过简洁的介绍，让读者明白 WebGL 是如何使用的。\n\n#### 参考库\n网址：https://threejs.org/\n\n#### 这是一个新坑，以后有时间要完成~~","slug":"webgl","published":1,"updated":"2019-07-14T04:42:27.554Z","_id":"cjy2h27230003qkwe7lbugwcj","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"WebGL\"><a href=\"#WebGL\" class=\"headerlink\" title=\"WebGL\"></a>WebGL</h4><p>WebGL 是一种 3D 绘图标准，这种绘图技术标准允许把 JavaScript 和 OpenGL ES 2.0 结合在一起，通过增加 OpenGL ES 2.0 的一个 JavaScript 绑定，WebGL 可以为 HTML5 Canvas 提供硬件 3D 加速渲染，这样 Web 开发人员就可以借助系统显卡来在浏览器里更流畅地展示3D场景和模型了，还能创建复杂的导航和数据视觉化。</p>\n<p>本教程是 WebGL 的最新版介绍，文章区别于网上其他同类的内容，内容全面且新颖，旨在通过简洁的介绍，让读者明白 WebGL 是如何使用的。</p>\n<h4 id=\"参考库\"><a href=\"#参考库\" class=\"headerlink\" title=\"参考库\"></a>参考库</h4><p>网址：<a href=\"https://threejs.org/\" target=\"_blank\" rel=\"noopener\">https://threejs.org/</a></p>\n<h4 id=\"这是一个新坑，以后有时间要完成\"><a href=\"#这是一个新坑，以后有时间要完成\" class=\"headerlink\" title=\"这是一个新坑，以后有时间要完成~~\"></a>这是一个新坑，以后有时间要完成~~</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"WebGL\"><a href=\"#WebGL\" class=\"headerlink\" title=\"WebGL\"></a>WebGL</h4><p>WebGL 是一种 3D 绘图标准，这种绘图技术标准允许把 JavaScript 和 OpenGL ES 2.0 结合在一起，通过增加 OpenGL ES 2.0 的一个 JavaScript 绑定，WebGL 可以为 HTML5 Canvas 提供硬件 3D 加速渲染，这样 Web 开发人员就可以借助系统显卡来在浏览器里更流畅地展示3D场景和模型了，还能创建复杂的导航和数据视觉化。</p>\n<p>本教程是 WebGL 的最新版介绍，文章区别于网上其他同类的内容，内容全面且新颖，旨在通过简洁的介绍，让读者明白 WebGL 是如何使用的。</p>\n<h4 id=\"参考库\"><a href=\"#参考库\" class=\"headerlink\" title=\"参考库\"></a>参考库</h4><p>网址：<a href=\"https://threejs.org/\" target=\"_blank\" rel=\"noopener\">https://threejs.org/</a></p>\n<h4 id=\"这是一个新坑，以后有时间要完成\"><a href=\"#这是一个新坑，以后有时间要完成\" class=\"headerlink\" title=\"这是一个新坑，以后有时间要完成~~\"></a>这是一个新坑，以后有时间要完成~~</h4>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjy2gld7l0002e8we3cn4irar","category_id":"cjy2gld7t0007e8weep5c66yw","_id":"cjy2gld85000le8we08e4z98b"},{"post_id":"cjy2gld7z000de8weh9727deu","category_id":"cjy2gld7t0007e8weep5c66yw","_id":"cjy2gld8a000qe8we98fvsekp"},{"post_id":"cjy2gld82000ge8wepo15eq8k","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2gld8d000ve8wewnz2034p"},{"post_id":"cjy2gld7q0005e8we77qu9qoc","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2gld8f0010e8weqmsqw7rd"},{"post_id":"cjy2gld84000ke8wexmpejz5j","category_id":"cjy2gld7t0007e8weep5c66yw","_id":"cjy2gld8h0014e8we48b0mhdr"},{"post_id":"cjy2gld7u0008e8weeiqvim20","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2gld8j0017e8weruegfah7"},{"post_id":"cjy2gld8c000ue8weahcrqi3b","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2gld8k0019e8weenf0beko"},{"post_id":"cjy2gld8e000ze8we1qaps86t","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2gld8m001de8wez69zkkq3"},{"post_id":"cjy2gld7x000ae8wev05a7ijc","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2gld8o001fe8wehxytdwan"},{"post_id":"cjy2gld8i0016e8wen8j6v7ul","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2gld8p001je8wea73h1m6i"},{"post_id":"cjy2gld8j0018e8wejtqsp0cg","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2gld8q001le8we47d77xrr"},{"post_id":"cjy2gld8l001ce8we9nobsj5v","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2gld8s001oe8weugjshgtw"},{"post_id":"cjy2gld8o001ie8we03j5sqzi","category_id":"cjy2gld7t0007e8weep5c66yw","_id":"cjy2gld8t001re8wefkkinpd2"},{"post_id":"cjy2gld8r001ne8wenxero5ko","category_id":"cjy2gld7t0007e8weep5c66yw","_id":"cjy2gld8w001we8weugjzqget"},{"post_id":"cjy2gld8t001qe8we4bk40y2y","category_id":"cjy2gld7t0007e8weep5c66yw","_id":"cjy2gld8y0020e8wethzqwaav"},{"post_id":"cjy2gld8y0022e8webo8gvyq3","category_id":"cjy2gld8w001xe8weh2fkaez5","_id":"cjy2gld930029e8weugs40blu"},{"post_id":"cjy2gld8u001te8week6t58j9","category_id":"cjy2gld8w001xe8weh2fkaez5","_id":"cjy2gld95002de8wexs56qh2n"},{"post_id":"cjy2gld8z0023e8we5imrpf3y","category_id":"cjy2gld8w001xe8weh2fkaez5","_id":"cjy2gld96002ge8we9ezat7co"},{"post_id":"cjy2gld910027e8wezk6ginse","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2gld98002je8weagm9gmga"},{"post_id":"cjy2gld8v001ve8wepilsejrj","category_id":"cjy2gld8w001xe8weh2fkaez5","_id":"cjy2gld99002me8wenndouolm"},{"post_id":"cjy2gld920028e8weopj9zq68","category_id":"cjy2gld7t0007e8weep5c66yw","_id":"cjy2gld9b002pe8weg9t6tbiw"},{"post_id":"cjy2gld94002ce8weqzsf9exw","category_id":"cjy2gld7t0007e8weep5c66yw","_id":"cjy2gld9c002re8we6yfkd4hh"},{"post_id":"cjy2gld8x001ze8we02jxpqoi","category_id":"cjy2gld8w001xe8weh2fkaez5","_id":"cjy2gld9e002te8wet9fmkjp0"},{"post_id":"cjy2gld96002fe8wegzjdaq5z","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2gld9f002xe8weeyoxrn67"},{"post_id":"cjy2gld97002ie8weujvhrs9d","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2gld9h0030e8wepeh4rs94"},{"post_id":"cjy2gld99002le8wem0aejqf0","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2gld9i0033e8weffco6mr9"},{"post_id":"cjy2gld9b002qe8weaticankn","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2gld9k0036e8wer1u9xeve"},{"post_id":"cjy2gld9g002ze8weengq6k24","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2gld9l0039e8wexhh64nxe"},{"post_id":"cjy2gld9j0035e8webi6dsuu5","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2gld9o003ge8wetiadfa0v"},{"post_id":"cjy2gld9m003be8we8phc057y","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2gld9r003le8wenl3rvwgw"},{"post_id":"cjy2gld9p003ie8we0afg10c9","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2gld9u003qe8wea4o1gg6c"},{"post_id":"cjy2gld9k0038e8we5eedjoos","category_id":"cjy2gld9n003ee8wegiznzmx5","_id":"cjy2gld9w003ue8we3wqc8tex"},{"post_id":"cjy2gld9q003ke8we72nkp52b","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2gld9y003we8we5pq0nqyw"},{"post_id":"cjy2gld9u003pe8we9ww5mfmf","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2glda00040e8we3h67heyj"},{"post_id":"cjy2gld9v003te8wet51af6hn","category_id":"cjy2gld7t0007e8weep5c66yw","_id":"cjy2glda00042e8wevt5xbbtv"},{"post_id":"cjy2gld9z003ze8wev10v7h5y","category_id":"cjy2gld7t0007e8weep5c66yw","_id":"cjy2glda10046e8wedt2ufv2o"},{"post_id":"cjy2h0kmn0000qkwe15rz1v8i","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2h1im00002qkwepa1wyp2d"},{"post_id":"cjy2h27230003qkwe7lbugwcj","category_id":"cjy2gld80000ee8wewzv6t488","_id":"cjy2h2bbh0005qkwe4zb1gpx7"}],"PostTag":[{"post_id":"cjy2gld7z000de8weh9727deu","tag_id":"cjy2gld7o0004e8we1pqtbgok","_id":"cjy2gld84000je8wehbmueej3"},{"post_id":"cjy2gld7e0000e8wec4nr3vdb","tag_id":"cjy2gld7o0004e8we1pqtbgok","_id":"cjy2gld88000oe8wedwdejdbp"},{"post_id":"cjy2gld7e0000e8wec4nr3vdb","tag_id":"cjy2gld7y000be8weueftvgby","_id":"cjy2gld8b000te8we4bki9mro"},{"post_id":"cjy2gld84000ke8wexmpejz5j","tag_id":"cjy2gld7o0004e8we1pqtbgok","_id":"cjy2gld8e000ye8we8g0xealn"},{"post_id":"cjy2gld7l0002e8we3cn4irar","tag_id":"cjy2gld84000ie8weg74ozqwz","_id":"cjy2gld8g0011e8wem5k0sxzi"},{"post_id":"cjy2gld7q0005e8we77qu9qoc","tag_id":"cjy2gld8b000se8werlgwhv56","_id":"cjy2gld8i0015e8wetjnc8uqa"},{"post_id":"cjy2gld7u0008e8weeiqvim20","tag_id":"cjy2gld8g0012e8we1hxq277y","_id":"cjy2gld8l001be8wemnxei3kb"},{"post_id":"cjy2gld7x000ae8wev05a7ijc","tag_id":"cjy2gld8g0012e8we1hxq277y","_id":"cjy2gld8o001he8welzbdlh9c"},{"post_id":"cjy2gld82000ge8wepo15eq8k","tag_id":"cjy2gld8o001ge8wecedd245y","_id":"cjy2gld8s001pe8weekrh0hs3"},{"post_id":"cjy2gld89000pe8weukdduy5q","tag_id":"cjy2gld8r001me8we2jw8fvo3","_id":"cjy2gld8v001ue8weldunplr3"},{"post_id":"cjy2gld8c000ue8weahcrqi3b","tag_id":"cjy2gld8u001se8wecmsf59o4","_id":"cjy2gld8y0021e8weu50b3h2x"},{"post_id":"cjy2gld8e000ze8we1qaps86t","tag_id":"cjy2gld8x001ye8wetj3c6w4r","_id":"cjy2gld910026e8wert932ic6"},{"post_id":"cjy2gld8g0013e8wee3p7n3oc","tag_id":"cjy2gld900025e8wen5kb7v5r","_id":"cjy2gld95002ee8wekww4k8jj"},{"post_id":"cjy2gld8i0016e8wen8j6v7ul","tag_id":"cjy2gld94002be8wewy77tkqd","_id":"cjy2gld98002ke8wewr11lty6"},{"post_id":"cjy2gld8j0018e8wejtqsp0cg","tag_id":"cjy2gld97002he8weptfhj58e","_id":"cjy2gld9e002ve8wey02l58ij"},{"post_id":"cjy2gld8j0018e8wejtqsp0cg","tag_id":"cjy2gld9a002ne8wen4so4zz0","_id":"cjy2gld9g002ye8werxlee3u2"},{"post_id":"cjy2gld9g002ze8weengq6k24","tag_id":"cjy2gld9a002ne8wen4so4zz0","_id":"cjy2gld9i0034e8we6wcebo37"},{"post_id":"cjy2gld8l001ce8we9nobsj5v","tag_id":"cjy2gld97002he8weptfhj58e","_id":"cjy2gld9l003ae8weok0dslyp"},{"post_id":"cjy2gld8l001ce8we9nobsj5v","tag_id":"cjy2gld9h0031e8werkc5xost","_id":"cjy2gld9m003ce8wefolbc8vw"},{"post_id":"cjy2gld8n001ee8we4h74958h","tag_id":"cjy2gld9k0037e8wejdpb4ocr","_id":"cjy2gld9o003he8weh1jvacxa"},{"post_id":"cjy2gld8o001ie8we03j5sqzi","tag_id":"cjy2gld7o0004e8we1pqtbgok","_id":"cjy2gld9s003me8wezkjesehr"},{"post_id":"cjy2gld8o001ie8we03j5sqzi","tag_id":"cjy2gld9n003de8wemn5mjh5y","_id":"cjy2gld9t003oe8weho0ybzlw"},{"post_id":"cjy2gld9s003ne8welgmrbplf","tag_id":"cjy2gld8u001se8wecmsf59o4","_id":"cjy2gld9v003se8wevyrmh1s7"},{"post_id":"cjy2gld9v003te8wet51af6hn","tag_id":"cjy2gld7o0004e8we1pqtbgok","_id":"cjy2gld9z003ye8we2q1oiauu"},{"post_id":"cjy2gld8q001ke8we5apshemd","tag_id":"cjy2gld9q003je8we2mtjhlwa","_id":"cjy2glda00041e8wewgxytbsr"},{"post_id":"cjy2gld8q001ke8we5apshemd","tag_id":"cjy2gld9v003re8wearnkydfg","_id":"cjy2glda10044e8weienh1yv0"},{"post_id":"cjy2gld9z003ze8wev10v7h5y","tag_id":"cjy2gld7o0004e8we1pqtbgok","_id":"cjy2glda10045e8weutqdpy8c"},{"post_id":"cjy2gld8r001ne8wenxero5ko","tag_id":"cjy2gld7o0004e8we1pqtbgok","_id":"cjy2glda30048e8wexeve910h"},{"post_id":"cjy2gld8r001ne8wenxero5ko","tag_id":"cjy2gld9n003de8wemn5mjh5y","_id":"cjy2glda30049e8we2fyho6f7"},{"post_id":"cjy2gld8t001qe8we4bk40y2y","tag_id":"cjy2gld7o0004e8we1pqtbgok","_id":"cjy2glda4004be8we92ku58lz"},{"post_id":"cjy2gld8t001qe8we4bk40y2y","tag_id":"cjy2gld9n003de8wemn5mjh5y","_id":"cjy2glda4004ce8wef17rb68k"},{"post_id":"cjy2gld8u001te8week6t58j9","tag_id":"cjy2glda20047e8weq2srmaem","_id":"cjy2glda5004ee8wer0xdnvf6"},{"post_id":"cjy2gld8v001ve8wepilsejrj","tag_id":"cjy2glda20047e8weq2srmaem","_id":"cjy2glda5004fe8we1vgs429f"},{"post_id":"cjy2gld8x001ze8we02jxpqoi","tag_id":"cjy2glda20047e8weq2srmaem","_id":"cjy2glda6004he8weztcctz1q"},{"post_id":"cjy2gld8y0022e8webo8gvyq3","tag_id":"cjy2glda20047e8weq2srmaem","_id":"cjy2glda7004je8weiccwuu35"},{"post_id":"cjy2gld8z0023e8we5imrpf3y","tag_id":"cjy2glda20047e8weq2srmaem","_id":"cjy2glda7004le8we5f579nva"},{"post_id":"cjy2gld910027e8wezk6ginse","tag_id":"cjy2glda7004ke8weojrurk1y","_id":"cjy2glda8004ne8web2prkrmy"},{"post_id":"cjy2gld920028e8weopj9zq68","tag_id":"cjy2gld7o0004e8we1pqtbgok","_id":"cjy2glda8004pe8we2dun28zq"},{"post_id":"cjy2gld920028e8weopj9zq68","tag_id":"cjy2gld9n003de8wemn5mjh5y","_id":"cjy2glda9004qe8wegnnf5wa5"},{"post_id":"cjy2gld94002ce8weqzsf9exw","tag_id":"cjy2gld7o0004e8we1pqtbgok","_id":"cjy2glda9004se8weago9v3wb"},{"post_id":"cjy2gld94002ce8weqzsf9exw","tag_id":"cjy2glda8004oe8weg4olflox","_id":"cjy2glda9004te8wekd3m2h9f"},{"post_id":"cjy2gld96002fe8wegzjdaq5z","tag_id":"cjy2glda7004ke8weojrurk1y","_id":"cjy2gldaa004ve8wernos7fkn"},{"post_id":"cjy2gld97002ie8weujvhrs9d","tag_id":"cjy2glda7004ke8weojrurk1y","_id":"cjy2gldab004xe8weqqna2kct"},{"post_id":"cjy2gld99002le8wem0aejqf0","tag_id":"cjy2gldaa004we8wesel8vv6v","_id":"cjy2gldac0050e8wezrywgnc3"},{"post_id":"cjy2gld99002le8wem0aejqf0","tag_id":"cjy2glda7004ke8weojrurk1y","_id":"cjy2gldac0051e8weykt1ako8"},{"post_id":"cjy2gld9a002oe8wegkjncjw2","tag_id":"cjy2gld9q003je8we2mtjhlwa","_id":"cjy2gldad0054e8wehbhwhutu"},{"post_id":"cjy2gld9a002oe8wegkjncjw2","tag_id":"cjy2gldac0052e8wez8f1s1w9","_id":"cjy2gldad0055e8wey8ym867d"},{"post_id":"cjy2gld9b002qe8weaticankn","tag_id":"cjy2glda7004ke8weojrurk1y","_id":"cjy2gldae0057e8weyukiwn0h"},{"post_id":"cjy2gld9d002se8wee0cwwqcn","tag_id":"cjy2gld9q003je8we2mtjhlwa","_id":"cjy2gldaf0059e8wemvwatpid"},{"post_id":"cjy2gld9f002we8weeou9c1a1","tag_id":"cjy2gld9q003je8we2mtjhlwa","_id":"cjy2gldag005ce8weeq3spz1y"},{"post_id":"cjy2gld9f002we8weeou9c1a1","tag_id":"cjy2gldaf005ae8we98o6s6mp","_id":"cjy2gldag005de8we7cuz400j"},{"post_id":"cjy2gld9h0032e8wevn0wnbob","tag_id":"cjy2gldaf005ae8we98o6s6mp","_id":"cjy2gldag005fe8wel2oah7td"},{"post_id":"cjy2gld9j0035e8webi6dsuu5","tag_id":"cjy2gldag005ee8we4sth8v9v","_id":"cjy2gldah005he8weys1hssan"},{"post_id":"cjy2gld9k0038e8we5eedjoos","tag_id":"cjy2gldah005ge8wegp98d4wy","_id":"cjy2gldah005je8wetpghed90"},{"post_id":"cjy2gld9m003be8we8phc057y","tag_id":"cjy2gldah005ie8we0pyqge4w","_id":"cjy2gldai005le8wevn1o8ahc"},{"post_id":"cjy2gld9n003fe8werjxgr9yz","tag_id":"cjy2gldaf005ae8we98o6s6mp","_id":"cjy2gldaj005ne8weqtmc2ljp"},{"post_id":"cjy2gld9p003ie8we0afg10c9","tag_id":"cjy2gldah005ie8we0pyqge4w","_id":"cjy2gldak005qe8we45a3dhdk"},{"post_id":"cjy2gld9p003ie8we0afg10c9","tag_id":"cjy2gldaj005oe8we4mrec9g4","_id":"cjy2gldak005re8weksqxmr8p"},{"post_id":"cjy2gld9q003ke8we72nkp52b","tag_id":"cjy2gldaj005pe8weeirptt04","_id":"cjy2gldal005ue8web6hqh7sx"},{"post_id":"cjy2gld9q003ke8we72nkp52b","tag_id":"cjy2gldak005se8we26h9jbxz","_id":"cjy2gldal005ve8wend7t6cta"},{"post_id":"cjy2gld9u003pe8we9ww5mfmf","tag_id":"cjy2gldak005te8we8bqmhzc3","_id":"cjy2gldal005xe8weugm9rl5z"},{"post_id":"cjy2gld9x003ve8we8rr38dsv","tag_id":"cjy2gldal005we8we80rq475o","_id":"cjy2gldam005ze8weeqntvnl3"},{"post_id":"cjy2gld9x003ve8we8rr38dsv","tag_id":"cjy2gldam005ye8weh4b0vkms","_id":"cjy2gldam0060e8wee6pgkssr"},{"post_id":"cjy2h0kmn0000qkwe15rz1v8i","tag_id":"cjy2gld8g0012e8we1hxq277y","_id":"cjy2h1bn90001qkwe389ptd71"},{"post_id":"cjy2h27230003qkwe7lbugwcj","tag_id":"cjy2gld8g0012e8we1hxq277y","_id":"cjy2h2bbh0004qkwephb8b6gw"}],"Tag":[{"name":"android","_id":"cjy2gld7o0004e8we1pqtbgok"},{"name":"Image","_id":"cjy2gld7y000be8weueftvgby"},{"name":"Kotlin","_id":"cjy2gld84000ie8weg74ozqwz"},{"name":"javascript","_id":"cjy2gld8b000se8werlgwhv56"},{"name":"JavaScript","_id":"cjy2gld8g0012e8we1hxq277y"},{"name":"RxJs","_id":"cjy2gld8o001ge8wecedd245y"},{"name":"androidx","_id":"cjy2gld8r001me8we2jw8fvo3"},{"name":"css","_id":"cjy2gld8u001se8wecmsf59o4"},{"name":"html","_id":"cjy2gld8x001ye8wetj3c6w4r"},{"name":"ios","_id":"cjy2gld900025e8wen5kb7v5r"},{"name":"canvas","_id":"cjy2gld94002be8wewy77tkqd"},{"name":"cordova","_id":"cjy2gld97002he8weptfhj58e"},{"name":"node.js","_id":"cjy2gld9a002ne8wen4so4zz0"},{"name":"swift","_id":"cjy2gld9h0031e8werkc5xost"},{"name":"ffmpeg","_id":"cjy2gld9k0037e8wejdpb4ocr"},{"name":"jetpack","_id":"cjy2gld9n003de8wemn5mjh5y"},{"name":"nginx","_id":"cjy2gld9q003je8we2mtjhlwa"},{"name":"https","_id":"cjy2gld9v003re8wearnkydfg"},{"name":"mysql","_id":"cjy2glda20047e8weq2srmaem"},{"name":"Angular","_id":"cjy2glda7004ke8weojrurk1y"},{"name":"tablayout","_id":"cjy2glda8004oe8weg4olflox"},{"name":"i18n","_id":"cjy2gldaa004we8wesel8vv6v"},{"name":"flv","_id":"cjy2gldac0052e8wez8f1s1w9"},{"name":"php","_id":"cjy2gldaf005ae8we98o6s6mp"},{"name":"rxjs","_id":"cjy2gldag005ee8we4sth8v9v"},{"name":"unit","_id":"cjy2gldah005ge8wegp98d4wy"},{"name":"webpack","_id":"cjy2gldah005ie8we0pyqge4w"},{"name":"sass","_id":"cjy2gldaj005oe8we4mrec9g4"},{"name":"webrtc","_id":"cjy2gldaj005pe8weeirptt04"},{"name":"coturn","_id":"cjy2gldak005se8we26h9jbxz"},{"name":"e2e","_id":"cjy2gldak005te8we8bqmhzc3"},{"name":"Aplipay","_id":"cjy2gldal005we8we80rq475o"},{"name":"WechatPay","_id":"cjy2gldam005ye8weh4b0vkms"}]}}